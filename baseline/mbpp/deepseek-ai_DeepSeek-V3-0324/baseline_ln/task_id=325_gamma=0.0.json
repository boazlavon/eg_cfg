{
  "code": "import math\n\ndef get_Min_Squares(n):\n    # Create a DP array initialized with infinity, except for dp[0] which is 0\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        # Check all perfect squares less than or equal to i\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    \n    return dp[n]",
  "results": {
    "assert get_Min_Squares(6) == 3": {
      "result": true,
      "time": 0.14747262001037598,
      "error": null
    },
    "assert get_Min_Squares(2) == 2": {
      "result": true,
      "time": 0.13372087478637695,
      "error": null
    },
    "assert get_Min_Squares(4) == 1": {
      "result": true,
      "time": 0.1367349624633789,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:37:55",
    "guidance_input_tokens": 643,
    "guidance_output_tokens": 345,
    "end_time": "2025-05-07 18:37:59",
    "duration": "0:00:04.487680"
  },
  "retry": 0,
  "random_seed": 813
}