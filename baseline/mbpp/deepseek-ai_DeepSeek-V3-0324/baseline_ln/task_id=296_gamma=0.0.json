{
  "code": "def get_Inv_Count(arr, n):\n    return merge_sort(arr, 0, n - 1)\n\ndef merge_sort(arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, left, mid)\n        inv_count += merge_sort(arr, mid + 1, right)\n        inv_count += merge(arr, left, mid, right)\n    return inv_count\n\ndef merge(arr, left, mid, right):\n    temp = []\n    i = left\n    j = mid + 1\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp.append(arr[i])\n            i += 1\n        else:\n            temp.append(arr[j])\n            inv_count += (mid - i + 1)\n            j += 1\n\n    while i <= mid:\n        temp.append(arr[i])\n        i += 1\n\n    while j <= right:\n        temp.append(arr[j])\n        j += 1\n\n    for k in range(len(temp)):\n        arr[left + k] = temp[k]\n\n    return inv_count",
  "results": {
    "assert get_Inv_Count([1,20,6,4,5],5) == 5": {
      "result": true,
      "time": 0.13145160675048828,
      "error": null
    },
    "assert get_Inv_Count([1,2,1],3) == 1": {
      "result": true,
      "time": 0.11489653587341309,
      "error": null
    },
    "assert get_Inv_Count([1,2,5,6,1],5) == 3": {
      "result": true,
      "time": 0.11959218978881836,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:36:24",
    "guidance_input_tokens": 661,
    "guidance_output_tokens": 332,
    "end_time": "2025-05-07 18:36:32",
    "duration": "0:00:07.986697"
  },
  "retry": 0,
  "random_seed": 813
}