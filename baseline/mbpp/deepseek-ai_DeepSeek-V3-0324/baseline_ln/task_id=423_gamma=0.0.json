{
  "code": "def get_maxgold(gold, m, n):\n    # Create a DP table to store the maximum gold that can be collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Initialize the DP table with the values from the first column\n    for i in range(m):\n        dp[i][0] = gold[i][0]\n    \n    # Fill the DP table column-wise\n    for j in range(1, n):\n        for i in range(m):\n            # The maximum gold that can be collected to reach (i, j)\n            # comes from three possible cells: (i-1, j-1), (i, j-1), (i+1, j-1)\n            up = dp[i-1][j-1] if i > 0 else 0\n            left = dp[i][j-1]\n            down = dp[i+1][j-1] if i < m-1 else 0\n            \n            dp[i][j] = gold[i][j] + max(up, left, down)\n    \n    # The answer is the maximum value in the last column\n    max_gold = 0\n    for i in range(m):\n        if dp[i][n-1] > max_gold:\n            max_gold = dp[i][n-1]\n    \n    return max_gold",
  "results": {
    "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16": {
      "result": true,
      "time": 0.11542582511901855,
      "error": null
    },
    "assert get_maxgold([[10,20],[30,40]],2,2)==70": {
      "result": true,
      "time": 0.1298971176147461,
      "error": null
    },
    "assert get_maxgold([[4,9],[3,7]],2,2)==13": {
      "result": true,
      "time": 0.12836003303527832,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:42:43",
    "guidance_input_tokens": 686,
    "guidance_output_tokens": 359,
    "end_time": "2025-05-07 18:42:49",
    "duration": "0:00:05.033960"
  },
  "retry": 0,
  "random_seed": 813
}