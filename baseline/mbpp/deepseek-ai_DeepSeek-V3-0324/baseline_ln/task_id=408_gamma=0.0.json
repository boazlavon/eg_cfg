{
  "code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result",
  "results": {
    "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]": {
      "result": true,
      "time": 0.13723969459533691,
      "error": null
    },
    "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]": {
      "result": true,
      "time": 0.12493205070495605,
      "error": null
    },
    "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]": {
      "result": true,
      "time": 0.1125936508178711,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:42:05",
    "guidance_input_tokens": 736,
    "guidance_output_tokens": 116,
    "end_time": "2025-05-07 18:42:08",
    "duration": "0:00:02.675194"
  },
  "retry": 0,
  "random_seed": 813
}