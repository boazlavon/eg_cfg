{
  "code": "def max_sum(triangle, size):\n    if size == 0:\n        return 0\n    max_sums = []\n    for row in triangle:\n        max_sums.append(row.copy())\n    for i in range(1, size):\n        for j in range(len(triangle[i])):\n            if j == 0:\n                max_sums[i][j] = max_sums[i-1][j] + triangle[i][j]\n            elif j == len(triangle[i]) - 1:\n                max_sums[i][j] = max_sums[i-1][j-1] + triangle[i][j]\n            else:\n                left_parent = max_sums[i-1][j-1]\n                right_parent = max_sums[i-1][j]\n                max_sums[i][j] = max(left_parent, right_parent) + triangle[i][j]\n    return max(max_sums[-1])",
  "results": {
    "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6": {
      "result": true,
      "time": 0.0993492603302002,
      "error": null
    },
    "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ": {
      "result": true,
      "time": 0.08666157722473145,
      "error": null
    },
    "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28": {
      "result": true,
      "time": 0.08199405670166016,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:48:43",
    "guidance_input_tokens": 529,
    "guidance_output_tokens": 220,
    "end_time": "2025-05-07 18:48:46",
    "duration": "0:00:03.355332"
  },
  "retry": 0,
  "random_seed": 813
}