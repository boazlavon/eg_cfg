{
  "code": "def modular_inverse(arr, n, p):\n    count = 0\n    for i in range(n):\n        current_element = arr[i]\n        if current_element == 0:\n            continue\n        inverse = pow(current_element, p - 2, p)\n        if inverse == current_element:\n            count += 1\n    return count",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": true,
      "time": 0.12392425537109375,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": true,
      "time": 0.11385560035705566,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": false,
      "time": 0.12557768821716309,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6666666666666666,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:51:33",
    "guidance_input_tokens": 529,
    "guidance_output_tokens": 120,
    "end_time": "2025-05-07 18:51:39",
    "duration": "0:00:05.635961"
  },
  "retry": 0,
  "random_seed": 813
}