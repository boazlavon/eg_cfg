{
  "code": "def lps(s):\n    n = len(s)\n    dp = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            if i == j:\n                val = 1\n            else:\n                val = 0\n            row.append(val)\n        dp.append(row)\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                option1 = dp[i + 1][j]\n                option2 = dp[i][j - 1]\n                dp[i][j] = max(option1, option2)\n    return dp[0][n - 1]",
  "results": {
    "assert lps(\"TENS FOR TENS\") == 5 ": {
      "result": true,
      "time": 0.08325362205505371,
      "error": null
    },
    "assert lps(\"CARDIO FOR CARDS\") == 7": {
      "result": true,
      "time": 0.08261847496032715,
      "error": null
    },
    "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 ": {
      "result": true,
      "time": 0.07912874221801758,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:51:49",
    "end_time": "2025-05-08 22:52:13",
    "duration": "0:00:24.054353"
  },
  "retry": 0,
  "random_seed": 855
}