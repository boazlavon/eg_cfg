{
  "code": "def ncr_modp(n, r, p):\n    # Step 1: Initialize variables for numerator and denominator\n    numerator = 1\n    denominator = 1\n    # Step 2: Compute the value of n*(n-1)*...*(n-r+1) modulo p\n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n    # Step 3: Compute the value of r! modulo p\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    # Step 4: Compute the modular inverse of denominator modulo p using Fermat's little theorem\n    inverse_denominator = pow(denominator, p - 2, p)\n    # Step 5: Compute the final result as (numerator * inverse_denominator) % p\n    result = (numerator * inverse_denominator) % p\n    return result",
  "results": {
    "assert ncr_modp(10,2,13)==6": {
      "result": true,
      "time": 0.10822033882141113,
      "error": null
    },
    "assert ncr_modp(15,12,43)==25": {
      "result": true,
      "time": 0.10012364387512207,
      "error": null
    },
    "assert ncr_modp(17,9,18)==10": {
      "result": false,
      "time": 0.10831880569458008,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6666666666666666,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:20:33",
    "end_time": "2025-05-08 22:20:37",
    "duration": "0:00:03.830531"
  },
  "retry": 0,
  "random_seed": 855
}