{
  "code": "def min_Ops(arr, n, d):\n    # For each element, find all possible values it can be reduced to\n    possible_values = []\n    \n    for num in arr:\n        values = set()\n        current = num\n        ops = 0\n        while True:\n            values.add((current, ops))\n            if current % d == 0:\n                current = current // d\n                ops += 1\n            else:\n                break\n        possible_values.append(values)\n    \n    # Find all possible target values\n    all_targets = set()\n    for values in possible_values:\n        all_targets.update([val[0] for val in values])\n    \n    min_operations = float('inf')\n    \n    for target in all_targets:\n        total_operations = 0\n        for i in range(n):\n            found = False\n            for val, ops in possible_values[i]:\n                if val == target:\n                    total_operations += ops\n                    found = True\n                    break\n            if not found:\n                total_operations = float('inf')\n                break\n        min_operations = min(min_operations, total_operations)\n    \n    return min_operations if min_operations != float('inf') else -1",
  "results": {
    "assert min_Ops([2,2,2,2],4,3) == 0": {
      "result": true,
      "time": 0.07904934883117676,
      "error": null
    },
    "assert min_Ops([4,2,6,8],4,3) == -1": {
      "result": true,
      "time": 0.07821893692016602,
      "error": null
    },
    "assert min_Ops([21,33,9,45,63],5,6) == 24": {
      "result": false,
      "time": 0.07991218566894531,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6666666666666666,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:52:32",
    "end_time": "2025-05-08 22:52:57",
    "duration": "0:00:24.846781"
  },
  "retry": 0,
  "random_seed": 855
}