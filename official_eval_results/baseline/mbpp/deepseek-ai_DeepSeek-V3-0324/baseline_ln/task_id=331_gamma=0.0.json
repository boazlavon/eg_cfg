{
  "code": "def count_unset_bits(num):\n    if num == 0:\n        return 0  # Handle the case where num is 0, all bits are unset\n    binary = bin(num)[2:]  # Convert to binary string and remove '0b' prefix\n    total_bits = len(binary)\n    set_bits = binary.count('1')\n    unset_bits = total_bits - set_bits\n    return unset_bits",
  "results": {
    "assert count_unset_bits(2) == 1": {
      "result": true,
      "time": 0.13057971000671387,
      "error": null
    },
    "assert count_unset_bits(4) == 2": {
      "result": true,
      "time": 0.12575721740722656,
      "error": null
    },
    "assert count_unset_bits(6) == 1": {
      "result": true,
      "time": 0.12185502052307129,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:38:09",
    "guidance_input_tokens": 637,
    "guidance_output_tokens": 102,
    "end_time": "2025-05-07 18:38:13",
    "duration": "0:00:03.623912"
  },
  "retry": 0,
  "random_seed": 813
}