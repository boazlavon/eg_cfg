{
  "code": "def extract_min_max(tup, k):\n    # Convert the tuple to a list for easier manipulation\n    lst = list(tup)\n    \n    # Sort the list in ascending order\n    lst_sorted = sorted(lst)\n    \n    # Extract the first k elements (smallest k elements)\n    min_elements = lst_sorted[:k]\n    \n    # Extract the last k elements (largest k elements)\n    max_elements = lst_sorted[-k:]\n    \n    # Combine the min and max elements\n    combined = min_elements + max_elements\n    \n    # Sort the combined list to maintain order\n    combined_sorted = sorted(combined)\n    \n    # Convert the sorted list back to a tuple\n    result = tuple(combined_sorted)\n    \n    return result",
  "results": {
    "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)": {
      "result": true,
      "time": 0.09623122215270996,
      "error": null
    },
    "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)": {
      "result": true,
      "time": 0.0786280632019043,
      "error": null
    },
    "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)": {
      "result": false,
      "time": 0.07563328742980957,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6666666666666666,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:48:03",
    "guidance_input_tokens": 576,
    "guidance_output_tokens": 189,
    "end_time": "2025-05-07 18:48:06",
    "duration": "0:00:02.830809"
  },
  "retry": 0,
  "random_seed": 813
}