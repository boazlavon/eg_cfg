{
  "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef get_height(node):\n    if node is None:\n        return 0\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n    return max(left_height, right_height) + 1\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n    height_diff = abs(left_height - right_height)\n    if height_diff > 1:\n        return False\n    left_balanced = is_tree_balanced(root.left)\n    right_balanced = is_tree_balanced(root.right)\n    return left_balanced and right_balanced",
  "results": {
    "assert is_tree_balanced(root) == False": {
      "result": false,
      "time": 0.15285921096801758,
      "error": null
    },
    "assert is_tree_balanced(root1) == True": {
      "result": false,
      "time": 0.1275012493133545,
      "error": null
    },
    "assert is_tree_balanced(root2) == False ": {
      "result": false,
      "time": 0.11373519897460938,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:55:38",
    "guidance_input_tokens": 475,
    "guidance_output_tokens": 204,
    "end_time": "2025-05-07 18:55:42",
    "duration": "0:00:03.238327"
  },
  "retry": 0,
  "random_seed": 813
}