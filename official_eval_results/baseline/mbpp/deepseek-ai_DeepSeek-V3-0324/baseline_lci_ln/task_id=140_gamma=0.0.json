{
  "code": "def extract_singly(tuple_list):\n    # Initialize an empty list to store all elements\n    all_elements = []\n    \n    # Iterate over each tuple in the tuple_list\n    for t in tuple_list:\n        # Iterate over each element in the current tuple\n        for element in t:\n            # Append the element to all_elements\n            all_elements.append(element)\n    \n    # Initialize an empty list to store elements that occur once\n    singly_elements = []\n    \n    # Iterate over each element in all_elements\n    for element in all_elements:\n        # Check if the element occurs only once\n        if all_elements.count(element) == 1:\n            # Append the element to singly_elements if it's not already there\n            if element not in singly_elements:\n                singly_elements.append(element)\n    \n    # Initialize an empty list to store the final result\n    result = []\n    \n    # Iterate over each element in all_elements\n    for element in all_elements:\n        # Check if the element is in singly_elements or not already in result\n        if element in singly_elements or element not in result:\n            # Append the element to result if it meets the condition\n            result.append(element)\n    \n    return result",
  "results": {
    "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]": {
      "result": true,
      "time": 0.1210474967956543,
      "error": null
    },
    "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]": {
      "result": true,
      "time": 0.11882495880126953,
      "error": null
    },
    "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]": {
      "result": true,
      "time": 0.11342716217041016,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:44:07",
    "guidance_input_tokens": 588,
    "guidance_output_tokens": 287,
    "end_time": "2025-05-07 18:44:11",
    "duration": "0:00:04.073305"
  },
  "retry": 0,
  "random_seed": 813
}