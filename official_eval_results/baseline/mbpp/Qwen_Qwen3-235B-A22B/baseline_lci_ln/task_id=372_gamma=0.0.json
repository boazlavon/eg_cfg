{
  "code": "import heapq\n\ndef heap_assending(input_list):\n    # Step 1: Convert the input list into a heap\n    heap = input_list[:]\n    heapq.heapify(heap)\n    \n    # Step 2: Initialize an empty list to store the sorted result\n    sorted_result = []\n    \n    # Step 3: Extract the smallest element from the heap repeatedly\n    while heap:\n        smallest = heapq.heappop(heap)\n        sorted_result.append(smallest)\n    \n    # Step 4: Return the sorted list\n    return sorted_result",
  "results": {
    "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]": {
      "result": true,
      "time": 0.08214592933654785,
      "error": null
    },
    "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]": {
      "result": true,
      "time": 0.07861757278442383,
      "error": null
    },
    "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]": {
      "result": true,
      "time": 0.07723879814147949,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:32:45",
    "end_time": "2025-05-08 22:32:50",
    "duration": "0:00:04.322321"
  },
  "retry": 0,
  "random_seed": 855
}