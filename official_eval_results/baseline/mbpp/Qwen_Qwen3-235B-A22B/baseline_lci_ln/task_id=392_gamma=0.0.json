{
  "code": "from functools import lru_cache\n\ndef get_max_sum(n):\n    @lru_cache(maxsize=None)\n    def helper(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        sum_by_division = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        max_sum = max(sum_by_division, n)\n        return max_sum\n    return helper(n)",
  "results": {
    "assert get_max_sum(60) == 106": {
      "result": true,
      "time": 0.08150506019592285,
      "error": null
    },
    "assert get_max_sum(10) == 12": {
      "result": true,
      "time": 0.10256457328796387,
      "error": null
    },
    "assert get_max_sum(2) == 2": {
      "result": true,
      "time": 0.07798433303833008,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:46:40",
    "end_time": "2025-05-08 22:46:43",
    "duration": "0:00:03.083788"
  },
  "retry": 0,
  "random_seed": 855
}