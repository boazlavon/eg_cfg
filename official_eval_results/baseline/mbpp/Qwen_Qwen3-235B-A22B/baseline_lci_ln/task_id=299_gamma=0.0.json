{
  "code": "def max_aggregate(data):\n    # Initialize a dictionary to hold the aggregate scores for each person\n    aggregates = {}\n    \n    # Iterate over each tuple in the input data\n    for item in data:\n        # Extract the name and score from the tuple\n        name = item[0]\n        score = item[1]\n        \n        # If the name is already in the dictionary, add the score to the existing total\n        if name in aggregates:\n            current_total = aggregates[name]\n            new_total = current_total + score\n            aggregates[name] = new_total\n        # If the name is not in the dictionary, add it with the current score as the initial total\n        else:\n            aggregates[name] = score\n    \n    # Initialize variables to track the maximum aggregate and the corresponding name\n    max_name = None\n    max_score = 0\n    \n    # Iterate over the items in the aggregates dictionary\n    for name in aggregates:\n        score = aggregates[name]\n        \n        # Check if the current score is greater than the current maximum score\n        if score > max_score:\n            # Update the maximum score and name\n            max_score = score\n            max_name = name\n    \n    # Return the name and score as a tuple\n    result = (max_name, max_score)\n    return result",
  "results": {
    "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)": {
      "result": true,
      "time": 0.10295772552490234,
      "error": null
    },
    "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)": {
      "result": true,
      "time": 0.1074671745300293,
      "error": null
    },
    "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)": {
      "result": true,
      "time": 0.11449098587036133,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:16:56",
    "end_time": "2025-05-08 22:17:01",
    "duration": "0:00:04.546356"
  },
  "retry": 0,
  "random_seed": 855
}