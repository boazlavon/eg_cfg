{
  "code": "def smartNumber(n):\n    # Step 1: Initialize variables\n    count = 0\n    number = 1\n    \n    # Step 2: Loop until we find the nth smart number\n    while True:\n        # Step 3: Check if the number is a smart number\n        # A smart number must have at least 3 distinct prime factors\n        # So we need to count the distinct prime factors of the current number\n        temp = number\n        prime_factors = 0\n        i = 2\n        \n        # Step 4: Check for prime factor 2\n        if temp % i == 0:\n            prime_factors += 1\n            while temp % i == 0:\n                temp //= i\n        \n        # Step 5: Check for odd prime factors\n        i = 3\n        while i * i <= temp:\n            if temp % i == 0:\n                prime_factors += 1\n                while temp % i == 0:\n                    temp //= i\n            i += 2\n        \n        # Step 6: If temp is greater than 1, it's a prime factor\n        if temp > 1:\n            prime_factors += 1\n        \n        # Step 7: If the number has at least 3 distinct prime factors, increment count\n        if prime_factors >= 3:\n            count += 1\n        \n        # Step 8: If we've found the nth smart number, return it\n        if count == n:\n            return number\n        \n        # Step 9: Move to the next number\n        number += 1",
  "results": {
    "assert smartNumber(1) == 30": {
      "result": true,
      "time": 0.07870268821716309,
      "error": null
    },
    "assert smartNumber(50) == 273": {
      "result": true,
      "time": 0.07673382759094238,
      "error": null
    },
    "assert smartNumber(1000) == 2664": {
      "result": true,
      "time": 0.0766453742980957,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:25:37",
    "end_time": "2025-05-08 22:25:42",
    "duration": "0:00:04.999916"
  },
  "retry": 0,
  "random_seed": 855
}