{
  "code": "def min_Ops(arr, n, k):\n    if len(arr) != n:\n        return -1\n    if k <= 0:\n        return -1\n    if not arr:\n        return -1\n    first_element = arr[0]\n    all_equal = True\n    for element in arr:\n        if element != first_element:\n            all_equal = False\n            break\n    if all_equal:\n        return 0\n    if k == 1:\n        mod_value = arr[0] % k\n        for element in arr:\n            if element % k != mod_value:\n                return -1\n        sorted_arr = sorted(arr)\n        median = sorted_arr[n // 2]\n        total_ops = 0\n        for element in arr:\n            diff = abs(element - median)\n            ops = diff // k\n            total_ops += ops\n        return total_ops\n    mod_value = arr[0] % k\n    for element in arr:\n        if element % k != mod_value:\n            return -1\n    sorted_arr = sorted(arr)\n    median = sorted_arr[n // 2]\n    total_ops = 0\n    for element in arr:\n        diff = abs(element - median)\n        ops = diff // k\n        total_ops += ops\n    return total_ops",
  "results": {
    "assert min_Ops([2,2,2,2],4,3) == 0": {
      "result": true,
      "time": 0.11201810836791992,
      "error": null
    },
    "assert min_Ops([4,2,6,8],4,3) == -1": {
      "result": true,
      "time": 0.11000275611877441,
      "error": null
    },
    "assert min_Ops([21,33,9,45,63],5,6) == 24": {
      "result": false,
      "time": 0.30872535705566406,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6666666666666666,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:16:10",
    "end_time": "2025-05-08 22:16:25",
    "duration": "0:00:15.615093"
  },
  "retry": 0,
  "random_seed": 855
}