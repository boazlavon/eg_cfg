{
  "code": "def is_num_keith(number):\n    # Convert the number to a string to determine its length\n    number_str = str(number)\n    num_digits = len(number_str)\n    \n    # Create a list of the digits of the number\n    sequence = []\n    for digit in number_str:\n        digit_int = int(digit)\n        sequence.append(digit_int)\n    \n    # Initialize a variable to hold the next number in the sequence\n    next_number = 0\n    \n    # Keep generating the sequence until the next number is greater than or equal to the original number\n    while next_number < number:\n        # Calculate the next number by summing the last 'num_digits' numbers in the sequence\n        sum_of_last_digits = 0\n        for i in range(num_digits):\n            index = -num_digits + i\n            value = sequence[index]\n            sum_of_last_digits += value\n        \n        # Append the new number to the sequence\n        sequence.append(sum_of_last_digits)\n        \n        # Update the next_number variable\n        next_number = sum_of_last_digits\n    \n    # Check if the next number is equal to the original number\n    if next_number == number:\n        return True\n    else:\n        return False\n\nassert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
  "results": {
    "assert is_num_keith(14) == True": {
      "result": true,
      "time": 0.07367181777954102,
      "error": null
    },
    "assert is_num_keith(12) == False": {
      "result": true,
      "time": 0.07488775253295898,
      "error": null
    },
    "assert is_num_keith(197) == True": {
      "result": true,
      "time": 0.07866764068603516,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:18:48",
    "end_time": "2025-05-08 22:18:53",
    "duration": "0:00:04.445411"
  },
  "retry": 0,
  "random_seed": 855
}