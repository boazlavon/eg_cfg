{
  "code": "def get_maxgold(grid, rows, cols):\n    # Initialize a 2D list to store the maximum gold that can be collected up to each cell\n    dp = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append(0)\n        dp.append(row)\n    \n    # Copy the first column values as they are since no movement is possible to the left\n    for i in range(rows):\n        dp[i][0] = grid[i][0]\n    \n    # Iterate through each column starting from the second column\n    for j in range(1, cols):\n        # Iterate through each row in the current column\n        for i in range(rows):\n            # Determine the maximum gold that can be collected from the previous column\n            # considering movements from the upper left, left, and lower left cells\n            max_prev = dp[i][j - 1]\n            \n            # Check upper left cell if it exists\n            if i > 0:\n                if dp[i - 1][j - 1] > max_prev:\n                    max_prev = dp[i - 1][j - 1]\n            \n            # Check lower left cell if it exists\n            if i < rows - 1:\n                if dp[i + 1][j - 1] > max_prev:\n                    max_prev = dp[i + 1][j - 1]\n            \n            # Calculate the current cell's maximum gold by adding the current cell's gold to the max_prev\n            current_gold = grid[i][j]\n            total_gold = max_prev + current_gold\n            dp[i][j] = total_gold\n    \n    # Find the maximum value in the last column of the dp table which represents the maximum gold collectible\n    max_gold = dp[0][cols - 1]\n    for i in range(1, rows):\n        if dp[i][cols - 1] > max_gold:\n            max_gold = dp[i][cols - 1]\n    \n    return max_gold",
  "results": {
    "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16": {
      "result": true,
      "time": 0.07552862167358398,
      "error": null
    },
    "assert get_maxgold([[10,20],[30,40]],2,2)==70": {
      "result": true,
      "time": 0.289074182510376,
      "error": null
    },
    "assert get_maxgold([[4,9],[3,7]],2,2)==13": {
      "result": true,
      "time": 0.07422184944152832,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:52:17",
    "end_time": "2025-05-08 22:52:24",
    "duration": "0:00:06.874940"
  },
  "retry": 0,
  "random_seed": 855
}