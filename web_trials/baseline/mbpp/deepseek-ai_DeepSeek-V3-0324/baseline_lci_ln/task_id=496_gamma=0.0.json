{
  "code": "import heapq\n\ndef heap_queue_smallest(numbers, k):\n    if not numbers:\n        return []\n    if k <= 0:\n        return []\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, num)\n    smallest = []\n    for _ in range(k):\n        if heap:\n            smallest_num = heapq.heappop(heap)\n            smallest.append(smallest_num)\n        else:\n            break\n    return smallest",
  "results": {
    "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ": {
      "result": true,
      "time": 0.13357949256896973,
      "error": null
    },
    "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]": {
      "result": true,
      "time": 0.12293004989624023,
      "error": null
    },
    "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]": {
      "result": true,
      "time": 0.12234711647033691,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 19:02:07",
    "guidance_input_tokens": 589,
    "guidance_output_tokens": 131,
    "end_time": "2025-05-07 19:02:10",
    "duration": "0:00:03.197745"
  },
  "retry": 0,
  "random_seed": 813
}