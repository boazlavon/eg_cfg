{
  "code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    for i in range(4, n + 1):\n        dp[i] = i\n        j = 1\n        while j * j <= i:\n            temp = j * j\n            if temp > i:\n                break\n            val = 1 + dp[i - temp]\n            if val < dp[i]:\n                dp[i] = val\n            j += 1\n    return dp[n]",
  "results": {
    "assert get_Min_Squares(6) == 3": {
      "result": true,
      "time": 0.1323988437652588,
      "error": null
    },
    "assert get_Min_Squares(2) == 2": {
      "result": true,
      "time": 0.13345956802368164,
      "error": null
    },
    "assert get_Min_Squares(4) == 1": {
      "result": true,
      "time": 0.13419437408447266,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:53:35",
    "guidance_input_tokens": 488,
    "guidance_output_tokens": 184,
    "end_time": "2025-05-07 18:53:39",
    "duration": "0:00:03.777877"
  },
  "retry": 0,
  "random_seed": 813
}