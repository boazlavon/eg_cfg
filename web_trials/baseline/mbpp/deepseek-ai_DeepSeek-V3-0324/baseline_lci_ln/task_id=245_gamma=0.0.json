{
  "code": "def max_sum(arr, n):\n    # Step 1: Initialize two arrays to store increasing and decreasing subsequence sums\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Step 2: Compute the maximum increasing subsequence sum ending at each index\n    for i in range(n):\n        increasing[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                current_sum = increasing[j] + arr[i]\n                if current_sum > increasing[i]:\n                    increasing[i] = current_sum\n\n    # Step 3: Compute the maximum decreasing subsequence sum starting at each index\n    for i in range(n-1, -1, -1):\n        decreasing[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                current_sum = decreasing[j] + arr[i]\n                if current_sum > decreasing[i]:\n                    decreasing[i] = current_sum\n\n    # Step 4: Find the maximum sum of bi-tonic subsequence\n    max_bi_tonic = 0\n    for i in range(n):\n        current_sum = increasing[i] + decreasing[i] - arr[i]\n        if current_sum > max_bi_tonic:\n            max_bi_tonic = current_sum\n\n    return max_bi_tonic",
  "results": {
    "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194": {
      "result": true,
      "time": 0.09028053283691406,
      "error": null
    },
    "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210": {
      "result": true,
      "time": 0.07620954513549805,
      "error": null
    },
    "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138": {
      "result": true,
      "time": 0.07255411148071289,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:49:21",
    "guidance_input_tokens": 547,
    "guidance_output_tokens": 316,
    "end_time": "2025-05-07 18:49:25",
    "duration": "0:00:03.652519"
  },
  "retry": 0,
  "random_seed": 813
}