{
  "code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency_map = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency_map[num] += 1\n    heap = []\n    for num, count in frequency_map.items():\n        heapq.heappush(heap, (count, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        count, num = heapq.heappop(heap)\n        result.append(num)\n    result.reverse()\n    return result",
  "results": {
    "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]": {
      "result": false,
      "time": 0.12357020378112793,
      "error": null
    },
    "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]": {
      "result": true,
      "time": 0.11919617652893066,
      "error": null
    },
    "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]": {
      "result": false,
      "time": 0.11948323249816895,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.3333333333333333,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:38:04",
    "guidance_input_tokens": 716,
    "guidance_output_tokens": 158,
    "end_time": "2025-05-07 18:38:22",
    "duration": "0:00:18.007944"
  },
  "retry": 0,
  "random_seed": 813
}