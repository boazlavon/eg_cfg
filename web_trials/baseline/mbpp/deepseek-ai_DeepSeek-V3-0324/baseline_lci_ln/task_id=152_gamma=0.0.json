{
  "code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = 0\n        j = 0\n        k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr",
  "results": {
    "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]": {
      "result": true,
      "time": 0.13104891777038574,
      "error": null
    },
    "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]": {
      "result": true,
      "time": 0.1105642318725586,
      "error": null
    },
    "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]": {
      "result": true,
      "time": 0.11020064353942871,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:44:43",
    "guidance_input_tokens": 574,
    "guidance_output_tokens": 232,
    "end_time": "2025-05-07 18:44:46",
    "duration": "0:00:03.591337"
  },
  "retry": 0,
  "random_seed": 813
}