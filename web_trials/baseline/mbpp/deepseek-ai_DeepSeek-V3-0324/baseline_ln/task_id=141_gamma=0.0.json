{
  "code": "def pancake_sort(arr):\n    n = len(arr)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in the unsorted part\n        max_idx = arr.index(max(arr[:size]))\n        \n        # If the max element is not already at the end, flip to move it to the beginning and then to the end\n        if max_idx != size - 1:\n            # Flip the max element to the beginning if it's not already there\n            if max_idx != 0:\n                arr[:max_idx + 1] = arr[:max_idx + 1][::-1]\n            # Flip the max element to the end\n            arr[:size] = arr[:size][::-1]\n    return arr",
  "results": {
    "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]": {
      "result": true,
      "time": 0.09349250793457031,
      "error": null
    },
    "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]": {
      "result": true,
      "time": 0.08951425552368164,
      "error": null
    },
    "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]": {
      "result": true,
      "time": 0.08303117752075195,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:28:38",
    "guidance_input_tokens": 703,
    "guidance_output_tokens": 164,
    "end_time": "2025-05-07 18:28:43",
    "duration": "0:00:04.190561"
  },
  "retry": 0,
  "random_seed": 813
}