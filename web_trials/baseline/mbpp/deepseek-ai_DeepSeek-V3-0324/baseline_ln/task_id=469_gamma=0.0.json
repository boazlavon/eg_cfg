{
  "code": "def max_profit(prices, k):\n    n = len(prices)\n    if n == 0 or k == 0:\n        return 0\n    \n    # If k is large enough, we can make as many transactions as we want\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    # Initialize DP tables\n    dp = [[0] * n for _ in range(k+1)]\n    \n    for t in range(1, k+1):\n        max_diff = -prices[0]\n        for i in range(1, n):\n            dp[t][i] = max(dp[t][i-1], prices[i] + max_diff)\n            max_diff = max(max_diff, dp[t-1][i] - prices[i])\n    \n    return dp[k][n-1]",
  "results": {
    "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10": {
      "result": true,
      "time": 0.12634754180908203,
      "error": null
    },
    "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7": {
      "result": true,
      "time": 0.1125178337097168,
      "error": null
    },
    "assert max_profit([10, 6, 8, 4, 2], 2) == 2": {
      "result": true,
      "time": 0.11105108261108398,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:44:40",
    "guidance_input_tokens": 694,
    "guidance_output_tokens": 290,
    "end_time": "2025-05-07 18:44:44",
    "duration": "0:00:03.890367"
  },
  "retry": 0,
  "random_seed": 813
}