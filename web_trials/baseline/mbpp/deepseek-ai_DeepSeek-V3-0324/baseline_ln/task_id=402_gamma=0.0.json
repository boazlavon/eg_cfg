{
  "code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    # Create a 2D array to store the combinations\n    dp = [[0] * (r + 1) for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        for j in range(min(i, r) + 1):\n            if j == 0 or j == i:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j]) % p\n    return dp[n][r]",
  "results": {
    "assert ncr_modp(10,2,13)==6": {
      "result": true,
      "time": 0.12273716926574707,
      "error": null
    },
    "assert ncr_modp(15,12,43)==25": {
      "result": true,
      "time": 0.12056159973144531,
      "error": null
    },
    "assert ncr_modp(17,9,18)==10": {
      "result": true,
      "time": 0.11025047302246094,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:41:49",
    "guidance_input_tokens": 639,
    "guidance_output_tokens": 274,
    "end_time": "2025-05-07 18:41:54",
    "duration": "0:00:05.441711"
  },
  "retry": 0,
  "random_seed": 813
}