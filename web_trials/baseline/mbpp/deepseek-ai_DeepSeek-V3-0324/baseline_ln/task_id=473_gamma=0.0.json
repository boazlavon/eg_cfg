{
  "code": "def tuple_intersection(tuple_list1, tuple_list2):\n    # Convert each tuple in the lists to a frozenset to handle order insensitivity\n    set_list1 = {frozenset(t) for t in tuple_list1}\n    set_list2 = {frozenset(t) for t in tuple_list2}\n    \n    # Find the intersection of the two sets of frozensets\n    intersection = set_list1 & set_list2\n    \n    # Convert the frozensets back to tuples (sorted for consistency)\n    result = {tuple(sorted(s)) for s in intersection}\n    \n    return result",
  "results": {
    "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}": {
      "result": true,
      "time": 0.11815810203552246,
      "error": null
    },
    "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}": {
      "result": true,
      "time": 0.10977029800415039,
      "error": null
    },
    "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}": {
      "result": true,
      "time": 0.1119227409362793,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:44:49",
    "guidance_input_tokens": 817,
    "guidance_output_tokens": 135,
    "end_time": "2025-05-07 18:44:51",
    "duration": "0:00:02.806416"
  },
  "retry": 0,
  "random_seed": 813
}