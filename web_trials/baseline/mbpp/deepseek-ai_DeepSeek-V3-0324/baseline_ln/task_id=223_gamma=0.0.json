{
  "code": "def is_majority(arr, n, x):\n    \"\"\"\n    Check if x is the majority element in the sorted array arr of size n.\n    A majority element is one that appears more than n/2 times.\n    \"\"\"\n    # Find the first occurrence of x\n    def first_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first_occurrence(arr, mid + 1, high, x)\n            else:\n                return first_occurrence(arr, low, mid - 1, x)\n        return -1\n\n    # Find the last occurrence of x\n    def last_occurrence(arr, low, high, x, n):\n        if high >= low:\n            mid = (low + high) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                return last_occurrence(arr, low, mid - 1, x, n)\n            else:\n                return last_occurrence(arr, mid + 1, high, x, n)\n        return -1\n\n    first = first_occurrence(arr, 0, n - 1, x)\n    if first == -1:\n        return False\n\n    last = last_occurrence(arr, first, n - 1, x, n)\n    count = last - first + 1\n    return count > n // 2",
  "results": {
    "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True": {
      "result": true,
      "time": 0.14908218383789062,
      "error": null
    },
    "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False": {
      "result": true,
      "time": 0.1728677749633789,
      "error": null
    },
    "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True": {
      "result": true,
      "time": 0.12772893905639648,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:32:48",
    "guidance_input_tokens": 700,
    "guidance_output_tokens": 363,
    "end_time": "2025-05-07 18:32:54",
    "duration": "0:00:05.817807"
  },
  "retry": 0,
  "random_seed": 813
}