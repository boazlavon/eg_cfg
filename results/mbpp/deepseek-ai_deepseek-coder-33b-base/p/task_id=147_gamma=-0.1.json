{
  "code": "def max_path_sum(tri, m, n):\n\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 and n == 1:\n        return tri[0][0]\n    if m == 1 and n == 2:\n        return tri[0][0] + tri[1][0] + tri[2][0]\n    if m == 2 and n == 1:\n        return max(tri[0][0], tri[1][0], tri[2][0]) + tri[0][1]\n    if m == 2 and n == 2:\n        return max(tri[0][0], tri[1][0], tri[2][0]) + max(tri[0][1], tri[1][1], tri[2][1]) + tri[0][2]\n    if m == 3 and n == 2:\n        return max(tri[0][0], tri[1][0], tri[2][0]) + max(tri[0][1], tri[1][1], tri[2][1]) + max(tri[0][2], tri[1][2], tri[2][2]) + tri[0][3]\n    return max(tri[0][0], tri[1][0], tri[2][0]) + max(tri[0][1], tri[1][1], tri[2][1]) + max(tri[0][2], tri[1][2], tri[2][2]) + max(tri[0][3], tri[1][3], tri[2][3])\n",
  "results": {
    "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14": {
      "result": false,
      "time": 0.1264188289642334,
      "error": null
    },
    "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ": {
      "result": false,
      "time": 0.14079785346984863,
      "error": null
    },
    "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53": {
      "result": false,
      "time": 0.1465153694152832,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}