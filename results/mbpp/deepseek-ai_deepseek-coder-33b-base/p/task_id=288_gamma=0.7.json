{
  "code": "def modular_inverse(arr, N, P):\n    if len(arr) == 0:\n        return None\n    if N == 1:\n        return arr[0]\n    if N == 2:\n        return arr[0] * arr[1]\n    if N % P == 0:\n        return modular_inverse(arr, N // P, P)\n    return modular_inverse(arr, N, P)\n",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": false,
      "time": 0.10555315017700195,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": false,
      "time": 0.10930323600769043,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": false,
      "time": 0.10780167579650879,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}