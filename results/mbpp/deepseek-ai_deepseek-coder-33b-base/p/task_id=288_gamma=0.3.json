{
  "code": "def modular_inverse(arr, N, P):\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] == P:\n        return arr[0]\n    if arr[0] == N:\n        return arr[0]\n    if arr[0] % P == 0:\n        return modular_inverse(arr[1:], N, P)\n    return modular_inverse(arr[1:], N, P)\n",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": false,
      "time": 0.10420393943786621,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": false,
      "time": 0.10871553421020508,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": false,
      "time": 0.10216951370239258,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}