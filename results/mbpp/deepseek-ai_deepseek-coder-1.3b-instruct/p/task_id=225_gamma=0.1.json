{
  "code": "def find_Min(nums, low, high):\n    if high < low:\n        return nums[0]\n    if high == low:\n        return nums[low]\n    mid = (low + high) // 2\n    if mid < high and nums[mid + 1] < nums[mid]:\n        return nums[mid + 1]\n    if mid > low and nums[mid] < nums[mid - 1]:\n        return nums[mid]\n    if nums[high] > nums[mid]:\n        return find_Min(nums, low, mid - 1)\n    return find_Min(nums, mid + 1, high)\n",
  "results": {
    "assert find_Min([1,2,3,4,5],0,4) == 1": {
      "result": true,
      "time": 0.13624954223632812,
      "error": null
    },
    "assert find_Min([4,6,8],0,2) == 4": {
      "result": true,
      "time": 0.1362617015838623,
      "error": null
    },
    "assert find_Min([2,3,5,7,9],0,4) == 2": {
      "result": true,
      "time": 0.14348530769348145,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false
}