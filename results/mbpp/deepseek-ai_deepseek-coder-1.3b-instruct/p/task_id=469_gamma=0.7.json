{
  "code": "def max_profit(prices, k):\n    n = len(prices)\n    dp = [[[0] * 2 for _ in range(n)] for _ in range(k + 1)]\n    for i in range(n):\n        dp[0][i][0] = 0\n        dp[0][i][1] = float(\"-inf\")\n    for i in range(1, k + 1):\n        for j in range(n):\n            dp[i][j][0] = max(dp[i][j - 1][0], dp[i - 1][j][1] + prices[j])\n            dp[i][j][1] = max(dp[i][j - 1][1], dp[i - 1][j][0] - prices[j])\n    return dp[-1][-1][0]\n",
  "results": {
    "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10": {
      "result": false,
      "time": 0.12208914756774902,
      "error": null
    },
    "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7": {
      "result": true,
      "time": 0.11345410346984863,
      "error": null
    },
    "assert max_profit([10, 6, 8, 4, 2], 2) == 2": {
      "result": false,
      "time": 0.11110568046569824,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.3333333333333333,
  "general_error": null,
  "has_testcase_error": false
}