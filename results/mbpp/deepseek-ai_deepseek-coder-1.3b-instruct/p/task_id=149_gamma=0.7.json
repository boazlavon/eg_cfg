{
  "code": "def longest_subseq_with_diff_one(nums, target):\n    nums.sort()\n    longest_subseq = 0\n    current_subseq = 1\n    for i in range(1, len(nums)):\n        if abs(nums[i] - nums[i - 1]) == 1:\n            current_subseq += 1\n        else:\n            if current_subseq > longest_subseq:\n                longest_subseq = current_subseq\n            current_subseq = 1\n    if current_subseq > longest_subseq:\n        longest_subseq = current_subseq\n    return longest_subseq\n",
  "results": {
    "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6": {
      "result": false,
      "time": 0.6945164203643799,
      "error": null
    },
    "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3": {
      "result": true,
      "time": 0.6249237060546875,
      "error": null
    },
    "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7": {
      "result": false,
      "time": 0.7033724784851074,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.3333333333333333,
  "general_error": null,
  "has_testcase_error": false
}