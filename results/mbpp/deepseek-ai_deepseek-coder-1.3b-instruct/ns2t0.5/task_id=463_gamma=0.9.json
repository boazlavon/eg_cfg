{
  "code": "def max_subarray_product(nums):\n    max_product = nums[0]\n    min_product = nums[0]\n    max_end = nums[0]\n    min_end = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        max_end = max(max_end, max_product)\n    return max_end\n",
  "results": {
    "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112": {
      "result": true,
      "time": 0.3087763786315918,
      "error": null
    },
    "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ": {
      "result": true,
      "time": 0.3172731399536133,
      "error": null
    },
    "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80": {
      "result": true,
      "time": 0.31152939796447754,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false
}