{
  "code": "def next_smallest_palindrome(num):\n    num_str = str(num)\n    n = len(num_str)\n    half = n // 2\n    for i in range(half):\n        if num_str[i] != num_str[n - i - 1]:\n            break\n    else:\n        return int(num_str + num_str[i:n][::-1])\n",
  "results": {
    "assert next_smallest_palindrome(99)==101": {
      "result": false,
      "time": 0.3607656955718994,
      "error": null
    },
    "assert next_smallest_palindrome(1221)==1331": {
      "result": false,
      "time": 0.3313007354736328,
      "error": null
    },
    "assert next_smallest_palindrome(120)==121": {
      "result": false,
      "time": 0.3592240810394287,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}