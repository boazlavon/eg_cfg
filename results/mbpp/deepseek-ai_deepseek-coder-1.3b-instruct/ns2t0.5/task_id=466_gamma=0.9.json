{
  "code": "def find_peak(nums, n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return max(nums[0], nums[1])\n    else:\n        mid = n // 2\n        if nums[mid] > nums[mid - 1] and nums[mid] > nums[mid + 1]:\n            return mid\n        elif nums[mid] < nums[mid - 1]:\n            return find_peak(nums, mid)\n        else:\n            return find_peak(nums[mid + 1 :], n - mid - 1)\n",
  "results": {
    "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2": {
      "result": false,
      "time": 0.5343365669250488,
      "error": null
    },
    "assert find_peak([2, 3, 4, 5, 6], 5) == 4": {
      "result": false,
      "time": 0.3926551342010498,
      "error": null
    },
    "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ": {
      "result": false,
      "time": 0.651287317276001,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}