{
  "code": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n    max_product = cur_max = cur_min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            cur_max, cur_min = cur_min, cur_max\n        cur_max = max(nums[i], cur_max * nums[i])\n        cur_min = min(nums[i], cur_min * nums[i])\n        max_product = max(max_product, cur_max)\n    return max_product\n",
  "results": {
    "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112": {
      "result": true,
      "time": 0.29027557373046875,
      "error": null
    },
    "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ": {
      "result": true,
      "time": 0.25228142738342285,
      "error": null
    },
    "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80": {
      "result": true,
      "time": 0.2605922222137451,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false
}