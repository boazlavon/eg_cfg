{
  "code": "def max_path_sum(triangle, r, c):\n    if r == c == 1:\n        return triangle[0][0]\n    elif r == 1:\n        return max(max_path_sum(triangle, 1, c - 1), max_path_sum(triangle, 1, c)) + triangle[0][c]\n    elif c == 1:\n        return max(max_path_sum(triangle, r - 1, 1), max_path_sum(triangle, r - 1, c)) + triangle[r][0]\n    else:\n        return max(max_path_sum(triangle, r - 1, c - 1), max_path_sum(triangle, r - 1, c)) + triangle[r][c]\n",
  "results": {
    "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14": {
      "result": false,
      "time": 0.3194432258605957,
      "error": null
    },
    "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ": {
      "result": false,
      "time": 0.3076295852661133,
      "error": null
    },
    "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53": {
      "result": false,
      "time": 0.33260321617126465,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}