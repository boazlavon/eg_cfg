{
  "code": "def find_peak_util(arr, low, high, n):\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if arr[mid] == n:\n        return mid\n    elif arr[mid] > n:\n        return find_peak_util(arr, low, mid - 1, n)\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n",
  "results": {
    "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2": {
      "result": false,
      "time": 0.6460666656494141,
      "error": null
    },
    "assert find_peak([2, 3, 4, 5, 6], 5) == 4": {
      "result": false,
      "time": 0.7045717239379883,
      "error": null
    },
    "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ": {
      "result": false,
      "time": 0.17922544479370117,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0
}