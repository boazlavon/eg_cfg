{
  "code": "def is_octagonal(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    if n % 17 == 0:\n        return False\n    if n % 19 == 0:\n        return False\n    if n % 23 == 0:\n        return False\n    if n % 29 == 0:\n        return False\n    if n % 31 == 0:\n        return False\n    if n % 37 == 0:\n        return False\n    if n % 41 == 0:\n        return False\n    if n % 43 == 0:\n        return False\n    if n % 47 == 0:\n        return False\n    if n % 53 == 0:\n        return False\n    if n % 59 == 0:\n        return False\n    if n % 61 == 0:\n        return False\n    if n % 67 == 0:\n        return False\n    if n % 71 == 0:\n        return False\n    if n % 73 == 0:\n        return False\n    if n % 79 == 0:\n        return False\n    if n % 83 == 0:\n        return False\n    if n % 89 == 0:\n        return False\n    if n % 97 == 0:\n        return False\n    return True\n",
  "results": {
    "assert is_octagonal(5) == 65": {
      "result": false,
      "time": 0.11481261253356934,
      "error": null
    },
    "assert is_octagonal(10) == 280": {
      "result": false,
      "time": 0.12652802467346191,
      "error": null
    },
    "assert is_octagonal(15) == 645": {
      "result": false,
      "time": 0.10344386100769043,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0
}