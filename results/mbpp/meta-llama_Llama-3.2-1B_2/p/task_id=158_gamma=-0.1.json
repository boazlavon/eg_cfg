{
  "code": "def min_Ops(arr, n, k):\n\n    # Base case: If n is 0 or k is 0, return 0\n    if n == 0 or k == 0:\n        return 0\n    # Initialize a variable to store the minimum number of operations\n    min_Ops = float(\"inf\")\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # If the element at index i is equal to the element at index k\n        if arr[i] == arr[k]:\n            # Update the minimum number of operations\n            min_Ops = min(min_Ops, i)\n    # Return the minimum number of operations\n    return min_Ops\n",
  "results": {
    "assert min_Ops([2,2,2,2],4,3) == 0": {
      "result": false,
      "time": 0.2960958480834961,
      "error": null
    },
    "assert min_Ops([4,2,6,8],4,3) == -1": {
      "result": false,
      "time": 0.3257265090942383,
      "error": null
    },
    "assert min_Ops([21,33,9,45,63],5,6) == 24": {
      "result": false,
      "time": 0.34609222412109375,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}