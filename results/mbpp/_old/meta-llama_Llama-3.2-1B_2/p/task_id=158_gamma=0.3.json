{
  "code": "def min_Ops(arr, n, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return min(arr)\n    if k == 2:\n        return min(arr) + min(arr[1:])\n    if k == 3:\n        return min(arr) + min(arr[1:]) + min(arr[2:])\n    if k == 4:\n        return min(arr) + min(arr[1:]) + min(arr[2:]) + min(arr[3:])\n    if k == 5:\n        return min(arr) + min(arr[1:]) + min(arr[2:]) + min(arr[3:]) + min(arr[4:])\n    if k == 6:\n        return min(arr) + min(arr[1:]) + min(arr[2:]) + min(arr[3:]) + min(arr[4:]) + min(arr[5:])\n    if k == 7:\n        return min(arr) + min(arr[1:]) + min(arr[2:]) + min(arr[3:]) + min(arr[4:]) + min(arr[5:]) + min(arr[6:])\n    if k == 8:\n        return min(arr) + min(arr[1:]) + min(arr[2:]) + min(arr[3:]) + min(arr[4:]) + min(arr[5:]) + min(arr[6:]) + min(arr[7:])\n    if k == 9:\n        return min(arr) + min(arr[1:]) + min(arr[2:]) + min(arr[3:]) + min(arr[4:]) + min(arr[5:]) + min(arr[6:]) + min(arr[7:]) + min(arr[8:])\n    if k == 10:\n        return min(arr) + min(arr[1:]) + min(arr[2:]) + min(arr[3:]) + min(arr[4:]) + min(arr[5:]) + min(arr[6:]) + min(arr[7:]) + min(arr[8:]) + min(arr[9:])\n    if k == 11:\n        return min(arr) + min(arr[1:]) + min(arr[2:]) + min(arr[3:]) + min(arr[4:]) + min(arr[5:]) + min(arr[6:]) + min(arr[7:]) + min(arr[8:]) + min(arr[9:]) + min(arr[10:])\n    if k == 12:\n        return min(arr) + min(arr[1:]) + min(arr[2:]) + min(arr[3:]) + min(arr[4:]) + min\n",
  "results": {
    "assert min_Ops([2,2,2,2],4,3) == 0": {
      "result": false,
      "time": 0.11963248252868652,
      "error": null
    },
    "assert min_Ops([4,2,6,8],4,3) == -1": {
      "result": false,
      "time": 0.12522411346435547,
      "error": null
    },
    "assert min_Ops([21,33,9,45,63],5,6) == 24": {
      "result": false,
      "time": 0.11778855323791504,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}