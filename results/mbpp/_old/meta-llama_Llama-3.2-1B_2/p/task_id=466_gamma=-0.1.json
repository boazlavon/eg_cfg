{
  "code": "def find_peak_util(arr, low, high, n):\n\n    if low == high:\n        return arr[low]\n    mid = (low + high) // 2\n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    if arr[mid] > arr[mid - 1]:\n        return arr[mid - 1]\n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    if arr[mid] > arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return arr[mid - 1]\n    if arr[mid] < arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if arr[mid] < arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return arr[mid + 1]\n    if arr[mid] < arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid - 1]\n    if arr[mid] > arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return arr[mid + 1]\n    if arr[mid] < arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return arr[mid - 1]\n    if arr[mid] > arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return arr[mid + 1]\n    if arr[mid] < arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid - 1]\n    if arr[mid] > arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return arr[mid + 1]\n    if arr[mid] < arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid - 1]\n    if arr[mid] > arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return arr[mid + 1]\n    if arr[mid] < arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return arr[mid - 1]\n",
  "results": {
    "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2": {
      "result": false,
      "time": 0.36664485931396484,
      "error": null
    },
    "assert find_peak([2, 3, 4, 5, 6], 5) == 4": {
      "result": false,
      "time": 0.2822456359863281,
      "error": null
    },
    "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ": {
      "result": false,
      "time": 0.3322887420654297,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}