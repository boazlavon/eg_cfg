{
  "code": "def modular_inverse(arr, N, P):\n\n    # Write your code here\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        if P == N:\n            return 1\n        else:\n            return modular_inverse(arr, N, P) % P\n",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": false,
      "time": 0.1184234619140625,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": false,
      "time": 0.12744617462158203,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": false,
      "time": 0.12131333351135254,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0
}