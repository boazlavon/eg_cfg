{
  "code": "def get_maxgold(gold, m, n):\n    goldMine = gold\n    for col in range(1, n):\n        for row in range(m):\n            if row == 0:\n                goldMine[row][col] += max(goldMine[row][col - 1], goldMine[row + 1][col - 1])\n            elif row == m - 1:\n                goldMine[row][col] += max(goldMine[row][col - 1], goldMine[row - 1][col - 1])\n            else:\n                goldMine[row][col] += max(goldMine[row][col - 1], goldMine[row - 1][col - 1], goldMine[row + 1][col - 1])\n",
  "results": {
    "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16": {
      "result": false,
      "time": 0.2000734806060791,
      "error": null
    },
    "assert get_maxgold([[10,20],[30,40]],2,2)==70": {
      "result": false,
      "time": 0.2109086513519287,
      "error": null
    },
    "assert get_maxgold([[4,9],[3,7]],2,2)==13": {
      "result": false,
      "time": 0.20157265663146973,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}