{
  "code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n",
  "results": {
    "assert lps(\"TENS FOR TENS\") == 5 ": {
      "result": true,
      "time": 0.16819548606872559,
      "error": null
    },
    "assert lps(\"CARDIO FOR CARDS\") == 7": {
      "result": true,
      "time": 0.15959405899047852,
      "error": null
    },
    "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 ": {
      "result": true,
      "time": 0.1662430763244629,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false
}