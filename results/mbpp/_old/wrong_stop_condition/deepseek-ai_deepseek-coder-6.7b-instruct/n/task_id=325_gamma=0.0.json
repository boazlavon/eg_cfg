{
  "code": "def get_Min_Squares(n):\n    # Create a list to store the minimum number of squares for all numbers up to n\n    dp = [0, 1, 2, 3]\n\n    # For numbers greater than 3\n    for i in range(4, n + 1):\n        # Initialize the minimum number of squares as i (i.e., 1^2 + ... + 1^2)\n        dp.append(i)\n\n        # For all numbers j from 1 to i\n        for j in range(1, i):\n            # If j^2 is greater than i, break the loop\n            if j * j > i:\n                break\n            # Update the minimum number of squares for i as the minimum of the current value and dp[i - j * j] + 1\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n\n    # Return the minimum number of squares for n\n    return dp[n]\n",
  "results": {
    "assert get_Min_Squares(6) == 3": {
      "result": true,
      "time": 0.17148876190185547,
      "error": null
    },
    "assert get_Min_Squares(2) == 2": {
      "result": true,
      "time": 0.17555022239685059,
      "error": null
    },
    "assert get_Min_Squares(4) == 1": {
      "result": true,
      "time": 0.17516279220581055,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false
}