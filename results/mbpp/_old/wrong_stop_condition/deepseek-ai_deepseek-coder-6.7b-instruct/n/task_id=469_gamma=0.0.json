{
  "code": "def max_profit(prices, k):\n    n = len(prices)\n    if k >= n // 2:\n        return sum(prices[i] - prices[i - 1] for i in range(1, n) if prices[i] > prices[i - 1])\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = dp[i - 1][0] - prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n    return dp[k][-1]\n",
  "results": {
    "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10": {
      "result": true,
      "time": 0.08716392517089844,
      "error": null
    },
    "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7": {
      "result": true,
      "time": 0.08342099189758301,
      "error": null
    },
    "assert max_profit([10, 6, 8, 4, 2], 2) == 2": {
      "result": true,
      "time": 0.08431410789489746,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false
}