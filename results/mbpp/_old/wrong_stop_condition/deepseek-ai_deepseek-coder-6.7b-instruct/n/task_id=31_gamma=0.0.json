{
  "code": "import heapq\nfrom collections import Counter\n\n\ndef top_k_frequent(lists, k):\n    # Flatten the lists and count the frequency of each number\n    counts = Counter(num for sublist in lists for num in sublist)\n\n    # Use a heap to get the top k frequent numbers\n    heap = [(-count, num) for num, count in counts.items()]\n    heapq.heapify(heap)\n    top_k = [heapq.heappop(heap)[1] for _ in range(k)]\n\n    return top_k\n",
  "results": {
    "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]": {
      "result": false,
      "time": 0.17469573020935059,
      "error": null
    },
    "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]": {
      "result": false,
      "time": 0.18563413619995117,
      "error": null
    },
    "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]": {
      "result": false,
      "time": 0.1845235824584961,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}