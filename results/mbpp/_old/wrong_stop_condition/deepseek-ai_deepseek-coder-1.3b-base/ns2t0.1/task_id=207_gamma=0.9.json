{
  "code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n            ans = 2\n        else:\n            dp[i][i + 1] = 1\n            ans = 1\n    for i in range(2, n):\n        for j in range(n - i):\n            if s[j] == s[j + i] and dp[j + 1][j + i - 1] != 0:\n                dp[j][j + i] = dp[j + 1][j + i - 1] + 2\n                ans = max(ans, dp[j][j + i])\n            else:\n                dp[j][j + i] = max(dp[j][j + i - 1], dp[j + 1][j + i])\n    return ans\n",
  "results": {
    "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3": {
      "result": true,
      "time": 0.3073391914367676,
      "error": null
    },
    "assert find_longest_repeating_subseq(\"aabb\") == 2": {
      "result": true,
      "time": 0.2926468849182129,
      "error": null
    },
    "assert find_longest_repeating_subseq(\"aab\") == 1": {
      "result": true,
      "time": 0.3298487663269043,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false
}