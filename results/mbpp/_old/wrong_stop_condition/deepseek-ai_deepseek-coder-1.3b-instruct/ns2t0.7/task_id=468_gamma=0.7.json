{
  "code": "def max_product(nums, k):\n    if len(nums) < k:\n        return -1\n    k_largest = sorted(nums[-k:])\n    k_smallest = sorted(nums[:k])\n    max_product = nums[-1] * nums[-2] * nums[-3]\n    for i in range(k - k_smallest.count(nums[k - 1]), len(nums) - k_largest.count(nums[0])):\n        if nums[i] > k_smallest[i - (k - k_smallest.count(nums[k - 1]))]:\n            max_product = max(max_product, nums[i] * k_smallest[i - (k - k_smallest.count(nums[k - 1]))] * k_largest[i - (k - k_smallest.count(nums[k - 1]))])\n    return max_product\n",
  "results": {
    "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ": {
      "result": false,
      "time": 0.49248385429382324,
      "error": null
    },
    "assert max_product([4, 42, 55, 68, 80], 5) == 50265600": {
      "result": false,
      "time": 0.391068696975708,
      "error": null
    },
    "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ": {
      "result": false,
      "time": 0.48998188972473145,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}