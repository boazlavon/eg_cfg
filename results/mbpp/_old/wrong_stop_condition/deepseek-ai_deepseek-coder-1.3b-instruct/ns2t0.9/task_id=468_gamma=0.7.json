{
  "code": "def max_product(nums, k):\n    if k >= len(nums):\n        return max(nums) * max(nums)\n    prefix_product = [0] * len(nums)\n    prefix_product[0] = nums[0]\n    for i in range(1, len(nums)):\n        prefix_product[i] = prefix_product[i - 1] * nums[i]\n    suffix_product = [0] * len(nums)\n    suffix_product[-1] = nums[-1]\n    for i in range(len(nums) - 2, -1, -1):\n        suffix_product[i] = suffix_product[i + 1] * nums[i]\n    max_product = float(\"-inf\")\n    for i in range(k):\n        max_product = max(max_product, prefix_product[i] // suffix_product[i + k] if i + k < len(nums) else 0)\n    return max_product\n",
  "results": {
    "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ": {
      "result": false,
      "time": 0.1921391487121582,
      "error": null
    },
    "assert max_product([4, 42, 55, 68, 80], 5) == 50265600": {
      "result": false,
      "time": 0.18994140625,
      "error": null
    },
    "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ": {
      "result": false,
      "time": 0.20329666137695312,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}