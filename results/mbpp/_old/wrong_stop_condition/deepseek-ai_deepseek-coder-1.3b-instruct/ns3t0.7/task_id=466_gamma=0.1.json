{
  "code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1 if arr[0] > arr[1] else 0\n    else:\n        mid = n // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return mid\n        elif arr[mid - 1] > arr[mid] and arr[mid] > arr[mid + 1]:\n            return find_peak(arr[:mid], mid)\n        else:\n            return find_peak(arr[mid + 1 :], n - mid - 1)\n",
  "results": {
    "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2": {
      "result": false,
      "time": 0.24181628227233887,
      "error": null
    },
    "assert find_peak([2, 3, 4, 5, 6], 5) == 4": {
      "result": false,
      "time": 0.24591302871704102,
      "error": null
    },
    "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ": {
      "result": false,
      "time": 0.2531754970550537,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}