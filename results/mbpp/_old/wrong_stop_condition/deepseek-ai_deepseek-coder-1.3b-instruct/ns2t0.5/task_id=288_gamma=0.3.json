{
  "code": "from collections import Counter\n\n\ndef modular_inverse(arr, div, p):\n    count = Counter(arr)\n    result = 0\n    for num in count:\n        if (p - num) % p == 0 and count[num] > 1:\n            result += count[num]\n    return result // 2\n",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": false,
      "time": 0.5159125328063965,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": false,
      "time": 0.3228778839111328,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": false,
      "time": 0.41748785972595215,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}