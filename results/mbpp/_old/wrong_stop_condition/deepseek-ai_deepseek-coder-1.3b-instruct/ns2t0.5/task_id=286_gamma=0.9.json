{
  "code": "def max_sub_array_sum_repeated(arr, k, n):\n    total_sum = sum(arr)\n    repeat_sum = total_sum * (n // k)\n    remaining = total_sum % k\n    remaining_sum = sum(arr[:remaining])\n    repeated_sum = sum(arr[remaining:])\n    return max(repeat_sum, remaining_sum, repeated_sum)\n",
  "results": {
    "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30": {
      "result": false,
      "time": 0.5113387107849121,
      "error": null
    },
    "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59": {
      "result": false,
      "time": 0.7625203132629395,
      "error": null
    },
    "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1": {
      "result": false,
      "time": 0.3295102119445801,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}