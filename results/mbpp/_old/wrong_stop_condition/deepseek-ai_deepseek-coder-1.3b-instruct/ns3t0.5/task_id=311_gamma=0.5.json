{
  "code": "def set_left_most_unset_bit(n):\n    binary = bin(n)[2:]\n    for i in range(len(binary) - 1, -1, -1):\n        if binary[i] == \"0\":\n            return int(binary[:i] + \"1\" + \"0\" * len(binary[i + 1 :]), 2)\n    return n\n",
  "results": {
    "assert set_left_most_unset_bit(10) == 14": {
      "result": false,
      "time": 0.23374271392822266,
      "error": null
    },
    "assert set_left_most_unset_bit(12) == 14": {
      "result": false,
      "time": 0.23890328407287598,
      "error": null
    },
    "assert set_left_most_unset_bit(15) == 15": {
      "result": true,
      "time": 0.24975132942199707,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.3333333333333333,
  "general_error": null,
  "has_testcase_error": false
}