{
  "code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length() - 1)\n",
  "results": {
    "assert next_Power_Of_2(0) == 1": {
      "result": true,
      "time": 0.24821090698242188,
      "error": null
    },
    "assert next_Power_Of_2(5) == 8": {
      "result": false,
      "time": 0.25858306884765625,
      "error": null
    },
    "assert next_Power_Of_2(17) == 32": {
      "result": false,
      "time": 0.2786750793457031,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.3333333333333333,
  "general_error": null,
  "has_testcase_error": false
}