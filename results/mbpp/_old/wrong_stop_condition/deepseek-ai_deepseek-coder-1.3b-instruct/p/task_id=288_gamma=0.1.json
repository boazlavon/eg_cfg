{
  "code": "from collections import Counter\n\n\ndef modular_inverse(arr, p, mod):\n    counter = Counter(arr)\n    result = 0\n    for num, count in counter.items():\n        if (num * pow(num, mod - 2, mod)) % mod == p:\n            result += count\n    return result\n",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": false,
      "time": 0.12528324127197266,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": false,
      "time": 0.1296398639678955,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": true,
      "time": 0.116729736328125,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.3333333333333333,
  "general_error": null,
  "has_testcase_error": false
}