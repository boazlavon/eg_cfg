{
  "code": "def max_Product(arr):\n    n = len(arr)\n    max_product = [0] * n\n    min_product = [0] * n\n    max_product[0] = arr[0]\n    min_product[0] = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], min_product[i - 1] * arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], max_product[i - 1] * arr[i])\n    max_product_global = max(max_product)\n    return (max_product_global, max_product.index(max_product_global) if max_product_global in max_product else None)\n",
  "results": {
    "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)": {
      "result": false,
      "time": 0.11744189262390137,
      "error": null
    },
    "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)": {
      "result": false,
      "time": 0.12176156044006348,
      "error": null
    },
    "assert max_Product([1,2,3]) == (2,3)": {
      "result": false,
      "time": 0.1126260757446289,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}