{
  "code": "def find_Nth_Digit(n, d, k):\n    n_digit = n\n    while n_digit < d:\n        n_digit *= n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n    n_digit = n_digit // n\n",
  "results": {
    "assert find_Nth_Digit(1,2,1) == 5": {
      "result": false,
      "time": 10.127610206604004,
      "error": "Timeout"
    },
    "assert find_Nth_Digit(3,5,1) == 6": {
      "result": false,
      "time": 0.1757504940032959,
      "error": null
    },
    "assert find_Nth_Digit(5,6,5) == 3": {
      "result": false,
      "time": 0.17116427421569824,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false
}