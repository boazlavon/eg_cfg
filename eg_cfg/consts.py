MAX_NEW_TOKENS = 512

PROMPT_TYPE__DEEPSEEK_BASE = "deepseek_base"
PROMPT_TYPE__DEEPSEEK_INSTRUCT = "deepseek_instruct"
PROMPT_TYPE__INSTRUCT_LONG_CODE_PROMPT = "long_code"

VALID_PROMPT_TYPES = [
    PROMPT_TYPE__DEEPSEEK_INSTRUCT,
    PROMPT_TYPE__INSTRUCT_LONG_CODE_PROMPT,
]

MULTIPLE_CANDIDATES_DYNAMIC_SIGNAL_PATTERN = """
# Function:
{function_code}

# Invocation:
{test_case}

# Execution Trace:\n{trace}
"""

SINGLE_DYNAMIC_SIGNAL_PATTERN = """
# Invocation:
{test_case}

# Execution Trace: {trace}
"""

MULTIPLE_CANDIDATES_DYNAMIC_SIGNAL_PROMPT = """
### Runtime Behavior for Candidate Continuations
Below are execution traces from running the response function after appending several possible future continuations. These continuations represent plausible ways the function might continue from its current state. They are not necessarily full solutions—some may be partial, exploratory, or incomplete.

For each candidate continuation, multiple test cases (invocations) were executed to observe its behavior under different inputs. Each entry includes:
- A candidate version of the function
- A specific test case used for invocation
- The resulting execution trace for that test case

These dynamic signals can help you better understand how different plausible continuations behave at runtime, and guide you toward a more accurate solution.

{dynamic_signals}
"""

PARTIAL_EXECUTION_DYNAMIC_SIGNAL_PROMPT = """
### Runtime Behavior up to the Last Valid Line
This trace reflects the actual runtime behavior of the response function executed up to the last syntactically or semantically valid line—before the function was completed. It captures how the current partial implementation behaves, which can provide useful context for continuing the function.

Typically, one or more test cases (invocations) are run against this partial version to observe any runtime behavior, including crashes, exceptions, or intermediate outputs.

Use this information to better understand how the partial function performs so far, and to guide the next steps in completing the function correctly.

{dynamic_signals}
"""

DYNAMIC_SIGNAL_PROMPT_REPLACE_STRING_INSTRUCT_BEGIN = "### Response:"
DYNAMIC_SIGNAL_PROMPT_REPLACE_STRING_BASE_BEGIN = "[BEGIN]"
DYNAMIC_SIGNAL_PROMPT_REPLACE_STRING_BASE_END = "[DONE]"
INSTRUCT_MODEL_PYTHON_CODE_START = "```python\n"
INSTRUCT_MODEL_PYTHON_CODE_START_TOK = "```python"
CODE_BORDER_TOKEN = "```"
END_OF_CODE_STOP_SEQUENCE = f"{CODE_BORDER_TOKEN}\n"
END_OF_SENTENCE_TOKEN = "<__end_of_sentence__>"
END_OF_TEXT_TOKEN = "<endoftext>"
COMPLEX_QUERY_STOP_CONDITION = (END_OF_TEXT_TOKEN, "<im_end>", END_OF_SENTENCE_TOKEN)

RANDOM_SEED_RANGE_SIZE = 1000
DYNAMIC_SIGNAL_PROMPT_INSTRUCT_MODEL_START_FUNCTION_MARKER = (
    DYNAMIC_SIGNAL_PROMPT_REPLACE_STRING_INSTRUCT_BEGIN
)
DYNAMIC_SIGNAL_PROMPT_BASE_MODEL_START_FUNCTION_MARKER = (
    DYNAMIC_SIGNAL_PROMPT_REPLACE_STRING_BASE_BEGIN
)

DYNAMIC_SIGNAL__PARTIAL_EXECUTION = "PartialExecution"
DYNAMIC_SIGNAL__MULTIPLE_CANDIDATES_EXECUTION = "MultipleCandidatesExecution"

SUPPORTED_DYNAMIC_SIGNALS = (
    DYNAMIC_SIGNAL__PARTIAL_EXECUTION,
    DYNAMIC_SIGNAL__MULTIPLE_CANDIDATES_EXECUTION,
)

CMDLINE_ARGS_ONLY_GAMMAS = [0.0, 0.5, 0.75, 1, 3]
FILENAME_TEMPLATE = "task_id={task_id}_gamma={gamma}.json"

TASK__CODE_GENERATION = "CodeGeneration"
SUPPORTED_TASKS = (TASK__CODE_GENERATION,)
MBPP_INSTRUCT_PROMPT_FILENAME = "mbpp_instruct_prompts.json"
MBPP_BASE_PROMPT_FILENAME = "mbpp_base_prompts.json"
MAIN_DATA_DIR = "data"
DEEPSEEK_PROMPT_DIRNAME = "deepseek_mbpp_prompts"
DEEPSEEK_13B_INSTRUCT_BASELINE_PASSED_PATH = (
    "data/official_eval_results/deepseek-ai_deepseek-coder-1.3b-instruct.task_ids.json"
)
DEEPSEEK_13B_INSTRUCT_BASELINE_RESULTS_PATH = (
    "data/official_eval_results/deepseek-ai_deepseek-coder-1.3b-instruct.json"
)
DEEPSEEK_V3_0324_INSTRUCT_BASELINE_PASSED_PATH = (
    "data/official_eval_results/deepseek-ai_DeepSeek-V3-0324.task_ids.json"
)
DEEPSEEK_13B_INSTRUCT_MODEL_NAME = "deepseek-ai/deepseek-coder-1.3b-instruct"

DEEPSEEK_CODER_V2_LITE_INSTRUCT_MODEL_NAME = (
    "deepseek-ai/DeepSeek-Coder-V2-Lite-Instruct"
)
DEEPSEEK_CODER_V2_LITE_INSTRUCT_BASELINE_PASSED_PATH = "data/official_eval_results/deepseek-ai_DeepSeek-Coder-V2-Lite-Instruct.task_ids.json"
DEEPSEEK_CODER_V2_LITE_INSTRUCT_BASELINE_RESULTS_PATH = (
    "data/official_eval_results/deepseek-ai_DeepSeek-Coder-V2-Lite-Instruct.json"
)
DEEPSEEK_V3_0324_INSTRUCT_BASELINE_RESULTS_PATH = (
    "data/official_eval_results/deepseek-ai_DeepSeek-V3-0324.json"
)

EXECUTION_TIMEOUT_SEC = 20
MBPP_SIZE = 500

DATASET__MBPP = "mbpp"
DATASET__HUMANEVAL = "humaneval"
AVAILABLE_DATASETS = (
    DATASET__MBPP,
    DATASET__HUMANEVAL,
)

SOLVED_TASKS_CACHE_DIRNAME = ".solved_tasks_cache"

GUIDANCE_STRATEGY__TOKEN_GUIDANCE = "token_guidance"
GUIDANCE_STRATEGY__PERSISTENT_PREFIX_GUIDANCE = "persistent_prefix_guidance"
GUIDANCE_STRATEGY__LINE_GUIDANCE = "line_guidance"
GUIDANCE_STRATEGIES = (
    GUIDANCE_STRATEGY__TOKEN_GUIDANCE,
    GUIDANCE_STRATEGY__LINE_GUIDANCE,
)
EARLY_STOP_THRESHOLD = 4
## FW Inference API
FW__MIN_BATCH_SIZE = 5
FW_UTILS__DEFAULT_TOP_P = 0.95
LOGPROBS_COUNT = 5
HTTP_REQUEST_TO_LLM_RETRIES_COUNT = 5
REQUEST_TIMEOUT_SEC = 30
QWEN_REQUEST_TIMEOUT_SEC = REQUEST_TIMEOUT_SEC * 3

DEEPSEEK_V3_0324_MODEL_NAME_HF = "deepseek-ai/DeepSeek-V3-0324"
DEEPSEEK_V3_0324_MODEL_NAME_FW = "accounts/fireworks/models/deepseek-v3-0324"
QWEN3_253B_MODEL_NAME_HF = "Qwen/Qwen3-235B-A22B"
QWEN3_253B_MODEL_NAME_FW = "accounts/fireworks/models/qwen3-235b-a22b"

PSEUDO_BEAM_SEARCH_MAX_TOKENS = MAX_NEW_TOKENS
COMPLEX_QWEN_QUERY_MAX_TOKENS = 2048

PSEUDO_BEAM_SEARCH_MAX_TOTAL_REQUESTS = 2
HF_MODEL_TO_FW_MODEL = {
    DEEPSEEK_V3_0324_MODEL_NAME_HF: DEEPSEEK_V3_0324_MODEL_NAME_FW,
    QWEN3_253B_MODEL_NAME_HF: QWEN3_253B_MODEL_NAME_FW,
}
HTTP_SUCCESS_CODE = 200
PYTHON_CODE_TAGS_USAGE_INSTRUCTION_QWEN = (
    "# IMPORTANT: All generated Python code MUST be enclosed EXCLUSIVELY within "
    "```python and ``` tags. No other formatting is acceptable.\n"
    "# The FINAL answer MUST be the LAST code block in the output, written with NO comments or text after it. "
    "It must be immediately followed by the <endoftext> token."
)
PYTHON_CODE_TAGS_USAGE_INSTRUCTION_DS = (
    "# IMPORTANT: All generated Python code MUST be enclosed EXCLUSIVELY within "
    "```python and ``` tags. No other formatting is acceptable.\n"
    "# The FINAL answer MUST be the LAST code block in the output, written with NO comments or text after it. "
    "It must be immediately followed by the <__end_of_sentence__> token."
)

OFFICIAL_PASSED_TASK_IDS_PATH = {
    DEEPSEEK_13B_INSTRUCT_MODEL_NAME: DEEPSEEK_13B_INSTRUCT_BASELINE_PASSED_PATH,
    DEEPSEEK_CODER_V2_LITE_INSTRUCT_MODEL_NAME: DEEPSEEK_CODER_V2_LITE_INSTRUCT_BASELINE_PASSED_PATH,
    DEEPSEEK_V3_0324_MODEL_NAME_HF: DEEPSEEK_V3_0324_INSTRUCT_BASELINE_PASSED_PATH,
}
OFFICIAL_RESULT_PATH = {
    DEEPSEEK_13B_INSTRUCT_MODEL_NAME: DEEPSEEK_13B_INSTRUCT_BASELINE_RESULTS_PATH,
    DEEPSEEK_CODER_V2_LITE_INSTRUCT_MODEL_NAME: DEEPSEEK_CODER_V2_LITE_INSTRUCT_BASELINE_RESULTS_PATH,
    DEEPSEEK_V3_0324_MODEL_NAME_HF: DEEPSEEK_V3_0324_INSTRUCT_BASELINE_RESULTS_PATH,
}

DEPLOYMENT_TYPE__INFERENCE_ENDPOINT = "inference_endpoint"
DEPLOYMENT_TYPE__LOCAL_HF_MODEL = "local"
SUPPORTED_DEPLOYMENT_TYPES = (
    DEPLOYMENT_TYPE__INFERENCE_ENDPOINT,
    DEPLOYMENT_TYPE__LOCAL_HF_MODEL,
)
SUPPORTED_MODELS_ON_DEPLOYMENTS = {
    DEPLOYMENT_TYPE__INFERENCE_ENDPOINT: (
        DEEPSEEK_V3_0324_MODEL_NAME_HF,
        QWEN3_253B_MODEL_NAME_HF,
    ),
    DEPLOYMENT_TYPE__LOCAL_HF_MODEL: (DEEPSEEK_13B_INSTRUCT_MODEL_NAME,),
}

BASELINE_DIR_QWEN3_HUMANEVAL = (
    "data/official_eval_results/baseline/humaneval/Qwen_Qwen3-235B-A22B"
)
BASELINE_DIR_DEEPSEEK_V3_0324_HUMANEVAL = (
    "data/official_eval_results/baseline/humaneval/deepseek-ai_DeepSeek-V3-0324"
)
BASELINE_DIR_DEEPSEEK_V3_0324 = (
    "data/official_eval_results/baseline/mbpp/deepseek-ai_DeepSeek-V3-0324"
)
BASELINE_DIR_QWEN3_253B = (
    "data/official_eval_results/baseline/mbpp/Qwen_Qwen3-235B-A22B"
)
BASELINE_TRIALS_BASE = {
    (DEEPSEEK_V3_0324_MODEL_NAME_HF, DATASET__MBPP): BASELINE_DIR_DEEPSEEK_V3_0324,
    (QWEN3_253B_MODEL_NAME_HF, DATASET__MBPP): BASELINE_DIR_QWEN3_253B,
    (
        DEEPSEEK_V3_0324_MODEL_NAME_HF,
        DATASET__HUMANEVAL,
    ): BASELINE_DIR_DEEPSEEK_V3_0324_HUMANEVAL,
    (QWEN3_253B_MODEL_NAME_HF, DATASET__HUMANEVAL): BASELINE_DIR_QWEN3_HUMANEVAL,
}
BASELINE_DIRS = ("baseline_ln",)

SESSION_CONFIGS_DEFAULT_VALUES = {
    "retries_count": 1,
    "use_global_cache": False,
    "minimal_trace": False,
    "top_probs": 0,
    "debug_mode": False,
    "start_idx": None,
    "end_idx": None,
    "random_seed": 40,
    "inference_endpoint_api_key": None,
    "inference_endpoint_url": None,
}

DEEPSEEK_13_SOLVED_TASK_IDS = [
    12,
    14,
    17,
    18,
    19,
    22,
    24,
    25,
    27,
    28,
    29,
    30,
    32,
    37,
    40,
    41,
    43,
    44,
    45,
    46,
    49,
    50,
    51,
    52,
    53,
    54,
    57,
    58,
    62,
    64,
    65,
    66,
    67,
    68,
    70,
    71,
    79,
    80,
    82,
    85,
    88,
    90,
    91,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    102,
    104,
    105,
    106,
    107,
    108,
    109,
    111,
    113,
    116,
    118,
    120,
    124,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    135,
    151,
    152,
    154,
    157,
    161,
    162,
    163,
    164,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    178,
    184,
    186,
    187,
    189,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    200,
    201,
    203,
    204,
    206,
    208,
    210,
    212,
    213,
    214,
    217,
    221,
    222,
    223,
    224,
    226,
    227,
    230,
    231,
    232,
    234,
    237,
    238,
    241,
    242,
    246,
    247,
    249,
    250,
    253,
    256,
    257,
    258,
    259,
    261,
    262,
    263,
    267,
    269,
    270,
    271,
    272,
    273,
    277,
    280,
    281,
    282,
    283,
    284,
    287,
    290,
    293,
    296,
    297,
    299,
    309,
    315,
    319,
    322,
    325,
    326,
    329,
    332,
    333,
    334,
    338,
    341,
    349,
    351,
    352,
    353,
    356,
    357,
    358,
    361,
    362,
    364,
    365,
    366,
    368,
    372,
    373,
    377,
    378,
    379,
    380,
    381,
    384,
    387,
    390,
    391,
    392,
    394,
    395,
    397,
    399,
    403,
    404,
    405,
    406,
    409,
    411,
    412,
    413,
    418,
    419,
    420,
    421,
    424,
    425,
    426,
    428,
    429,
    434,
    435,
    439,
    441,
    446,
    447,
    451,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    463,
    464,
    465,
    470,
    472,
    474,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    484,
    485,
    486,
    487,
    489,
    492,
    494,
    495,
    496,
    498,
    499,
    500,
    502,
    504,
    505,
    507,
]
DEEPSEEK_V3_0324_SOLVED_TASK_IDS = [
    11,
    12,
    14,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    56,
    57,
    58,
    59,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    78,
    79,
    80,
    81,
    82,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    102,
    103,
    104,
    105,
    106,
    107,
    109,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    135,
    137,
    139,
    140,
    141,
    142,
    144,
    145,
    146,
    147,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    178,
    179,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    189,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    210,
    212,
    213,
    215,
    216,
    217,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    230,
    231,
    232,
    233,
    234,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    249,
    250,
    251,
    252,
    253,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    290,
    291,
    292,
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    305,
    306,
    307,
    308,
    309,
    311,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    325,
    326,
    327,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347,
    348,
    349,
    351,
    352,
    353,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    368,
    369,
    370,
    371,
    372,
    373,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    431,
    432,
    433,
    434,
    435,
    437,
    439,
    440,
    441,
    442,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    484,
    485,
    486,
    487,
    488,
    489,
    491,
    492,
    494,
    495,
    496,
    498,
    499,
    500,
    501,
    502,
    503,
    504,
    505,
    506,
    507,
    508,
    509,
    510,
]

QWEN3_SOLVED_TASK_IDS = [
    11,
    12,
    14,
    16,
    17,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    32,
    33,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    43,
    44,
    46,
    47,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    57,
    58,
    59,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    71,
    73,
    74,
    75,
    76,
    78,
    79,
    80,
    82,
    84,
    85,
    86,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    102,
    104,
    105,
    106,
    107,
    109,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    122,
    123,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    135,
    141,
    142,
    144,
    145,
    146,
    147,
    149,
    150,
    153,
    154,
    156,
    157,
    159,
    160,
    161,
    162,
    163,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    178,
    179,
    182,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    194,
    195,
    196,
    197,
    199,
    200,
    201,
    202,
    203,
    204,
    206,
    207,
    208,
    210,
    212,
    213,
    214,
    215,
    216,
    217,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    230,
    231,
    232,
    233,
    234,
    235,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    249,
    250,
    251,
    252,
    253,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293,
    294,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    305,
    307,
    308,
    309,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    325,
    326,
    327,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    340,
    341,
    343,
    344,
    345,
    347,
    349,
    351,
    352,
    353,
    354,
    356,
    357,
    358,
    359,
    360,
    361,
    363,
    365,
    366,
    368,
    369,
    370,
    371,
    372,
    373,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    387,
    388,
    390,
    391,
    392,
    393,
    394,
    395,
    397,
    398,
    399,
    400,
    401,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    431,
    432,
    433,
    434,
    435,
    437,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    463,
    464,
    465,
    467,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    484,
    485,
    487,
    488,
    489,
    490,
    491,
    492,
    494,
    495,
    496,
    497,
    498,
    499,
    500,
    502,
    503,
    504,
    505,
    506,
    507,
    508,
    509,
]
