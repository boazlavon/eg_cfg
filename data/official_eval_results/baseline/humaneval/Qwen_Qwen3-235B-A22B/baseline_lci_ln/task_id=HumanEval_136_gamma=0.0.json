{
  "code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None:\n                largest_negative = num\n            elif num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None:\n                smallest_positive = num\n            elif num < smallest_positive:\n                smallest_positive = num\n                \n    return (largest_negative, smallest_positive)",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\ncheck(largest_smallest_integers)": {
      "result": true,
      "time": 0.06628537178039551,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:31:40",
    "guidance_input_tokens": 614,
    "guidance_output_tokens": 464,
    "end_time": "2025-05-27 19:31:45",
    "duration": "0:00:05.351427"
  },
  "retry": 0,
  "random_seed": 1038
}