{
  "code": "def is_sorted(lst):\n    \"\"\"\n    Determines if a list is sorted in ascending order and has no more than 1 duplicate of any number.\n    \n    Args:\n        lst: A list of non-negative integers\n        \n    Returns:\n        True if the list is sorted and has valid duplicates\n        False otherwise\n    \"\"\"\n    \n    if len(lst) <= 1:\n        return True\n    \n    count_dict = {}\n    for num in lst:\n        count_dict[num] = 0\n    \n    for num in lst:\n        count_dict[num] += 1\n    \n    for key in count_dict:\n        if count_dict[key] > 2:\n            return False\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n\ncheck(is_sorted)": {
      "result": true,
      "time": 0.06204867362976074,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:28:47",
    "guidance_input_tokens": 713,
    "guidance_output_tokens": 1021,
    "end_time": "2025-05-27 19:28:58",
    "duration": "0:00:10.790836"
  },
  "retry": 0,
  "random_seed": 1038
}