{
  "code": "def largest_prime_factor(n: int):\n    current_number = 2\n    largest_factor = 1\n    working_value = n\n    \n    while working_value > 1:\n        division_result = working_value // current_number\n        remainder = working_value % current_number\n        \n        if remainder == 0:\n            largest_factor = current_number\n            \n            while working_value % current_number == 0:\n                working_value = division_result\n                division_result = working_value // current_number\n                remainder = working_value % current_number\n        current_number = current_number + 1\n        \n    return largest_factor",
  "results": {
    "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\ncheck(largest_prime_factor)": {
      "result": true,
      "time": 0.05279374122619629,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:19:50",
    "guidance_input_tokens": 568,
    "guidance_output_tokens": 163,
    "end_time": "2025-05-27 19:19:54",
    "duration": "0:00:03.807751"
  },
  "retry": 0,
  "random_seed": 1038
}