{
  "code": "def order_by_points(nums):\n    result = []\n    i = 0\n    while i < len(nums):\n        num = nums[i]\n        digit_sum = 0\n        if num < 0:\n            num = -num\n        j = 0\n        while j < len(str(num)):\n            digit = int(str(num)[j])\n            digit_sum += digit\n            j += 1\n        result.append((digit_sum, i, nums[i]))\n        i += 1\n    i = 0\n    while i < len(result) - 1:\n        j = 0\n        while j < len(result) - 1 - i:\n            if result[j][0] > result[j + 1][0] or (result[j][0] == result[j + 1][0] and result[j][1] > result[j + 1][1]):\n                temp = result[j]\n                result[j] = result[j + 1]\n                result[j + 1] = temp\n            j += 1\n        i += 1\n    i = 0\n    sorted_list = []\n    while i < len(result):\n        sorted_list.append(result[i][2])\n        i += 1\n    return sorted_list",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\ncheck(order_by_points)": {
      "result": false,
      "time": 0.0588071346282959,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:22:55",
    "guidance_input_tokens": 614,
    "guidance_output_tokens": 268,
    "end_time": "2025-05-27 19:22:58",
    "duration": "0:00:03.143381"
  },
  "retry": 0,
  "random_seed": 1038
}