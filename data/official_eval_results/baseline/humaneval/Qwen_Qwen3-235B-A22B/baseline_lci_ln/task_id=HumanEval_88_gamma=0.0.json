{
  "code": "def sort_array(array):\n    n = len(array)\n    if n == 0 or n == 1:\n        return array[:]\n    first_value = array[0]\n    last_value = array[-1]\n    total = first_value + last_value\n    ascending_order = False\n    if total % 2 == 1:\n        ascending_order = True\n    else:\n        ascending_order = False\n    array_copy = []\n    for num in array:\n        array_copy.append(num)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if ascending_order:\n                if array_copy[j] > array_copy[j + 1]:\n                    temp = array_copy[j]\n                    array_copy[j] = array_copy[j + 1]\n                    array_copy[j + 1] = temp\n            else:\n                if array_copy[j] < array_copy[j + 1]:\n                    temp = array_copy[j]\n                    array_copy[j] = array_copy[j + 1]\n                    array_copy[j + 1] = temp\n    return array_copy",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n\ncheck(sort_array)": {
      "result": true,
      "time": 0.0603032112121582,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:20:07",
    "guidance_input_tokens": 679,
    "guidance_output_tokens": 1270,
    "end_time": "2025-05-27 19:20:20",
    "duration": "0:00:13.495942"
  },
  "retry": 0,
  "random_seed": 1038
}