{
  "code": "def is_nested(string):\n    depth = 0\n    nested = False\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n        if depth >= 2:\n            nested = True\n    return nested",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n\ncheck(is_nested)": {
      "result": false,
      "time": 0.05877327919006348,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:29:00",
    "guidance_input_tokens": 684,
    "guidance_output_tokens": 791,
    "end_time": "2025-05-27 19:29:09",
    "duration": "0:00:09.211170"
  },
  "retry": 0,
  "random_seed": 1038
}