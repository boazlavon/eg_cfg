{
  "code": "def fix_spaces(text):\n    output = []\n    space_count = 0\n\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 0:\n                if space_count <= 2:\n                    output.append('_')\n                else:\n                    output.append('-')\n                space_count = 0\n            output.append(char)\n\n    if space_count > 0:\n        if space_count <= 2:\n            output.append('_')\n        else:\n            output.append('-')\n\n    return ''.join(output)",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n\ncheck(fix_spaces)": {
      "result": false,
      "time": 0.05402350425720215,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:17:22",
    "guidance_input_tokens": 583,
    "guidance_output_tokens": 648,
    "end_time": "2025-05-27 19:17:30",
    "duration": "0:00:08.498629"
  },
  "retry": 0,
  "random_seed": 1038
}