{
  "code": "def decimal_to_binary(decimal):\n    prefix = 'db'\n    suffix = 'db'\n    result = []\n    while decimal > 0:\n        remainder = decimal % 2\n        if remainder == 0:\n            digit = '0'\n        else:\n            digit = '1'\n        result.append(digit)\n        decimal = decimal // 2\n    if len(result) == 0:\n        result.append('0')\n    result.reverse()\n    final_string = ''.join(result)\n    final_string_with_prefix_suffix = prefix + final_string + suffix\n    return final_string_with_prefix_suffix",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\ncheck(decimal_to_binary)": {
      "result": true,
      "time": 0.06009054183959961,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:18:32",
    "guidance_input_tokens": 622,
    "guidance_output_tokens": 426,
    "end_time": "2025-05-27 19:18:38",
    "duration": "0:00:06.106385"
  },
  "retry": 0,
  "random_seed": 1038
}