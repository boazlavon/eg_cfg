{
  "code": "def correct_bracketing(brackets: str):\n    open_bracket_count = 0\n    for char in brackets:\n        if char == '<':\n            open_bracket_count += 1\n        else:\n            open_bracket_count -= 1\n        if open_bracket_count < 0:\n            return False\n    is_balanced = open_bracket_count == 0\n    return is_balanced\n\n# Test cases\n# assert correct_bracketing(\"<\") == False\n# assert correct_bracketing(\"<>\") == True\n# assert correct_bracketing(\"<<><>>\") == True\n# assert correct_bracketing(\"><<>\") == False",
  "results": {
    "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n\ncheck(correct_bracketing)": {
      "result": true,
      "time": 0.060758113861083984,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:17:37",
    "guidance_input_tokens": 588,
    "guidance_output_tokens": 762,
    "end_time": "2025-05-27 19:17:47",
    "duration": "0:00:09.456194"
  },
  "retry": 0,
  "random_seed": 1038
}