{
  "code": "def Strongest_Extension(class_name, extensions):\n    strongest = extensions[0]\n    max_strength = sum(1 if c.isupper() else -1 if c.islower() else 0 for c in strongest)\n    for ext in extensions[1:]:\n        strength = sum(1 if c.isupper() else -1 if c.islower() else 0 for c in ext)\n        if strength > max_strength:\n            strongest = ext\n            max_strength = strength\n    return f\"{class_name}.{strongest}\"",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n\ncheck(Strongest_Extension)": {
      "result": true,
      "time": 0.059149742126464844,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:23:30",
    "guidance_input_tokens": 950,
    "guidance_output_tokens": 116,
    "end_time": "2025-05-27 19:23:33",
    "duration": "0:00:02.798009"
  },
  "retry": 0,
  "random_seed": 1038
}