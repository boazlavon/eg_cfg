{
  "code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    first_min = second_min = float('inf')\n    for num in lst:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif num < second_min and num != first_min:\n            second_min = num\n    return second_min if second_min != float('inf') else None",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\ncheck(next_smallest)": {
      "result": true,
      "time": 0.05668497085571289,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:27:16",
    "guidance_input_tokens": 806,
    "guidance_output_tokens": 97,
    "end_time": "2025-05-27 19:27:17",
    "duration": "0:00:01.765922"
  },
  "retry": 0,
  "random_seed": 1038
}