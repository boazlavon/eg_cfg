{
  "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current = \"\"\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current += '('\n        elif char == ')':\n            balance -= 1\n            current += ')'\n            if balance == 0:\n                result.append(current)\n                current = \"\"\n        elif char != ' ':\n            raise ValueError(\"Invalid character in input string\")\n\n    if balance != 0:\n        raise ValueError(\"Unbalanced parentheses in input string\")\n\n    return result",
  "results": {
    "\n\nMETADATA = {'author': 'jt','dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == ['(()())', '((()))', '()', '((())()())']\n    assert candidate('() (()) ((())) (((())))') == ['()', '(())', '((()))', '(((())))']\n    assert candidate('(()(())((())))') == ['(()(())((())))']\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n\ncheck(separate_paren_groups)": {
      "result": true,
      "time": 0.09445786476135254,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:16:54",
    "guidance_input_tokens": 800,
    "guidance_output_tokens": 277,
    "end_time": "2025-05-27 19:16:58",
    "duration": "0:00:03.512571"
  },
  "retry": 0,
  "random_seed": 1038
}