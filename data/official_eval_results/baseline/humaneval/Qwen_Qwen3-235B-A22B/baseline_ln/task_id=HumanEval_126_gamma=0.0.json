{
  "code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    # Check if the list is sorted in ascending order\n    is_ascending = all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n    \n    # Check duplicate count\n    from collections import Counter\n    duplicates = Counter(lst)\n    \n    # If any number appears more than 2 times, return False\n    for count in duplicates.values():\n        if count > 2:\n            return False\n    \n    return is_ascending",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n\ncheck(is_sorted)": {
      "result": true,
      "time": 0.09506630897521973,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:18:31",
    "guidance_input_tokens": 919,
    "guidance_output_tokens": 170,
    "end_time": "2025-05-27 19:18:34",
    "duration": "0:00:02.884289"
  },
  "retry": 0,
  "random_seed": 1038
}