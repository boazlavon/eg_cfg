{
  "code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            # Swap case\n            swapped_case = char.lower() if char.isupper() else char.upper()\n            # Replace vowels\n            if swapped_case in vowels:\n                # Find the next vowel (2 places ahead)\n                index = vowels.index(swapped_case) + 2\n                # Replace with corresponding case vowel\n                if swapped_case.isupper():\n                    encoded += vowels[(index) % len(vowels)].upper()\n                else:\n                    encoded += vowels[(index) % len(vowels)].lower()\n            else:\n                encoded += swapped_case\n        else:\n            encoded += char\n    return encoded",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\ncheck(encode)": {
      "result": false,
      "time": 0.05637860298156738,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:26:21",
    "guidance_input_tokens": 796,
    "guidance_output_tokens": 161,
    "end_time": "2025-05-27 19:26:24",
    "duration": "0:00:02.649574"
  },
  "retry": 0,
  "random_seed": 1038
}