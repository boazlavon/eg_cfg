{
  "code": "from typing import List\n\ndef strange_sort_list(lst):\n    result = []\n    while lst:\n        # Find and remove the minimum value\n        min_val = min(lst)\n        lst.remove(min_val)\n        result.append(min_val)\n        \n        if lst:\n            # Find and remove the maximum value\n            max_val = max(lst)\n            lst.remove(max_val)\n            result.append(max_val)\n        else:\n            break\n\n        # Repeat the process\n        if not lst:\n            break\n\n    return result",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\ncheck(strange_sort_list)": {
      "result": true,
      "time": 0.10033965110778809,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:28:40",
    "guidance_input_tokens": 809,
    "guidance_output_tokens": 110,
    "end_time": "2025-05-27 19:28:42",
    "duration": "0:00:01.918013"
  },
  "retry": 0,
  "random_seed": 1038
}