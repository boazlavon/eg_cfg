{
  "code": "def find_closest_elements(numbers):\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    for i in range(len(sorted_numbers) - 1):\n        current_diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair",
  "results": {
    "assert find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)": {
      "result": true,
      "time": 0.05368852615356445,
      "error": null
    },
    "assert find_closest_elements([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)": {
      "result": true,
      "time": 0.04753446578979492,
      "error": null
    },
    "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)": {
      "result": true,
      "time": 0.05108952522277832,
      "error": null
    },
    "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)": {
      "result": true,
      "time": 0.05088973045349121,
      "error": null
    },
    "assert find_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)": {
      "result": true,
      "time": 0.051425933837890625,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:05:57",
    "guidance_input_tokens": 664,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:06:02",
    "duration": "0:00:05.452879"
  },
  "retry": 0,
  "random_seed": 379
}