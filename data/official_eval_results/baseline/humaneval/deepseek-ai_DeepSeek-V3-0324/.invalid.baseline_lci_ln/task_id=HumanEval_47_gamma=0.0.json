{
  "code": "def median(l):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    middle_index = length // 2\n    if length % 2 == 1:\n        median_value = sorted_list[middle_index]\n    else:\n        left_value = sorted_list[middle_index - 1]\n        right_value = sorted_list[middle_index]\n        median_value = (left_value + right_value) / 2\n    return median_value",
  "results": {
    "assert median([3, 1, 2, 4, 5]) == 3": {
      "result": true,
      "time": 0.05090641975402832,
      "error": null
    },
    "assert median([-10, 4, 6, 1000, 10, 20]) == 8.0": {
      "result": true,
      "time": 0.048578739166259766,
      "error": null
    },
    "assert median([5]) == 5": {
      "result": true,
      "time": 0.05202007293701172,
      "error": null
    },
    "assert median([6, 5]) == 5.5": {
      "result": true,
      "time": 0.05122780799865723,
      "error": null
    },
    "assert median([8, 1, 3, 9, 9, 2, 7]) == 7": {
      "result": true,
      "time": 0.048711538314819336,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:32:46",
    "guidance_input_tokens": 577,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:32:54",
    "duration": "0:00:07.568475"
  },
  "retry": 0,
  "random_seed": 379
}