{
  "code": "def is_nested(string):\n    stack = []\n    has_nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if stack:\n                if stack[-1] == '[':\n                    stack.pop()\n                    if stack and stack[-1] == '[':\n                        has_nested = True\n    return has_nested",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n\ncheck(is_nested)": {
      "result": false,
      "time": 0.06210041046142578,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:38:50",
    "guidance_input_tokens": 854,
    "guidance_output_tokens": 86,
    "end_time": "2025-05-27 19:38:53",
    "duration": "0:00:02.664427"
  },
  "retry": 0,
  "random_seed": 1038
}