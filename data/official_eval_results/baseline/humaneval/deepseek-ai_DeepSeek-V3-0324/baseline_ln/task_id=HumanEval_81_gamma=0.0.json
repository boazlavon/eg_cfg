{
  "code": "def numerical_letter_grade(grades):\n    grade_mapping = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n    ]\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 0.0:\n            letter_grades.append('E')\n            continue\n        for threshold, grade in grade_mapping:\n            if gpa >= threshold:\n                letter_grades.append(grade)\n                break\n    return letter_grades",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\ncheck(numerical_letter_grade)": {
      "result": false,
      "time": 0.0698089599609375,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:37:51",
    "guidance_input_tokens": 903,
    "guidance_output_tokens": 475,
    "end_time": "2025-05-27 19:38:01",
    "duration": "0:00:10.307325"
  },
  "retry": 0,
  "random_seed": 1038
}