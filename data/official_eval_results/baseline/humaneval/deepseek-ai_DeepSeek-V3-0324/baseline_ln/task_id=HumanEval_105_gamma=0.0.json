{
  "code": "def by_length(arr):\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    filtered = [num for num in arr if 1 <= num <= 9]\n    filtered.sort()\n    filtered.reverse()\n    result = [number_names[num] for num in filtered if num in number_names]\n    return result",
  "results": {
    "def check(by_length):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert by_length([]) == [], \"Error\"\n    assert by_length([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert by_length([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert by_length([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n\ncheck(by_length)": {
      "result": true,
      "time": 0.07709240913391113,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 17:51:00",
    "guidance_input_tokens": 911,
    "guidance_output_tokens": 119,
    "end_time": "2025-05-27 17:51:02",
    "duration": "0:00:01.869400"
  },
  "retry": 0,
  "random_seed": 726
}