{
  "code": "def sort_array(array):\n    if len(array) == 0:\n        return array.copy()\n    first_element = array[0]\n    last_element = array[-1]\n    sum_elements = first_element + last_element\n    new_array = array.copy()\n    if sum_elements % 2 == 1:\n        new_array.sort()\n    else:\n        new_array.sort(reverse=True)\n    return new_array",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n\ncheck(sort_array)": {
      "result": true,
      "time": 0.054294586181640625,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:21:49",
    "guidance_input_tokens": 682,
    "guidance_output_tokens": 91,
    "end_time": "2025-05-27 19:21:52",
    "duration": "0:00:03.057771"
  },
  "retry": 0,
  "random_seed": 1038
}