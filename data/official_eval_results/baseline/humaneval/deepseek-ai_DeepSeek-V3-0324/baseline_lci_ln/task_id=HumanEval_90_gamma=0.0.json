{
  "code": "def next_smallest(lst):\n    unique = sorted(set(lst))\n    return unique[1] if len(unique) >= 2 else None",
  "results": {
    "assert next_smallest([1, 2, 3, 4, 5]) == 2": {
      "result": true,
      "time": 0.05602455139160156,
      "error": null
    },
    "assert next_smallest([5, 1, 4, 3, 2]) == 2": {
      "result": true,
      "time": 0.05034065246582031,
      "error": null
    },
    "assert next_smallest([]) == None": {
      "result": true,
      "time": 0.05207633972167969,
      "error": null
    },
    "assert next_smallest([1, 1]) == None": {
      "result": true,
      "time": 0.04601550102233887,
      "error": null
    },
    "assert next_smallest([1,1,1,1,0]) == 1": {
      "result": true,
      "time": 0.0483708381652832,
      "error": null
    },
    "assert next_smallest([1, 0**0]) == None": {
      "result": true,
      "time": 0.053107500076293945,
      "error": null
    },
    "assert next_smallest([-35, 34, 12, -45]) == -35": {
      "result": true,
      "time": 0.047182559967041016,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:37:17",
    "guidance_input_tokens": 609,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:37:37",
    "duration": "0:00:19.241760"
  },
  "retry": 0,
  "random_seed": 379
}