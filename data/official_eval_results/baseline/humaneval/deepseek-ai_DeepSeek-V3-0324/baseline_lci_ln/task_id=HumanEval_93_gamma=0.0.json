{
  "code": "def encode(message):\n    result = []\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for char in message:\n        if char.lower() in vowels:\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                new_char = new_char.upper()\n            else:\n                new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n                new_char = new_char.lower()\n            result.append(new_char)\n        else:\n            if char.islower():\n                new_char = char.upper()\n            else:\n                new_char = char.lower()\n            result.append(new_char)\n    encoded_message = ''.join(result)\n    return encoded_message",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\ncheck(encode)": {
      "result": true,
      "time": 0.052579641342163086,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:22:04",
    "guidance_input_tokens": 603,
    "guidance_output_tokens": 177,
    "end_time": "2025-05-27 19:22:07",
    "duration": "0:00:03.722740"
  },
  "retry": 0,
  "random_seed": 1038
}