{
  "code": "def encode(message):\n    encoded = []\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for char in message:\n        new_char = char\n        if char.lower() in vowels:\n            shifted_char = chr(ord(char.lower()) + 2)\n            if shifted_char > 'z':\n                shifted_char = chr(ord(shifted_char) - 26)\n            new_char = shifted_char.upper() if char.isupper() else shifted_char\n        swapped_case = new_char.swapcase()\n        encoded.append(swapped_case)\n    return ''.join(encoded)",
  "results": {
    "assert encode('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"": {
      "result": true,
      "time": 0.06188321113586426,
      "error": null
    },
    "assert encode('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"": {
      "result": true,
      "time": 0.05356860160827637,
      "error": null
    },
    "assert encode('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"": {
      "result": true,
      "time": 0.05616021156311035,
      "error": null
    },
    "assert encode('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"": {
      "result": true,
      "time": 0.051670074462890625,
      "error": null
    },
    "assert encode(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"": {
      "result": true,
      "time": 0.05104207992553711,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:37:44",
    "guidance_input_tokens": 603,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:37:47",
    "duration": "0:00:02.788204"
  },
  "retry": 0,
  "random_seed": 379
}