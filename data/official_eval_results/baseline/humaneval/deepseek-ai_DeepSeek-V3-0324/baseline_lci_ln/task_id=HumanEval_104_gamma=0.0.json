{
  "code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even = False\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            if digit % 2 == 0:\n                has_even = True\n                break\n            temp = temp // 10\n        if not has_even:\n            result.append(num)\n    result.sort()\n    return result",
  "results": {
    "def check(unique_digits):\n\n    # Check some simple cases\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n    assert unique_digits([12345, 2033, 111, 151]) == [111, 151]\n    assert unique_digits([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\ncheck(unique_digits)": {
      "result": true,
      "time": 0.05564594268798828,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 17:36:08",
    "guidance_input_tokens": 605,
    "guidance_output_tokens": 96,
    "end_time": "2025-05-27 17:36:09",
    "duration": "0:00:01.747002"
  },
  "retry": 0,
  "random_seed": 726
}