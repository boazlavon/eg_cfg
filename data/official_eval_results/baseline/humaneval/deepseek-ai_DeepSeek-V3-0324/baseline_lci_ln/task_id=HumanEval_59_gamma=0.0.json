{
  "code": "def largest_prime_factor(n):\n    largest_factor = 2\n    while n % 2 == 0:\n        n = n // 2\n    current_factor = 3\n    max_factor = int(n ** 0.5) + 1\n    while current_factor <= max_factor and n > 1:\n        if n % current_factor == 0:\n            largest_factor = current_factor\n            while n % current_factor == 0:\n                n = n // current_factor\n            max_factor = int(n ** 0.5) + 1\n        current_factor += 2\n    if n > 1:\n        largest_factor = n\n    return largest_factor",
  "results": {
    "assert largest_prime_factor(15) == 5": {
      "result": true,
      "time": 0.0511474609375,
      "error": null
    },
    "assert largest_prime_factor(27) == 3": {
      "result": true,
      "time": 0.05459856986999512,
      "error": null
    },
    "assert largest_prime_factor(63) == 7": {
      "result": true,
      "time": 0.05277824401855469,
      "error": null
    },
    "assert largest_prime_factor(330) == 11": {
      "result": true,
      "time": 0.05174374580383301,
      "error": null
    },
    "assert largest_prime_factor(13195) == 29": {
      "result": true,
      "time": 0.055486202239990234,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:34:10",
    "guidance_input_tokens": 564,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:34:13",
    "duration": "0:00:02.917204"
  },
  "retry": 0,
  "random_seed": 379
}