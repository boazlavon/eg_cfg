{
  "code": "def largest_smallest_integers(lst):\n    negatives = []\n    positives = []\n    for num in lst:\n        if num < 0:\n            negatives.append(num)\n        elif num > 0:\n            positives.append(num)\n    if negatives:\n        max_neg = max(negatives)\n    else:\n        max_neg = None\n    if positives:\n        min_pos = min(positives)\n    else:\n        min_pos = None\n    return (max_neg, min_pos)",
  "results": {
    "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)": {
      "result": true,
      "time": 0.05297112464904785,
      "error": null
    },
    "assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]) == (None, 1)": {
      "result": true,
      "time": 0.054738521575927734,
      "error": null
    },
    "assert largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)": {
      "result": true,
      "time": 0.0540468692779541,
      "error": null
    },
    "assert largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)": {
      "result": true,
      "time": 0.05420660972595215,
      "error": null
    },
    "assert largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)": {
      "result": true,
      "time": 0.05195260047912598,
      "error": null
    },
    "assert largest_smallest_integers([]) == (None, None)": {
      "result": true,
      "time": 0.04954123497009277,
      "error": null
    },
    "assert largest_smallest_integers([0]) == (None, None)": {
      "result": true,
      "time": 0.047267913818359375,
      "error": null
    },
    "assert largest_smallest_integers([-1, -3, -5, -6]) == (-1, None)": {
      "result": true,
      "time": 0.04957842826843262,
      "error": null
    },
    "assert largest_smallest_integers([-1, -3, -5, -6, 0]) == (-1, None)": {
      "result": true,
      "time": 0.04918384552001953,
      "error": null
    },
    "assert largest_smallest_integers([-6, -4, -4, -3, 1]) == (-3, 1)": {
      "result": true,
      "time": 0.04990196228027344,
      "error": null
    },
    "assert largest_smallest_integers([-6, -4, -4, -3, -100, 1]) == (-3, 1)": {
      "result": true,
      "time": 0.05315589904785156,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:42:09",
    "guidance_input_tokens": 625,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:42:14",
    "duration": "0:00:05.267759"
  },
  "retry": 0,
  "random_seed": 379
}