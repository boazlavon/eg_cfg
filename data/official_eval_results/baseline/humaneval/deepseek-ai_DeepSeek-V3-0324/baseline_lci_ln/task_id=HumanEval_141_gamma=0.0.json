{
  "code": "def file_name_check(file_name):\n    dot_count = file_name.count('.')\n    if dot_count != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    prefix = parts[0]\n    suffix = parts[1]\n    if len(prefix) == 0:\n        return 'No'\n    if not prefix[0].isalpha():\n        return 'No'\n    valid_suffixes = ['txt', 'exe', 'dll']\n    if suffix not in valid_suffixes:\n        return 'No'\n    digit_count = 0\n    for char in file_name:\n        if char.isdigit():\n            digit_count += 1\n    if digit_count > 3:\n        return 'No'\n    return 'Yes'",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n\ncheck(file_name_check)": {
      "result": true,
      "time": 0.05101203918457031,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:27:10",
    "guidance_input_tokens": 692,
    "guidance_output_tokens": 178,
    "end_time": "2025-05-27 19:27:13",
    "duration": "0:00:03.102932"
  },
  "retry": 0,
  "random_seed": 1038
}