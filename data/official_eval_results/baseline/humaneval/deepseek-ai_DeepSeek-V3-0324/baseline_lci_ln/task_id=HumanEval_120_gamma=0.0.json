{
  "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr)\n    result = []\n    start_index = len(sorted_arr) - k\n    for i in range(start_index, len(sorted_arr)):\n        current_element = sorted_arr[i]\n        result.append(current_element)\n    return result",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n\ncheck(maximum)": {
      "result": true,
      "time": 0.060686588287353516,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:20:26",
    "guidance_input_tokens": 694,
    "guidance_output_tokens": 220,
    "end_time": "2025-05-27 19:20:38",
    "duration": "0:00:11.229623"
  },
  "retry": 0,
  "random_seed": 1038
}