{
  "code": "def correct_bracketing(brackets):\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance = balance + 1\n        else:\n            balance = balance - 1\n        if balance < 0:\n            return False\n    return balance == 0",
  "results": {
    "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n\ncheck(correct_bracketing)": {
      "result": true,
      "time": 0.053937435150146484,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:28:17",
    "guidance_input_tokens": 593,
    "guidance_output_tokens": 134,
    "end_time": "2025-05-27 19:28:22",
    "duration": "0:00:04.823517"
  },
  "retry": 0,
  "random_seed": 1038
}