{
  "code": "def correct_bracketing(brackets):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
  "results": {
    "\n\nMETADATA = {}\n\n\ndef check(correct_bracketing):\n    assert correct_bracketing(\"()\")\n    assert correct_bracketing(\"(()())\")\n    assert correct_bracketing(\"()()(()())()\")\n    assert correct_bracketing(\"()()((()()())())(()()(()))\")\n    assert not correct_bracketing(\"((()())))\")\n    assert not correct_bracketing(\")(()\")\n    assert not correct_bracketing(\"(\")\n    assert not correct_bracketing(\"((((\")\n    assert not correct_bracketing(\")\")\n    assert not correct_bracketing(\"(()\")\n    assert not correct_bracketing(\"()()(()())())(()\")\n    assert not correct_bracketing(\"()()(()())()))()\")\n\n\ncheck(correct_bracketing)": {
      "result": true,
      "time": 0.06114792823791504,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 17:38:00",
    "guidance_input_tokens": 593,
    "guidance_output_tokens": 83,
    "end_time": "2025-05-27 17:38:02",
    "duration": "0:00:01.878198"
  },
  "retry": 0,
  "random_seed": 726
}