{
  "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        product_signs *= sign\n    return sum_magnitudes * product_signs",
  "results": {
    "assert prod_signs([1, 2, 2, -4]) == -9": {
      "result": true,
      "time": 0.05399203300476074,
      "error": null
    },
    "assert prod_signs([0, 1]) == 0": {
      "result": true,
      "time": 0.0524904727935791,
      "error": null
    },
    "assert prod_signs([1, 1, 1, 2, 3, -1, 1]) == -10": {
      "result": true,
      "time": 0.05355191230773926,
      "error": null
    },
    "assert prod_signs([]) == None": {
      "result": true,
      "time": 0.04949331283569336,
      "error": null
    },
    "assert prod_signs([2, 4,1, 2, -1, -1, 9]) == 20": {
      "result": true,
      "time": 0.05272531509399414,
      "error": null
    },
    "assert prod_signs([-1, 1, -1, 1]) == 4": {
      "result": true,
      "time": 0.051676034927368164,
      "error": null
    },
    "assert prod_signs([-1, 1, 1, 1]) == -4": {
      "result": true,
      "time": 0.05320119857788086,
      "error": null
    },
    "assert prod_signs([-1, 1, 1, 0]) == 0": {
      "result": true,
      "time": 0.05390119552612305,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:41:17",
    "guidance_input_tokens": 613,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:41:29",
    "duration": "0:00:12.228265"
  },
  "retry": 0,
  "random_seed": 379
}