{
  "code": "def solve(s):\n    has_letters = False\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            break\n    if not has_letters:\n        reversed_str = s[::-1]\n        return reversed_str\n    result = []\n    for char in s:\n        if char.isupper():\n            new_char = char.lower()\n        elif char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char\n        result.append(new_char)\n    return ''.join(result)",
  "results": {
    "assert solve(\"AsDf\") == \"aSdF\"": {
      "result": true,
      "time": 0.059328556060791016,
      "error": null
    },
    "assert solve(\"1234\") == \"4321\"": {
      "result": true,
      "time": 0.05138134956359863,
      "error": null
    },
    "assert solve(\"ab\") == \"AB\"": {
      "result": true,
      "time": 0.05436420440673828,
      "error": null
    },
    "assert solve(\"#a@C\") == \"#A@c\"": {
      "result": true,
      "time": 0.047600507736206055,
      "error": null
    },
    "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"": {
      "result": true,
      "time": 0.05640721321105957,
      "error": null
    },
    "assert solve(\"#6@2\") == \"2@6#\"": {
      "result": true,
      "time": 0.04841184616088867,
      "error": null
    },
    "assert solve(\"#$a^D\") == \"#$A^d\"": {
      "result": true,
      "time": 0.053646087646484375,
      "error": null
    },
    "assert solve(\"#ccc\") == \"#CCC\"": {
      "result": true,
      "time": 0.052939414978027344,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:45:00",
    "guidance_input_tokens": 587,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:45:07",
    "duration": "0:00:07.628577"
  },
  "retry": 0,
  "random_seed": 379
}