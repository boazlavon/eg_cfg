{
  "code": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 0:\n                if space_count == 1:\n                    result.append('_')\n                elif space_count == 2:\n                    result.append('__')\n                else:\n                    result.append('-')\n                space_count = 0\n            result.append(char)\n    if space_count > 0:\n        if space_count == 1:\n            result.append('_')\n        elif space_count == 2:\n            result.append('__')\n        else:\n            result.append('-')\n    return ''.join(result)",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n\ncheck(fix_spaces)": {
      "result": true,
      "time": 0.0626223087310791,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:24:13",
    "guidance_input_tokens": 591,
    "guidance_output_tokens": 167,
    "end_time": "2025-05-27 19:24:19",
    "duration": "0:00:05.467195"
  },
  "retry": 0,
  "random_seed": 1038
}