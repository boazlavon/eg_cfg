{
  "code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 0:\n                if consecutive_spaces > 2:\n                    result.append('-')\n                else:\n                    result.append('_' * consecutive_spaces)\n                consecutive_spaces = 0\n            result.append(char)\n    if consecutive_spaces > 0:\n        if consecutive_spaces > 2:\n            result.append('-')\n        else:\n            result.append('_' * consecutive_spaces)\n    return ''.join(result)",
  "results": {
    "assert fix_spaces(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"": {
      "result": true,
      "time": 0.0534062385559082,
      "error": null
    },
    "assert fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"": {
      "result": true,
      "time": 0.04990386962890625,
      "error": null
    },
    "assert fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"": {
      "result": true,
      "time": 0.05229473114013672,
      "error": null
    },
    "assert fix_spaces(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"": {
      "result": true,
      "time": 0.05154895782470703,
      "error": null
    },
    "assert fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"": {
      "result": true,
      "time": 0.050968170166015625,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:42:25",
    "guidance_input_tokens": 591,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:42:36",
    "duration": "0:00:10.793410"
  },
  "retry": 0,
  "random_seed": 379
}