{
  "code": "def bf(planet1, planet2):\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    index1 = planets_order.index(planet1)\n    index2 = planets_order.index(planet2)\n    start = min(index1, index2)\n    end = max(index1, index2)\n    result = []\n    for i in range(start + 1, end):\n        planet = planets_order[i]\n        result.append(planet)\n    return tuple(result)",
  "results": {
    "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(bf(\"Jupiter\", \"Neptune\")))": {
      "result": true,
      "time": 0.05307364463806152,
      "error": null
    },
    "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(bf(\"Earth\", \"Mercury\"))": {
      "result": true,
      "time": 0.05305767059326172,
      "error": null
    },
    "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(bf(\"Mercury\", \"Uranus\"))": {
      "result": true,
      "time": 0.0533452033996582,
      "error": null
    },
    "assert bf(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(bf(\"Neptune\", \"Venus\"))": {
      "result": true,
      "time": 0.05371594429016113,
      "error": null
    },
    "assert bf(\"Earth\", \"Earth\") == ()": {
      "result": true,
      "time": 0.051872968673706055,
      "error": null
    },
    "assert bf(\"Mars\", \"Earth\") == ()": {
      "result": true,
      "time": 0.05576014518737793,
      "error": null
    },
    "assert bf(\"Jupiter\", \"Makemake\") == ()": {
      "result": true,
      "time": 0.05150198936462402,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 20:43:43",
    "guidance_input_tokens": 687,
    "guidance_output_tokens": 0,
    "end_time": "2025-05-26 20:43:47",
    "duration": "0:00:03.566603"
  },
  "retry": 0,
  "random_seed": 379
}