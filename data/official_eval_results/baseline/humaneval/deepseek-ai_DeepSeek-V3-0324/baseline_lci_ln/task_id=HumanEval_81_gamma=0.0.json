{
  "code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            grade = \"A+\"\n        elif gpa > 3.7:\n            grade = \"A\"\n        elif gpa > 3.3:\n            grade = \"A-\"\n        elif gpa > 3.0:\n            grade = \"B+\"\n        elif gpa > 2.7:\n            grade = \"B\"\n        elif gpa > 2.3:\n            grade = \"B-\"\n        elif gpa > 2.0:\n            grade = \"C+\"\n        elif gpa > 1.7:\n            grade = \"C\"\n        elif gpa > 1.3:\n            grade = \"C-\"\n        elif gpa > 1.0:\n            grade = \"D+\"\n        elif gpa > 0.7:\n            grade = \"D\"\n        elif gpa > 0.0:\n            grade = \"D-\"\n        else:\n            grade = \"E\"\n        letter_grades.append(grade)\n    return letter_grades",
  "results": {
    "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\ncheck(numerical_letter_grade)": {
      "result": true,
      "time": 0.0520477294921875,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-27 19:17:46",
    "guidance_input_tokens": 740,
    "guidance_output_tokens": 270,
    "end_time": "2025-05-27 19:17:50",
    "duration": "0:00:04.675691"
  },
  "retry": 0,
  "random_seed": 1038
}