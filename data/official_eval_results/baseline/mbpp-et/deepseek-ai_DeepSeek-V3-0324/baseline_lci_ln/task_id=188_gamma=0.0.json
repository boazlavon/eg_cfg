{
  "code": "def prod_Square(n):\n    if n <= 0:\n        return False\n    max_divisor = int(n ** 0.5) + 1\n    for a in range(1, max_divisor):\n        if n % a == 0:\n            b = n // a\n            a_root = int(a ** 0.5)\n            b_root = int(b ** 0.5)\n            if a_root * a_root == a and b_root * b_root == b:\n                return True\n    return False",
  "results": {
    "assert prod_Square(25) == False": {
      "result": false,
      "time": 0.034865617752075195,
      "error": null
    },
    "assert prod_Square(30) == False": {
      "result": true,
      "time": 0.03059077262878418,
      "error": null
    },
    "assert prod_Square(16) == True": {
      "result": true,
      "time": 0.03231930732727051,
      "error": null
    },
    "assert prod_Square(21) == False": {
      "result": true,
      "time": 0.04602479934692383,
      "error": null
    },
    "assert prod_Square(24) == False": {
      "result": true,
      "time": 0.03738808631896973,
      "error": null
    },
    "assert prod_Square(29) == False": {
      "result": true,
      "time": 0.03822207450866699,
      "error": null
    },
    "assert prod_Square(27) == False": {
      "result": true,
      "time": 0.04520440101623535,
      "error": null
    },
    "assert prod_Square(28) == False": {
      "result": true,
      "time": 0.032674551010131836,
      "error": null
    },
    "assert prod_Square(23) == False": {
      "result": true,
      "time": 0.03596019744873047,
      "error": null
    },
    "assert prod_Square(26) == False": {
      "result": true,
      "time": 0.0379025936126709,
      "error": null
    },
    "assert prod_Square(20) == False": {
      "result": true,
      "time": 0.04451704025268555,
      "error": null
    },
    "assert prod_Square(22) == False": {
      "result": true,
      "time": 0.03985762596130371,
      "error": null
    },
    "assert prod_Square(31) == False": {
      "result": true,
      "time": 0.03855752944946289,
      "error": null
    },
    "assert prod_Square(32) == False": {
      "result": true,
      "time": 0.043878793716430664,
      "error": null
    },
    "assert prod_Square(33) == False": {
      "result": true,
      "time": 0.04136061668395996,
      "error": null
    },
    "assert prod_Square(35) == False": {
      "result": true,
      "time": 0.039049625396728516,
      "error": null
    },
    "assert prod_Square(11) == False": {
      "result": true,
      "time": 0.038558244705200195,
      "error": null
    },
    "assert prod_Square(14) == False": {
      "result": true,
      "time": 0.040001630783081055,
      "error": null
    },
    "assert prod_Square(12) == False": {
      "result": true,
      "time": 0.0376429557800293,
      "error": null
    },
    "assert prod_Square(19) == False": {
      "result": true,
      "time": 0.03640604019165039,
      "error": null
    },
    "assert prod_Square(15) == False": {
      "result": true,
      "time": 0.036026716232299805,
      "error": null
    },
    "assert prod_Square(18) == False": {
      "result": true,
      "time": 0.03598523139953613,
      "error": null
    },
    "assert prod_Square(17) == False": {
      "result": true,
      "time": 0.03593730926513672,
      "error": null
    },
    "assert prod_Square(13) == False": {
      "result": true,
      "time": 0.03965449333190918,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9583333333333334,
  "general_error": "",
  "has_testcase_error": false
}