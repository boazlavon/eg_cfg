{
  "code": "def min_product_tuple(tuples_list):\n    if not tuples_list:\n        return None\n    min_product = None\n    for pair in tuples_list:\n        first_num = pair[0]\n        second_num = pair[1]\n        product = first_num * second_num\n        if min_product is None or product < min_product:\n            min_product = product\n    return min_product",
  "results": {
    "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8": {
      "result": true,
      "time": 0.03934669494628906,
      "error": null
    },
    "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30": {
      "result": true,
      "time": 0.034740447998046875,
      "error": null
    },
    "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100": {
      "result": true,
      "time": 0.04052543640136719,
      "error": null
    },
    "assert min_product_tuple([(4, 2), (6, 11), (5, 5), (7, 14)]) == 8": {
      "result": true,
      "time": 0.03911399841308594,
      "error": null
    },
    "assert min_product_tuple([(6, 5), (2, 10), (5, 4), (6, 9)]) == 20": {
      "result": true,
      "time": 0.05039238929748535,
      "error": null
    },
    "assert min_product_tuple([(3, 11), (5, 8), (5, 8), (6, 7)]) == 33": {
      "result": true,
      "time": 0.0512700080871582,
      "error": null
    },
    "assert min_product_tuple([(5, 3), (5, 5), (3, 10), (4, 9)]) == 15": {
      "result": true,
      "time": 0.041036367416381836,
      "error": null
    },
    "assert min_product_tuple([(6, 2), (6, 4), (1, 5), (1, 7)]) == 5": {
      "result": true,
      "time": 0.04697108268737793,
      "error": null
    },
    "assert min_product_tuple([(4, 6), (2, 3), (6, 9), (9, 9)]) == 6": {
      "result": true,
      "time": 0.03721904754638672,
      "error": null
    },
    "assert min_product_tuple([(2, 7), (1, 3), (2, 8), (2, 7)]) == 3": {
      "result": true,
      "time": 0.04396510124206543,
      "error": null
    },
    "assert min_product_tuple([(6, 11), (4, 11), (4, 13), (6, 7)]) == 42": {
      "result": true,
      "time": 0.03595685958862305,
      "error": null
    },
    "assert min_product_tuple([(5, 6), (3, 3), (4, 13), (1, 14)]) == 9": {
      "result": true,
      "time": 0.04374837875366211,
      "error": null
    },
    "assert min_product_tuple([(7, 6), (3, 3), (6, 12), (6, 11)]) == 9": {
      "result": true,
      "time": 0.043636322021484375,
      "error": null
    },
    "assert min_product_tuple([(7, 11), (6, 9), (5, 5), (1, 7)]) == 7": {
      "result": true,
      "time": 0.043303728103637695,
      "error": null
    },
    "assert min_product_tuple([(4, 11), (3, 10), (1, 5), (2, 14)]) == 5": {
      "result": true,
      "time": 0.044693946838378906,
      "error": null
    },
    "assert min_product_tuple([(3, 2), (2, 6), (4, 5), (6, 4)]) == 6": {
      "result": true,
      "time": 0.04762530326843262,
      "error": null
    },
    "assert min_product_tuple([(3, 6), (2, 6), (2, 6), (3, 8)]) == 12": {
      "result": true,
      "time": 0.03798985481262207,
      "error": null
    },
    "assert min_product_tuple([(5, 2), (1, 4), (5, 5), (7, 13)]) == 4": {
      "result": true,
      "time": 0.03715229034423828,
      "error": null
    },
    "assert min_product_tuple([(1, 10), (4, 10), (2, 6), (3, 10)]) == 10": {
      "result": true,
      "time": 0.03445839881896973,
      "error": null
    },
    "assert min_product_tuple([(4, 2), (1, 9), (1, 10), (3, 9)]) == 8": {
      "result": true,
      "time": 0.044307708740234375,
      "error": null
    },
    "assert min_product_tuple([(7, 11), (5, 6), (6, 8), (8, 11)]) == 30": {
      "result": true,
      "time": 0.03931474685668945,
      "error": null
    },
    "assert min_product_tuple([(5, 2), (7, 6), (4, 5), (4, 10)]) == 10": {
      "result": true,
      "time": 0.046408891677856445,
      "error": null
    },
    "assert min_product_tuple([(2, 9), (4, 6), (2, 12), (7, 6)]) == 18": {
      "result": true,
      "time": 0.04373621940612793,
      "error": null
    },
    "assert min_product_tuple([(7, 2), (7, 8), (2, 8), (9, 9)]) == 14": {
      "result": true,
      "time": 0.05016040802001953,
      "error": null
    },
    "assert min_product_tuple([(6, 12), (7, 6), (1, 7), (1, 7)]) == 7": {
      "result": true,
      "time": 0.04763031005859375,
      "error": null
    },
    "assert min_product_tuple([(4, 2), (7, 11), (4, 7), (1, 12)]) == 8": {
      "result": true,
      "time": 0.035401344299316406,
      "error": null
    },
    "assert min_product_tuple([(2, 3), (5, 11), (4, 13), (1, 7)]) == 6": {
      "result": true,
      "time": 0.04992413520812988,
      "error": null
    },
    "assert min_product_tuple([(6, 3), (5, 8), (4, 13), (1, 6)]) == 6": {
      "result": true,
      "time": 0.04321479797363281,
      "error": null
    },
    "assert min_product_tuple([(6, 4), (7, 3), (3, 11), (1, 12)]) == 12": {
      "result": true,
      "time": 0.04662442207336426,
      "error": null
    },
    "assert min_product_tuple([(7, 11), (7, 11), (6, 10), (6, 12)]) == 60": {
      "result": true,
      "time": 0.03943157196044922,
      "error": null
    },
    "assert min_product_tuple([(5, 8), (4, 8), (1, 8), (4, 9)]) == 8": {
      "result": true,
      "time": 0.03963208198547363,
      "error": null
    },
    "assert min_product_tuple([(2, 3), (2, 5), (2, 6), (2, 14)]) == 6": {
      "result": true,
      "time": 0.05250120162963867,
      "error": null
    },
    "assert min_product_tuple([(6, 7), (1, 11), (6, 4), (7, 6)]) == 11": {
      "result": true,
      "time": 0.05030417442321777,
      "error": null
    },
    "assert min_product_tuple([(4, 9), (7, 9), (1, 6), (5, 10)]) == 6": {
      "result": true,
      "time": 0.0379636287689209,
      "error": null
    },
    "assert min_product_tuple([(1, 10), (3, 4), (5, 3), (7, 9)]) == 10": {
      "result": true,
      "time": 0.03934049606323242,
      "error": null
    },
    "assert min_product_tuple([(3, 4), (6, 11), (4, 3), (7, 10)]) == 12": {
      "result": true,
      "time": 0.043764591217041016,
      "error": null
    },
    "assert min_product_tuple([(15, 17), (15, 7), (9, 14)]) == 105": {
      "result": true,
      "time": 0.046633005142211914,
      "error": null
    },
    "assert min_product_tuple([(12, 18), (11, 3), (8, 10)]) == 33": {
      "result": true,
      "time": 0.04505515098571777,
      "error": null
    },
    "assert min_product_tuple([(6, 15), (11, 6), (9, 5)]) == 45": {
      "result": true,
      "time": 0.04951596260070801,
      "error": null
    },
    "assert min_product_tuple([(5, 23), (15, 5), (2, 13)]) == 26": {
      "result": true,
      "time": 0.03729414939880371,
      "error": null
    },
    "assert min_product_tuple([(7, 22), (16, 3), (1, 10)]) == 10": {
      "result": true,
      "time": 0.041881561279296875,
      "error": null
    },
    "assert min_product_tuple([(8, 24), (16, 5), (6, 8)]) == 48": {
      "result": true,
      "time": 0.04094338417053223,
      "error": null
    },
    "assert min_product_tuple([(10, 16), (15, 3), (6, 6)]) == 36": {
      "result": true,
      "time": 0.03844451904296875,
      "error": null
    },
    "assert min_product_tuple([(7, 16), (17, 6), (3, 14)]) == 42": {
      "result": true,
      "time": 0.059983015060424805,
      "error": null
    },
    "assert min_product_tuple([(5, 20), (18, 2), (6, 9)]) == 36": {
      "result": true,
      "time": 0.03879880905151367,
      "error": null
    },
    "assert min_product_tuple([(5, 23), (10, 2), (10, 14)]) == 20": {
      "result": true,
      "time": 0.038904428482055664,
      "error": null
    },
    "assert min_product_tuple([(14, 15), (12, 2), (6, 8)]) == 24": {
      "result": true,
      "time": 0.04310011863708496,
      "error": null
    },
    "assert min_product_tuple([(5, 15), (16, 5), (10, 6)]) == 60": {
      "result": true,
      "time": 0.04294300079345703,
      "error": null
    },
    "assert min_product_tuple([(14, 19), (14, 5), (10, 14)]) == 70": {
      "result": true,
      "time": 0.0449373722076416,
      "error": null
    },
    "assert min_product_tuple([(14, 23), (11, 5), (10, 9)]) == 55": {
      "result": true,
      "time": 0.04633736610412598,
      "error": null
    },
    "assert min_product_tuple([(14, 18), (20, 1), (1, 15)]) == 15": {
      "result": true,
      "time": 0.04725360870361328,
      "error": null
    },
    "assert min_product_tuple([(14, 15), (12, 6), (10, 14)]) == 72": {
      "result": true,
      "time": 0.045563459396362305,
      "error": null
    },
    "assert min_product_tuple([(13, 15), (14, 1), (8, 14)]) == 14": {
      "result": true,
      "time": 0.05012702941894531,
      "error": null
    },
    "assert min_product_tuple([(13, 23), (16, 5), (6, 12)]) == 72": {
      "result": true,
      "time": 0.03290987014770508,
      "error": null
    },
    "assert min_product_tuple([(7, 20), (10, 6), (2, 13)]) == 26": {
      "result": true,
      "time": 0.04303574562072754,
      "error": null
    },
    "assert min_product_tuple([(9, 18), (12, 7), (8, 9)]) == 72": {
      "result": true,
      "time": 0.045963287353515625,
      "error": null
    },
    "assert min_product_tuple([(13, 25), (15, 5), (10, 11)]) == 75": {
      "result": true,
      "time": 0.04105544090270996,
      "error": null
    },
    "assert min_product_tuple([(7, 17), (12, 1), (7, 14)]) == 12": {
      "result": true,
      "time": 0.037480831146240234,
      "error": null
    },
    "assert min_product_tuple([(12, 25), (20, 7), (7, 15)]) == 105": {
      "result": true,
      "time": 0.03722262382507324,
      "error": null
    },
    "assert min_product_tuple([(12, 18), (11, 2), (9, 7)]) == 22": {
      "result": true,
      "time": 0.04057645797729492,
      "error": null
    },
    "assert min_product_tuple([(10, 19), (15, 7), (4, 8)]) == 32": {
      "result": true,
      "time": 0.040728092193603516,
      "error": null
    },
    "assert min_product_tuple([(14, 25), (14, 7), (10, 10)]) == 98": {
      "result": true,
      "time": 0.03910708427429199,
      "error": null
    },
    "assert min_product_tuple([(10, 24), (11, 3), (8, 6)]) == 33": {
      "result": true,
      "time": 0.03428316116333008,
      "error": null
    },
    "assert min_product_tuple([(13, 18), (20, 2), (3, 5)]) == 15": {
      "result": true,
      "time": 0.04064631462097168,
      "error": null
    },
    "assert min_product_tuple([(8, 21), (18, 1), (7, 5)]) == 18": {
      "result": true,
      "time": 0.038608551025390625,
      "error": null
    },
    "assert min_product_tuple([(14, 16), (18, 7), (8, 7)]) == 56": {
      "result": true,
      "time": 0.03896641731262207,
      "error": null
    },
    "assert min_product_tuple([(15, 19), (19, 2), (7, 13)]) == 38": {
      "result": true,
      "time": 0.040640830993652344,
      "error": null
    },
    "assert min_product_tuple([(7, 21), (14, 4), (10, 11)]) == 56": {
      "result": true,
      "time": 0.04406142234802246,
      "error": null
    },
    "assert min_product_tuple([(7, 20), (14, 6), (6, 14)]) == 84": {
      "result": true,
      "time": 0.04515576362609863,
      "error": null
    },
    "assert min_product_tuple([(14, 45), (6, 20), (21, 4), (8, 5)]) == 40": {
      "result": true,
      "time": 0.03848528861999512,
      "error": null
    },
    "assert min_product_tuple([(14, 47), (6, 20), (25, 8), (14, 6)]) == 84": {
      "result": true,
      "time": 0.04288935661315918,
      "error": null
    },
    "assert min_product_tuple([(12, 46), (6, 14), (21, 8), (15, 11)]) == 84": {
      "result": true,
      "time": 0.03396034240722656,
      "error": null
    },
    "assert min_product_tuple([(8, 44), (13, 10), (15, 7), (17, 10)]) == 105": {
      "result": true,
      "time": 0.04280829429626465,
      "error": null
    },
    "assert min_product_tuple([(6, 46), (9, 18), (25, 2), (14, 14)]) == 50": {
      "result": true,
      "time": 0.04354238510131836,
      "error": null
    },
    "assert min_product_tuple([(11, 46), (15, 20), (22, 6), (8, 7)]) == 56": {
      "result": true,
      "time": 0.031859636306762695,
      "error": null
    },
    "assert min_product_tuple([(14, 44), (8, 13), (15, 4), (9, 12)]) == 60": {
      "result": true,
      "time": 0.03850555419921875,
      "error": null
    },
    "assert min_product_tuple([(6, 41), (14, 16), (19, 4), (12, 13)]) == 76": {
      "result": true,
      "time": 0.04555654525756836,
      "error": null
    },
    "assert min_product_tuple([(12, 43), (12, 19), (17, 5), (16, 10)]) == 85": {
      "result": true,
      "time": 0.0389559268951416,
      "error": null
    },
    "assert min_product_tuple([(6, 48), (7, 13), (23, 8), (15, 4)]) == 60": {
      "result": true,
      "time": 0.03628993034362793,
      "error": null
    },
    "assert min_product_tuple([(6, 47), (8, 11), (25, 10), (17, 12)]) == 88": {
      "result": true,
      "time": 0.0397946834564209,
      "error": null
    },
    "assert min_product_tuple([(13, 43), (6, 10), (19, 4), (16, 11)]) == 60": {
      "result": true,
      "time": 0.038286447525024414,
      "error": null
    },
    "assert min_product_tuple([(11, 42), (12, 18), (22, 1), (16, 11)]) == 22": {
      "result": true,
      "time": 0.03858351707458496,
      "error": null
    },
    "assert min_product_tuple([(14, 48), (14, 18), (19, 10), (10, 8)]) == 80": {
      "result": true,
      "time": 0.040990591049194336,
      "error": null
    },
    "assert min_product_tuple([(8, 42), (10, 18), (17, 8), (11, 5)]) == 55": {
      "result": true,
      "time": 0.040610313415527344,
      "error": null
    },
    "assert min_product_tuple([(7, 49), (6, 10), (17, 6), (17, 4)]) == 60": {
      "result": true,
      "time": 0.03681373596191406,
      "error": null
    },
    "assert min_product_tuple([(13, 46), (8, 12), (20, 7), (12, 10)]) == 96": {
      "result": true,
      "time": 0.0359804630279541,
      "error": null
    },
    "assert min_product_tuple([(16, 42), (14, 11), (25, 6), (9, 5)]) == 45": {
      "result": true,
      "time": 0.0334165096282959,
      "error": null
    },
    "assert min_product_tuple([(14, 45), (14, 17), (25, 6), (14, 11)]) == 150": {
      "result": true,
      "time": 0.04176592826843262,
      "error": null
    },
    "assert min_product_tuple([(11, 47), (7, 14), (18, 8), (12, 12)]) == 98": {
      "result": true,
      "time": 0.03469491004943848,
      "error": null
    },
    "assert min_product_tuple([(7, 47), (15, 13), (24, 7), (13, 4)]) == 52": {
      "result": true,
      "time": 0.03179645538330078,
      "error": null
    },
    "assert min_product_tuple([(11, 49), (14, 10), (22, 7), (15, 4)]) == 60": {
      "result": true,
      "time": 0.04392671585083008,
      "error": null
    },
    "assert min_product_tuple([(7, 44), (5, 17), (20, 6), (11, 7)]) == 77": {
      "result": true,
      "time": 0.0438685417175293,
      "error": null
    },
    "assert min_product_tuple([(16, 40), (10, 19), (18, 6), (16, 12)]) == 108": {
      "result": true,
      "time": 0.043123722076416016,
      "error": null
    },
    "assert min_product_tuple([(12, 39), (11, 15), (15, 10), (13, 5)]) == 65": {
      "result": true,
      "time": 0.0419001579284668,
      "error": null
    },
    "assert min_product_tuple([(13, 40), (11, 16), (15, 3), (12, 5)]) == 45": {
      "result": true,
      "time": 0.03793597221374512,
      "error": null
    },
    "assert min_product_tuple([(8, 47), (9, 10), (22, 2), (16, 9)]) == 44": {
      "result": true,
      "time": 0.037723541259765625,
      "error": null
    },
    "assert min_product_tuple([(12, 45), (9, 17), (22, 2), (13, 9)]) == 44": {
      "result": true,
      "time": 0.03683805465698242,
      "error": null
    },
    "assert min_product_tuple([(14, 47), (9, 11), (24, 7), (12, 5)]) == 60": {
      "result": true,
      "time": 0.040822505950927734,
      "error": null
    },
    "assert min_product_tuple([(15, 48), (15, 19), (20, 2), (15, 14)]) == 40": {
      "result": true,
      "time": 0.0411529541015625,
      "error": null
    },
    "assert min_product_tuple([(6, 40), (5, 14), (25, 4), (15, 8)]) == 70": {
      "result": true,
      "time": 0.03497505187988281,
      "error": null
    },
    "assert min_product_tuple([(8, 46), (6, 16), (21, 1), (16, 12)]) == 21": {
      "result": true,
      "time": 0.03746986389160156,
      "error": null
    },
    "assert min_product_tuple([(14, 41), (11, 19), (23, 2), (15, 11)]) == 46": {
      "result": true,
      "time": 0.03696870803833008,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}