{
  "code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = 0\n    place = 1\n    while n > 0:\n        remainder = n % 2\n        binary = binary + remainder * place\n        place = place * 10\n        n = n // 2\n    return binary",
  "results": {
    "assert decimal_To_Binary(10) == 1010": {
      "result": true,
      "time": 0.057431697845458984,
      "error": null
    },
    "assert decimal_To_Binary(1) == 1": {
      "result": true,
      "time": 0.04458904266357422,
      "error": null
    },
    "assert decimal_To_Binary(20) == 10100": {
      "result": true,
      "time": 0.039208173751831055,
      "error": null
    },
    "assert decimal_To_Binary(7) == 111": {
      "result": true,
      "time": 0.04379391670227051,
      "error": null
    },
    "assert decimal_To_Binary(11) == 1011": {
      "result": true,
      "time": 0.03929758071899414,
      "error": null
    },
    "assert decimal_To_Binary(12) == 1100": {
      "result": true,
      "time": 0.04507565498352051,
      "error": null
    },
    "assert decimal_To_Binary(13) == 1101": {
      "result": true,
      "time": 0.041394948959350586,
      "error": null
    },
    "assert decimal_To_Binary(6) == 110": {
      "result": true,
      "time": 0.04339337348937988,
      "error": null
    },
    "assert decimal_To_Binary(14) == 1110": {
      "result": true,
      "time": 0.04537081718444824,
      "error": null
    },
    "assert decimal_To_Binary(5) == 101": {
      "result": true,
      "time": 0.04144716262817383,
      "error": null
    },
    "assert decimal_To_Binary(15) == 1111": {
      "result": true,
      "time": 0.04372382164001465,
      "error": null
    },
    "assert decimal_To_Binary(8) == 1000": {
      "result": true,
      "time": 0.04493069648742676,
      "error": null
    },
    "assert decimal_To_Binary(9) == 1001": {
      "result": true,
      "time": 0.04303765296936035,
      "error": null
    },
    "assert decimal_To_Binary(2) == 10": {
      "result": true,
      "time": 0.04603147506713867,
      "error": null
    },
    "assert decimal_To_Binary(3) == 11": {
      "result": true,
      "time": 0.0462491512298584,
      "error": null
    },
    "assert decimal_To_Binary(4) == 100": {
      "result": true,
      "time": 0.044031620025634766,
      "error": null
    },
    "assert decimal_To_Binary(23) == 10111": {
      "result": true,
      "time": 0.039307594299316406,
      "error": null
    },
    "assert decimal_To_Binary(25) == 11001": {
      "result": true,
      "time": 0.04483318328857422,
      "error": null
    },
    "assert decimal_To_Binary(18) == 10010": {
      "result": true,
      "time": 0.04417085647583008,
      "error": null
    },
    "assert decimal_To_Binary(17) == 10001": {
      "result": true,
      "time": 0.05019688606262207,
      "error": null
    },
    "assert decimal_To_Binary(21) == 10101": {
      "result": true,
      "time": 0.06212878227233887,
      "error": null
    },
    "assert decimal_To_Binary(22) == 10110": {
      "result": true,
      "time": 0.06859421730041504,
      "error": null
    },
    "assert decimal_To_Binary(19) == 10011": {
      "result": true,
      "time": 0.06674504280090332,
      "error": null
    },
    "assert decimal_To_Binary(16) == 10000": {
      "result": true,
      "time": 0.06426000595092773,
      "error": null
    },
    "assert decimal_To_Binary(24) == 11000": {
      "result": true,
      "time": 0.0743093490600586,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}