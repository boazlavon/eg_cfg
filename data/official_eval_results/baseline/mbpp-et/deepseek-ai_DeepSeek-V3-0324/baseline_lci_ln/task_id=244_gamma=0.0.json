{
  "code": "def next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    current_num = num + 1\n    while True:\n        sqrt_val = current_num ** 0.5\n        is_perfect_square = sqrt_val == int(sqrt_val)\n        if is_perfect_square:\n            return current_num\n        current_num += 1",
  "results": {
    "assert next_Perfect_Square(35) == 36": {
      "result": true,
      "time": 0.036203622817993164,
      "error": null
    },
    "assert next_Perfect_Square(6) == 9": {
      "result": true,
      "time": 0.03373456001281738,
      "error": null
    },
    "assert next_Perfect_Square(9) == 16": {
      "result": true,
      "time": 0.0437474250793457,
      "error": null
    },
    "assert next_Perfect_Square(37) == 49": {
      "result": true,
      "time": 0.03267025947570801,
      "error": null
    },
    "assert next_Perfect_Square(33) == 36": {
      "result": true,
      "time": 0.03816699981689453,
      "error": null
    },
    "assert next_Perfect_Square(34) == 36": {
      "result": true,
      "time": 0.036342620849609375,
      "error": null
    },
    "assert next_Perfect_Square(39) == 49": {
      "result": true,
      "time": 0.034774065017700195,
      "error": null
    },
    "assert next_Perfect_Square(32) == 36": {
      "result": true,
      "time": 0.038112640380859375,
      "error": null
    },
    "assert next_Perfect_Square(31) == 36": {
      "result": true,
      "time": 0.03728127479553223,
      "error": null
    },
    "assert next_Perfect_Square(38) == 49": {
      "result": true,
      "time": 0.031032085418701172,
      "error": null
    },
    "assert next_Perfect_Square(36) == 49": {
      "result": true,
      "time": 0.03861284255981445,
      "error": null
    },
    "assert next_Perfect_Square(40) == 49": {
      "result": true,
      "time": 0.038597822189331055,
      "error": null
    },
    "assert next_Perfect_Square(30) == 36": {
      "result": true,
      "time": 0.03663969039916992,
      "error": null
    },
    "assert next_Perfect_Square(11) == 16": {
      "result": true,
      "time": 0.03753852844238281,
      "error": null
    },
    "assert next_Perfect_Square(3) == 4": {
      "result": true,
      "time": 0.03530693054199219,
      "error": null
    },
    "assert next_Perfect_Square(7) == 9": {
      "result": true,
      "time": 0.040198564529418945,
      "error": null
    },
    "assert next_Perfect_Square(2) == 4": {
      "result": true,
      "time": 0.03308439254760742,
      "error": null
    },
    "assert next_Perfect_Square(5) == 9": {
      "result": true,
      "time": 0.03696250915527344,
      "error": null
    },
    "assert next_Perfect_Square(1) == 4": {
      "result": true,
      "time": 0.04637408256530762,
      "error": null
    },
    "assert next_Perfect_Square(10) == 16": {
      "result": true,
      "time": 0.03426623344421387,
      "error": null
    },
    "assert next_Perfect_Square(4) == 9": {
      "result": true,
      "time": 0.036533355712890625,
      "error": null
    },
    "assert next_Perfect_Square(8) == 9": {
      "result": true,
      "time": 0.039420366287231445,
      "error": null
    },
    "assert next_Perfect_Square(14) == 16": {
      "result": true,
      "time": 0.04920792579650879,
      "error": null
    },
    "assert next_Perfect_Square(12) == 16": {
      "result": true,
      "time": 0.04001665115356445,
      "error": null
    },
    "assert next_Perfect_Square(13) == 16": {
      "result": true,
      "time": 0.04132676124572754,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}