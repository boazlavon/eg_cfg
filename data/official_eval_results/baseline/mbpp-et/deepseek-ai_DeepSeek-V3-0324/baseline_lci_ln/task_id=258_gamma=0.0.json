{
  "code": "def count_odd(lst):\n    is_odd = lambda x: x % 2 != 0\n    count = 0\n    for num in lst:\n        if is_odd(num):\n            count += 1\n    return count",
  "results": {
    "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4": {
      "result": true,
      "time": 0.03604555130004883,
      "error": null
    },
    "assert count_odd([10,15,14,13,-18,12,-20])==2": {
      "result": true,
      "time": 0.0371243953704834,
      "error": null
    },
    "assert count_odd([1, 2, 4, 8, 9])==2": {
      "result": true,
      "time": 0.042062997817993164,
      "error": null
    },
    "assert count_odd([2, 7, 2, 10, 12, 10, 11]) == 2": {
      "result": true,
      "time": 0.0353236198425293,
      "error": null
    },
    "assert count_odd([5, 1, 5, 7, 3, 7, 7]) == 7": {
      "result": true,
      "time": 0.0345759391784668,
      "error": null
    },
    "assert count_odd([6, 7, 2, 4, 3, 7, 11]) == 4": {
      "result": true,
      "time": 0.04039406776428223,
      "error": null
    },
    "assert count_odd([3, 6, 1, 6, 10, 10, 15]) == 3": {
      "result": true,
      "time": 0.041295766830444336,
      "error": null
    },
    "assert count_odd([6, 4, 6, 6, 2, 4, 9]) == 1": {
      "result": true,
      "time": 0.043437957763671875,
      "error": null
    },
    "assert count_odd([5, 3, 3, 4, 10, 7, 9]) == 5": {
      "result": true,
      "time": 0.04497647285461426,
      "error": null
    },
    "assert count_odd([5, 6, 4, 3, 5, 8, 8]) == 3": {
      "result": true,
      "time": 0.0383601188659668,
      "error": null
    },
    "assert count_odd([1, 6, 7, 3, 2, 7, 8]) == 4": {
      "result": true,
      "time": 0.04450798034667969,
      "error": null
    },
    "assert count_odd([2, 3, 5, 4, 11, 9, 7]) == 5": {
      "result": true,
      "time": 0.04444718360900879,
      "error": null
    },
    "assert count_odd([6, 2, 7, 6, 2, 13, 5]) == 3": {
      "result": true,
      "time": 0.041879892349243164,
      "error": null
    },
    "assert count_odd([6, 5, 1, 7, 5, 4, 9]) == 5": {
      "result": true,
      "time": 0.041078805923461914,
      "error": null
    },
    "assert count_odd([2, 6, 7, 7, 8, 8, 8]) == 2": {
      "result": true,
      "time": 0.04185891151428223,
      "error": null
    },
    "assert count_odd([1, 6, 7, 2, 10, 12, 8]) == 2": {
      "result": true,
      "time": 0.04403996467590332,
      "error": null
    },
    "assert count_odd([6, 2, 5, 10, 3, 10, 11]) == 3": {
      "result": true,
      "time": 0.04701113700866699,
      "error": null
    },
    "assert count_odd([3, 5, 7, 5, 3, 11, 11]) == 7": {
      "result": true,
      "time": 0.0499420166015625,
      "error": null
    },
    "assert count_odd([3, 3, 1, 4, 9, 4, 9]) == 5": {
      "result": true,
      "time": 0.041062355041503906,
      "error": null
    },
    "assert count_odd([4, 6, 7, 1, 7, 5, 12]) == 4": {
      "result": true,
      "time": 0.04603242874145508,
      "error": null
    },
    "assert count_odd([6, 2, 3, 2, 3, 11, 15]) == 4": {
      "result": true,
      "time": 0.04299521446228027,
      "error": null
    },
    "assert count_odd([1, 2, 5, 2, 3, 7, 11]) == 5": {
      "result": true,
      "time": 0.036925315856933594,
      "error": null
    },
    "assert count_odd([6, 5, 6, 7, 4, 13, 11]) == 4": {
      "result": true,
      "time": 0.03967094421386719,
      "error": null
    },
    "assert count_odd([4, 4, 3, 1, 7, 5, 10]) == 4": {
      "result": true,
      "time": 0.04420971870422363,
      "error": null
    },
    "assert count_odd([2, 7, 8, 4, 12, 12, 15]) == 2": {
      "result": true,
      "time": 0.04264473915100098,
      "error": null
    },
    "assert count_odd([3, 4, 2, 5, 12, 4, 11]) == 3": {
      "result": true,
      "time": 0.039022207260131836,
      "error": null
    },
    "assert count_odd([3, 1, 1, 2, 10, 5, 11]) == 5": {
      "result": true,
      "time": 0.041372060775756836,
      "error": null
    },
    "assert count_odd([4, 6, 3, 5, 5, 3, 12]) == 4": {
      "result": true,
      "time": 0.03828120231628418,
      "error": null
    },
    "assert count_odd([6, 2, 5, 9, 9, 12, 15]) == 4": {
      "result": true,
      "time": 0.04571843147277832,
      "error": null
    },
    "assert count_odd([6, 5, 8, 8, 12, 4, 5]) == 2": {
      "result": true,
      "time": 0.04443168640136719,
      "error": null
    },
    "assert count_odd([4, 2, 1, 4, 2, 8, 10]) == 1": {
      "result": true,
      "time": 0.042641401290893555,
      "error": null
    },
    "assert count_odd([2, 7, 7, 3, 6, 11, 5]) == 5": {
      "result": true,
      "time": 0.04429507255554199,
      "error": null
    },
    "assert count_odd([4, 7, 4, 6, 9, 10, 14]) == 2": {
      "result": true,
      "time": 0.03873944282531738,
      "error": null
    },
    "assert count_odd([6, 7, 2, 7, 3, 6, 11]) == 4": {
      "result": true,
      "time": 0.044801950454711914,
      "error": null
    },
    "assert count_odd([3, 2, 5, 1, 10, 9, 8]) == 4": {
      "result": true,
      "time": 0.04497051239013672,
      "error": null
    },
    "assert count_odd([5, 1, 5, 1, 6, 10, 13]) == 5": {
      "result": true,
      "time": 0.039214134216308594,
      "error": null
    },
    "assert count_odd([13, 14, 17, 13, -14, 8, -16]) == 3": {
      "result": true,
      "time": 0.044501543045043945,
      "error": null
    },
    "assert count_odd([9, 13, 19, 16, -14, 17, -18]) == 4": {
      "result": true,
      "time": 0.03537178039550781,
      "error": null
    },
    "assert count_odd([8, 16, 17, 18, -14, 10, -20]) == 1": {
      "result": true,
      "time": 0.04535722732543945,
      "error": null
    },
    "assert count_odd([8, 14, 17, 13, -18, 16, -19]) == 3": {
      "result": true,
      "time": 0.0405731201171875,
      "error": null
    },
    "assert count_odd([14, 10, 17, 18, -17, 10, -16]) == 2": {
      "result": true,
      "time": 0.04846787452697754,
      "error": null
    },
    "assert count_odd([6, 12, 14, 15, -17, 8, -17]) == 3": {
      "result": true,
      "time": 0.0429682731628418,
      "error": null
    },
    "assert count_odd([11, 18, 16, 16, -22, 9, -21]) == 3": {
      "result": true,
      "time": 0.03988146781921387,
      "error": null
    },
    "assert count_odd([10, 16, 16, 11, -19, 11, -21]) == 4": {
      "result": true,
      "time": 0.03887534141540527,
      "error": null
    },
    "assert count_odd([5, 15, 10, 15, -21, 13, -19]) == 6": {
      "result": true,
      "time": 0.043741464614868164,
      "error": null
    },
    "assert count_odd([12, 20, 13, 12, -16, 14, -20]) == 1": {
      "result": true,
      "time": 0.03932690620422363,
      "error": null
    },
    "assert count_odd([6, 14, 10, 11, -17, 15, -23]) == 4": {
      "result": true,
      "time": 0.05025815963745117,
      "error": null
    },
    "assert count_odd([15, 15, 18, 15, -19, 7, -24]) == 5": {
      "result": true,
      "time": 0.0445401668548584,
      "error": null
    },
    "assert count_odd([10, 12, 18, 8, -14, 17, -18]) == 1": {
      "result": true,
      "time": 0.044773101806640625,
      "error": null
    },
    "assert count_odd([12, 17, 17, 16, -23, 15, -25]) == 5": {
      "result": true,
      "time": 0.04623985290527344,
      "error": null
    },
    "assert count_odd([11, 18, 12, 15, -15, 16, -15]) == 4": {
      "result": true,
      "time": 0.042885780334472656,
      "error": null
    },
    "assert count_odd([15, 18, 15, 15, -16, 17, -22]) == 4": {
      "result": true,
      "time": 0.04241490364074707,
      "error": null
    },
    "assert count_odd([14, 16, 9, 18, -18, 17, -20]) == 2": {
      "result": true,
      "time": 0.04100823402404785,
      "error": null
    },
    "assert count_odd([9, 20, 17, 13, -17, 14, -15]) == 5": {
      "result": true,
      "time": 0.04361748695373535,
      "error": null
    },
    "assert count_odd([8, 14, 11, 16, -20, 8, -22]) == 1": {
      "result": true,
      "time": 0.04000234603881836,
      "error": null
    },
    "assert count_odd([10, 10, 9, 14, -14, 9, -25]) == 3": {
      "result": true,
      "time": 0.04359149932861328,
      "error": null
    },
    "assert count_odd([14, 11, 17, 10, -15, 12, -23]) == 4": {
      "result": true,
      "time": 0.04474210739135742,
      "error": null
    },
    "assert count_odd([11, 15, 15, 17, -19, 17, -25]) == 7": {
      "result": true,
      "time": 0.0425105094909668,
      "error": null
    },
    "assert count_odd([15, 17, 17, 16, -18, 12, -15]) == 4": {
      "result": true,
      "time": 0.03713726997375488,
      "error": null
    },
    "assert count_odd([5, 17, 9, 17, -18, 14, -20]) == 4": {
      "result": true,
      "time": 0.0465242862701416,
      "error": null
    },
    "assert count_odd([5, 10, 10, 9, -14, 13, -22]) == 3": {
      "result": true,
      "time": 0.03424406051635742,
      "error": null
    },
    "assert count_odd([12, 14, 13, 16, -15, 12, -23]) == 3": {
      "result": true,
      "time": 0.04252290725708008,
      "error": null
    },
    "assert count_odd([5, 18, 16, 10, -22, 9, -19]) == 3": {
      "result": true,
      "time": 0.049463748931884766,
      "error": null
    },
    "assert count_odd([11, 10, 14, 14, -20, 7, -21]) == 3": {
      "result": true,
      "time": 0.03720808029174805,
      "error": null
    },
    "assert count_odd([12, 10, 11, 15, -23, 14, -22]) == 3": {
      "result": true,
      "time": 0.042311668395996094,
      "error": null
    },
    "assert count_odd([8, 17, 17, 15, -22, 15, -20]) == 4": {
      "result": true,
      "time": 0.04522442817687988,
      "error": null
    },
    "assert count_odd([8, 12, 12, 10, -13, 15, -19]) == 3": {
      "result": true,
      "time": 0.04681897163391113,
      "error": null
    },
    "assert count_odd([5, 17, 14, 8, -14, 9, -22]) == 3": {
      "result": true,
      "time": 0.06334424018859863,
      "error": null
    },
    "assert count_odd([5, 12, 11, 13, -18, 17, -15]) == 5": {
      "result": true,
      "time": 0.04740762710571289,
      "error": null
    },
    "assert count_odd([2, 3, 2, 5, 11]) == 3": {
      "result": true,
      "time": 0.061255455017089844,
      "error": null
    },
    "assert count_odd([3, 1, 1, 11, 13]) == 5": {
      "result": true,
      "time": 0.04482865333557129,
      "error": null
    },
    "assert count_odd([6, 1, 6, 11, 10]) == 2": {
      "result": true,
      "time": 0.0639955997467041,
      "error": null
    },
    "assert count_odd([2, 6, 2, 7, 11]) == 2": {
      "result": true,
      "time": 0.05263876914978027,
      "error": null
    },
    "assert count_odd([1, 5, 4, 5, 13]) == 4": {
      "result": true,
      "time": 0.05289721488952637,
      "error": null
    },
    "assert count_odd([1, 4, 8, 13, 7]) == 3": {
      "result": true,
      "time": 0.058695077896118164,
      "error": null
    },
    "assert count_odd([3, 2, 4, 4, 10]) == 1": {
      "result": true,
      "time": 0.04960036277770996,
      "error": null
    },
    "assert count_odd([4, 6, 4, 3, 12]) == 1": {
      "result": true,
      "time": 0.06511688232421875,
      "error": null
    },
    "assert count_odd([1, 7, 6, 13, 13]) == 4": {
      "result": true,
      "time": 0.05117535591125488,
      "error": null
    },
    "assert count_odd([3, 7, 2, 5, 14]) == 3": {
      "result": true,
      "time": 0.06449389457702637,
      "error": null
    },
    "assert count_odd([2, 2, 5, 4, 9]) == 2": {
      "result": true,
      "time": 0.04820108413696289,
      "error": null
    },
    "assert count_odd([2, 6, 2, 9, 8]) == 1": {
      "result": true,
      "time": 0.04870867729187012,
      "error": null
    },
    "assert count_odd([1, 3, 4, 4, 10]) == 2": {
      "result": true,
      "time": 0.050611019134521484,
      "error": null
    },
    "assert count_odd([5, 7, 4, 4, 7]) == 3": {
      "result": true,
      "time": 0.04892683029174805,
      "error": null
    },
    "assert count_odd([5, 2, 1, 7, 9]) == 4": {
      "result": true,
      "time": 0.056499481201171875,
      "error": null
    },
    "assert count_odd([5, 6, 3, 8, 4]) == 2": {
      "result": true,
      "time": 0.061342716217041016,
      "error": null
    },
    "assert count_odd([2, 3, 8, 10, 7]) == 2": {
      "result": true,
      "time": 0.052468061447143555,
      "error": null
    },
    "assert count_odd([1, 4, 5, 13, 5]) == 4": {
      "result": true,
      "time": 0.05394268035888672,
      "error": null
    },
    "assert count_odd([6, 2, 2, 8, 4]) == 0": {
      "result": true,
      "time": 0.045664310455322266,
      "error": null
    },
    "assert count_odd([4, 3, 6, 8, 12]) == 1": {
      "result": true,
      "time": 0.05336356163024902,
      "error": null
    },
    "assert count_odd([1, 4, 8, 12, 11]) == 2": {
      "result": true,
      "time": 0.05047774314880371,
      "error": null
    },
    "assert count_odd([4, 3, 6, 8, 11]) == 2": {
      "result": true,
      "time": 0.0501561164855957,
      "error": null
    },
    "assert count_odd([1, 4, 5, 11, 9]) == 4": {
      "result": true,
      "time": 0.05887198448181152,
      "error": null
    },
    "assert count_odd([2, 3, 5, 4, 8]) == 2": {
      "result": true,
      "time": 0.04910159111022949,
      "error": null
    },
    "assert count_odd([3, 2, 3, 7, 14]) == 3": {
      "result": true,
      "time": 0.06056380271911621,
      "error": null
    },
    "assert count_odd([3, 1, 1, 12, 13]) == 4": {
      "result": true,
      "time": 0.048931121826171875,
      "error": null
    },
    "assert count_odd([4, 3, 3, 9, 7]) == 4": {
      "result": true,
      "time": 0.05497908592224121,
      "error": null
    },
    "assert count_odd([5, 1, 7, 7, 6]) == 4": {
      "result": true,
      "time": 0.048007965087890625,
      "error": null
    },
    "assert count_odd([1, 5, 5, 10, 13]) == 4": {
      "result": true,
      "time": 0.05044198036193848,
      "error": null
    },
    "assert count_odd([1, 7, 6, 4, 11]) == 3": {
      "result": true,
      "time": 0.04742741584777832,
      "error": null
    },
    "assert count_odd([1, 1, 4, 7, 7]) == 4": {
      "result": true,
      "time": 0.05436825752258301,
      "error": null
    },
    "assert count_odd([3, 6, 6, 5, 11]) == 3": {
      "result": true,
      "time": 0.0505063533782959,
      "error": null
    },
    "assert count_odd([2, 7, 8, 12, 12]) == 1": {
      "result": true,
      "time": 0.06328177452087402,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}