{
  "code": "def min_of_three(a, b, c):\n    # Compare the first two numbers to find the smaller one\n    if a < b:\n        smaller = a\n    else:\n        smaller = b\n    # Compare the smaller of the first two with the third number\n    if smaller < c:\n        minimum = smaller\n    else:\n        minimum = c\n    return minimum",
  "results": {
    "assert min_of_three(10,20,0)==0": {
      "result": true,
      "time": 0.0618438720703125,
      "error": null
    },
    "assert min_of_three(19,15,18)==15": {
      "result": true,
      "time": 0.05453681945800781,
      "error": null
    },
    "assert min_of_three(-10,-20,-30)==-30": {
      "result": true,
      "time": 0.0677032470703125,
      "error": null
    },
    "assert min_of_three(9, 25, 4) == 4": {
      "result": true,
      "time": 0.05756402015686035,
      "error": null
    },
    "assert min_of_three(11, 19, 5) == 5": {
      "result": true,
      "time": 0.061496734619140625,
      "error": null
    },
    "assert min_of_three(12, 17, 4) == 4": {
      "result": true,
      "time": 0.05158829689025879,
      "error": null
    },
    "assert min_of_three(13, 15, 5) == 5": {
      "result": true,
      "time": 0.06769537925720215,
      "error": null
    },
    "assert min_of_three(6, 24, 2) == 2": {
      "result": true,
      "time": 0.0494074821472168,
      "error": null
    },
    "assert min_of_three(15, 16, 4) == 4": {
      "result": true,
      "time": 0.05788254737854004,
      "error": null
    },
    "assert min_of_three(10, 18, 4) == 4": {
      "result": true,
      "time": 0.05061745643615723,
      "error": null
    },
    "assert min_of_three(7, 23, 5) == 5": {
      "result": true,
      "time": 0.04802250862121582,
      "error": null
    },
    "assert min_of_three(12, 15, 2) == 2": {
      "result": true,
      "time": 0.04448676109313965,
      "error": null
    },
    "assert min_of_three(11, 24, 4) == 4": {
      "result": true,
      "time": 0.036087989807128906,
      "error": null
    },
    "assert min_of_three(7, 25, 1) == 1": {
      "result": true,
      "time": 0.04069328308105469,
      "error": null
    },
    "assert min_of_three(10, 24, 3) == 3": {
      "result": true,
      "time": 0.050189971923828125,
      "error": null
    },
    "assert min_of_three(11, 22, 5) == 5": {
      "result": true,
      "time": 0.04430985450744629,
      "error": null
    },
    "assert min_of_three(12, 24, 3) == 3": {
      "result": true,
      "time": 0.04110527038574219,
      "error": null
    },
    "assert min_of_three(7, 17, 5) == 5": {
      "result": true,
      "time": 0.04070854187011719,
      "error": null
    },
    "assert min_of_three(10, 23, 5) == 5": {
      "result": true,
      "time": 0.04130697250366211,
      "error": null
    },
    "assert min_of_three(7, 18, 4) == 4": {
      "result": true,
      "time": 0.03871870040893555,
      "error": null
    },
    "assert min_of_three(8, 19, 4) == 4": {
      "result": true,
      "time": 0.05003809928894043,
      "error": null
    },
    "assert min_of_three(6, 23, 2) == 2": {
      "result": true,
      "time": 0.0487360954284668,
      "error": null
    },
    "assert min_of_three(9, 24, 3) == 3": {
      "result": true,
      "time": 0.04918932914733887,
      "error": null
    },
    "assert min_of_three(10, 22, 2) == 2": {
      "result": true,
      "time": 0.04623723030090332,
      "error": null
    },
    "assert min_of_three(9, 19, 2) == 2": {
      "result": true,
      "time": 0.04433012008666992,
      "error": null
    },
    "assert min_of_three(6, 16, 2) == 2": {
      "result": true,
      "time": 0.042411088943481445,
      "error": null
    },
    "assert min_of_three(15, 18, 5) == 5": {
      "result": true,
      "time": 0.03762245178222656,
      "error": null
    },
    "assert min_of_three(6, 15, 3) == 3": {
      "result": true,
      "time": 0.04142498970031738,
      "error": null
    },
    "assert min_of_three(5, 20, 5) == 5": {
      "result": true,
      "time": 0.043827056884765625,
      "error": null
    },
    "assert min_of_three(8, 21, 1) == 1": {
      "result": true,
      "time": 0.04257988929748535,
      "error": null
    },
    "assert min_of_three(7, 21, 2) == 2": {
      "result": true,
      "time": 0.04239368438720703,
      "error": null
    },
    "assert min_of_three(9, 16, 1) == 1": {
      "result": true,
      "time": 0.05162501335144043,
      "error": null
    },
    "assert min_of_three(5, 24, 3) == 3": {
      "result": true,
      "time": 0.03586006164550781,
      "error": null
    },
    "assert min_of_three(13, 21, 5) == 5": {
      "result": true,
      "time": 0.029077529907226562,
      "error": null
    },
    "assert min_of_three(15, 18, 3) == 3": {
      "result": true,
      "time": 0.037515878677368164,
      "error": null
    },
    "assert min_of_three(11, 17, 5) == 5": {
      "result": true,
      "time": 0.03571462631225586,
      "error": null
    },
    "assert min_of_three(20, 19, 18) == 18": {
      "result": true,
      "time": 0.03691387176513672,
      "error": null
    },
    "assert min_of_three(21, 11, 19) == 11": {
      "result": true,
      "time": 0.0354456901550293,
      "error": null
    },
    "assert min_of_three(14, 17, 17) == 14": {
      "result": true,
      "time": 0.03982973098754883,
      "error": null
    },
    "assert min_of_three(24, 15, 16) == 15": {
      "result": true,
      "time": 0.040511131286621094,
      "error": null
    },
    "assert min_of_three(18, 16, 13) == 13": {
      "result": true,
      "time": 0.03809356689453125,
      "error": null
    },
    "assert min_of_three(23, 19, 18) == 18": {
      "result": true,
      "time": 0.049971580505371094,
      "error": null
    },
    "assert min_of_three(20, 12, 21) == 12": {
      "result": true,
      "time": 0.033644914627075195,
      "error": null
    },
    "assert min_of_three(20, 17, 21) == 17": {
      "result": true,
      "time": 0.035468339920043945,
      "error": null
    },
    "assert min_of_three(17, 15, 13) == 13": {
      "result": true,
      "time": 0.03794717788696289,
      "error": null
    },
    "assert min_of_three(19, 12, 17) == 12": {
      "result": true,
      "time": 0.034543752670288086,
      "error": null
    },
    "assert min_of_three(20, 12, 17) == 12": {
      "result": true,
      "time": 0.031716346740722656,
      "error": null
    },
    "assert min_of_three(21, 13, 16) == 13": {
      "result": true,
      "time": 0.03584027290344238,
      "error": null
    },
    "assert min_of_three(18, 17, 18) == 17": {
      "result": true,
      "time": 0.03712630271911621,
      "error": null
    },
    "assert min_of_three(24, 18, 14) == 14": {
      "result": true,
      "time": 0.03353452682495117,
      "error": null
    },
    "assert min_of_three(20, 10, 17) == 10": {
      "result": true,
      "time": 0.036814212799072266,
      "error": null
    },
    "assert min_of_three(24, 20, 16) == 16": {
      "result": true,
      "time": 0.03769254684448242,
      "error": null
    },
    "assert min_of_three(17, 19, 19) == 17": {
      "result": true,
      "time": 0.03478598594665527,
      "error": null
    },
    "assert min_of_three(16, 11, 23) == 11": {
      "result": true,
      "time": 0.03798222541809082,
      "error": null
    },
    "assert min_of_three(20, 12, 15) == 12": {
      "result": true,
      "time": 0.05366969108581543,
      "error": null
    },
    "assert min_of_three(19, 17, 21) == 17": {
      "result": true,
      "time": 0.03565645217895508,
      "error": null
    },
    "assert min_of_three(21, 18, 22) == 18": {
      "result": true,
      "time": 0.032827138900756836,
      "error": null
    },
    "assert min_of_three(19, 12, 19) == 12": {
      "result": true,
      "time": 0.05243968963623047,
      "error": null
    },
    "assert min_of_three(20, 20, 20) == 20": {
      "result": true,
      "time": 0.039937496185302734,
      "error": null
    },
    "assert min_of_three(14, 17, 14) == 14": {
      "result": true,
      "time": 0.04130887985229492,
      "error": null
    },
    "assert min_of_three(23, 18, 21) == 18": {
      "result": true,
      "time": 0.04026317596435547,
      "error": null
    },
    "assert min_of_three(20, 19, 16) == 16": {
      "result": true,
      "time": 0.03957033157348633,
      "error": null
    },
    "assert min_of_three(14, 12, 23) == 12": {
      "result": true,
      "time": 0.035742759704589844,
      "error": null
    },
    "assert min_of_three(14, 14, 13) == 13": {
      "result": true,
      "time": 0.04204678535461426,
      "error": null
    },
    "assert min_of_three(19, 15, 17) == 15": {
      "result": true,
      "time": 0.037331581115722656,
      "error": null
    },
    "assert min_of_three(22, 12, 18) == 12": {
      "result": true,
      "time": 0.03692817687988281,
      "error": null
    },
    "assert min_of_three(24, 10, 22) == 10": {
      "result": true,
      "time": 0.04444766044616699,
      "error": null
    },
    "assert min_of_three(18, 10, 14) == 10": {
      "result": true,
      "time": 0.04506492614746094,
      "error": null
    },
    "assert min_of_three(24, 20, 23) == 20": {
      "result": true,
      "time": 0.03423738479614258,
      "error": null
    },
    "assert min_of_three(-14, -18, -32) == -32": {
      "result": true,
      "time": 0.03714132308959961,
      "error": null
    },
    "assert min_of_three(-14, -20, -34) == -34": {
      "result": true,
      "time": 0.035408735275268555,
      "error": null
    },
    "assert min_of_three(-6, -22, -32) == -32": {
      "result": true,
      "time": 0.041710853576660156,
      "error": null
    },
    "assert min_of_three(-13, -19, -32) == -32": {
      "result": true,
      "time": 0.04195141792297363,
      "error": null
    },
    "assert min_of_three(-8, -23, -31) == -31": {
      "result": true,
      "time": 0.03851580619812012,
      "error": null
    },
    "assert min_of_three(-10, -19, -33) == -33": {
      "result": true,
      "time": 0.0438692569732666,
      "error": null
    },
    "assert min_of_three(-13, -24, -27) == -27": {
      "result": true,
      "time": 0.04075813293457031,
      "error": null
    },
    "assert min_of_three(-14, -22, -31) == -31": {
      "result": true,
      "time": 0.034715890884399414,
      "error": null
    },
    "assert min_of_three(-8, -24, -26) == -26": {
      "result": true,
      "time": 0.039254188537597656,
      "error": null
    },
    "assert min_of_three(-13, -22, -25) == -25": {
      "result": true,
      "time": 0.0380551815032959,
      "error": null
    },
    "assert min_of_three(-5, -25, -35) == -35": {
      "result": true,
      "time": 0.03660392761230469,
      "error": null
    },
    "assert min_of_three(-8, -18, -26) == -26": {
      "result": true,
      "time": 0.03350949287414551,
      "error": null
    },
    "assert min_of_three(-13, -22, -28) == -28": {
      "result": true,
      "time": 0.0390162467956543,
      "error": null
    },
    "assert min_of_three(-15, -23, -28) == -28": {
      "result": true,
      "time": 0.04009723663330078,
      "error": null
    },
    "assert min_of_three(-8, -15, -34) == -34": {
      "result": true,
      "time": 0.037227630615234375,
      "error": null
    },
    "assert min_of_three(-12, -21, -34) == -34": {
      "result": true,
      "time": 0.03769278526306152,
      "error": null
    },
    "assert min_of_three(-8, -16, -27) == -27": {
      "result": true,
      "time": 0.04953622817993164,
      "error": null
    },
    "assert min_of_three(-6, -21, -27) == -27": {
      "result": true,
      "time": 0.04068255424499512,
      "error": null
    },
    "assert min_of_three(-7, -23, -34) == -34": {
      "result": true,
      "time": 0.03800249099731445,
      "error": null
    },
    "assert min_of_three(-5, -15, -33) == -33": {
      "result": true,
      "time": 0.04117870330810547,
      "error": null
    },
    "assert min_of_three(-6, -21, -26) == -26": {
      "result": true,
      "time": 0.04053521156311035,
      "error": null
    },
    "assert min_of_three(-6, -15, -33) == -33": {
      "result": true,
      "time": 0.03744649887084961,
      "error": null
    },
    "assert min_of_three(-11, -16, -30) == -30": {
      "result": true,
      "time": 0.050171852111816406,
      "error": null
    },
    "assert min_of_three(-8, -24, -35) == -35": {
      "result": true,
      "time": 0.03317999839782715,
      "error": null
    },
    "assert min_of_three(-10, -21, -31) == -31": {
      "result": true,
      "time": 0.03730463981628418,
      "error": null
    },
    "assert min_of_three(-5, -17, -30) == -30": {
      "result": true,
      "time": 0.0339055061340332,
      "error": null
    },
    "assert min_of_three(-13, -15, -32) == -32": {
      "result": true,
      "time": 0.04143500328063965,
      "error": null
    },
    "assert min_of_three(-15, -24, -31) == -31": {
      "result": true,
      "time": 0.03824257850646973,
      "error": null
    },
    "assert min_of_three(-12, -20, -28) == -28": {
      "result": true,
      "time": 0.03735041618347168,
      "error": null
    },
    "assert min_of_three(-14, -17, -30) == -30": {
      "result": true,
      "time": 0.04233598709106445,
      "error": null
    },
    "assert min_of_three(-6, -19, -31) == -31": {
      "result": true,
      "time": 0.052170753479003906,
      "error": null
    },
    "assert min_of_three(-14, -21, -25) == -25": {
      "result": true,
      "time": 0.04426288604736328,
      "error": null
    },
    "assert min_of_three(-13, -22, -35) == -35": {
      "result": true,
      "time": 0.04666280746459961,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}