{
  "code": "def hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula H_n = n(2n - 1)\n    term1 = 2 * n\n    term2 = term1 - 1\n    result = n * term2\n    return result",
  "results": {
    "assert hexagonal_num(10) == 190": {
      "result": true,
      "time": 0.03752398490905762,
      "error": null
    },
    "assert hexagonal_num(5) == 45": {
      "result": true,
      "time": 0.035867929458618164,
      "error": null
    },
    "assert hexagonal_num(7) == 91": {
      "result": true,
      "time": 0.03455781936645508,
      "error": null
    },
    "assert hexagonal_num(14) == 378": {
      "result": true,
      "time": 0.04037308692932129,
      "error": null
    },
    "assert hexagonal_num(8) == 120": {
      "result": true,
      "time": 0.03449273109436035,
      "error": null
    },
    "assert hexagonal_num(13) == 325": {
      "result": true,
      "time": 0.03851723670959473,
      "error": null
    },
    "assert hexagonal_num(15) == 435": {
      "result": true,
      "time": 0.03589057922363281,
      "error": null
    },
    "assert hexagonal_num(12) == 276": {
      "result": true,
      "time": 0.03769397735595703,
      "error": null
    },
    "assert hexagonal_num(11) == 231": {
      "result": true,
      "time": 0.03876948356628418,
      "error": null
    },
    "assert hexagonal_num(9) == 153": {
      "result": true,
      "time": 0.03576850891113281,
      "error": null
    },
    "assert hexagonal_num(4) == 28": {
      "result": true,
      "time": 0.03599882125854492,
      "error": null
    },
    "assert hexagonal_num(3) == 15": {
      "result": true,
      "time": 0.04043745994567871,
      "error": null
    },
    "assert hexagonal_num(6) == 66": {
      "result": true,
      "time": 0.03932929039001465,
      "error": null
    },
    "assert hexagonal_num(2) == 6": {
      "result": true,
      "time": 0.03699231147766113,
      "error": null
    },
    "assert hexagonal_num(1) == 1": {
      "result": true,
      "time": 0.0441739559173584,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}