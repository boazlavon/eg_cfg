{
  "code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    while True:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial = factorial * i\n        if factorial % x == 0:\n            return n\n        n = n + 1",
  "results": {
    "assert first_Factorial_Divisible_Number(10) == 5": {
      "result": true,
      "time": 0.04182767868041992,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(15) == 5": {
      "result": true,
      "time": 0.040650129318237305,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(5) == 4": {
      "result": false,
      "time": 0.033412933349609375,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(13) == 12": {
      "result": false,
      "time": 0.03980565071105957,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(6) == 3": {
      "result": true,
      "time": 0.034754037857055664,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(8) == 4": {
      "result": true,
      "time": 0.04097247123718262,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(14) == 7": {
      "result": true,
      "time": 0.03363800048828125,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(7) == 6": {
      "result": false,
      "time": 0.040662288665771484,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(12) == 4": {
      "result": true,
      "time": 0.041358232498168945,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(11) == 10": {
      "result": false,
      "time": 0.034450531005859375,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(9) == 6": {
      "result": true,
      "time": 0.03758406639099121,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(20) == 5": {
      "result": true,
      "time": 0.040585994720458984,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(19) == 18": {
      "result": false,
      "time": 0.03457283973693848,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(18) == 6": {
      "result": true,
      "time": 0.04089713096618652,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(16) == 6": {
      "result": true,
      "time": 0.04422926902770996,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(17) == 16": {
      "result": false,
      "time": 0.049738407135009766,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(1) == 1": {
      "result": true,
      "time": 0.03533649444580078,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(2) == 1": {
      "result": false,
      "time": 0.03851962089538574,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(4) == 3": {
      "result": false,
      "time": 0.038442373275756836,
      "error": null
    },
    "assert first_Factorial_Divisible_Number(3) == 2": {
      "result": false,
      "time": 0.037496089935302734,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.55,
  "general_error": "",
  "has_testcase_error": false
}