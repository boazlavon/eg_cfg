{
  "code": "def next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power = power * 2\n    return power",
  "results": {
    "assert next_Power_Of_2(0) == 1": {
      "result": true,
      "time": 0.04400467872619629,
      "error": null
    },
    "assert next_Power_Of_2(5) == 8": {
      "result": true,
      "time": 0.03928375244140625,
      "error": null
    },
    "assert next_Power_Of_2(17) == 32": {
      "result": true,
      "time": 0.04519915580749512,
      "error": null
    },
    "assert next_Power_Of_2(2) == 2": {
      "result": true,
      "time": 0.0378572940826416,
      "error": null
    },
    "assert next_Power_Of_2(1) == 1": {
      "result": true,
      "time": 0.03398728370666504,
      "error": null
    },
    "assert next_Power_Of_2(3) == 4": {
      "result": true,
      "time": 0.040340423583984375,
      "error": null
    },
    "assert next_Power_Of_2(4) == 4": {
      "result": true,
      "time": 0.04163336753845215,
      "error": null
    },
    "assert next_Power_Of_2(10) == 16": {
      "result": true,
      "time": 0.038236141204833984,
      "error": null
    },
    "assert next_Power_Of_2(9) == 16": {
      "result": true,
      "time": 0.042371511459350586,
      "error": null
    },
    "assert next_Power_Of_2(6) == 8": {
      "result": true,
      "time": 0.03831028938293457,
      "error": null
    },
    "assert next_Power_Of_2(8) == 8": {
      "result": true,
      "time": 0.04197382926940918,
      "error": null
    },
    "assert next_Power_Of_2(7) == 8": {
      "result": true,
      "time": 0.03910112380981445,
      "error": null
    },
    "assert next_Power_Of_2(13) == 16": {
      "result": true,
      "time": 0.03970146179199219,
      "error": null
    },
    "assert next_Power_Of_2(14) == 16": {
      "result": true,
      "time": 0.03960061073303223,
      "error": null
    },
    "assert next_Power_Of_2(19) == 32": {
      "result": true,
      "time": 0.05102729797363281,
      "error": null
    },
    "assert next_Power_Of_2(18) == 32": {
      "result": true,
      "time": 0.03561663627624512,
      "error": null
    },
    "assert next_Power_Of_2(15) == 16": {
      "result": true,
      "time": 0.04471778869628906,
      "error": null
    },
    "assert next_Power_Of_2(22) == 32": {
      "result": true,
      "time": 0.04292917251586914,
      "error": null
    },
    "assert next_Power_Of_2(12) == 16": {
      "result": true,
      "time": 0.046864986419677734,
      "error": null
    },
    "assert next_Power_Of_2(20) == 32": {
      "result": true,
      "time": 0.033901214599609375,
      "error": null
    },
    "assert next_Power_Of_2(21) == 32": {
      "result": true,
      "time": 0.03931450843811035,
      "error": null
    },
    "assert next_Power_Of_2(16) == 16": {
      "result": true,
      "time": 0.03828692436218262,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}