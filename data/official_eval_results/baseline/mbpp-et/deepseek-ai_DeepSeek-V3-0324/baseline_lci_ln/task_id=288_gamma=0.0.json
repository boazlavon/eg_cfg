{
  "code": "def modular_inverse(arr, n, p):\n    count = 0\n    for i in range(n):\n        current_element = arr[i]\n        if current_element == 0:\n            continue\n        inverse = pow(current_element, p - 2, p)\n        if inverse == current_element:\n            count += 1\n    return count",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": true,
      "time": 0.035088300704956055,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": true,
      "time": 0.03369402885437012,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": false,
      "time": 0.03792715072631836,
      "error": null
    },
    "assert modular_inverse([2, 2, 2, 4], 4, 2) == 0": {
      "result": true,
      "time": 0.04103446006774902,
      "error": null
    },
    "assert modular_inverse([4, 4, 9, 3], 3, 6) == 0": {
      "result": false,
      "time": 0.03774404525756836,
      "error": null
    },
    "assert modular_inverse([3, 6, 7, 4], 4, 3) == 2": {
      "result": false,
      "time": 0.03432965278625488,
      "error": null
    },
    "assert modular_inverse([2, 2, 5, 7], 3, 4) == 1": {
      "result": false,
      "time": 0.03407144546508789,
      "error": null
    },
    "assert modular_inverse([5, 4, 2, 1], 2, 3) == 2": {
      "result": false,
      "time": 0.0359647274017334,
      "error": null
    },
    "assert modular_inverse([6, 4, 6, 10], 3, 7) == 2": {
      "result": true,
      "time": 0.03518080711364746,
      "error": null
    },
    "assert modular_inverse([3, 2, 3, 9], 4, 8) == 3": {
      "result": false,
      "time": 0.0353999137878418,
      "error": null
    },
    "assert modular_inverse([2, 5, 5, 3], 3, 8) == 2": {
      "result": false,
      "time": 0.035355329513549805,
      "error": null
    },
    "assert modular_inverse([6, 9, 7, 2], 4, 2) == 2": {
      "result": false,
      "time": 0.04141712188720703,
      "error": null
    },
    "assert modular_inverse([2, 3, 5, 8], 2, 12) == 0": {
      "result": true,
      "time": 0.034687042236328125,
      "error": null
    },
    "assert modular_inverse([6, 8, 5, 1], 4, 8) == 2": {
      "result": false,
      "time": 0.03388047218322754,
      "error": null
    },
    "assert modular_inverse([1, 3, 6, 8], 1, 10) == 1": {
      "result": true,
      "time": 0.03948473930358887,
      "error": null
    },
    "assert modular_inverse([1, 1, 5, 4], 2, 7) == 2": {
      "result": true,
      "time": 0.03466296195983887,
      "error": null
    },
    "assert modular_inverse([1, 8, 1, 7], 2, 4) == 1": {
      "result": true,
      "time": 0.03811049461364746,
      "error": null
    },
    "assert modular_inverse([2, 9, 3, 3], 2, 2) == 1": {
      "result": false,
      "time": 0.03525733947753906,
      "error": null
    },
    "assert modular_inverse([4, 9, 5, 4], 2, 3) == 1": {
      "result": false,
      "time": 0.03560495376586914,
      "error": null
    },
    "assert modular_inverse([1, 3, 6, 10], 4, 11) == 2": {
      "result": true,
      "time": 0.03380274772644043,
      "error": null
    },
    "assert modular_inverse([6, 7, 6, 8], 1, 4) == 0": {
      "result": true,
      "time": 0.043805837631225586,
      "error": null
    },
    "assert modular_inverse([5, 4, 4, 10], 1, 7) == 0": {
      "result": true,
      "time": 0.04402780532836914,
      "error": null
    },
    "assert modular_inverse([4, 7, 3, 5], 4, 12) == 2": {
      "result": false,
      "time": 0.037920475006103516,
      "error": null
    },
    "assert modular_inverse([4, 6, 1, 5], 4, 9) == 1": {
      "result": false,
      "time": 0.04195356369018555,
      "error": null
    },
    "assert modular_inverse([3, 3, 8, 9], 3, 6) == 0": {
      "result": false,
      "time": 0.03461027145385742,
      "error": null
    },
    "assert modular_inverse([5, 3, 7, 1], 3, 11) == 0": {
      "result": true,
      "time": 0.03993368148803711,
      "error": null
    },
    "assert modular_inverse([2, 11, 3, 3], 3, 9) == 0": {
      "result": false,
      "time": 0.04197382926940918,
      "error": null
    },
    "assert modular_inverse([6, 10, 3, 9], 2, 2) == 0": {
      "result": true,
      "time": 0.03215527534484863,
      "error": null
    },
    "assert modular_inverse([3, 11, 9, 9], 1, 9) == 0": {
      "result": true,
      "time": 0.04012346267700195,
      "error": null
    },
    "assert modular_inverse([4, 7, 4, 10], 4, 10) == 0": {
      "result": true,
      "time": 0.035490989685058594,
      "error": null
    },
    "assert modular_inverse([2, 1, 1, 3], 3, 9) == 2": {
      "result": false,
      "time": 0.03364896774291992,
      "error": null
    },
    "assert modular_inverse([5, 1, 3, 9], 2, 12) == 2": {
      "result": false,
      "time": 0.034026384353637695,
      "error": null
    },
    "assert modular_inverse([5, 1, 9, 6], 2, 7) == 1": {
      "result": true,
      "time": 0.03950142860412598,
      "error": null
    },
    "assert modular_inverse([2, 2, 1, 10], 2, 2) == 0": {
      "result": true,
      "time": 0.04209756851196289,
      "error": null
    },
    "assert modular_inverse([5, 8, 2, 5], 4, 4) == 2": {
      "result": false,
      "time": 0.036032915115356445,
      "error": null
    },
    "assert modular_inverse([5, 1, 2, 4], 2, 3) == 2": {
      "result": false,
      "time": 0.03801894187927246,
      "error": null
    },
    "assert modular_inverse([5, 4, 7, 8, 11], 3, 10) == 0": {
      "result": false,
      "time": 0.04550600051879883,
      "error": null
    },
    "assert modular_inverse([4, 1, 10, 15, 16], 4, 17) == 1": {
      "result": true,
      "time": 0.05292177200317383,
      "error": null
    },
    "assert modular_inverse([3, 1, 5, 10, 10], 3, 13) == 1": {
      "result": true,
      "time": 0.03941178321838379,
      "error": null
    },
    "assert modular_inverse([5, 6, 8, 12, 13], 5, 11) == 1": {
      "result": false,
      "time": 0.04419970512390137,
      "error": null
    },
    "assert modular_inverse([6, 5, 11, 9, 13], 5, 16) == 1": {
      "result": false,
      "time": 0.046816349029541016,
      "error": null
    },
    "assert modular_inverse([5, 5, 12, 14, 14], 5, 18) == 0": {
      "result": true,
      "time": 0.039934396743774414,
      "error": null
    },
    "assert modular_inverse([1, 8, 12, 16, 12], 4, 17) == 2": {
      "result": true,
      "time": 0.047301530838012695,
      "error": null
    },
    "assert modular_inverse([3, 3, 9, 15, 9], 1, 13) == 0": {
      "result": true,
      "time": 0.041152238845825195,
      "error": null
    },
    "assert modular_inverse([3, 6, 8, 14, 14], 2, 15) == 0": {
      "result": false,
      "time": 0.04167675971984863,
      "error": null
    },
    "assert modular_inverse([4, 4, 13, 8, 8], 4, 13) == 0": {
      "result": true,
      "time": 0.0384218692779541,
      "error": null
    },
    "assert modular_inverse([4, 4, 4, 12, 17], 2, 15) == 2": {
      "result": true,
      "time": 0.04348897933959961,
      "error": null
    },
    "assert modular_inverse([5, 1, 6, 12, 13], 2, 8) == 2": {
      "result": false,
      "time": 0.04677915573120117,
      "error": null
    },
    "assert modular_inverse([4, 8, 6, 9, 7], 3, 15) == 1": {
      "result": false,
      "time": 0.037686824798583984,
      "error": null
    },
    "assert modular_inverse([4, 6, 7, 11, 11], 2, 8) == 0": {
      "result": true,
      "time": 0.04781341552734375,
      "error": null
    },
    "assert modular_inverse([2, 2, 13, 17, 12], 2, 13) == 0": {
      "result": true,
      "time": 0.04536247253417969,
      "error": null
    },
    "assert modular_inverse([3, 4, 9, 16, 17], 5, 16) == 2": {
      "result": false,
      "time": 0.04261064529418945,
      "error": null
    },
    "assert modular_inverse([6, 2, 13, 17, 17], 3, 9) == 0": {
      "result": false,
      "time": 0.044013261795043945,
      "error": null
    },
    "assert modular_inverse([5, 4, 7, 17, 11], 1, 15) == 0": {
      "result": false,
      "time": 0.04442286491394043,
      "error": null
    },
    "assert modular_inverse([2, 5, 12, 11, 10], 3, 11) == 1": {
      "result": false,
      "time": 0.04656243324279785,
      "error": null
    },
    "assert modular_inverse([3, 2, 9, 16, 9], 5, 11) == 0": {
      "result": true,
      "time": 0.0480656623840332,
      "error": null
    },
    "assert modular_inverse([1, 8, 3, 8, 13], 2, 14) == 1": {
      "result": false,
      "time": 0.0485379695892334,
      "error": null
    },
    "assert modular_inverse([6, 5, 9, 7, 15], 1, 8) == 0": {
      "result": true,
      "time": 0.0430140495300293,
      "error": null
    },
    "assert modular_inverse([3, 4, 7, 7, 17], 5, 15) == 1": {
      "result": false,
      "time": 0.044083595275878906,
      "error": null
    },
    "assert modular_inverse([4, 7, 12, 13, 14], 2, 17) == 0": {
      "result": true,
      "time": 0.03527951240539551,
      "error": null
    },
    "assert modular_inverse([3, 1, 5, 10, 11], 5, 14) == 1": {
      "result": true,
      "time": 0.04261589050292969,
      "error": null
    },
    "assert modular_inverse([4, 4, 6, 16, 15], 3, 13) == 0": {
      "result": true,
      "time": 0.040930986404418945,
      "error": null
    },
    "assert modular_inverse([1, 6, 6, 12, 17], 5, 11) == 2": {
      "result": false,
      "time": 0.04440641403198242,
      "error": null
    },
    "assert modular_inverse([1, 3, 6, 8, 9], 4, 14) == 1": {
      "result": false,
      "time": 0.0403439998626709,
      "error": null
    },
    "assert modular_inverse([5, 6, 7, 13, 9], 3, 17) == 0": {
      "result": true,
      "time": 0.04093766212463379,
      "error": null
    },
    "assert modular_inverse([1, 3, 4, 15, 16], 2, 10) == 1": {
      "result": true,
      "time": 0.03867650032043457,
      "error": null
    },
    "assert modular_inverse([1, 6, 3, 7, 17], 4, 10) == 1": {
      "result": false,
      "time": 0.06025552749633789,
      "error": null
    },
    "assert modular_inverse([5, 7, 4, 13, 12], 1, 14) == 0": {
      "result": true,
      "time": 0.062046051025390625,
      "error": null
    },
    "assert modular_inverse([5, 6, 12, 15, 14], 5, 18) == 0": {
      "result": true,
      "time": 0.05208539962768555,
      "error": null
    },
    "assert modular_inverse([1, 8, 6, 3], 1, 2) == 1": {
      "result": true,
      "time": 0.058350324630737305,
      "error": null
    },
    "assert modular_inverse([6, 4, 7, 1], 4, 10) == 1": {
      "result": false,
      "time": 0.04416203498840332,
      "error": null
    },
    "assert modular_inverse([5, 8, 6, 8], 2, 6) == 1": {
      "result": false,
      "time": 0.050330400466918945,
      "error": null
    },
    "assert modular_inverse([5, 5, 9, 7], 2, 2) == 2": {
      "result": false,
      "time": 0.046388864517211914,
      "error": null
    },
    "assert modular_inverse([2, 8, 5, 8], 3, 6) == 1": {
      "result": false,
      "time": 0.05353140830993652,
      "error": null
    },
    "assert modular_inverse([1, 4, 2, 8], 4, 10) == 1": {
      "result": true,
      "time": 0.06073760986328125,
      "error": null
    },
    "assert modular_inverse([6, 6, 6, 4], 4, 7) == 3": {
      "result": true,
      "time": 0.04452776908874512,
      "error": null
    },
    "assert modular_inverse([4, 8, 4, 2], 3, 2) == 0": {
      "result": true,
      "time": 0.04139876365661621,
      "error": null
    },
    "assert modular_inverse([6, 5, 7, 3], 1, 6) == 0": {
      "result": true,
      "time": 0.04017233848571777,
      "error": null
    },
    "assert modular_inverse([2, 2, 1, 8], 2, 2) == 0": {
      "result": true,
      "time": 0.04352760314941406,
      "error": null
    },
    "assert modular_inverse([7, 7, 2, 6], 1, 10) == 0": {
      "result": true,
      "time": 0.03878951072692871,
      "error": null
    },
    "assert modular_inverse([5, 2, 1, 3], 1, 6) == 1": {
      "result": false,
      "time": 0.03963661193847656,
      "error": null
    },
    "assert modular_inverse([2, 2, 5, 1], 1, 7) == 0": {
      "result": true,
      "time": 0.04052281379699707,
      "error": null
    },
    "assert modular_inverse([4, 2, 3, 4], 4, 10) == 0": {
      "result": true,
      "time": 0.03808140754699707,
      "error": null
    },
    "assert modular_inverse([1, 3, 1, 2], 1, 5) == 1": {
      "result": true,
      "time": 0.04841113090515137,
      "error": null
    },
    "assert modular_inverse([6, 7, 4, 4], 2, 11) == 0": {
      "result": true,
      "time": 0.03861117362976074,
      "error": null
    },
    "assert modular_inverse([1, 1, 3, 6], 3, 6) == 2": {
      "result": false,
      "time": 0.04169797897338867,
      "error": null
    },
    "assert modular_inverse([1, 8, 5, 4], 3, 11) == 1": {
      "result": true,
      "time": 0.04351305961608887,
      "error": null
    },
    "assert modular_inverse([3, 8, 3, 10], 1, 6) == 0": {
      "result": false,
      "time": 0.04030585289001465,
      "error": null
    },
    "assert modular_inverse([1, 8, 3, 8], 2, 10) == 1": {
      "result": true,
      "time": 0.03824353218078613,
      "error": null
    },
    "assert modular_inverse([6, 8, 3, 3], 4, 6) == 0": {
      "result": false,
      "time": 0.04326963424682617,
      "error": null
    },
    "assert modular_inverse([5, 8, 4, 6], 4, 6) == 1": {
      "result": true,
      "time": 0.0444791316986084,
      "error": null
    },
    "assert modular_inverse([6, 2, 3, 7], 4, 11) == 0": {
      "result": true,
      "time": 0.04065513610839844,
      "error": null
    },
    "assert modular_inverse([6, 5, 1, 6], 4, 10) == 1": {
      "result": false,
      "time": 0.045749664306640625,
      "error": null
    },
    "assert modular_inverse([4, 5, 3, 4], 2, 7) == 0": {
      "result": true,
      "time": 0.04291558265686035,
      "error": null
    },
    "assert modular_inverse([6, 1, 7, 8], 3, 10) == 1": {
      "result": false,
      "time": 0.04677534103393555,
      "error": null
    },
    "assert modular_inverse([6, 7, 5, 6], 2, 8) == 1": {
      "result": false,
      "time": 0.04029130935668945,
      "error": null
    },
    "assert modular_inverse([7, 4, 9, 4], 2, 11) == 0": {
      "result": true,
      "time": 0.04396414756774902,
      "error": null
    },
    "assert modular_inverse([6, 7, 8, 9], 3, 4) == 1": {
      "result": false,
      "time": 0.03982186317443848,
      "error": null
    },
    "assert modular_inverse([3, 1, 9, 10], 4, 11) == 2": {
      "result": true,
      "time": 0.03808712959289551,
      "error": null
    },
    "assert modular_inverse([6, 1, 5, 9], 2, 11) == 1": {
      "result": true,
      "time": 0.03971457481384277,
      "error": null
    },
    "assert modular_inverse([6, 7, 5, 1], 3, 7) == 1": {
      "result": true,
      "time": 0.0389399528503418,
      "error": null
    },
    "assert modular_inverse([6, 4, 6, 7], 3, 11) == 0": {
      "result": true,
      "time": 0.03793764114379883,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.5490196078431373,
  "general_error": "",
  "has_testcase_error": false
}