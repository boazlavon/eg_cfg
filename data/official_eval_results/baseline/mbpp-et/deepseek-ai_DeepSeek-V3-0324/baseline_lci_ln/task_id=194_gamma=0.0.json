{
  "code": "def octal_To_Decimal(octal_number):\n    decimal_value = 0\n    power = 0\n    while octal_number > 0:\n        last_digit = octal_number % 10\n        decimal_value += last_digit * (8 ** power)\n        octal_number = octal_number // 10\n        power += 1\n    return decimal_value",
  "results": {
    "assert octal_To_Decimal(25) == 21": {
      "result": true,
      "time": 0.04984307289123535,
      "error": null
    },
    "assert octal_To_Decimal(30) == 24": {
      "result": true,
      "time": 0.04503035545349121,
      "error": null
    },
    "assert octal_To_Decimal(40) == 32": {
      "result": true,
      "time": 0.03808784484863281,
      "error": null
    },
    "assert octal_To_Decimal(29) == 25": {
      "result": true,
      "time": 0.04031062126159668,
      "error": null
    },
    "assert octal_To_Decimal(24) == 20": {
      "result": true,
      "time": 0.047486066818237305,
      "error": null
    },
    "assert octal_To_Decimal(20) == 16": {
      "result": true,
      "time": 0.03890347480773926,
      "error": null
    },
    "assert octal_To_Decimal(26) == 22": {
      "result": true,
      "time": 0.04010581970214844,
      "error": null
    },
    "assert octal_To_Decimal(22) == 18": {
      "result": true,
      "time": 0.04081225395202637,
      "error": null
    },
    "assert octal_To_Decimal(28) == 24": {
      "result": true,
      "time": 0.04073309898376465,
      "error": null
    },
    "assert octal_To_Decimal(21) == 17": {
      "result": true,
      "time": 0.04604601860046387,
      "error": null
    },
    "assert octal_To_Decimal(27) == 23": {
      "result": true,
      "time": 0.03471565246582031,
      "error": null
    },
    "assert octal_To_Decimal(35) == 29": {
      "result": true,
      "time": 0.040849924087524414,
      "error": null
    },
    "assert octal_To_Decimal(32) == 26": {
      "result": true,
      "time": 0.04102039337158203,
      "error": null
    },
    "assert octal_To_Decimal(34) == 28": {
      "result": true,
      "time": 0.03960585594177246,
      "error": null
    },
    "assert octal_To_Decimal(31) == 25": {
      "result": true,
      "time": 0.036365509033203125,
      "error": null
    },
    "assert octal_To_Decimal(33) == 27": {
      "result": true,
      "time": 0.037607431411743164,
      "error": null
    },
    "assert octal_To_Decimal(42) == 34": {
      "result": true,
      "time": 0.03598523139953613,
      "error": null
    },
    "assert octal_To_Decimal(44) == 36": {
      "result": true,
      "time": 0.04380393028259277,
      "error": null
    },
    "assert octal_To_Decimal(43) == 35": {
      "result": true,
      "time": 0.03947949409484863,
      "error": null
    },
    "assert octal_To_Decimal(41) == 33": {
      "result": true,
      "time": 0.0436861515045166,
      "error": null
    },
    "assert octal_To_Decimal(36) == 30": {
      "result": true,
      "time": 0.04007220268249512,
      "error": null
    },
    "assert octal_To_Decimal(39) == 33": {
      "result": true,
      "time": 0.041908979415893555,
      "error": null
    },
    "assert octal_To_Decimal(45) == 37": {
      "result": true,
      "time": 0.044531822204589844,
      "error": null
    },
    "assert octal_To_Decimal(38) == 32": {
      "result": true,
      "time": 0.04363536834716797,
      "error": null
    },
    "assert octal_To_Decimal(37) == 31": {
      "result": true,
      "time": 0.04241490364074707,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}