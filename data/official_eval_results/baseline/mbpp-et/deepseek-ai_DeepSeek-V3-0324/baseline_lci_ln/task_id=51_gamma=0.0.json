{
  "code": "def check_equilateral(side1, side2, side3):\n    # Check if all sides are equal\n    if side1 == side2:\n        if side2 == side3:\n            is_equilateral = True\n        else:\n            is_equilateral = False\n    else:\n        is_equilateral = False\n    return is_equilateral",
  "results": {
    "assert check_equilateral(6,8,12)==False ": {
      "result": true,
      "time": 0.039659976959228516,
      "error": null
    },
    "assert check_equilateral(6,6,12)==False": {
      "result": true,
      "time": 0.03580117225646973,
      "error": null
    },
    "assert check_equilateral(6,6,6)==True": {
      "result": true,
      "time": 0.03153729438781738,
      "error": null
    },
    "assert check_equilateral(2, 12, 13) == False": {
      "result": true,
      "time": 0.038841962814331055,
      "error": null
    },
    "assert check_equilateral(3, 6, 7) == False": {
      "result": true,
      "time": 0.04366135597229004,
      "error": null
    },
    "assert check_equilateral(1, 10, 11) == False": {
      "result": true,
      "time": 0.036846160888671875,
      "error": null
    },
    "assert check_equilateral(1, 6, 16) == False": {
      "result": true,
      "time": 0.036522865295410156,
      "error": null
    },
    "assert check_equilateral(4, 7, 12) == False": {
      "result": true,
      "time": 0.03021860122680664,
      "error": null
    },
    "assert check_equilateral(3, 12, 13) == False": {
      "result": true,
      "time": 0.044985294342041016,
      "error": null
    },
    "assert check_equilateral(4, 12, 8) == False": {
      "result": true,
      "time": 0.03490614891052246,
      "error": null
    },
    "assert check_equilateral(10, 10, 14) == False": {
      "result": true,
      "time": 0.034395456314086914,
      "error": null
    },
    "assert check_equilateral(4, 11, 7) == False": {
      "result": true,
      "time": 0.03216719627380371,
      "error": null
    },
    "assert check_equilateral(11, 13, 15) == False": {
      "result": true,
      "time": 0.03287363052368164,
      "error": null
    },
    "assert check_equilateral(6, 9, 10) == False": {
      "result": true,
      "time": 0.03456449508666992,
      "error": null
    },
    "assert check_equilateral(1, 10, 8) == False": {
      "result": true,
      "time": 0.033934593200683594,
      "error": null
    },
    "assert check_equilateral(1, 8, 17) == False": {
      "result": true,
      "time": 0.03307008743286133,
      "error": null
    },
    "assert check_equilateral(2, 4, 16) == False": {
      "result": true,
      "time": 0.03251385688781738,
      "error": null
    },
    "assert check_equilateral(10, 13, 15) == False": {
      "result": true,
      "time": 0.03490591049194336,
      "error": null
    },
    "assert check_equilateral(2, 5, 9) == False": {
      "result": true,
      "time": 0.03745698928833008,
      "error": null
    },
    "assert check_equilateral(8, 4, 17) == False": {
      "result": true,
      "time": 0.03724408149719238,
      "error": null
    },
    "assert check_equilateral(6, 13, 10) == False": {
      "result": true,
      "time": 0.03016376495361328,
      "error": null
    },
    "assert check_equilateral(10, 10, 11) == False": {
      "result": true,
      "time": 0.03453421592712402,
      "error": null
    },
    "assert check_equilateral(1, 10, 12) == False": {
      "result": true,
      "time": 0.03497004508972168,
      "error": null
    },
    "assert check_equilateral(5, 9, 12) == False": {
      "result": true,
      "time": 0.037224769592285156,
      "error": null
    },
    "assert check_equilateral(4, 4, 9) == False": {
      "result": true,
      "time": 0.03261137008666992,
      "error": null
    },
    "assert check_equilateral(6, 7, 16) == False": {
      "result": true,
      "time": 0.03552365303039551,
      "error": null
    },
    "assert check_equilateral(10, 12, 7) == False": {
      "result": true,
      "time": 0.03711104393005371,
      "error": null
    },
    "assert check_equilateral(8, 8, 14) == False": {
      "result": true,
      "time": 0.04071497917175293,
      "error": null
    },
    "assert check_equilateral(6, 13, 14) == False": {
      "result": true,
      "time": 0.042304039001464844,
      "error": null
    },
    "assert check_equilateral(8, 10, 9) == False": {
      "result": true,
      "time": 0.04257345199584961,
      "error": null
    },
    "assert check_equilateral(10, 11, 8) == False": {
      "result": true,
      "time": 0.03795909881591797,
      "error": null
    },
    "assert check_equilateral(6, 3, 8) == False": {
      "result": true,
      "time": 0.040785789489746094,
      "error": null
    },
    "assert check_equilateral(11, 8, 13) == False": {
      "result": true,
      "time": 0.0390779972076416,
      "error": null
    },
    "assert check_equilateral(4, 9, 7) == False": {
      "result": true,
      "time": 0.03923344612121582,
      "error": null
    },
    "assert check_equilateral(4, 10, 8) == False": {
      "result": true,
      "time": 0.04013633728027344,
      "error": null
    },
    "assert check_equilateral(7, 1, 10) == False": {
      "result": true,
      "time": 0.035559892654418945,
      "error": null
    },
    "assert check_equilateral(2, 10, 11) == False": {
      "result": true,
      "time": 0.038358211517333984,
      "error": null
    },
    "assert check_equilateral(9, 5, 12) == False": {
      "result": true,
      "time": 0.03809356689453125,
      "error": null
    },
    "assert check_equilateral(5, 4, 16) == False": {
      "result": true,
      "time": 0.03234076499938965,
      "error": null
    },
    "assert check_equilateral(6, 11, 17) == False": {
      "result": true,
      "time": 0.04439067840576172,
      "error": null
    },
    "assert check_equilateral(9, 5, 11) == False": {
      "result": true,
      "time": 0.04112601280212402,
      "error": null
    },
    "assert check_equilateral(8, 10, 17) == False": {
      "result": true,
      "time": 0.04277777671813965,
      "error": null
    },
    "assert check_equilateral(6, 4, 17) == False": {
      "result": true,
      "time": 0.04401278495788574,
      "error": null
    },
    "assert check_equilateral(10, 10, 8) == False": {
      "result": true,
      "time": 0.04257822036743164,
      "error": null
    },
    "assert check_equilateral(8, 7, 8) == False": {
      "result": true,
      "time": 0.036489009857177734,
      "error": null
    },
    "assert check_equilateral(2, 5, 12) == False": {
      "result": true,
      "time": 0.03475379943847656,
      "error": null
    },
    "assert check_equilateral(8, 1, 9) == False": {
      "result": true,
      "time": 0.03336787223815918,
      "error": null
    },
    "assert check_equilateral(4, 1, 8) == False": {
      "result": true,
      "time": 0.035379886627197266,
      "error": null
    },
    "assert check_equilateral(11, 8, 12) == False": {
      "result": true,
      "time": 0.03996610641479492,
      "error": null
    },
    "assert check_equilateral(2, 4, 14) == False": {
      "result": true,
      "time": 0.03939461708068848,
      "error": null
    },
    "assert check_equilateral(5, 2, 11) == False": {
      "result": true,
      "time": 0.03804183006286621,
      "error": null
    },
    "assert check_equilateral(7, 2, 15) == False": {
      "result": true,
      "time": 0.04093194007873535,
      "error": null
    },
    "assert check_equilateral(5, 11, 14) == False": {
      "result": true,
      "time": 0.037021636962890625,
      "error": null
    },
    "assert check_equilateral(11, 7, 11) == False": {
      "result": true,
      "time": 0.03909921646118164,
      "error": null
    },
    "assert check_equilateral(4, 1, 17) == False": {
      "result": true,
      "time": 0.03284025192260742,
      "error": null
    },
    "assert check_equilateral(2, 11, 16) == False": {
      "result": true,
      "time": 0.03496813774108887,
      "error": null
    },
    "assert check_equilateral(11, 8, 8) == False": {
      "result": true,
      "time": 0.04099607467651367,
      "error": null
    },
    "assert check_equilateral(6, 1, 12) == False": {
      "result": true,
      "time": 0.037726640701293945,
      "error": null
    },
    "assert check_equilateral(7, 7, 14) == False": {
      "result": true,
      "time": 0.034491777420043945,
      "error": null
    },
    "assert check_equilateral(4, 3, 7) == False": {
      "result": true,
      "time": 0.04117274284362793,
      "error": null
    },
    "assert check_equilateral(8, 2, 15) == False": {
      "result": true,
      "time": 0.04111671447753906,
      "error": null
    },
    "assert check_equilateral(10, 5, 13) == False": {
      "result": true,
      "time": 0.04056835174560547,
      "error": null
    },
    "assert check_equilateral(2, 5, 10) == False": {
      "result": true,
      "time": 0.03458213806152344,
      "error": null
    },
    "assert check_equilateral(5, 6, 16) == False": {
      "result": true,
      "time": 0.0424046516418457,
      "error": null
    },
    "assert check_equilateral(11, 7, 16) == False": {
      "result": true,
      "time": 0.03429698944091797,
      "error": null
    },
    "assert check_equilateral(1, 2, 17) == False": {
      "result": true,
      "time": 0.0473027229309082,
      "error": null
    },
    "assert check_equilateral(6, 11, 2) == False": {
      "result": true,
      "time": 0.042235612869262695,
      "error": null
    },
    "assert check_equilateral(9, 11, 1) == False": {
      "result": true,
      "time": 0.03972220420837402,
      "error": null
    },
    "assert check_equilateral(11, 1, 11) == False": {
      "result": true,
      "time": 0.046586036682128906,
      "error": null
    },
    "assert check_equilateral(11, 9, 11) == False": {
      "result": true,
      "time": 0.04443621635437012,
      "error": null
    },
    "assert check_equilateral(6, 7, 6) == False": {
      "result": true,
      "time": 0.036191701889038086,
      "error": null
    },
    "assert check_equilateral(7, 10, 7) == False": {
      "result": true,
      "time": 0.037070512771606445,
      "error": null
    },
    "assert check_equilateral(5, 6, 10) == False": {
      "result": true,
      "time": 0.0435483455657959,
      "error": null
    },
    "assert check_equilateral(10, 9, 2) == False": {
      "result": true,
      "time": 0.03651785850524902,
      "error": null
    },
    "assert check_equilateral(4, 10, 7) == False": {
      "result": true,
      "time": 0.04401350021362305,
      "error": null
    },
    "assert check_equilateral(1, 10, 10) == False": {
      "result": true,
      "time": 0.03661632537841797,
      "error": null
    },
    "assert check_equilateral(9, 10, 8) == False": {
      "result": true,
      "time": 0.04482436180114746,
      "error": null
    },
    "assert check_equilateral(3, 3, 8) == False": {
      "result": true,
      "time": 0.037538766860961914,
      "error": null
    },
    "assert check_equilateral(1, 4, 2) == False": {
      "result": true,
      "time": 0.03587174415588379,
      "error": null
    },
    "assert check_equilateral(10, 4, 7) == False": {
      "result": true,
      "time": 0.03872847557067871,
      "error": null
    },
    "assert check_equilateral(2, 11, 1) == False": {
      "result": true,
      "time": 0.04392862319946289,
      "error": null
    },
    "assert check_equilateral(10, 10, 5) == False": {
      "result": true,
      "time": 0.040320396423339844,
      "error": null
    },
    "assert check_equilateral(2, 3, 7) == False": {
      "result": true,
      "time": 0.03818321228027344,
      "error": null
    },
    "assert check_equilateral(7, 3, 7) == False": {
      "result": true,
      "time": 0.038561105728149414,
      "error": null
    },
    "assert check_equilateral(6, 7, 9) == False": {
      "result": true,
      "time": 0.037366628646850586,
      "error": null
    },
    "assert check_equilateral(6, 4, 8) == False": {
      "result": true,
      "time": 0.04577326774597168,
      "error": null
    },
    "assert check_equilateral(3, 2, 6) == False": {
      "result": true,
      "time": 0.039296865463256836,
      "error": null
    },
    "assert check_equilateral(7, 8, 7) == False": {
      "result": true,
      "time": 0.04737091064453125,
      "error": null
    },
    "assert check_equilateral(4, 7, 7) == False": {
      "result": true,
      "time": 0.04003119468688965,
      "error": null
    },
    "assert check_equilateral(11, 8, 4) == False": {
      "result": true,
      "time": 0.03893256187438965,
      "error": null
    },
    "assert check_equilateral(10, 3, 1) == False": {
      "result": true,
      "time": 0.04332280158996582,
      "error": null
    },
    "assert check_equilateral(3, 11, 6) == False": {
      "result": true,
      "time": 0.04384660720825195,
      "error": null
    },
    "assert check_equilateral(5, 11, 10) == False": {
      "result": true,
      "time": 0.03447890281677246,
      "error": null
    },
    "assert check_equilateral(11, 8, 5) == False": {
      "result": true,
      "time": 0.03695845603942871,
      "error": null
    },
    "assert check_equilateral(6, 11, 6) == False": {
      "result": true,
      "time": 0.034569501876831055,
      "error": null
    },
    "assert check_equilateral(9, 6, 11) == False": {
      "result": true,
      "time": 0.039617061614990234,
      "error": null
    },
    "assert check_equilateral(6, 2, 4) == False": {
      "result": true,
      "time": 0.040849924087524414,
      "error": null
    },
    "assert check_equilateral(1, 3, 3) == False": {
      "result": true,
      "time": 0.0357515811920166,
      "error": null
    },
    "assert check_equilateral(5, 1, 1) == False": {
      "result": true,
      "time": 0.03995370864868164,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}