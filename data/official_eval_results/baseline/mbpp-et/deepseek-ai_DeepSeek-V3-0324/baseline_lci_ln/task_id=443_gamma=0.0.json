{
  "code": "def largest_neg(numbers):\n    negatives = []\n    for num in numbers:\n        if num < 0:\n            negatives.append(num)\n    if not negatives:\n        return None\n    largest = negatives[0]\n    for num in negatives:\n        if num > largest:\n            largest = num\n    return largest",
  "results": {
    "assert largest_neg([1,2,3,-4,-6]) == -6": {
      "result": false,
      "time": 0.03211021423339844,
      "error": null
    },
    "assert largest_neg([1,2,3,-8,-9]) == -9": {
      "result": false,
      "time": 0.039649009704589844,
      "error": null
    },
    "assert largest_neg([1,2,3,4,-1]) == -1": {
      "result": true,
      "time": 0.03516507148742676,
      "error": null
    },
    "assert largest_neg([4, 1, 5, -8, -8]) == -8": {
      "result": true,
      "time": 0.03728795051574707,
      "error": null
    },
    "assert largest_neg([1, 6, 8, -2, -5]) == -5": {
      "result": false,
      "time": 0.03924298286437988,
      "error": null
    },
    "assert largest_neg([5, 6, 8, 0, -1]) == -1": {
      "result": true,
      "time": 0.03746461868286133,
      "error": null
    },
    "assert largest_neg([3, 4, 6, -7, -3]) == -7": {
      "result": false,
      "time": 0.037441253662109375,
      "error": null
    },
    "assert largest_neg([2, 7, 6, 1, -5]) == -5": {
      "result": true,
      "time": 0.04026198387145996,
      "error": null
    },
    "assert largest_neg([2, 1, 1, -4, -11]) == -11": {
      "result": false,
      "time": 0.03065013885498047,
      "error": null
    },
    "assert largest_neg([1, 6, 8, -6, -7]) == -7": {
      "result": false,
      "time": 0.029186248779296875,
      "error": null
    },
    "assert largest_neg([3, 7, 5, 1, -3]) == -3": {
      "result": true,
      "time": 0.03280901908874512,
      "error": null
    },
    "assert largest_neg([2, 7, 3, -6, -4]) == -6": {
      "result": false,
      "time": 0.0345921516418457,
      "error": null
    },
    "assert largest_neg([2, 7, 7, -5, -4]) == -5": {
      "result": false,
      "time": 0.03633594512939453,
      "error": null
    },
    "assert largest_neg([4, 1, 2, -9, -5]) == -9": {
      "result": false,
      "time": 0.034235477447509766,
      "error": null
    },
    "assert largest_neg([2, 7, 7, -1, -9]) == -9": {
      "result": false,
      "time": 0.03532290458679199,
      "error": null
    },
    "assert largest_neg([5, 2, 2, -3, -10]) == -10": {
      "result": false,
      "time": 0.03386330604553223,
      "error": null
    },
    "assert largest_neg([2, 4, 5, 1, -10]) == -10": {
      "result": true,
      "time": 0.03615522384643555,
      "error": null
    },
    "assert largest_neg([5, 4, 2, -6, -7]) == -7": {
      "result": false,
      "time": 0.03224825859069824,
      "error": null
    },
    "assert largest_neg([2, 7, 4, -1, -7]) == -7": {
      "result": false,
      "time": 0.0332643985748291,
      "error": null
    },
    "assert largest_neg([2, 1, 4, -3, -8]) == -8": {
      "result": false,
      "time": 0.03496265411376953,
      "error": null
    },
    "assert largest_neg([3, 4, 4, 0, -9]) == -9": {
      "result": true,
      "time": 0.035332441329956055,
      "error": null
    },
    "assert largest_neg([5, 7, 1, -6, -10]) == -10": {
      "result": false,
      "time": 0.03556060791015625,
      "error": null
    },
    "assert largest_neg([4, 4, 1, 1, -7]) == -7": {
      "result": true,
      "time": 0.0375819206237793,
      "error": null
    },
    "assert largest_neg([1, 3, 2, -6, -7]) == -7": {
      "result": false,
      "time": 0.038111209869384766,
      "error": null
    },
    "assert largest_neg([6, 5, 4, 0, -6]) == -6": {
      "result": true,
      "time": 0.02767205238342285,
      "error": null
    },
    "assert largest_neg([5, 3, 6, -6, -8]) == -8": {
      "result": false,
      "time": 0.03274106979370117,
      "error": null
    },
    "assert largest_neg([4, 2, 3, -9, -10]) == -10": {
      "result": false,
      "time": 0.03599667549133301,
      "error": null
    },
    "assert largest_neg([4, 2, 3, -6, -6]) == -6": {
      "result": true,
      "time": 0.034087419509887695,
      "error": null
    },
    "assert largest_neg([5, 2, 8, -9, -10]) == -10": {
      "result": false,
      "time": 0.04159879684448242,
      "error": null
    },
    "assert largest_neg([2, 6, 4, -4, -3]) == -4": {
      "result": false,
      "time": 0.03563642501831055,
      "error": null
    },
    "assert largest_neg([6, 5, 5, -4, -8]) == -8": {
      "result": false,
      "time": 0.034464359283447266,
      "error": null
    },
    "assert largest_neg([3, 4, 8, 1, -11]) == -11": {
      "result": true,
      "time": 0.0373685359954834,
      "error": null
    },
    "assert largest_neg([5, 1, 3, -3, -1]) == -3": {
      "result": false,
      "time": 0.03134870529174805,
      "error": null
    },
    "assert largest_neg([5, 6, 4, -5, -9]) == -9": {
      "result": false,
      "time": 0.028625965118408203,
      "error": null
    },
    "assert largest_neg([3, 1, 1, -4, -4]) == -4": {
      "result": true,
      "time": 0.03960418701171875,
      "error": null
    },
    "assert largest_neg([6, 7, 3, -4, -6]) == -6": {
      "result": false,
      "time": 0.0376429557800293,
      "error": null
    },
    "assert largest_neg([4, 5, 4, -3, -9]) == -9": {
      "result": false,
      "time": 0.03426504135131836,
      "error": null
    },
    "assert largest_neg([6, 3, 1, -8, -4]) == -8": {
      "result": false,
      "time": 0.03470754623413086,
      "error": null
    },
    "assert largest_neg([6, 5, 5, -11, -4]) == -11": {
      "result": false,
      "time": 0.0350496768951416,
      "error": null
    },
    "assert largest_neg([3, 7, 3, -3, -6]) == -6": {
      "result": false,
      "time": 0.03953099250793457,
      "error": null
    },
    "assert largest_neg([5, 4, 2, -6, -11]) == -11": {
      "result": false,
      "time": 0.03229570388793945,
      "error": null
    },
    "assert largest_neg([3, 5, 3, -12, -10]) == -12": {
      "result": false,
      "time": 0.03417325019836426,
      "error": null
    },
    "assert largest_neg([5, 1, 4, -10, -5]) == -10": {
      "result": false,
      "time": 0.03560686111450195,
      "error": null
    },
    "assert largest_neg([4, 7, 5, -3, -10]) == -10": {
      "result": false,
      "time": 0.034338951110839844,
      "error": null
    },
    "assert largest_neg([6, 6, 6, -7, -4]) == -7": {
      "result": false,
      "time": 0.027599811553955078,
      "error": null
    },
    "assert largest_neg([3, 6, 3, -9, -9]) == -9": {
      "result": true,
      "time": 0.034279823303222656,
      "error": null
    },
    "assert largest_neg([2, 3, 8, -10, -14]) == -14": {
      "result": false,
      "time": 0.03544974327087402,
      "error": null
    },
    "assert largest_neg([4, 5, 4, -3, -12]) == -12": {
      "result": false,
      "time": 0.02837681770324707,
      "error": null
    },
    "assert largest_neg([3, 3, 8, -5, -11]) == -11": {
      "result": false,
      "time": 0.03312563896179199,
      "error": null
    },
    "assert largest_neg([4, 3, 8, -8, -6]) == -8": {
      "result": false,
      "time": 0.03267955780029297,
      "error": null
    },
    "assert largest_neg([1, 5, 3, -4, -14]) == -14": {
      "result": false,
      "time": 0.03204512596130371,
      "error": null
    },
    "assert largest_neg([1, 3, 1, -7, -5]) == -7": {
      "result": false,
      "time": 0.03917860984802246,
      "error": null
    },
    "assert largest_neg([1, 7, 1, -7, -11]) == -11": {
      "result": false,
      "time": 0.03899645805358887,
      "error": null
    },
    "assert largest_neg([1, 2, 2, -7, -5]) == -7": {
      "result": false,
      "time": 0.03423333168029785,
      "error": null
    },
    "assert largest_neg([6, 5, 1, -4, -7]) == -7": {
      "result": false,
      "time": 0.03586435317993164,
      "error": null
    },
    "assert largest_neg([5, 4, 4, -8, -9]) == -9": {
      "result": false,
      "time": 0.039886474609375,
      "error": null
    },
    "assert largest_neg([3, 2, 4, -8, -10]) == -10": {
      "result": false,
      "time": 0.03399372100830078,
      "error": null
    },
    "assert largest_neg([5, 5, 6, -9, -7]) == -9": {
      "result": false,
      "time": 0.03506183624267578,
      "error": null
    },
    "assert largest_neg([3, 3, 1, -7, -9]) == -9": {
      "result": false,
      "time": 0.03443431854248047,
      "error": null
    },
    "assert largest_neg([3, 7, 5, -13, -13]) == -13": {
      "result": true,
      "time": 0.03560900688171387,
      "error": null
    },
    "assert largest_neg([3, 5, 5, -13, -14]) == -14": {
      "result": false,
      "time": 0.03170943260192871,
      "error": null
    },
    "assert largest_neg([2, 4, 5, -10, -7]) == -10": {
      "result": false,
      "time": 0.03380870819091797,
      "error": null
    },
    "assert largest_neg([4, 4, 7, -9, -11]) == -11": {
      "result": false,
      "time": 0.04134416580200195,
      "error": null
    },
    "assert largest_neg([6, 1, 8, -8, -6]) == -8": {
      "result": false,
      "time": 0.03459763526916504,
      "error": null
    },
    "assert largest_neg([1, 1, 2, -12, -8]) == -12": {
      "result": false,
      "time": 0.03450894355773926,
      "error": null
    },
    "assert largest_neg([6, 1, 3, -7, -8]) == -8": {
      "result": false,
      "time": 0.029892444610595703,
      "error": null
    },
    "assert largest_neg([3, 2, 3, -3, -10]) == -10": {
      "result": false,
      "time": 0.03863072395324707,
      "error": null
    },
    "assert largest_neg([4, 3, 4, -5, -7]) == -7": {
      "result": false,
      "time": 0.04006671905517578,
      "error": null
    },
    "assert largest_neg([5, 4, 5, -3, -7]) == -7": {
      "result": false,
      "time": 0.03600907325744629,
      "error": null
    },
    "assert largest_neg([3, 7, 4, 8, -4]) == -4": {
      "result": true,
      "time": 0.03230929374694824,
      "error": null
    },
    "assert largest_neg([2, 3, 5, 6, -3]) == -3": {
      "result": true,
      "time": 0.03667044639587402,
      "error": null
    },
    "assert largest_neg([6, 5, 6, 2, -1]) == -1": {
      "result": true,
      "time": 0.038033485412597656,
      "error": null
    },
    "assert largest_neg([2, 3, 7, 7, 4]) == 2": {
      "result": false,
      "time": 0.03944277763366699,
      "error": null
    },
    "assert largest_neg([3, 7, 8, 2, -6]) == -6": {
      "result": true,
      "time": 0.03315424919128418,
      "error": null
    },
    "assert largest_neg([5, 6, 1, 7, -4]) == -4": {
      "result": true,
      "time": 0.03391623497009277,
      "error": null
    },
    "assert largest_neg([2, 7, 1, 6, -4]) == -4": {
      "result": true,
      "time": 0.03479194641113281,
      "error": null
    },
    "assert largest_neg([1, 1, 4, 1, -3]) == -3": {
      "result": true,
      "time": 0.03661012649536133,
      "error": null
    },
    "assert largest_neg([4, 3, 3, 1, -5]) == -5": {
      "result": true,
      "time": 0.037645578384399414,
      "error": null
    },
    "assert largest_neg([1, 7, 8, 4, 3]) == 1": {
      "result": false,
      "time": 0.04602384567260742,
      "error": null
    },
    "assert largest_neg([6, 7, 3, 9, -2]) == -2": {
      "result": true,
      "time": 0.03927040100097656,
      "error": null
    },
    "assert largest_neg([5, 3, 3, 1, -3]) == -3": {
      "result": true,
      "time": 0.03211712837219238,
      "error": null
    },
    "assert largest_neg([5, 3, 8, 6, 3]) == 3": {
      "result": false,
      "time": 0.034134626388549805,
      "error": null
    },
    "assert largest_neg([2, 3, 7, 8, -3]) == -3": {
      "result": true,
      "time": 0.035776615142822266,
      "error": null
    },
    "assert largest_neg([3, 2, 3, 3, -4]) == -4": {
      "result": true,
      "time": 0.036744117736816406,
      "error": null
    },
    "assert largest_neg([4, 1, 7, 1, 4]) == 1": {
      "result": false,
      "time": 0.03738045692443848,
      "error": null
    },
    "assert largest_neg([2, 6, 6, 3, -4]) == -4": {
      "result": true,
      "time": 0.03699541091918945,
      "error": null
    },
    "assert largest_neg([5, 6, 8, 4, -1]) == -1": {
      "result": true,
      "time": 0.03810453414916992,
      "error": null
    },
    "assert largest_neg([3, 3, 8, 2, -5]) == -5": {
      "result": true,
      "time": 0.0369877815246582,
      "error": null
    },
    "assert largest_neg([3, 1, 4, 7, -4]) == -4": {
      "result": true,
      "time": 0.03682374954223633,
      "error": null
    },
    "assert largest_neg([2, 4, 8, 1, 2]) == 1": {
      "result": false,
      "time": 0.04070854187011719,
      "error": null
    },
    "assert largest_neg([1, 5, 6, 4, -2]) == -2": {
      "result": true,
      "time": 0.03819918632507324,
      "error": null
    },
    "assert largest_neg([4, 5, 6, 3, -5]) == -5": {
      "result": true,
      "time": 0.03449416160583496,
      "error": null
    },
    "assert largest_neg([4, 1, 2, 5, 0]) == 0": {
      "result": false,
      "time": 0.03666043281555176,
      "error": null
    },
    "assert largest_neg([4, 6, 3, 6, -3]) == -3": {
      "result": true,
      "time": 0.03353071212768555,
      "error": null
    },
    "assert largest_neg([2, 7, 3, 3, -3]) == -3": {
      "result": true,
      "time": 0.03098440170288086,
      "error": null
    },
    "assert largest_neg([3, 2, 1, 2, -3]) == -3": {
      "result": true,
      "time": 0.039824724197387695,
      "error": null
    },
    "assert largest_neg([5, 4, 4, 2, 0]) == 0": {
      "result": false,
      "time": 0.03428173065185547,
      "error": null
    },
    "assert largest_neg([1, 4, 6, 1, 0]) == 0": {
      "result": false,
      "time": 0.03760814666748047,
      "error": null
    },
    "assert largest_neg([1, 1, 1, 7, -1]) == -1": {
      "result": true,
      "time": 0.03955650329589844,
      "error": null
    },
    "assert largest_neg([1, 3, 4, 1, -4]) == -4": {
      "result": true,
      "time": 0.037667274475097656,
      "error": null
    },
    "assert largest_neg([1, 1, 6, 1, -1]) == -1": {
      "result": true,
      "time": 0.033161163330078125,
      "error": null
    },
    "assert largest_neg([3, 7, 4, 6, -5]) == -5": {
      "result": true,
      "time": 0.03665018081665039,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.38235294117647056,
  "general_error": "",
  "has_testcase_error": false
}