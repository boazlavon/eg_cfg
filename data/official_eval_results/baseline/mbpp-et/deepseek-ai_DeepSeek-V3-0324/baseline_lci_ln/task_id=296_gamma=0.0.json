{
  "code": "def get_Inv_Count(arr, n):\n    inversion_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inversion_count += 1\n    return inversion_count",
  "results": {
    "assert get_Inv_Count([1,20,6,4,5],5) == 5": {
      "result": true,
      "time": 0.044939517974853516,
      "error": null
    },
    "assert get_Inv_Count([1,2,1],3) == 1": {
      "result": true,
      "time": 0.055936336517333984,
      "error": null
    },
    "assert get_Inv_Count([1,2,5,6,1],5) == 3": {
      "result": true,
      "time": 0.04669356346130371,
      "error": null
    },
    "assert get_Inv_Count([1, 22, 8, 3, 10], 1) == 0": {
      "result": true,
      "time": 0.044569969177246094,
      "error": null
    },
    "assert get_Inv_Count([6, 22, 10, 6, 3], 3) == 1": {
      "result": true,
      "time": 0.05203604698181152,
      "error": null
    },
    "assert get_Inv_Count([2, 16, 4, 6, 10], 1) == 0": {
      "result": true,
      "time": 0.044289588928222656,
      "error": null
    },
    "assert get_Inv_Count([2, 16, 7, 1, 4], 4) == 4": {
      "result": true,
      "time": 0.04896712303161621,
      "error": null
    },
    "assert get_Inv_Count([4, 18, 4, 9, 6], 3) == 1": {
      "result": true,
      "time": 0.04335951805114746,
      "error": null
    },
    "assert get_Inv_Count([2, 24, 2, 3, 2], 2) == 0": {
      "result": true,
      "time": 0.048693180084228516,
      "error": null
    },
    "assert get_Inv_Count([4, 16, 7, 2, 3], 1) == 0": {
      "result": true,
      "time": 0.05608725547790527,
      "error": null
    },
    "assert get_Inv_Count([3, 24, 3, 5, 5], 4) == 2": {
      "result": true,
      "time": 0.03806662559509277,
      "error": null
    },
    "assert get_Inv_Count([5, 25, 11, 1, 4], 3) == 1": {
      "result": true,
      "time": 0.04684257507324219,
      "error": null
    },
    "assert get_Inv_Count([4, 20, 2, 5, 2], 3) == 2": {
      "result": true,
      "time": 0.0453493595123291,
      "error": null
    },
    "assert get_Inv_Count([4, 23, 5, 5, 2], 2) == 0": {
      "result": true,
      "time": 0.043292999267578125,
      "error": null
    },
    "assert get_Inv_Count([1, 17, 4, 7, 2], 2) == 0": {
      "result": true,
      "time": 0.03849625587463379,
      "error": null
    },
    "assert get_Inv_Count([5, 17, 8, 1, 6], 4) == 4": {
      "result": true,
      "time": 0.0425105094909668,
      "error": null
    },
    "assert get_Inv_Count([2, 22, 9, 5, 2], 1) == 0": {
      "result": true,
      "time": 0.03822612762451172,
      "error": null
    },
    "assert get_Inv_Count([5, 23, 11, 6, 1], 2) == 0": {
      "result": true,
      "time": 0.03965306282043457,
      "error": null
    },
    "assert get_Inv_Count([4, 20, 5, 6, 5], 2) == 0": {
      "result": true,
      "time": 0.046977996826171875,
      "error": null
    },
    "assert get_Inv_Count([6, 21, 10, 8, 1], 2) == 0": {
      "result": true,
      "time": 0.03809642791748047,
      "error": null
    },
    "assert get_Inv_Count([3, 17, 5, 4, 8], 5) == 4": {
      "result": true,
      "time": 0.0397186279296875,
      "error": null
    },
    "assert get_Inv_Count([6, 19, 5, 4, 8], 3) == 2": {
      "result": true,
      "time": 0.04219675064086914,
      "error": null
    },
    "assert get_Inv_Count([6, 15, 7, 4, 2], 1) == 0": {
      "result": true,
      "time": 0.04334616661071777,
      "error": null
    },
    "assert get_Inv_Count([3, 21, 7, 9, 3], 3) == 1": {
      "result": true,
      "time": 0.03363394737243652,
      "error": null
    },
    "assert get_Inv_Count([6, 25, 3, 3, 4], 4) == 4": {
      "result": true,
      "time": 0.03963732719421387,
      "error": null
    },
    "assert get_Inv_Count([5, 16, 8, 4, 7], 1) == 0": {
      "result": true,
      "time": 0.04252457618713379,
      "error": null
    },
    "assert get_Inv_Count([3, 17, 9, 9, 8], 4) == 2": {
      "result": true,
      "time": 0.03637981414794922,
      "error": null
    },
    "assert get_Inv_Count([5, 25, 11, 8, 9], 5) == 5": {
      "result": true,
      "time": 0.046433210372924805,
      "error": null
    },
    "assert get_Inv_Count([2, 16, 3, 1, 2], 1) == 0": {
      "result": true,
      "time": 0.044362783432006836,
      "error": null
    },
    "assert get_Inv_Count([6, 15, 1, 3, 5], 3) == 2": {
      "result": true,
      "time": 0.049660444259643555,
      "error": null
    },
    "assert get_Inv_Count([6, 17, 6, 3, 1], 5) == 8": {
      "result": true,
      "time": 0.03531694412231445,
      "error": null
    },
    "assert get_Inv_Count([2, 25, 11, 6, 9], 1) == 0": {
      "result": true,
      "time": 0.04134654998779297,
      "error": null
    },
    "assert get_Inv_Count([5, 20, 3, 4, 5], 1) == 0": {
      "result": true,
      "time": 0.03896141052246094,
      "error": null
    },
    "assert get_Inv_Count([3, 17, 1, 5, 3], 3) == 2": {
      "result": true,
      "time": 0.0374908447265625,
      "error": null
    },
    "assert get_Inv_Count([6, 19, 6, 7, 10], 1) == 0": {
      "result": true,
      "time": 0.04182291030883789,
      "error": null
    },
    "assert get_Inv_Count([2, 15, 8, 3, 2], 5) == 6": {
      "result": true,
      "time": 0.04096841812133789,
      "error": null
    },
    "assert get_Inv_Count([4, 6, 1], 3) == 2": {
      "result": true,
      "time": 0.03781843185424805,
      "error": null
    },
    "assert get_Inv_Count([2, 3, 6], 1) == 0": {
      "result": true,
      "time": 0.039396047592163086,
      "error": null
    },
    "assert get_Inv_Count([2, 5, 4], 2) == 0": {
      "result": true,
      "time": 0.03974294662475586,
      "error": null
    },
    "assert get_Inv_Count([1, 2, 1], 2) == 0": {
      "result": true,
      "time": 0.049637556076049805,
      "error": null
    },
    "assert get_Inv_Count([2, 2, 6], 1) == 0": {
      "result": true,
      "time": 0.03604841232299805,
      "error": null
    },
    "assert get_Inv_Count([6, 5, 2], 2) == 1": {
      "result": true,
      "time": 0.03780174255371094,
      "error": null
    },
    "assert get_Inv_Count([1, 5, 6], 1) == 0": {
      "result": true,
      "time": 0.04881477355957031,
      "error": null
    },
    "assert get_Inv_Count([4, 3, 4], 3) == 1": {
      "result": true,
      "time": 0.046456098556518555,
      "error": null
    },
    "assert get_Inv_Count([2, 2, 5], 1) == 0": {
      "result": true,
      "time": 0.03983759880065918,
      "error": null
    },
    "assert get_Inv_Count([2, 2, 2], 2) == 0": {
      "result": true,
      "time": 0.04051947593688965,
      "error": null
    },
    "assert get_Inv_Count([5, 6, 5], 3) == 1": {
      "result": true,
      "time": 0.04233694076538086,
      "error": null
    },
    "assert get_Inv_Count([2, 4, 1], 2) == 0": {
      "result": true,
      "time": 0.04239225387573242,
      "error": null
    },
    "assert get_Inv_Count([1, 2, 6], 1) == 0": {
      "result": true,
      "time": 0.04319405555725098,
      "error": null
    },
    "assert get_Inv_Count([2, 7, 2], 3) == 1": {
      "result": true,
      "time": 0.04726696014404297,
      "error": null
    },
    "assert get_Inv_Count([6, 6, 4], 3) == 2": {
      "result": true,
      "time": 0.04133176803588867,
      "error": null
    },
    "assert get_Inv_Count([1, 4, 6], 1) == 0": {
      "result": true,
      "time": 0.04100823402404785,
      "error": null
    },
    "assert get_Inv_Count([5, 7, 1], 3) == 2": {
      "result": true,
      "time": 0.04288959503173828,
      "error": null
    },
    "assert get_Inv_Count([6, 3, 3], 1) == 0": {
      "result": true,
      "time": 0.03851199150085449,
      "error": null
    },
    "assert get_Inv_Count([6, 2, 6], 1) == 0": {
      "result": true,
      "time": 0.041164398193359375,
      "error": null
    },
    "assert get_Inv_Count([6, 3, 4], 2) == 1": {
      "result": true,
      "time": 0.0399174690246582,
      "error": null
    },
    "assert get_Inv_Count([2, 2, 3], 3) == 0": {
      "result": true,
      "time": 0.04342961311340332,
      "error": null
    },
    "assert get_Inv_Count([2, 2, 6], 3) == 0": {
      "result": true,
      "time": 0.03607821464538574,
      "error": null
    },
    "assert get_Inv_Count([2, 5, 2], 3) == 1": {
      "result": true,
      "time": 0.03343057632446289,
      "error": null
    },
    "assert get_Inv_Count([4, 3, 6], 2) == 1": {
      "result": true,
      "time": 0.045905351638793945,
      "error": null
    },
    "assert get_Inv_Count([5, 7, 2], 3) == 2": {
      "result": true,
      "time": 0.04420804977416992,
      "error": null
    },
    "assert get_Inv_Count([4, 1, 4], 1) == 0": {
      "result": true,
      "time": 0.0416111946105957,
      "error": null
    },
    "assert get_Inv_Count([6, 1, 2], 1) == 0": {
      "result": true,
      "time": 0.0354464054107666,
      "error": null
    },
    "assert get_Inv_Count([5, 7, 5], 3) == 1": {
      "result": true,
      "time": 0.03591656684875488,
      "error": null
    },
    "assert get_Inv_Count([3, 4, 5], 1) == 0": {
      "result": true,
      "time": 0.04045891761779785,
      "error": null
    },
    "assert get_Inv_Count([6, 3, 2], 3) == 3": {
      "result": true,
      "time": 0.03744697570800781,
      "error": null
    },
    "assert get_Inv_Count([1, 4, 6], 2) == 0": {
      "result": true,
      "time": 0.041825056076049805,
      "error": null
    },
    "assert get_Inv_Count([3, 5, 3], 3) == 1": {
      "result": true,
      "time": 0.036046504974365234,
      "error": null
    },
    "assert get_Inv_Count([3, 1, 2], 2) == 1": {
      "result": true,
      "time": 0.036933183670043945,
      "error": null
    },
    "assert get_Inv_Count([4, 6, 7, 11, 4], 3) == 0": {
      "result": true,
      "time": 0.04739975929260254,
      "error": null
    },
    "assert get_Inv_Count([5, 2, 1, 2, 6], 3) == 3": {
      "result": true,
      "time": 0.04234457015991211,
      "error": null
    },
    "assert get_Inv_Count([1, 3, 3, 7, 4], 1) == 0": {
      "result": true,
      "time": 0.03794455528259277,
      "error": null
    },
    "assert get_Inv_Count([3, 6, 2, 1, 1], 5) == 8": {
      "result": true,
      "time": 0.03816866874694824,
      "error": null
    },
    "assert get_Inv_Count([3, 4, 8, 6, 4], 2) == 0": {
      "result": true,
      "time": 0.04396390914916992,
      "error": null
    },
    "assert get_Inv_Count([1, 7, 4, 8, 3], 1) == 0": {
      "result": true,
      "time": 0.03661513328552246,
      "error": null
    },
    "assert get_Inv_Count([4, 5, 2, 7, 2], 3) == 2": {
      "result": true,
      "time": 0.036716461181640625,
      "error": null
    },
    "assert get_Inv_Count([5, 2, 2, 10, 6], 4) == 2": {
      "result": true,
      "time": 0.0388331413269043,
      "error": null
    },
    "assert get_Inv_Count([1, 7, 8, 3, 2], 4) == 2": {
      "result": true,
      "time": 0.043707847595214844,
      "error": null
    },
    "assert get_Inv_Count([4, 5, 8, 6, 5], 5) == 3": {
      "result": true,
      "time": 0.04212164878845215,
      "error": null
    },
    "assert get_Inv_Count([2, 3, 7, 3, 2], 2) == 0": {
      "result": true,
      "time": 0.04150128364562988,
      "error": null
    },
    "assert get_Inv_Count([3, 5, 5, 2, 5], 2) == 0": {
      "result": true,
      "time": 0.056313276290893555,
      "error": null
    },
    "assert get_Inv_Count([6, 3, 7, 8, 6], 3) == 1": {
      "result": true,
      "time": 0.04770207405090332,
      "error": null
    },
    "assert get_Inv_Count([3, 2, 7, 8, 1], 1) == 0": {
      "result": true,
      "time": 0.054289817810058594,
      "error": null
    },
    "assert get_Inv_Count([5, 3, 3, 3, 3], 3) == 2": {
      "result": true,
      "time": 0.059388160705566406,
      "error": null
    },
    "assert get_Inv_Count([4, 1, 1, 7, 4], 2) == 1": {
      "result": true,
      "time": 0.049570560455322266,
      "error": null
    },
    "assert get_Inv_Count([3, 3, 1, 2, 6], 3) == 2": {
      "result": true,
      "time": 0.05154561996459961,
      "error": null
    },
    "assert get_Inv_Count([1, 7, 5, 1, 6], 5) == 4": {
      "result": true,
      "time": 0.05175900459289551,
      "error": null
    },
    "assert get_Inv_Count([5, 6, 2, 10, 4], 2) == 0": {
      "result": true,
      "time": 0.046525001525878906,
      "error": null
    },
    "assert get_Inv_Count([6, 6, 2, 2, 3], 3) == 2": {
      "result": true,
      "time": 0.050312042236328125,
      "error": null
    },
    "assert get_Inv_Count([4, 2, 3, 9, 3], 3) == 2": {
      "result": true,
      "time": 0.041312217712402344,
      "error": null
    },
    "assert get_Inv_Count([3, 2, 1, 4, 5], 3) == 3": {
      "result": true,
      "time": 0.04394984245300293,
      "error": null
    },
    "assert get_Inv_Count([2, 6, 4, 5, 5], 1) == 0": {
      "result": true,
      "time": 0.04872417449951172,
      "error": null
    },
    "assert get_Inv_Count([6, 3, 10, 1, 6], 1) == 0": {
      "result": true,
      "time": 0.04677271842956543,
      "error": null
    },
    "assert get_Inv_Count([6, 3, 6, 3, 2], 2) == 1": {
      "result": true,
      "time": 0.04878664016723633,
      "error": null
    },
    "assert get_Inv_Count([1, 3, 4, 9, 6], 4) == 0": {
      "result": true,
      "time": 0.04487109184265137,
      "error": null
    },
    "assert get_Inv_Count([3, 5, 5, 11, 6], 2) == 0": {
      "result": true,
      "time": 0.047357797622680664,
      "error": null
    },
    "assert get_Inv_Count([2, 6, 9, 8, 6], 1) == 0": {
      "result": true,
      "time": 0.05120444297790527,
      "error": null
    },
    "assert get_Inv_Count([4, 4, 6, 3, 3], 4) == 3": {
      "result": true,
      "time": 0.05285334587097168,
      "error": null
    },
    "assert get_Inv_Count([5, 4, 10, 1, 3], 4) == 4": {
      "result": true,
      "time": 0.045978546142578125,
      "error": null
    },
    "assert get_Inv_Count([1, 2, 8, 1, 3], 2) == 0": {
      "result": true,
      "time": 0.057317495346069336,
      "error": null
    },
    "assert get_Inv_Count([6, 1, 9, 11, 6], 1) == 0": {
      "result": true,
      "time": 0.049603939056396484,
      "error": null
    },
    "assert get_Inv_Count([2, 6, 2, 5, 1], 3) == 1": {
      "result": true,
      "time": 0.05889463424682617,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}