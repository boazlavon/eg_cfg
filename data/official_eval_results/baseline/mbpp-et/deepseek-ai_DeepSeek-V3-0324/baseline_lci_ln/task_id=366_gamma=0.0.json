{
  "code": "def adjacent_num_product(lst):\n    if len(lst) < 2:\n        return 0\n    max_product = lst[0] * lst[1]\n    for i in range(1, len(lst) - 1):\n        current_product = lst[i] * lst[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
  "results": {
    "assert adjacent_num_product([1,2,3,4,5,6]) == 30": {
      "result": true,
      "time": 0.06412196159362793,
      "error": null
    },
    "assert adjacent_num_product([1,2,3,4,5]) == 20": {
      "result": true,
      "time": 0.05744194984436035,
      "error": null
    },
    "assert adjacent_num_product([2,3]) == 6": {
      "result": true,
      "time": 0.060742855072021484,
      "error": null
    },
    "assert adjacent_num_product([1, 3, 3, 9, 4, 8]) == 36": {
      "result": true,
      "time": 0.05869412422180176,
      "error": null
    },
    "assert adjacent_num_product([1, 1, 4, 1, 9, 8]) == 72": {
      "result": true,
      "time": 0.06995081901550293,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 3, 6, 10, 2]) == 60": {
      "result": true,
      "time": 0.0674276351928711,
      "error": null
    },
    "assert adjacent_num_product([2, 6, 8, 6, 3, 6]) == 48": {
      "result": true,
      "time": 0.05116152763366699,
      "error": null
    },
    "assert adjacent_num_product([2, 5, 4, 3, 9, 9]) == 81": {
      "result": true,
      "time": 0.06527018547058105,
      "error": null
    },
    "assert adjacent_num_product([2, 5, 4, 1, 3, 1]) == 20": {
      "result": true,
      "time": 0.06550908088684082,
      "error": null
    },
    "assert adjacent_num_product([3, 4, 4, 2, 6, 4]) == 24": {
      "result": true,
      "time": 0.0650181770324707,
      "error": null
    },
    "assert adjacent_num_product([5, 1, 3, 4, 10, 6]) == 60": {
      "result": true,
      "time": 0.06107783317565918,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 5, 3, 9, 9]) == 81": {
      "result": true,
      "time": 0.06007957458496094,
      "error": null
    },
    "assert adjacent_num_product([3, 1, 4, 3, 5, 1]) == 15": {
      "result": true,
      "time": 0.04293656349182129,
      "error": null
    },
    "assert adjacent_num_product([2, 1, 4, 1, 8, 8]) == 64": {
      "result": true,
      "time": 0.04632973670959473,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 4, 6, 2, 8]) == 24": {
      "result": true,
      "time": 0.04638957977294922,
      "error": null
    },
    "assert adjacent_num_product([2, 1, 7, 4, 1, 4]) == 28": {
      "result": true,
      "time": 0.04005885124206543,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 1, 9, 7, 11]) == 77": {
      "result": true,
      "time": 0.037267446517944336,
      "error": null
    },
    "assert adjacent_num_product([3, 3, 7, 6, 9, 6]) == 54": {
      "result": true,
      "time": 0.04753756523132324,
      "error": null
    },
    "assert adjacent_num_product([1, 3, 5, 7, 1, 1]) == 35": {
      "result": true,
      "time": 0.03780674934387207,
      "error": null
    },
    "assert adjacent_num_product([4, 2, 8, 4, 8, 4]) == 32": {
      "result": true,
      "time": 0.0448908805847168,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 7, 9, 2, 3]) == 63": {
      "result": true,
      "time": 0.041930437088012695,
      "error": null
    },
    "assert adjacent_num_product([1, 2, 5, 5, 8, 3]) == 40": {
      "result": true,
      "time": 0.03712105751037598,
      "error": null
    },
    "assert adjacent_num_product([6, 6, 6, 6, 2, 1]) == 36": {
      "result": true,
      "time": 0.035474300384521484,
      "error": null
    },
    "assert adjacent_num_product([1, 7, 4, 5, 7, 11]) == 77": {
      "result": true,
      "time": 0.05224108695983887,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 4, 6, 1, 2]) == 24": {
      "result": true,
      "time": 0.04577827453613281,
      "error": null
    },
    "assert adjacent_num_product([5, 2, 1, 4, 8, 10]) == 80": {
      "result": true,
      "time": 0.03578662872314453,
      "error": null
    },
    "assert adjacent_num_product([1, 6, 3, 3, 4, 3]) == 18": {
      "result": true,
      "time": 0.04272818565368652,
      "error": null
    },
    "assert adjacent_num_product([3, 3, 4, 2, 6, 10]) == 60": {
      "result": true,
      "time": 0.046120643615722656,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 8, 7, 10, 1]) == 70": {
      "result": true,
      "time": 0.03679800033569336,
      "error": null
    },
    "assert adjacent_num_product([6, 4, 2, 7, 5, 9]) == 45": {
      "result": true,
      "time": 0.03808951377868652,
      "error": null
    },
    "assert adjacent_num_product([3, 7, 5, 3, 4, 2]) == 35": {
      "result": true,
      "time": 0.0376739501953125,
      "error": null
    },
    "assert adjacent_num_product([2, 1, 6, 1, 5, 9]) == 45": {
      "result": true,
      "time": 0.03728318214416504,
      "error": null
    },
    "assert adjacent_num_product([2, 2, 1, 6, 3, 8]) == 24": {
      "result": true,
      "time": 0.038855552673339844,
      "error": null
    },
    "assert adjacent_num_product([3, 4, 4, 4, 2, 3]) == 16": {
      "result": true,
      "time": 0.04278445243835449,
      "error": null
    },
    "assert adjacent_num_product([6, 5, 5, 8, 9, 11]) == 99": {
      "result": true,
      "time": 0.046784162521362305,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 1, 3, 9, 9]) == 81": {
      "result": true,
      "time": 0.03974318504333496,
      "error": null
    },
    "assert adjacent_num_product([5, 1, 1, 9, 4]) == 36": {
      "result": true,
      "time": 0.03642988204956055,
      "error": null
    },
    "assert adjacent_num_product([3, 7, 8, 4, 5]) == 56": {
      "result": true,
      "time": 0.0462038516998291,
      "error": null
    },
    "assert adjacent_num_product([1, 7, 1, 9, 1]) == 9": {
      "result": true,
      "time": 0.04674386978149414,
      "error": null
    },
    "assert adjacent_num_product([3, 7, 1, 3, 5]) == 21": {
      "result": true,
      "time": 0.035704851150512695,
      "error": null
    },
    "assert adjacent_num_product([1, 3, 3, 1, 5]) == 9": {
      "result": true,
      "time": 0.03957939147949219,
      "error": null
    },
    "assert adjacent_num_product([1, 2, 4, 4, 5]) == 20": {
      "result": true,
      "time": 0.0425267219543457,
      "error": null
    },
    "assert adjacent_num_product([5, 6, 7, 8, 2]) == 56": {
      "result": true,
      "time": 0.04582834243774414,
      "error": null
    },
    "assert adjacent_num_product([3, 6, 8, 8, 5]) == 64": {
      "result": true,
      "time": 0.044272422790527344,
      "error": null
    },
    "assert adjacent_num_product([5, 1, 7, 1, 8]) == 8": {
      "result": true,
      "time": 0.04142022132873535,
      "error": null
    },
    "assert adjacent_num_product([5, 6, 8, 2, 5]) == 48": {
      "result": true,
      "time": 0.04584336280822754,
      "error": null
    },
    "assert adjacent_num_product([5, 5, 5, 9, 8]) == 72": {
      "result": true,
      "time": 0.04838919639587402,
      "error": null
    },
    "assert adjacent_num_product([4, 2, 4, 4, 3]) == 16": {
      "result": true,
      "time": 0.03972649574279785,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 3, 8, 2]) == 24": {
      "result": true,
      "time": 0.0452730655670166,
      "error": null
    },
    "assert adjacent_num_product([6, 3, 4, 7, 7]) == 49": {
      "result": true,
      "time": 0.04991745948791504,
      "error": null
    },
    "assert adjacent_num_product([6, 5, 4, 6, 3]) == 30": {
      "result": true,
      "time": 0.044165849685668945,
      "error": null
    },
    "assert adjacent_num_product([2, 4, 5, 1, 8]) == 20": {
      "result": true,
      "time": 0.03841805458068848,
      "error": null
    },
    "assert adjacent_num_product([6, 2, 2, 4, 4]) == 16": {
      "result": true,
      "time": 0.04199361801147461,
      "error": null
    },
    "assert adjacent_num_product([4, 6, 2, 1, 1]) == 24": {
      "result": true,
      "time": 0.03342175483703613,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 4, 5, 2]) == 20": {
      "result": true,
      "time": 0.04225945472717285,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 4, 9, 10]) == 90": {
      "result": true,
      "time": 0.041054725646972656,
      "error": null
    },
    "assert adjacent_num_product([2, 7, 5, 7, 1]) == 35": {
      "result": true,
      "time": 0.044030189514160156,
      "error": null
    },
    "assert adjacent_num_product([1, 1, 3, 9, 7]) == 63": {
      "result": true,
      "time": 0.04988884925842285,
      "error": null
    },
    "assert adjacent_num_product([1, 1, 2, 8, 1]) == 16": {
      "result": true,
      "time": 0.04922199249267578,
      "error": null
    },
    "assert adjacent_num_product([4, 4, 2, 1, 5]) == 16": {
      "result": true,
      "time": 0.04744768142700195,
      "error": null
    },
    "assert adjacent_num_product([4, 5, 4, 2, 3]) == 20": {
      "result": true,
      "time": 0.043668270111083984,
      "error": null
    },
    "assert adjacent_num_product([6, 6, 5, 5, 4]) == 36": {
      "result": true,
      "time": 0.04224824905395508,
      "error": null
    },
    "assert adjacent_num_product([6, 7, 7, 6, 1]) == 49": {
      "result": true,
      "time": 0.04252791404724121,
      "error": null
    },
    "assert adjacent_num_product([5, 2, 7, 2, 8]) == 16": {
      "result": true,
      "time": 0.040950775146484375,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 5, 7, 2]) == 35": {
      "result": true,
      "time": 0.04329085350036621,
      "error": null
    },
    "assert adjacent_num_product([6, 2, 8, 8, 4]) == 64": {
      "result": true,
      "time": 0.04963040351867676,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 6, 5, 5]) == 30": {
      "result": true,
      "time": 0.057671308517456055,
      "error": null
    },
    "assert adjacent_num_product([4, 7, 4, 9, 3]) == 36": {
      "result": true,
      "time": 0.048250675201416016,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 8, 1, 3]) == 24": {
      "result": true,
      "time": 0.05542945861816406,
      "error": null
    },
    "assert adjacent_num_product([3, 6]) == 18": {
      "result": true,
      "time": 0.04683566093444824,
      "error": null
    },
    "assert adjacent_num_product([5, 7]) == 35": {
      "result": true,
      "time": 0.05382966995239258,
      "error": null
    },
    "assert adjacent_num_product([3, 5]) == 15": {
      "result": true,
      "time": 0.046965837478637695,
      "error": null
    },
    "assert adjacent_num_product([6, 3]) == 18": {
      "result": true,
      "time": 0.05049276351928711,
      "error": null
    },
    "assert adjacent_num_product([2, 5]) == 10": {
      "result": true,
      "time": 0.05036187171936035,
      "error": null
    },
    "assert adjacent_num_product([7, 3]) == 21": {
      "result": true,
      "time": 0.04825949668884277,
      "error": null
    },
    "assert adjacent_num_product([6, 8]) == 48": {
      "result": true,
      "time": 0.05547189712524414,
      "error": null
    },
    "assert adjacent_num_product([2, 3]) == 6": {
      "result": true,
      "time": 0.0530393123626709,
      "error": null
    },
    "assert adjacent_num_product([2, 8]) == 16": {
      "result": true,
      "time": 0.047652482986450195,
      "error": null
    },
    "assert adjacent_num_product([3, 2]) == 6": {
      "result": true,
      "time": 0.04818296432495117,
      "error": null
    },
    "assert adjacent_num_product([2, 1]) == 2": {
      "result": true,
      "time": 0.04557538032531738,
      "error": null
    },
    "assert adjacent_num_product([2, 4]) == 8": {
      "result": true,
      "time": 0.050368547439575195,
      "error": null
    },
    "assert adjacent_num_product([6, 6]) == 36": {
      "result": true,
      "time": 0.04296445846557617,
      "error": null
    },
    "assert adjacent_num_product([5, 1]) == 5": {
      "result": true,
      "time": 0.0500035285949707,
      "error": null
    },
    "assert adjacent_num_product([4, 8]) == 32": {
      "result": true,
      "time": 0.054366111755371094,
      "error": null
    },
    "assert adjacent_num_product([3, 3]) == 9": {
      "result": true,
      "time": 0.0482325553894043,
      "error": null
    },
    "assert adjacent_num_product([4, 6]) == 24": {
      "result": true,
      "time": 0.05473756790161133,
      "error": null
    },
    "assert adjacent_num_product([1, 5]) == 5": {
      "result": true,
      "time": 0.054782867431640625,
      "error": null
    },
    "assert adjacent_num_product([5, 4]) == 20": {
      "result": true,
      "time": 0.0464482307434082,
      "error": null
    },
    "assert adjacent_num_product([7, 5]) == 35": {
      "result": true,
      "time": 0.040427446365356445,
      "error": null
    },
    "assert adjacent_num_product([7, 6]) == 42": {
      "result": true,
      "time": 0.05713176727294922,
      "error": null
    },
    "assert adjacent_num_product([1, 1]) == 1": {
      "result": true,
      "time": 0.05266737937927246,
      "error": null
    },
    "assert adjacent_num_product([1, 8]) == 8": {
      "result": true,
      "time": 0.051882028579711914,
      "error": null
    },
    "assert adjacent_num_product([2, 7]) == 14": {
      "result": true,
      "time": 0.06309032440185547,
      "error": null
    },
    "assert adjacent_num_product([3, 4]) == 12": {
      "result": true,
      "time": 0.047466278076171875,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}