{
  "code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = len(lst[0])\n    for sublist in lst:\n        current_length = len(sublist)\n        if current_length < min_length:\n            min_length = current_length\n    return min_length",
  "results": {
    "assert Find_Min_Length([[1],[1,2]]) == 1": {
      "result": true,
      "time": 0.041460514068603516,
      "error": null
    },
    "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2": {
      "result": true,
      "time": 0.05049586296081543,
      "error": null
    },
    "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3": {
      "result": true,
      "time": 0.049745798110961914,
      "error": null
    },
    "assert Find_Min_Length([[3], [6, 5]]) == 1": {
      "result": true,
      "time": 0.04578685760498047,
      "error": null
    },
    "assert Find_Min_Length([[6], [1, 4]]) == 1": {
      "result": true,
      "time": 0.04237627983093262,
      "error": null
    },
    "assert Find_Min_Length([[5], [3, 4]]) == 1": {
      "result": true,
      "time": 0.04416775703430176,
      "error": null
    },
    "assert Find_Min_Length([[4], [1, 7]]) == 1": {
      "result": true,
      "time": 0.04197049140930176,
      "error": null
    },
    "assert Find_Min_Length([[6], [2, 2]]) == 1": {
      "result": true,
      "time": 0.042990922927856445,
      "error": null
    },
    "assert Find_Min_Length([[2], [4, 1]]) == 1": {
      "result": true,
      "time": 0.04951930046081543,
      "error": null
    },
    "assert Find_Min_Length([[6], [1, 5]]) == 1": {
      "result": true,
      "time": 0.04751300811767578,
      "error": null
    },
    "assert Find_Min_Length([[5], [4, 5]]) == 1": {
      "result": true,
      "time": 0.04842424392700195,
      "error": null
    },
    "assert Find_Min_Length([[6], [2, 7]]) == 1": {
      "result": true,
      "time": 0.04271864891052246,
      "error": null
    },
    "assert Find_Min_Length([[3], [6, 6]]) == 1": {
      "result": true,
      "time": 0.042281150817871094,
      "error": null
    },
    "assert Find_Min_Length([[4], [5, 7]]) == 1": {
      "result": true,
      "time": 0.04030942916870117,
      "error": null
    },
    "assert Find_Min_Length([[1], [4, 1]]) == 1": {
      "result": true,
      "time": 0.0577545166015625,
      "error": null
    },
    "assert Find_Min_Length([[3], [3, 5]]) == 1": {
      "result": true,
      "time": 0.04578518867492676,
      "error": null
    },
    "assert Find_Min_Length([[6], [4, 1]]) == 1": {
      "result": true,
      "time": 0.05210161209106445,
      "error": null
    },
    "assert Find_Min_Length([[1], [5, 4]]) == 1": {
      "result": true,
      "time": 0.047048091888427734,
      "error": null
    },
    "assert Find_Min_Length([[1], [3, 7]]) == 1": {
      "result": true,
      "time": 0.05103468894958496,
      "error": null
    },
    "assert Find_Min_Length([[6], [1, 1]]) == 1": {
      "result": true,
      "time": 0.042894840240478516,
      "error": null
    },
    "assert Find_Min_Length([[4], [6, 6]]) == 1": {
      "result": true,
      "time": 0.052469730377197266,
      "error": null
    },
    "assert Find_Min_Length([[6], [3, 1]]) == 1": {
      "result": true,
      "time": 0.04755854606628418,
      "error": null
    },
    "assert Find_Min_Length([[5], [4, 4]]) == 1": {
      "result": true,
      "time": 0.04151630401611328,
      "error": null
    },
    "assert Find_Min_Length([[3], [4, 6]]) == 1": {
      "result": true,
      "time": 0.045320987701416016,
      "error": null
    },
    "assert Find_Min_Length([[1], [1, 2]]) == 1": {
      "result": true,
      "time": 0.041697025299072266,
      "error": null
    },
    "assert Find_Min_Length([[4], [6, 7]]) == 1": {
      "result": true,
      "time": 0.03774094581604004,
      "error": null
    },
    "assert Find_Min_Length([[2], [6, 2]]) == 1": {
      "result": true,
      "time": 0.04394221305847168,
      "error": null
    },
    "assert Find_Min_Length([[6], [3, 2]]) == 1": {
      "result": true,
      "time": 0.04409432411193848,
      "error": null
    },
    "assert Find_Min_Length([[5], [2, 6]]) == 1": {
      "result": true,
      "time": 0.04467344284057617,
      "error": null
    },
    "assert Find_Min_Length([[6], [5, 7]]) == 1": {
      "result": true,
      "time": 0.050904035568237305,
      "error": null
    },
    "assert Find_Min_Length([[5], [3, 1]]) == 1": {
      "result": true,
      "time": 0.04016470909118652,
      "error": null
    },
    "assert Find_Min_Length([[2], [1, 7]]) == 1": {
      "result": true,
      "time": 0.051186323165893555,
      "error": null
    },
    "assert Find_Min_Length([[6], [4, 4]]) == 1": {
      "result": true,
      "time": 0.04082846641540527,
      "error": null
    },
    "assert Find_Min_Length([[4], [3, 5]]) == 1": {
      "result": true,
      "time": 0.05366158485412598,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [2, 1, 7], [2, 4, 8, 4]]) == 2": {
      "result": true,
      "time": 0.04879879951477051,
      "error": null
    },
    "assert Find_Min_Length([[3, 5], [3, 1, 7], [3, 5, 5, 2]]) == 2": {
      "result": true,
      "time": 0.03604578971862793,
      "error": null
    },
    "assert Find_Min_Length([[1, 1], [1, 7, 1], [1, 5, 8, 9]]) == 2": {
      "result": true,
      "time": 0.040976524353027344,
      "error": null
    },
    "assert Find_Min_Length([[6, 2], [6, 3, 7], [1, 2, 4, 9]]) == 2": {
      "result": true,
      "time": 0.03902292251586914,
      "error": null
    },
    "assert Find_Min_Length([[6, 7], [2, 1, 2], [1, 1, 2, 6]]) == 2": {
      "result": true,
      "time": 0.053893327713012695,
      "error": null
    },
    "assert Find_Min_Length([[1, 1], [1, 1, 2], [3, 1, 6, 9]]) == 2": {
      "result": true,
      "time": 0.045911312103271484,
      "error": null
    },
    "assert Find_Min_Length([[2, 6], [5, 4, 8], [1, 3, 7, 5]]) == 2": {
      "result": true,
      "time": 0.04487895965576172,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [3, 2, 5], [5, 7, 6, 2]]) == 2": {
      "result": true,
      "time": 0.042864322662353516,
      "error": null
    },
    "assert Find_Min_Length([[2, 1], [1, 7, 2], [5, 2, 7, 1]]) == 2": {
      "result": true,
      "time": 0.04830288887023926,
      "error": null
    },
    "assert Find_Min_Length([[5, 3], [6, 5, 7], [3, 1, 1, 9]]) == 2": {
      "result": true,
      "time": 0.05229592323303223,
      "error": null
    },
    "assert Find_Min_Length([[5, 2], [1, 1, 2], [6, 5, 1, 8]]) == 2": {
      "result": true,
      "time": 0.04147648811340332,
      "error": null
    },
    "assert Find_Min_Length([[4, 7], [3, 7, 3], [4, 3, 2, 5]]) == 2": {
      "result": true,
      "time": 0.04481983184814453,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [1, 4, 4], [2, 1, 5, 2]]) == 2": {
      "result": true,
      "time": 0.038686275482177734,
      "error": null
    },
    "assert Find_Min_Length([[4, 3], [5, 1, 1], [4, 4, 1, 7]]) == 2": {
      "result": true,
      "time": 0.04934215545654297,
      "error": null
    },
    "assert Find_Min_Length([[1, 6], [1, 2, 6], [2, 1, 5, 5]]) == 2": {
      "result": true,
      "time": 0.04528641700744629,
      "error": null
    },
    "assert Find_Min_Length([[2, 6], [1, 5, 3], [2, 4, 4, 1]]) == 2": {
      "result": true,
      "time": 0.044385671615600586,
      "error": null
    },
    "assert Find_Min_Length([[2, 5], [1, 6, 6], [5, 5, 7, 4]]) == 2": {
      "result": true,
      "time": 0.04214811325073242,
      "error": null
    },
    "assert Find_Min_Length([[4, 2], [4, 2, 5], [5, 2, 7, 1]]) == 2": {
      "result": true,
      "time": 0.04233694076538086,
      "error": null
    },
    "assert Find_Min_Length([[1, 1], [3, 5, 4], [3, 3, 4, 7]]) == 2": {
      "result": true,
      "time": 0.04836320877075195,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [2, 2, 2], [3, 7, 1, 9]]) == 2": {
      "result": true,
      "time": 0.04179120063781738,
      "error": null
    },
    "assert Find_Min_Length([[4, 6], [2, 7, 3], [4, 7, 8, 4]]) == 2": {
      "result": true,
      "time": 0.05095553398132324,
      "error": null
    },
    "assert Find_Min_Length([[6, 7], [2, 7, 3], [6, 3, 2, 9]]) == 2": {
      "result": true,
      "time": 0.04993486404418945,
      "error": null
    },
    "assert Find_Min_Length([[1, 5], [3, 3, 7], [6, 5, 2, 3]]) == 2": {
      "result": true,
      "time": 0.04094219207763672,
      "error": null
    },
    "assert Find_Min_Length([[2, 2], [4, 7, 7], [2, 7, 7, 5]]) == 2": {
      "result": true,
      "time": 0.04200291633605957,
      "error": null
    },
    "assert Find_Min_Length([[6, 4], [3, 2, 5], [5, 3, 7, 7]]) == 2": {
      "result": true,
      "time": 0.04182076454162598,
      "error": null
    },
    "assert Find_Min_Length([[6, 1], [2, 5, 3], [3, 6, 8, 8]]) == 2": {
      "result": true,
      "time": 0.04649162292480469,
      "error": null
    },
    "assert Find_Min_Length([[6, 4], [5, 3, 2], [5, 5, 5, 5]]) == 2": {
      "result": true,
      "time": 0.03654217720031738,
      "error": null
    },
    "assert Find_Min_Length([[4, 6], [1, 5, 3], [4, 3, 3, 6]]) == 2": {
      "result": true,
      "time": 0.037104129791259766,
      "error": null
    },
    "assert Find_Min_Length([[1, 6], [6, 1, 5], [2, 3, 3, 8]]) == 2": {
      "result": true,
      "time": 0.0370945930480957,
      "error": null
    },
    "assert Find_Min_Length([[6, 6], [6, 3, 8], [2, 7, 2, 6]]) == 2": {
      "result": true,
      "time": 0.03916525840759277,
      "error": null
    },
    "assert Find_Min_Length([[4, 4], [3, 1, 4], [1, 3, 2, 1]]) == 2": {
      "result": true,
      "time": 0.043630123138427734,
      "error": null
    },
    "assert Find_Min_Length([[1, 7], [3, 3, 3], [5, 2, 7, 9]]) == 2": {
      "result": true,
      "time": 0.043279170989990234,
      "error": null
    },
    "assert Find_Min_Length([[2, 3], [3, 3, 5], [4, 2, 4, 4]]) == 2": {
      "result": true,
      "time": 0.04242444038391113,
      "error": null
    },
    "assert Find_Min_Length([[1, 6, 5], [7, 9, 1, 8]]) == 3": {
      "result": true,
      "time": 0.038116455078125,
      "error": null
    },
    "assert Find_Min_Length([[6, 1, 2], [4, 8, 2, 8]]) == 3": {
      "result": true,
      "time": 0.040810585021972656,
      "error": null
    },
    "assert Find_Min_Length([[7, 2, 6], [4, 1, 9, 8]]) == 3": {
      "result": true,
      "time": 0.039759159088134766,
      "error": null
    },
    "assert Find_Min_Length([[7, 5, 6], [2, 9, 6, 6]]) == 3": {
      "result": true,
      "time": 0.041182756423950195,
      "error": null
    },
    "assert Find_Min_Length([[1, 2, 4], [1, 9, 2, 6]]) == 3": {
      "result": true,
      "time": 0.041153907775878906,
      "error": null
    },
    "assert Find_Min_Length([[4, 6, 6], [5, 6, 3, 2]]) == 3": {
      "result": true,
      "time": 0.04059576988220215,
      "error": null
    },
    "assert Find_Min_Length([[4, 2, 2], [1, 2, 3, 4]]) == 3": {
      "result": true,
      "time": 0.039572954177856445,
      "error": null
    },
    "assert Find_Min_Length([[8, 1, 4], [6, 9, 1, 3]]) == 3": {
      "result": true,
      "time": 0.045029640197753906,
      "error": null
    },
    "assert Find_Min_Length([[5, 5, 2], [1, 5, 4, 2]]) == 3": {
      "result": true,
      "time": 0.046892404556274414,
      "error": null
    },
    "assert Find_Min_Length([[7, 6, 2], [5, 6, 5, 4]]) == 3": {
      "result": true,
      "time": 0.04798412322998047,
      "error": null
    },
    "assert Find_Min_Length([[2, 2, 1], [5, 9, 6, 9]]) == 3": {
      "result": true,
      "time": 0.04108905792236328,
      "error": null
    },
    "assert Find_Min_Length([[4, 6, 7], [1, 6, 7, 1]]) == 3": {
      "result": true,
      "time": 0.04365181922912598,
      "error": null
    },
    "assert Find_Min_Length([[2, 7, 8], [3, 4, 4, 2]]) == 3": {
      "result": true,
      "time": 0.0396273136138916,
      "error": null
    },
    "assert Find_Min_Length([[6, 4, 4], [3, 2, 8, 5]]) == 3": {
      "result": true,
      "time": 0.04704642295837402,
      "error": null
    },
    "assert Find_Min_Length([[6, 7, 1], [2, 5, 8, 2]]) == 3": {
      "result": true,
      "time": 0.04483985900878906,
      "error": null
    },
    "assert Find_Min_Length([[6, 6, 1], [4, 5, 2, 2]]) == 3": {
      "result": true,
      "time": 0.03362250328063965,
      "error": null
    },
    "assert Find_Min_Length([[2, 4, 2], [4, 4, 3, 9]]) == 3": {
      "result": true,
      "time": 0.04133963584899902,
      "error": null
    },
    "assert Find_Min_Length([[8, 7, 5], [8, 7, 8, 9]]) == 3": {
      "result": true,
      "time": 0.047147512435913086,
      "error": null
    },
    "assert Find_Min_Length([[4, 3, 5], [8, 9, 6, 8]]) == 3": {
      "result": true,
      "time": 0.04175853729248047,
      "error": null
    },
    "assert Find_Min_Length([[6, 4, 7], [9, 6, 2, 5]]) == 3": {
      "result": true,
      "time": 0.05425572395324707,
      "error": null
    },
    "assert Find_Min_Length([[3, 8, 7], [9, 4, 6, 5]]) == 3": {
      "result": true,
      "time": 0.04562115669250488,
      "error": null
    },
    "assert Find_Min_Length([[2, 1, 4], [9, 3, 6, 7]]) == 3": {
      "result": true,
      "time": 0.047548532485961914,
      "error": null
    },
    "assert Find_Min_Length([[4, 2, 4], [9, 4, 9, 8]]) == 3": {
      "result": true,
      "time": 0.05692124366760254,
      "error": null
    },
    "assert Find_Min_Length([[2, 7, 6], [4, 1, 9, 8]]) == 3": {
      "result": true,
      "time": 0.06263971328735352,
      "error": null
    },
    "assert Find_Min_Length([[5, 4, 7], [6, 2, 2, 2]]) == 3": {
      "result": true,
      "time": 0.060042619705200195,
      "error": null
    },
    "assert Find_Min_Length([[3, 6, 5], [7, 3, 8, 7]]) == 3": {
      "result": true,
      "time": 0.04665255546569824,
      "error": null
    },
    "assert Find_Min_Length([[8, 2, 1], [9, 9, 6, 6]]) == 3": {
      "result": true,
      "time": 0.03914213180541992,
      "error": null
    },
    "assert Find_Min_Length([[5, 6, 2], [5, 8, 9, 5]]) == 3": {
      "result": true,
      "time": 0.04167342185974121,
      "error": null
    },
    "assert Find_Min_Length([[5, 5, 2], [8, 6, 7, 3]]) == 3": {
      "result": true,
      "time": 0.04090380668640137,
      "error": null
    },
    "assert Find_Min_Length([[2, 5, 3], [9, 8, 6, 8]]) == 3": {
      "result": true,
      "time": 0.036355018615722656,
      "error": null
    },
    "assert Find_Min_Length([[1, 6, 4], [4, 3, 2, 4]]) == 3": {
      "result": true,
      "time": 0.03910565376281738,
      "error": null
    },
    "assert Find_Min_Length([[4, 4, 3], [6, 5, 2, 4]]) == 3": {
      "result": true,
      "time": 0.03661751747131348,
      "error": null
    },
    "assert Find_Min_Length([[7, 5, 6], [1, 1, 8, 8]]) == 3": {
      "result": true,
      "time": 0.04805588722229004,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}