{
  "code": "def check(num):\n    original_num = num\n    reversed_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        reversed_num = reversed_num * 10 + digit\n        temp = temp // 10\n    twice_reversed = 2 * reversed_num\n    is_one_less = (original_num == twice_reversed - 1)\n    return is_one_less",
  "results": {
    "assert check(70) == False": {
      "result": true,
      "time": 0.04409193992614746,
      "error": null
    },
    "assert check(23) == False": {
      "result": true,
      "time": 0.05296206474304199,
      "error": null
    },
    "assert check(73) == True": {
      "result": true,
      "time": 0.04004955291748047,
      "error": null
    },
    "assert check(68) == False": {
      "result": true,
      "time": 0.04121828079223633,
      "error": null
    },
    "assert check(69) == False": {
      "result": true,
      "time": 0.037976741790771484,
      "error": null
    },
    "assert check(67) == False": {
      "result": true,
      "time": 0.046282052993774414,
      "error": null
    },
    "assert check(74) == False": {
      "result": true,
      "time": 0.03495645523071289,
      "error": null
    },
    "assert check(71) == False": {
      "result": true,
      "time": 0.04530000686645508,
      "error": null
    },
    "assert check(66) == False": {
      "result": true,
      "time": 0.03594088554382324,
      "error": null
    },
    "assert check(65) == False": {
      "result": true,
      "time": 0.049161434173583984,
      "error": null
    },
    "assert check(72) == False": {
      "result": true,
      "time": 0.03900456428527832,
      "error": null
    },
    "assert check(75) == False": {
      "result": true,
      "time": 0.03726840019226074,
      "error": null
    },
    "assert check(24) == False": {
      "result": true,
      "time": 0.04458975791931152,
      "error": null
    },
    "assert check(22) == False": {
      "result": true,
      "time": 0.043157339096069336,
      "error": null
    },
    "assert check(18) == False": {
      "result": true,
      "time": 0.0362699031829834,
      "error": null
    },
    "assert check(26) == False": {
      "result": true,
      "time": 0.03979301452636719,
      "error": null
    },
    "assert check(25) == False": {
      "result": true,
      "time": 0.03917384147644043,
      "error": null
    },
    "assert check(21) == False": {
      "result": true,
      "time": 0.04149794578552246,
      "error": null
    },
    "assert check(20) == False": {
      "result": true,
      "time": 0.03843879699707031,
      "error": null
    },
    "assert check(28) == False": {
      "result": true,
      "time": 0.03316617012023926,
      "error": null
    },
    "assert check(19) == False": {
      "result": true,
      "time": 0.036637067794799805,
      "error": null
    },
    "assert check(27) == False": {
      "result": true,
      "time": 0.03906679153442383,
      "error": null
    },
    "assert check(77) == False": {
      "result": true,
      "time": 0.038317203521728516,
      "error": null
    },
    "assert check(78) == False": {
      "result": true,
      "time": 0.04567742347717285,
      "error": null
    },
    "assert check(76) == False": {
      "result": true,
      "time": 0.04328417778015137,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}