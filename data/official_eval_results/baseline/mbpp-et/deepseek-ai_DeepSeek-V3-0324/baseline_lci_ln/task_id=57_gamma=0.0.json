{
  "code": "def find_Max_Num(digits, n):\n    sorted_digits = []\n    for i in range(n):\n        max_digit = digits[i]\n        max_index = i\n        for j in range(i + 1, n):\n            if digits[j] > max_digit:\n                max_digit = digits[j]\n                max_index = j\n        if max_index != i:\n            temp = digits[i]\n            digits[i] = digits[max_index]\n            digits[max_index] = temp\n        sorted_digits.append(digits[i])\n    max_num = 0\n    for i in range(n):\n        max_num = max_num * 10 + sorted_digits[i]\n    return max_num",
  "results": {
    "assert find_Max_Num([1,2,3],3) == 321": {
      "result": true,
      "time": 0.0493929386138916,
      "error": null
    },
    "assert find_Max_Num([4,5,6,1],4) == 6541": {
      "result": true,
      "time": 0.0422513484954834,
      "error": null
    },
    "assert find_Max_Num([1,2,3,9],4) == 9321": {
      "result": true,
      "time": 0.03946352005004883,
      "error": null
    },
    "assert find_Max_Num([4, 3, 2], 3) == 432": {
      "result": true,
      "time": 0.03821754455566406,
      "error": null
    },
    "assert find_Max_Num([5, 1, 8], 2) == 85": {
      "result": false,
      "time": 0.04613018035888672,
      "error": null
    },
    "assert find_Max_Num([2, 2, 5], 1) == 5": {
      "result": false,
      "time": 0.037322044372558594,
      "error": null
    },
    "assert find_Max_Num([5, 7, 5], 1) == 7": {
      "result": false,
      "time": 0.04251360893249512,
      "error": null
    },
    "assert find_Max_Num([2, 2, 8], 3) == 822": {
      "result": true,
      "time": 0.036463260650634766,
      "error": null
    },
    "assert find_Max_Num([5, 1, 4], 1) == 5": {
      "result": true,
      "time": 0.04294919967651367,
      "error": null
    },
    "assert find_Max_Num([5, 1, 3], 2) == 53": {
      "result": false,
      "time": 0.037294626235961914,
      "error": null
    },
    "assert find_Max_Num([6, 3, 7], 3) == 763": {
      "result": true,
      "time": 0.03545498847961426,
      "error": null
    },
    "assert find_Max_Num([2, 4, 1], 2) == 42": {
      "result": true,
      "time": 0.04369664192199707,
      "error": null
    },
    "assert find_Max_Num([5, 2, 6], 1) == 6": {
      "result": false,
      "time": 0.03487420082092285,
      "error": null
    },
    "assert find_Max_Num([2, 3, 7], 1) == 7": {
      "result": false,
      "time": 0.03919196128845215,
      "error": null
    },
    "assert find_Max_Num([1, 3, 3], 3) == 331": {
      "result": true,
      "time": 0.04611635208129883,
      "error": null
    },
    "assert find_Max_Num([3, 1, 3], 1) == 3": {
      "result": true,
      "time": 0.0375823974609375,
      "error": null
    },
    "assert find_Max_Num([6, 7, 4], 1) == 7": {
      "result": false,
      "time": 0.03994941711425781,
      "error": null
    },
    "assert find_Max_Num([2, 5, 8], 1) == 8": {
      "result": false,
      "time": 0.0390164852142334,
      "error": null
    },
    "assert find_Max_Num([3, 4, 6], 3) == 643": {
      "result": true,
      "time": 0.0353388786315918,
      "error": null
    },
    "assert find_Max_Num([1, 7, 8], 2) == 87": {
      "result": false,
      "time": 0.03634214401245117,
      "error": null
    },
    "assert find_Max_Num([5, 7, 2], 2) == 75": {
      "result": true,
      "time": 0.034024715423583984,
      "error": null
    },
    "assert find_Max_Num([5, 6, 7], 3) == 765": {
      "result": true,
      "time": 0.03817319869995117,
      "error": null
    },
    "assert find_Max_Num([3, 4, 5], 1) == 5": {
      "result": false,
      "time": 0.03895235061645508,
      "error": null
    },
    "assert find_Max_Num([2, 7, 1], 3) == 721": {
      "result": true,
      "time": 0.04416084289550781,
      "error": null
    },
    "assert find_Max_Num([6, 1, 1], 2) == 61": {
      "result": true,
      "time": 0.03857612609863281,
      "error": null
    },
    "assert find_Max_Num([3, 3, 4], 2) == 43": {
      "result": false,
      "time": 0.041144609451293945,
      "error": null
    },
    "assert find_Max_Num([2, 5, 4], 1) == 5": {
      "result": false,
      "time": 0.0325624942779541,
      "error": null
    },
    "assert find_Max_Num([1, 1, 2], 2) == 21": {
      "result": false,
      "time": 0.03314971923828125,
      "error": null
    },
    "assert find_Max_Num([6, 4, 7], 2) == 76": {
      "result": false,
      "time": 0.0390009880065918,
      "error": null
    },
    "assert find_Max_Num([1, 3, 2], 2) == 32": {
      "result": false,
      "time": 0.037075042724609375,
      "error": null
    },
    "assert find_Max_Num([2, 2, 7], 2) == 72": {
      "result": false,
      "time": 0.04303574562072754,
      "error": null
    },
    "assert find_Max_Num([4, 2, 7], 1) == 7": {
      "result": false,
      "time": 0.03946948051452637,
      "error": null
    },
    "assert find_Max_Num([1, 4, 3], 3) == 431": {
      "result": true,
      "time": 0.03924679756164551,
      "error": null
    },
    "assert find_Max_Num([1, 1, 4], 3) == 411": {
      "result": true,
      "time": 0.03862404823303223,
      "error": null
    },
    "assert find_Max_Num([1, 3, 3], 2) == 33": {
      "result": false,
      "time": 0.0417327880859375,
      "error": null
    },
    "assert find_Max_Num([1, 9, 11, 5], 2) == 119": {
      "result": false,
      "time": 0.03674030303955078,
      "error": null
    },
    "assert find_Max_Num([1, 3, 1, 4], 2) == 43": {
      "result": false,
      "time": 0.0317232608795166,
      "error": null
    },
    "assert find_Max_Num([5, 8, 5, 3], 3) == 855": {
      "result": true,
      "time": 0.03800177574157715,
      "error": null
    },
    "assert find_Max_Num([4, 2, 8, 1], 4) == 8421": {
      "result": true,
      "time": 0.037808895111083984,
      "error": null
    },
    "assert find_Max_Num([2, 8, 11, 2], 3) == 1182": {
      "result": true,
      "time": 0.035501718521118164,
      "error": null
    },
    "assert find_Max_Num([2, 10, 10, 6], 1) == 10": {
      "result": false,
      "time": 0.0328059196472168,
      "error": null
    },
    "assert find_Max_Num([8, 3, 5, 5], 4) == 8553": {
      "result": true,
      "time": 0.03540849685668945,
      "error": null
    },
    "assert find_Max_Num([4, 1, 11, 5], 2) == 115": {
      "result": false,
      "time": 0.0387725830078125,
      "error": null
    },
    "assert find_Max_Num([4, 9, 7, 4], 3) == 974": {
      "result": true,
      "time": 0.036820173263549805,
      "error": null
    },
    "assert find_Max_Num([1, 10, 11, 2], 4) == 12021": {
      "result": true,
      "time": 0.03738284111022949,
      "error": null
    },
    "assert find_Max_Num([9, 7, 5, 2], 2) == 97": {
      "result": true,
      "time": 0.03910970687866211,
      "error": null
    },
    "assert find_Max_Num([3, 1, 6, 1], 2) == 63": {
      "result": false,
      "time": 0.03981614112854004,
      "error": null
    },
    "assert find_Max_Num([9, 7, 10, 3], 1) == 10": {
      "result": false,
      "time": 0.040926218032836914,
      "error": null
    },
    "assert find_Max_Num([3, 5, 3, 3], 4) == 5333": {
      "result": true,
      "time": 0.03378009796142578,
      "error": null
    },
    "assert find_Max_Num([2, 8, 9, 1], 3) == 982": {
      "result": true,
      "time": 0.040618896484375,
      "error": null
    },
    "assert find_Max_Num([2, 1, 11, 3], 2) == 113": {
      "result": false,
      "time": 0.04902362823486328,
      "error": null
    },
    "assert find_Max_Num([5, 4, 3, 1], 3) == 543": {
      "result": true,
      "time": 0.041429996490478516,
      "error": null
    },
    "assert find_Max_Num([3, 6, 10, 2], 1) == 10": {
      "result": false,
      "time": 0.047408103942871094,
      "error": null
    },
    "assert find_Max_Num([8, 6, 10, 1], 1) == 10": {
      "result": false,
      "time": 0.0422663688659668,
      "error": null
    },
    "assert find_Max_Num([2, 8, 11, 2], 2) == 118": {
      "result": false,
      "time": 0.04977273941040039,
      "error": null
    },
    "assert find_Max_Num([1, 2, 7, 2], 3) == 722": {
      "result": false,
      "time": 0.049156904220581055,
      "error": null
    },
    "assert find_Max_Num([5, 7, 6, 1], 4) == 7651": {
      "result": true,
      "time": 0.043676137924194336,
      "error": null
    },
    "assert find_Max_Num([2, 10, 11, 3], 1) == 11": {
      "result": false,
      "time": 0.04560661315917969,
      "error": null
    },
    "assert find_Max_Num([5, 8, 10, 6], 3) == 1086": {
      "result": false,
      "time": 0.045148372650146484,
      "error": null
    },
    "assert find_Max_Num([6, 8, 6, 3], 1) == 8": {
      "result": false,
      "time": 0.05280923843383789,
      "error": null
    },
    "assert find_Max_Num([3, 4, 4, 2], 2) == 44": {
      "result": false,
      "time": 0.04722189903259277,
      "error": null
    },
    "assert find_Max_Num([7, 6, 8, 4], 4) == 8764": {
      "result": true,
      "time": 0.0447545051574707,
      "error": null
    },
    "assert find_Max_Num([4, 7, 11, 2], 2) == 117": {
      "result": false,
      "time": 0.038614749908447266,
      "error": null
    },
    "assert find_Max_Num([3, 4, 10, 5], 4) == 10543": {
      "result": true,
      "time": 0.04233193397521973,
      "error": null
    },
    "assert find_Max_Num([3, 8, 11, 4], 4) == 11843": {
      "result": true,
      "time": 0.052755117416381836,
      "error": null
    },
    "assert find_Max_Num([1, 6, 10, 5], 4) == 10651": {
      "result": true,
      "time": 0.04503965377807617,
      "error": null
    },
    "assert find_Max_Num([7, 7, 4, 4], 2) == 77": {
      "result": true,
      "time": 0.04499340057373047,
      "error": null
    },
    "assert find_Max_Num([2, 2, 4, 2], 1) == 4": {
      "result": false,
      "time": 0.03821754455566406,
      "error": null
    },
    "assert find_Max_Num([2, 5, 8, 5], 2) == 85": {
      "result": false,
      "time": 0.045847415924072266,
      "error": null
    },
    "assert find_Max_Num([6, 1, 5, 7], 3) == 765": {
      "result": false,
      "time": 0.04344797134399414,
      "error": null
    },
    "assert find_Max_Num([5, 2, 7, 12], 4) == 12752": {
      "result": true,
      "time": 0.045563459396362305,
      "error": null
    },
    "assert find_Max_Num([1, 1, 8, 7], 3) == 871": {
      "result": false,
      "time": 0.06059741973876953,
      "error": null
    },
    "assert find_Max_Num([3, 1, 4, 10], 2) == 104": {
      "result": false,
      "time": 0.045587778091430664,
      "error": null
    },
    "assert find_Max_Num([5, 2, 5, 11], 2) == 115": {
      "result": false,
      "time": 0.04638266563415527,
      "error": null
    },
    "assert find_Max_Num([5, 3, 4, 5], 1) == 5": {
      "result": true,
      "time": 0.04378247261047363,
      "error": null
    },
    "assert find_Max_Num([1, 1, 6, 7], 2) == 76": {
      "result": false,
      "time": 0.04496502876281738,
      "error": null
    },
    "assert find_Max_Num([3, 6, 5, 11], 4) == 11653": {
      "result": true,
      "time": 0.04446816444396973,
      "error": null
    },
    "assert find_Max_Num([5, 4, 2, 8], 2) == 85": {
      "result": false,
      "time": 0.052968502044677734,
      "error": null
    },
    "assert find_Max_Num([2, 5, 5, 6], 4) == 6552": {
      "result": true,
      "time": 0.043508052825927734,
      "error": null
    },
    "assert find_Max_Num([5, 5, 4, 4], 4) == 5544": {
      "result": true,
      "time": 0.04499220848083496,
      "error": null
    },
    "assert find_Max_Num([1, 7, 8, 7], 1) == 8": {
      "result": false,
      "time": 0.04398608207702637,
      "error": null
    },
    "assert find_Max_Num([6, 4, 2, 13], 4) == 13642": {
      "result": true,
      "time": 0.041760921478271484,
      "error": null
    },
    "assert find_Max_Num([5, 1, 4, 6], 2) == 65": {
      "result": false,
      "time": 0.04998493194580078,
      "error": null
    },
    "assert find_Max_Num([3, 2, 5, 7], 4) == 7532": {
      "result": true,
      "time": 0.04365181922912598,
      "error": null
    },
    "assert find_Max_Num([3, 1, 2, 14], 3) == 1432": {
      "result": false,
      "time": 0.05110955238342285,
      "error": null
    },
    "assert find_Max_Num([3, 6, 4, 9], 3) == 964": {
      "result": false,
      "time": 0.04401731491088867,
      "error": null
    },
    "assert find_Max_Num([3, 5, 6, 13], 3) == 1365": {
      "result": false,
      "time": 0.046561479568481445,
      "error": null
    },
    "assert find_Max_Num([4, 1, 4, 11], 4) == 11441": {
      "result": true,
      "time": 0.04278922080993652,
      "error": null
    },
    "assert find_Max_Num([4, 7, 7, 7], 2) == 77": {
      "result": false,
      "time": 0.045822858810424805,
      "error": null
    },
    "assert find_Max_Num([6, 1, 1, 10], 4) == 10611": {
      "result": true,
      "time": 0.04897880554199219,
      "error": null
    },
    "assert find_Max_Num([4, 3, 6, 12], 1) == 12": {
      "result": false,
      "time": 0.046271562576293945,
      "error": null
    },
    "assert find_Max_Num([1, 6, 3, 12], 1) == 12": {
      "result": false,
      "time": 0.051306724548339844,
      "error": null
    },
    "assert find_Max_Num([6, 2, 1, 10], 1) == 10": {
      "result": false,
      "time": 0.04589962959289551,
      "error": null
    },
    "assert find_Max_Num([3, 5, 3, 5], 4) == 5533": {
      "result": true,
      "time": 0.04973006248474121,
      "error": null
    },
    "assert find_Max_Num([6, 2, 5, 7], 3) == 765": {
      "result": false,
      "time": 0.045743703842163086,
      "error": null
    },
    "assert find_Max_Num([2, 2, 5, 6], 1) == 6": {
      "result": false,
      "time": 0.04509377479553223,
      "error": null
    },
    "assert find_Max_Num([6, 4, 3, 10], 2) == 106": {
      "result": false,
      "time": 0.040862083435058594,
      "error": null
    },
    "assert find_Max_Num([1, 2, 8, 10], 2) == 108": {
      "result": false,
      "time": 0.04080605506896973,
      "error": null
    },
    "assert find_Max_Num([2, 5, 5, 7], 3) == 755": {
      "result": false,
      "time": 0.04636096954345703,
      "error": null
    },
    "assert find_Max_Num([2, 7, 8, 4], 4) == 8742": {
      "result": true,
      "time": 0.042891502380371094,
      "error": null
    },
    "assert find_Max_Num([3, 6, 6, 5], 3) == 665": {
      "result": false,
      "time": 0.042505502700805664,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.43564356435643564,
  "general_error": "",
  "has_testcase_error": false
}