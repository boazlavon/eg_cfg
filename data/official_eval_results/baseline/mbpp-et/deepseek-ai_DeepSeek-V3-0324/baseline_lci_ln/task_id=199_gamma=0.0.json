{
  "code": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power = power * 2\n    return power",
  "results": {
    "assert highest_Power_of_2(10) == 8": {
      "result": true,
      "time": 0.05343818664550781,
      "error": null
    },
    "assert highest_Power_of_2(19) == 16": {
      "result": true,
      "time": 0.049533843994140625,
      "error": null
    },
    "assert highest_Power_of_2(32) == 32": {
      "result": true,
      "time": 0.04874897003173828,
      "error": null
    },
    "assert highest_Power_of_2(15) == 8": {
      "result": true,
      "time": 0.061004638671875,
      "error": null
    },
    "assert highest_Power_of_2(11) == 8": {
      "result": true,
      "time": 0.05296039581298828,
      "error": null
    },
    "assert highest_Power_of_2(5) == 4": {
      "result": true,
      "time": 0.052181243896484375,
      "error": null
    },
    "assert highest_Power_of_2(8) == 8": {
      "result": true,
      "time": 0.05474686622619629,
      "error": null
    },
    "assert highest_Power_of_2(6) == 4": {
      "result": true,
      "time": 0.061135053634643555,
      "error": null
    },
    "assert highest_Power_of_2(9) == 8": {
      "result": true,
      "time": 0.046364784240722656,
      "error": null
    },
    "assert highest_Power_of_2(14) == 8": {
      "result": true,
      "time": 0.04664421081542969,
      "error": null
    },
    "assert highest_Power_of_2(13) == 8": {
      "result": true,
      "time": 0.05811810493469238,
      "error": null
    },
    "assert highest_Power_of_2(7) == 4": {
      "result": true,
      "time": 0.04764699935913086,
      "error": null
    },
    "assert highest_Power_of_2(12) == 8": {
      "result": true,
      "time": 0.05609941482543945,
      "error": null
    },
    "assert highest_Power_of_2(22) == 16": {
      "result": true,
      "time": 0.04604697227478027,
      "error": null
    },
    "assert highest_Power_of_2(16) == 16": {
      "result": true,
      "time": 0.0465083122253418,
      "error": null
    },
    "assert highest_Power_of_2(20) == 16": {
      "result": true,
      "time": 0.04948997497558594,
      "error": null
    },
    "assert highest_Power_of_2(18) == 16": {
      "result": true,
      "time": 0.0461573600769043,
      "error": null
    },
    "assert highest_Power_of_2(21) == 16": {
      "result": true,
      "time": 0.04728984832763672,
      "error": null
    },
    "assert highest_Power_of_2(17) == 16": {
      "result": true,
      "time": 0.04322957992553711,
      "error": null
    },
    "assert highest_Power_of_2(24) == 16": {
      "result": true,
      "time": 0.04544782638549805,
      "error": null
    },
    "assert highest_Power_of_2(23) == 16": {
      "result": true,
      "time": 0.04345512390136719,
      "error": null
    },
    "assert highest_Power_of_2(37) == 32": {
      "result": true,
      "time": 0.04310250282287598,
      "error": null
    },
    "assert highest_Power_of_2(29) == 16": {
      "result": true,
      "time": 0.04359579086303711,
      "error": null
    },
    "assert highest_Power_of_2(28) == 16": {
      "result": true,
      "time": 0.03889799118041992,
      "error": null
    },
    "assert highest_Power_of_2(33) == 32": {
      "result": true,
      "time": 0.04819488525390625,
      "error": null
    },
    "assert highest_Power_of_2(27) == 16": {
      "result": true,
      "time": 0.03856635093688965,
      "error": null
    },
    "assert highest_Power_of_2(30) == 16": {
      "result": true,
      "time": 0.047060489654541016,
      "error": null
    },
    "assert highest_Power_of_2(34) == 32": {
      "result": true,
      "time": 0.04200410842895508,
      "error": null
    },
    "assert highest_Power_of_2(36) == 32": {
      "result": true,
      "time": 0.04694199562072754,
      "error": null
    },
    "assert highest_Power_of_2(35) == 32": {
      "result": true,
      "time": 0.04798722267150879,
      "error": null
    },
    "assert highest_Power_of_2(31) == 16": {
      "result": true,
      "time": 0.04528188705444336,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}