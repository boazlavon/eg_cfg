{
  "code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    \n    max_length = 1\n    current_length = 1\n    \n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            current_length = current_length + 1\n        else:\n            current_length = 1\n        \n        if current_length > max_length:\n            max_length = current_length\n    \n    return max_length",
  "results": {
    "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5": {
      "result": false,
      "time": 0.04638338088989258,
      "error": null
    },
    "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4": {
      "result": false,
      "time": 0.04434657096862793,
      "error": null
    },
    "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1": {
      "result": true,
      "time": 0.042102813720703125,
      "error": null
    },
    "assert max_len_sub([7, 1, 4, 8, 6, 9, 7, 12], 5) == 2": {
      "result": false,
      "time": 0.052607059478759766,
      "error": null
    },
    "assert max_len_sub([4, 10, 9, 6, 10, 11, 6, 13], 7) == 4": {
      "result": false,
      "time": 0.051428794860839844,
      "error": null
    },
    "assert max_len_sub([3, 2, 9, 7, 4, 7, 10, 6], 3) == 2": {
      "result": false,
      "time": 0.04074263572692871,
      "error": null
    },
    "assert max_len_sub([4, 8, 9, 7, 8, 6, 2, 4], 6) == 3": {
      "result": false,
      "time": 0.04762721061706543,
      "error": null
    },
    "assert max_len_sub([6, 7, 10, 1, 4, 9, 7, 9], 4) == 2": {
      "result": false,
      "time": 0.042925357818603516,
      "error": null
    },
    "assert max_len_sub([4, 3, 8, 3, 9, 1, 4, 9], 8) == 4": {
      "result": false,
      "time": 0.04393124580383301,
      "error": null
    },
    "assert max_len_sub([2, 5, 10, 5, 11, 10, 8, 12], 6) == 3": {
      "result": false,
      "time": 0.04892396926879883,
      "error": null
    },
    "assert max_len_sub([2, 6, 2, 4, 11, 4, 5, 7], 6) == 2": {
      "result": false,
      "time": 0.04451179504394531,
      "error": null
    },
    "assert max_len_sub([5, 6, 2, 1, 4, 9, 8, 8], 6) == 2": {
      "result": false,
      "time": 0.04410600662231445,
      "error": null
    },
    "assert max_len_sub([1, 5, 7, 4, 6, 10, 4, 3], 5) == 2": {
      "result": false,
      "time": 0.04533553123474121,
      "error": null
    },
    "assert max_len_sub([3, 8, 8, 6, 12, 7, 7, 7], 7) == 4": {
      "result": false,
      "time": 0.04519248008728027,
      "error": null
    },
    "assert max_len_sub([3, 5, 4, 8, 7, 5, 8, 8], 5) == 2": {
      "result": false,
      "time": 0.04651927947998047,
      "error": null
    },
    "assert max_len_sub([7, 6, 2, 4, 2, 11, 8, 10], 3) == 2": {
      "result": false,
      "time": 0.05358409881591797,
      "error": null
    },
    "assert max_len_sub([5, 6, 7, 3, 3, 10, 1, 10], 3) == 3": {
      "result": false,
      "time": 0.04265856742858887,
      "error": null
    },
    "assert max_len_sub([4, 9, 10, 4, 10, 2, 7, 9], 8) == 4": {
      "result": false,
      "time": 0.05291867256164551,
      "error": null
    },
    "assert max_len_sub([1, 5, 6, 7, 4, 6, 8, 12], 8) == 4": {
      "result": false,
      "time": 0.04877734184265137,
      "error": null
    },
    "assert max_len_sub([4, 8, 2, 3, 8, 5, 5, 9], 4) == 2": {
      "result": false,
      "time": 0.04554009437561035,
      "error": null
    },
    "assert max_len_sub([4, 9, 9, 4, 11, 9, 4, 10], 4) == 2": {
      "result": true,
      "time": 0.03986334800720215,
      "error": null
    },
    "assert max_len_sub([5, 10, 8, 8, 11, 2, 1, 11], 3) == 1": {
      "result": true,
      "time": 0.0363316535949707,
      "error": null
    },
    "assert max_len_sub([3, 4, 11, 5, 9, 4, 3, 5], 4) == 3": {
      "result": false,
      "time": 0.0397493839263916,
      "error": null
    },
    "assert max_len_sub([4, 9, 2, 2, 9, 4, 8, 12], 6) == 2": {
      "result": true,
      "time": 0.04652810096740723,
      "error": null
    },
    "assert max_len_sub([2, 2, 8, 5, 7, 6, 6, 6], 4) == 2": {
      "result": true,
      "time": 0.05092334747314453,
      "error": null
    },
    "assert max_len_sub([1, 5, 10, 7, 11, 9, 7, 8], 7) == 2": {
      "result": false,
      "time": 0.04560351371765137,
      "error": null
    },
    "assert max_len_sub([7, 4, 1, 3, 8, 9, 5, 3], 3) == 1": {
      "result": true,
      "time": 0.05130791664123535,
      "error": null
    },
    "assert max_len_sub([2, 8, 2, 5, 6, 7, 2, 3], 4) == 2": {
      "result": false,
      "time": 0.04236888885498047,
      "error": null
    },
    "assert max_len_sub([4, 9, 2, 2, 8, 1, 3, 9], 3) == 1": {
      "result": true,
      "time": 0.04948997497558594,
      "error": null
    },
    "assert max_len_sub([1, 1, 8, 4, 5, 6, 6, 11], 6) == 3": {
      "result": false,
      "time": 0.04376339912414551,
      "error": null
    },
    "assert max_len_sub([4, 7, 3, 4, 3, 5, 1, 12], 3) == 2": {
      "result": false,
      "time": 0.042516231536865234,
      "error": null
    },
    "assert max_len_sub([1, 1, 3, 8, 10, 5, 9, 13], 4) == 2": {
      "result": true,
      "time": 0.050397396087646484,
      "error": null
    },
    "assert max_len_sub([1, 2, 11, 4, 7, 4, 5, 8], 6) == 2": {
      "result": false,
      "time": 0.04557013511657715,
      "error": null
    },
    "assert max_len_sub([1, 1, 9, 8, 6, 3, 1, 4], 4) == 2": {
      "result": true,
      "time": 0.04168581962585449,
      "error": null
    },
    "assert max_len_sub([2, 5, 7, 4, 11, 9, 4, 13], 7) == 3": {
      "result": false,
      "time": 0.04609560966491699,
      "error": null
    },
    "assert max_len_sub([7, 6, 2, 1, 12, 1, 1, 13], 8) == 4": {
      "result": false,
      "time": 0.05117511749267578,
      "error": null
    },
    "assert max_len_sub([-6, 2, 9, 3, 6, 4, 8], 3) == 1": {
      "result": true,
      "time": 0.06011390686035156,
      "error": null
    },
    "assert max_len_sub([-7, -2, 7, 2, 1, 3, 1], 3) == 1": {
      "result": true,
      "time": 0.050255775451660156,
      "error": null
    },
    "assert max_len_sub([-4, -4, 5, -5, 2, 1, 1], 3) == 2": {
      "result": true,
      "time": 0.04283022880554199,
      "error": null
    },
    "assert max_len_sub([-1, -2, 4, -1, 2, 3, 5], 4) == 3": {
      "result": false,
      "time": 0.05345010757446289,
      "error": null
    },
    "assert max_len_sub([-2, -6, 1, -1, 1, 3, 6], 2) == 1": {
      "result": true,
      "time": 0.050241947174072266,
      "error": null
    },
    "assert max_len_sub([-6, -6, 5, -4, 7, 4, 3], 6) == 2": {
      "result": true,
      "time": 0.04784846305847168,
      "error": null
    },
    "assert max_len_sub([-4, 1, 7, 1, 4, 1, 7], 2) == 1": {
      "result": true,
      "time": 0.0442352294921875,
      "error": null
    },
    "assert max_len_sub([2, 0, 1, 1, 2, 5, 7], 7) == 4": {
      "result": false,
      "time": 0.04883933067321777,
      "error": null
    },
    "assert max_len_sub([0, -2, 8, -1, 6, 1, 7], 3) == 1": {
      "result": true,
      "time": 0.04797220230102539,
      "error": null
    },
    "assert max_len_sub([-7, 3, 7, 0, 7, 5, 5], 7) == 2": {
      "result": true,
      "time": 0.047811269760131836,
      "error": null
    },
    "assert max_len_sub([-6, -4, 4, 0, 5, 5, 2], 4) == 1": {
      "result": true,
      "time": 0.04855966567993164,
      "error": null
    },
    "assert max_len_sub([-2, -3, 3, -1, 2, 3, 7], 3) == 2": {
      "result": false,
      "time": 0.03958415985107422,
      "error": null
    },
    "assert max_len_sub([0, -1, 2, -6, 1, 1, 8], 5) == 2": {
      "result": false,
      "time": 0.04605245590209961,
      "error": null
    },
    "assert max_len_sub([1, -3, 9, -1, 8, 3, 7], 7) == 3": {
      "result": false,
      "time": 0.04314565658569336,
      "error": null
    },
    "assert max_len_sub([-1, 2, 2, -6, 9, 5, 1], 2) == 1": {
      "result": true,
      "time": 0.03918147087097168,
      "error": null
    },
    "assert max_len_sub([1, -5, 1, -2, 5, 3, 3], 7) == 2": {
      "result": true,
      "time": 0.04055523872375488,
      "error": null
    },
    "assert max_len_sub([-4, -4, 1, 4, 7, 4, 1], 6) == 2": {
      "result": true,
      "time": 0.03271746635437012,
      "error": null
    },
    "assert max_len_sub([1, 2, 4, -6, 7, 5, 2], 3) == 2": {
      "result": false,
      "time": 0.04303789138793945,
      "error": null
    },
    "assert max_len_sub([-4, -3, 2, -4, 6, 1, 4], 4) == 3": {
      "result": false,
      "time": 0.04658389091491699,
      "error": null
    },
    "assert max_len_sub([1, -4, 9, -5, 2, 1, 5], 2) == 1": {
      "result": true,
      "time": 0.03905653953552246,
      "error": null
    },
    "assert max_len_sub([2, -4, 2, -2, 5, 3, 8], 7) == 3": {
      "result": false,
      "time": 0.04692888259887695,
      "error": null
    },
    "assert max_len_sub([-7, 0, 8, 3, 8, 1, 3], 4) == 1": {
      "result": true,
      "time": 0.04597020149230957,
      "error": null
    },
    "assert max_len_sub([2, -2, 6, -4, 3, 3, 7], 4) == 1": {
      "result": true,
      "time": 0.04065203666687012,
      "error": null
    },
    "assert max_len_sub([-7, 3, 8, -4, 7, 1, 4], 2) == 1": {
      "result": true,
      "time": 0.04560256004333496,
      "error": null
    },
    "assert max_len_sub([-3, 3, 10, -4, 2, 4, 6], 2) == 1": {
      "result": true,
      "time": 0.04295802116394043,
      "error": null
    },
    "assert max_len_sub([0, -1, 6, -1, 6, 4, 6], 7) == 3": {
      "result": false,
      "time": 0.06979513168334961,
      "error": null
    },
    "assert max_len_sub([1, -1, 7, 0, 3, 1, 7], 4) == 2": {
      "result": false,
      "time": 0.056876420974731445,
      "error": null
    },
    "assert max_len_sub([-1, -1, 1, -1, 9, 4, 1], 5) == 3": {
      "result": false,
      "time": 0.04983949661254883,
      "error": null
    },
    "assert max_len_sub([-7, 0, 8, -1, 6, 5, 1], 2) == 1": {
      "result": true,
      "time": 0.04800844192504883,
      "error": null
    },
    "assert max_len_sub([0, -1, 6, -3, 5, 4, 6], 7) == 3": {
      "result": false,
      "time": 0.04954957962036133,
      "error": null
    },
    "assert max_len_sub([0, 2, 2, -2, 7, 3, 8], 4) == 2": {
      "result": true,
      "time": 0.042450904846191406,
      "error": null
    },
    "assert max_len_sub([-3, -1, 4, 2, 3, 5, 8], 2) == 1": {
      "result": true,
      "time": 0.042448997497558594,
      "error": null
    },
    "assert max_len_sub([-4, 0, 10, -6, 5, 2, 5], 7) == 2": {
      "result": false,
      "time": 0.04603743553161621,
      "error": null
    },
    "assert max_len_sub([13, 13, 13, 17, 16], 1) == 1": {
      "result": true,
      "time": 0.04455137252807617,
      "error": null
    },
    "assert max_len_sub([6, 6, 17, 10, 22], 5) == 2": {
      "result": true,
      "time": 0.04787111282348633,
      "error": null
    },
    "assert max_len_sub([4, 7, 18, 17, 14], 3) == 1": {
      "result": true,
      "time": 0.04940605163574219,
      "error": null
    },
    "assert max_len_sub([10, 14, 10, 12, 16], 3) == 2": {
      "result": false,
      "time": 0.04993700981140137,
      "error": null
    },
    "assert max_len_sub([9, 6, 11, 18, 19], 1) == 1": {
      "result": true,
      "time": 0.054645538330078125,
      "error": null
    },
    "assert max_len_sub([7, 8, 11, 17, 18], 4) == 2": {
      "result": false,
      "time": 0.04146003723144531,
      "error": null
    },
    "assert max_len_sub([11, 11, 14, 20, 18], 2) == 2": {
      "result": true,
      "time": 0.03961372375488281,
      "error": null
    },
    "assert max_len_sub([9, 6, 12, 19, 18], 5) == 2": {
      "result": false,
      "time": 0.050731658935546875,
      "error": null
    },
    "assert max_len_sub([4, 10, 13, 12, 20], 3) == 1": {
      "result": true,
      "time": 0.046741485595703125,
      "error": null
    },
    "assert max_len_sub([12, 13, 9, 17, 16], 3) == 2": {
      "result": false,
      "time": 0.04778623580932617,
      "error": null
    },
    "assert max_len_sub([4, 9, 8, 11, 23], 2) == 1": {
      "result": true,
      "time": 0.04302835464477539,
      "error": null
    },
    "assert max_len_sub([7, 11, 16, 20, 19], 5) == 2": {
      "result": false,
      "time": 0.04819774627685547,
      "error": null
    },
    "assert max_len_sub([9, 12, 11, 20, 16], 2) == 1": {
      "result": true,
      "time": 0.042301177978515625,
      "error": null
    },
    "assert max_len_sub([11, 11, 18, 12, 21], 4) == 3": {
      "result": false,
      "time": 0.05684947967529297,
      "error": null
    },
    "assert max_len_sub([13, 9, 11, 12, 20], 5) == 2": {
      "result": false,
      "time": 0.042589426040649414,
      "error": null
    },
    "assert max_len_sub([13, 15, 18, 10, 16], 4) == 1": {
      "result": true,
      "time": 0.04976630210876465,
      "error": null
    },
    "assert max_len_sub([11, 14, 18, 11, 22], 1) == 1": {
      "result": true,
      "time": 0.04609966278076172,
      "error": null
    },
    "assert max_len_sub([14, 8, 10, 19, 16], 1) == 1": {
      "result": true,
      "time": 0.040831804275512695,
      "error": null
    },
    "assert max_len_sub([5, 9, 18, 13, 21], 1) == 1": {
      "result": true,
      "time": 0.04945063591003418,
      "error": null
    },
    "assert max_len_sub([12, 12, 14, 17, 22], 2) == 2": {
      "result": true,
      "time": 0.04167628288269043,
      "error": null
    },
    "assert max_len_sub([9, 13, 11, 20, 19], 5) == 2": {
      "result": false,
      "time": 0.04442238807678223,
      "error": null
    },
    "assert max_len_sub([7, 6, 13, 16, 17], 3) == 2": {
      "result": false,
      "time": 0.041924476623535156,
      "error": null
    },
    "assert max_len_sub([6, 12, 18, 18, 17], 4) == 2": {
      "result": true,
      "time": 0.046588897705078125,
      "error": null
    },
    "assert max_len_sub([9, 11, 18, 19, 18], 3) == 1": {
      "result": true,
      "time": 0.04260540008544922,
      "error": null
    },
    "assert max_len_sub([9, 11, 11, 10, 21], 5) == 3": {
      "result": false,
      "time": 0.0592343807220459,
      "error": null
    },
    "assert max_len_sub([12, 16, 12, 15, 16], 1) == 1": {
      "result": true,
      "time": 0.045763492584228516,
      "error": null
    },
    "assert max_len_sub([9, 6, 11, 15, 18], 2) == 1": {
      "result": true,
      "time": 0.04917407035827637,
      "error": null
    },
    "assert max_len_sub([9, 13, 11, 14, 22], 4) == 2": {
      "result": false,
      "time": 0.05518460273742676,
      "error": null
    },
    "assert max_len_sub([7, 9, 13, 18, 18], 2) == 1": {
      "result": true,
      "time": 0.043672800064086914,
      "error": null
    },
    "assert max_len_sub([10, 13, 11, 15, 21], 3) == 2": {
      "result": false,
      "time": 0.044083356857299805,
      "error": null
    },
    "assert max_len_sub([6, 8, 11, 15, 22], 4) == 1": {
      "result": true,
      "time": 0.04526543617248535,
      "error": null
    },
    "assert max_len_sub([8, 14, 18, 13, 14], 3) == 1": {
      "result": true,
      "time": 0.04892873764038086,
      "error": null
    },
    "assert max_len_sub([4, 13, 17, 15, 21], 2) == 1": {
      "result": true,
      "time": 0.049188852310180664,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.49019607843137253,
  "general_error": "",
  "has_testcase_error": false
}