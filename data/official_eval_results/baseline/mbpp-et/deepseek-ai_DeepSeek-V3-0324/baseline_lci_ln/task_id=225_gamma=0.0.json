{
  "code": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)",
  "results": {
    "assert find_Min([1,2,3,4,5],0,4) == 1": {
      "result": true,
      "time": 0.04960799217224121,
      "error": null
    },
    "assert find_Min([4,6,8],0,2) == 4": {
      "result": true,
      "time": 0.054373741149902344,
      "error": null
    },
    "assert find_Min([2,3,5,7,9],0,4) == 2": {
      "result": true,
      "time": 0.04860877990722656,
      "error": null
    },
    "assert find_Min([6, 7, 4, 8, 10], 3, 2) == 4": {
      "result": false,
      "time": 0.047383785247802734,
      "error": null
    },
    "assert find_Min([4, 6, 1, 8, 2], 1, 4) == 1": {
      "result": true,
      "time": 0.04201817512512207,
      "error": null
    },
    "assert find_Min([5, 4, 4, 8, 4], 3, 4) == 4": {
      "result": true,
      "time": 0.049181461334228516,
      "error": null
    },
    "assert find_Min([4, 5, 8, 5, 1], 3, 1) == 5": {
      "result": false,
      "time": 0.04213666915893555,
      "error": null
    },
    "assert find_Min([5, 7, 1, 1, 4], 4, 2) == 1": {
      "result": false,
      "time": 0.04954409599304199,
      "error": null
    },
    "assert find_Min([5, 7, 6, 1, 5], 2, 3) == 1": {
      "result": true,
      "time": 0.038221120834350586,
      "error": null
    },
    "assert find_Min([1, 6, 6, 7, 6], 3, 4) == 6": {
      "result": true,
      "time": 0.04455971717834473,
      "error": null
    },
    "assert find_Min([1, 2, 2, 2, 3], 3, 4) == 2": {
      "result": false,
      "time": 0.049813270568847656,
      "error": null
    },
    "assert find_Min([2, 6, 1, 9, 3], 3, 3) == 9": {
      "result": true,
      "time": 0.04514813423156738,
      "error": null
    },
    "assert find_Min([6, 1, 3, 6, 5], 1, 2) == 1": {
      "result": false,
      "time": 0.05095410346984863,
      "error": null
    },
    "assert find_Min([6, 4, 4, 6, 4], 1, 4) == 4": {
      "result": true,
      "time": 0.044899702072143555,
      "error": null
    },
    "assert find_Min([4, 5, 8, 3, 6], 5, 4) == 6": {
      "result": false,
      "time": 0.059302568435668945,
      "error": null
    },
    "assert find_Min([5, 2, 7, 6, 4], 1, 1) == 2": {
      "result": true,
      "time": 0.04214644432067871,
      "error": null
    },
    "assert find_Min([2, 2, 3, 9, 10], 3, 4) == 9": {
      "result": false,
      "time": 0.04781913757324219,
      "error": null
    },
    "assert find_Min([6, 7, 1, 9, 4], 5, 3) == 9": {
      "result": false,
      "time": 0.045418500900268555,
      "error": null
    },
    "assert find_Min([6, 1, 5, 8, 8], 2, 1) == 1": {
      "result": false,
      "time": 0.04674220085144043,
      "error": null
    },
    "assert find_Min([1, 3, 7, 4, 9], 3, 3) == 4": {
      "result": true,
      "time": 0.047448158264160156,
      "error": null
    },
    "assert find_Min([2, 1, 2, 7, 1], 1, 3) == 1": {
      "result": true,
      "time": 0.044031620025634766,
      "error": null
    },
    "assert find_Min([4, 7, 4, 8, 4], 1, 3) == 4": {
      "result": true,
      "time": 0.05115008354187012,
      "error": null
    },
    "assert find_Min([4, 5, 4, 4, 9], 1, 3) == 4": {
      "result": true,
      "time": 0.04786825180053711,
      "error": null
    },
    "assert find_Min([5, 2, 1, 9, 2], 3, 3) == 9": {
      "result": true,
      "time": 0.04725933074951172,
      "error": null
    },
    "assert find_Min([1, 7, 6, 4, 9], 4, 4) == 9": {
      "result": true,
      "time": 0.04773283004760742,
      "error": null
    },
    "assert find_Min([4, 5, 8, 2, 4], 3, 3) == 2": {
      "result": true,
      "time": 0.0522463321685791,
      "error": null
    },
    "assert find_Min([6, 2, 5, 9, 4], 2, 4) == 4": {
      "result": true,
      "time": 0.04683637619018555,
      "error": null
    },
    "assert find_Min([3, 7, 2, 6, 8], 3, 1) == 7": {
      "result": false,
      "time": 0.03904604911804199,
      "error": null
    },
    "assert find_Min([4, 6, 7, 6, 1], 1, 2) == 6": {
      "result": false,
      "time": 0.04349923133850098,
      "error": null
    },
    "assert find_Min([6, 1, 7, 8, 9], 3, 3) == 8": {
      "result": true,
      "time": 0.05005311965942383,
      "error": null
    },
    "assert find_Min([6, 7, 1, 3, 7], 3, 2) == 1": {
      "result": false,
      "time": 0.05354619026184082,
      "error": null
    },
    "assert find_Min([3, 3, 3, 7, 6], 2, 1) == 3": {
      "result": true,
      "time": 0.04706263542175293,
      "error": null
    },
    "assert find_Min([1, 4, 2, 7, 5], 1, 1) == 4": {
      "result": true,
      "time": 0.042085886001586914,
      "error": null
    },
    "assert find_Min([3, 2, 3, 9, 7], 1, 2) == 2": {
      "result": false,
      "time": 0.05449414253234863,
      "error": null
    },
    "assert find_Min([4, 2, 3, 7, 8], 1, 4) == 2": {
      "result": true,
      "time": 0.046389102935791016,
      "error": null
    },
    "assert find_Min([5, 2, 8, 6, 9], 5, 3) == 6": {
      "result": false,
      "time": 0.0435945987701416,
      "error": null
    },
    "assert find_Min([3, 3, 8], 1, 1) == 3": {
      "result": true,
      "time": 0.04891395568847656,
      "error": null
    },
    "assert find_Min([4, 7, 11], 5, 2) == 11": {
      "result": false,
      "time": 0.04563021659851074,
      "error": null
    },
    "assert find_Min([2, 1, 10], 1, 2) == 1": {
      "result": false,
      "time": 0.04513740539550781,
      "error": null
    },
    "assert find_Min([6, 6, 5], 5, 2) == 5": {
      "result": false,
      "time": 0.05973362922668457,
      "error": null
    },
    "assert find_Min([9, 5, 8], 3, 2) == 8": {
      "result": false,
      "time": 0.05476212501525879,
      "error": null
    },
    "assert find_Min([1, 6, 7], 3, 2) == 7": {
      "result": false,
      "time": 0.05228424072265625,
      "error": null
    },
    "assert find_Min([8, 9, 5], 4, 2) == 5": {
      "result": false,
      "time": 0.053345441818237305,
      "error": null
    },
    "assert find_Min([2, 10, 8], 1, 2) == 8": {
      "result": true,
      "time": 0.05739021301269531,
      "error": null
    },
    "assert find_Min([5, 3, 8], 4, 2) == 8": {
      "result": false,
      "time": 0.056218624114990234,
      "error": null
    },
    "assert find_Min([5, 1, 11], 3, 1) == 1": {
      "result": false,
      "time": 0.05663800239562988,
      "error": null
    },
    "assert find_Min([8, 8, 9], 5, 1) == 8": {
      "result": true,
      "time": 0.060292959213256836,
      "error": null
    },
    "assert find_Min([8, 1, 5], 4, 2) == 5": {
      "result": false,
      "time": 0.06081581115722656,
      "error": null
    },
    "assert find_Min([9, 3, 4], 4, 1) == 3": {
      "result": false,
      "time": 0.05823874473571777,
      "error": null
    },
    "assert find_Min([6, 5, 7], 4, 2) == 7": {
      "result": false,
      "time": 0.05042695999145508,
      "error": null
    },
    "assert find_Min([3, 6, 6], 5, 1) == 6": {
      "result": false,
      "time": 0.05713057518005371,
      "error": null
    },
    "assert find_Min([7, 6, 8], 1, 2) == 6": {
      "result": false,
      "time": 0.060745954513549805,
      "error": null
    },
    "assert find_Min([9, 5, 7], 3, 2) == 7": {
      "result": false,
      "time": 0.06013917922973633,
      "error": null
    },
    "assert find_Min([2, 4, 10], 2, 1) == 4": {
      "result": false,
      "time": 0.05815243721008301,
      "error": null
    },
    "assert find_Min([3, 4, 4], 4, 2) == 4": {
      "result": false,
      "time": 0.06281781196594238,
      "error": null
    },
    "assert find_Min([6, 8, 12], 3, 2) == 12": {
      "result": false,
      "time": 0.04913663864135742,
      "error": null
    },
    "assert find_Min([3, 11, 3], 1, 1) == 11": {
      "result": true,
      "time": 0.06102180480957031,
      "error": null
    },
    "assert find_Min([3, 9, 8], 1, 2) == 8": {
      "result": true,
      "time": 0.050830841064453125,
      "error": null
    },
    "assert find_Min([6, 7, 13], 2, 2) == 13": {
      "result": true,
      "time": 0.06267380714416504,
      "error": null
    },
    "assert find_Min([9, 3, 6], 4, 2) == 6": {
      "result": false,
      "time": 0.05362391471862793,
      "error": null
    },
    "assert find_Min([4, 2, 4], 1, 1) == 2": {
      "result": true,
      "time": 0.05981945991516113,
      "error": null
    },
    "assert find_Min([1, 7, 4], 1, 1) == 7": {
      "result": true,
      "time": 0.04783177375793457,
      "error": null
    },
    "assert find_Min([7, 7, 8], 1, 1) == 7": {
      "result": true,
      "time": 0.041147708892822266,
      "error": null
    },
    "assert find_Min([1, 11, 11], 1, 1) == 11": {
      "result": true,
      "time": 0.04170489311218262,
      "error": null
    },
    "assert find_Min([8, 9, 10], 2, 2) == 10": {
      "result": true,
      "time": 0.04559183120727539,
      "error": null
    },
    "assert find_Min([4, 8, 13], 4, 1) == 8": {
      "result": false,
      "time": 0.04303765296936035,
      "error": null
    },
    "assert find_Min([5, 5, 12], 3, 2) == 12": {
      "result": false,
      "time": 0.04676651954650879,
      "error": null
    },
    "assert find_Min([5, 11, 11], 1, 1) == 11": {
      "result": true,
      "time": 0.03959774971008301,
      "error": null
    },
    "assert find_Min([8, 3, 13], 4, 1) == 3": {
      "result": false,
      "time": 0.04166531562805176,
      "error": null
    },
    "assert find_Min([2, 3, 6, 2, 7], 5, 1) == 3": {
      "result": false,
      "time": 0.04037761688232422,
      "error": null
    },
    "assert find_Min([2, 2, 9, 12, 9], 2, 2) == 9": {
      "result": true,
      "time": 0.04813504219055176,
      "error": null
    },
    "assert find_Min([2, 5, 2, 11, 9], 5, 1) == 5": {
      "result": false,
      "time": 0.04745626449584961,
      "error": null
    },
    "assert find_Min([3, 6, 5, 10, 9], 4, 1) == 6": {
      "result": false,
      "time": 0.050389766693115234,
      "error": null
    },
    "assert find_Min([3, 1, 4, 4, 7], 3, 3) == 4": {
      "result": true,
      "time": 0.03889155387878418,
      "error": null
    },
    "assert find_Min([3, 5, 5, 10, 4], 5, 4) == 4": {
      "result": false,
      "time": 0.05006885528564453,
      "error": null
    },
    "assert find_Min([2, 6, 8, 6, 6], 1, 2) == 6": {
      "result": false,
      "time": 0.047722816467285156,
      "error": null
    },
    "assert find_Min([4, 2, 10, 9, 10], 4, 3) == 9": {
      "result": false,
      "time": 0.04373884201049805,
      "error": null
    },
    "assert find_Min([3, 6, 1, 2, 7], 3, 1) == 6": {
      "result": false,
      "time": 0.04366040229797363,
      "error": null
    },
    "assert find_Min([3, 6, 6, 2, 8], 3, 1) == 6": {
      "result": false,
      "time": 0.0452425479888916,
      "error": null
    },
    "assert find_Min([2, 6, 5, 12, 5], 5, 2) == 5": {
      "result": false,
      "time": 0.04212212562561035,
      "error": null
    },
    "assert find_Min([1, 6, 3, 6, 4], 3, 2) == 3": {
      "result": false,
      "time": 0.054863691329956055,
      "error": null
    },
    "assert find_Min([6, 1, 8, 11, 6], 5, 1) == 1": {
      "result": false,
      "time": 0.0365908145904541,
      "error": null
    },
    "assert find_Min([5, 3, 4, 6, 14], 3, 2) == 4": {
      "result": false,
      "time": 0.04080796241760254,
      "error": null
    },
    "assert find_Min([2, 6, 8, 2, 14], 4, 4) == 14": {
      "result": true,
      "time": 0.05164527893066406,
      "error": null
    },
    "assert find_Min([4, 1, 9, 8, 9], 2, 2) == 9": {
      "result": true,
      "time": 0.0400395393371582,
      "error": null
    },
    "assert find_Min([3, 3, 8, 6, 14], 1, 1) == 3": {
      "result": true,
      "time": 0.03306746482849121,
      "error": null
    },
    "assert find_Min([7, 4, 10, 2, 11], 5, 2) == 10": {
      "result": false,
      "time": 0.0354766845703125,
      "error": null
    },
    "assert find_Min([5, 5, 8, 5, 13], 5, 2) == 8": {
      "result": false,
      "time": 0.03981900215148926,
      "error": null
    },
    "assert find_Min([2, 1, 4, 9, 7], 1, 2) == 1": {
      "result": false,
      "time": 0.036368370056152344,
      "error": null
    },
    "assert find_Min([7, 5, 2, 12, 10], 2, 4) == 10": {
      "result": true,
      "time": 0.03514814376831055,
      "error": null
    },
    "assert find_Min([5, 4, 7, 4, 9], 5, 3) == 4": {
      "result": false,
      "time": 0.035314083099365234,
      "error": null
    },
    "assert find_Min([1, 1, 3, 11, 5], 4, 2) == 3": {
      "result": false,
      "time": 0.03889298439025879,
      "error": null
    },
    "assert find_Min([6, 1, 3, 7, 12], 3, 2) == 3": {
      "result": false,
      "time": 0.040439605712890625,
      "error": null
    },
    "assert find_Min([2, 1, 6, 3, 10], 1, 3) == 3": {
      "result": true,
      "time": 0.03824639320373535,
      "error": null
    },
    "assert find_Min([5, 8, 8, 7, 13], 5, 3) == 7": {
      "result": false,
      "time": 0.030504703521728516,
      "error": null
    },
    "assert find_Min([7, 8, 3, 6, 12], 1, 4) == 3": {
      "result": true,
      "time": 0.03750944137573242,
      "error": null
    },
    "assert find_Min([1, 6, 8, 9, 9], 4, 4) == 9": {
      "result": true,
      "time": 0.03552722930908203,
      "error": null
    },
    "assert find_Min([1, 4, 8, 10, 13], 2, 2) == 8": {
      "result": true,
      "time": 0.038458824157714844,
      "error": null
    },
    "assert find_Min([6, 5, 9, 11, 6], 2, 1) == 5": {
      "result": false,
      "time": 0.03881406784057617,
      "error": null
    },
    "assert find_Min([2, 2, 6, 12, 5], 4, 4) == 5": {
      "result": true,
      "time": 0.03199958801269531,
      "error": null
    },
    "assert find_Min([7, 7, 7, 2, 7], 2, 4) == 2": {
      "result": true,
      "time": 0.0431520938873291,
      "error": null
    },
    "assert find_Min([7, 2, 1, 9, 4], 5, 3) == 9": {
      "result": false,
      "time": 0.037950992584228516,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.45098039215686275,
  "general_error": "",
  "has_testcase_error": false
}