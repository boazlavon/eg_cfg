{
  "code": "def div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    result = first_even / first_odd\n    return result",
  "results": {
    "assert div_even_odd([1,3,5,7,4,1,6,8])==4": {
      "result": true,
      "time": 0.05469822883605957,
      "error": null
    },
    "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2": {
      "result": true,
      "time": 0.05103874206542969,
      "error": null
    },
    "assert div_even_odd([1,5,7,9,10])==10": {
      "result": true,
      "time": 0.054557085037231445,
      "error": null
    },
    "assert div_even_odd([6, 1, 3, 4, 9, 2, 5, 3]) == 6.0": {
      "result": true,
      "time": 0.06024503707885742,
      "error": null
    },
    "assert div_even_odd([4, 8, 1, 12, 8, 6, 7, 5]) == 4.0": {
      "result": true,
      "time": 0.03539776802062988,
      "error": null
    },
    "assert div_even_odd([3, 6, 4, 4, 3, 5, 11, 5]) == 2.0": {
      "result": true,
      "time": 0.04399991035461426,
      "error": null
    },
    "assert div_even_odd([5, 3, 2, 10, 3, 5, 4, 7]) == 0.4": {
      "result": true,
      "time": 0.048674821853637695,
      "error": null
    },
    "assert div_even_odd([5, 8, 8, 3, 8, 1, 7, 12]) == 1.6": {
      "result": true,
      "time": 0.04332470893859863,
      "error": null
    },
    "assert div_even_odd([6, 2, 3, 10, 4, 2, 8, 10]) == 2.0": {
      "result": true,
      "time": 0.04795527458190918,
      "error": null
    },
    "assert div_even_odd([4, 1, 9, 12, 9, 2, 4, 7]) == 4.0": {
      "result": true,
      "time": 0.05298471450805664,
      "error": null
    },
    "assert div_even_odd([3, 8, 10, 7, 5, 4, 8, 7]) == 2.6666666666666665": {
      "result": true,
      "time": 0.04486489295959473,
      "error": null
    },
    "assert div_even_odd([4, 2, 5, 9, 7, 2, 11, 10]) == 0.8": {
      "result": true,
      "time": 0.04105091094970703,
      "error": null
    },
    "assert div_even_odd([5, 8, 3, 12, 3, 4, 3, 7]) == 1.6": {
      "result": true,
      "time": 0.04619002342224121,
      "error": null
    },
    "assert div_even_odd([1, 8, 9, 8, 9, 2, 7, 12]) == 8.0": {
      "result": true,
      "time": 0.0365903377532959,
      "error": null
    },
    "assert div_even_odd([2, 2, 1, 8, 6, 5, 4, 6]) == 2.0": {
      "result": true,
      "time": 0.036254167556762695,
      "error": null
    },
    "assert div_even_odd([6, 1, 5, 9, 1, 4, 4, 6]) == 6.0": {
      "result": true,
      "time": 0.0454714298248291,
      "error": null
    },
    "assert div_even_odd([6, 1, 7, 5, 9, 4, 7, 11]) == 6.0": {
      "result": true,
      "time": 0.04344987869262695,
      "error": null
    },
    "assert div_even_odd([2, 8, 9, 9, 3, 2, 9, 6]) == 0.2222222222222222": {
      "result": true,
      "time": 0.04526829719543457,
      "error": null
    },
    "assert div_even_odd([2, 5, 6, 6, 8, 1, 7, 6]) == 0.4": {
      "result": true,
      "time": 0.05064129829406738,
      "error": null
    },
    "assert div_even_odd([5, 1, 10, 6, 3, 2, 10, 11]) == 2.0": {
      "result": true,
      "time": 0.037023067474365234,
      "error": null
    },
    "assert div_even_odd([4, 6, 9, 11, 6, 4, 3, 12]) == 0.4444444444444444": {
      "result": true,
      "time": 0.035125732421875,
      "error": null
    },
    "assert div_even_odd([4, 4, 2, 11, 4, 3, 5, 8]) == 0.36363636363636365": {
      "result": true,
      "time": 0.03929400444030762,
      "error": null
    },
    "assert div_even_odd([6, 5, 6, 9, 9, 3, 9, 6]) == 1.2": {
      "result": true,
      "time": 0.0393977165222168,
      "error": null
    },
    "assert div_even_odd([4, 4, 5, 2, 5, 1, 3, 8]) == 0.8": {
      "result": true,
      "time": 0.04643678665161133,
      "error": null
    },
    "assert div_even_odd([1, 7, 6, 5, 8, 1, 5, 8]) == 6.0": {
      "result": true,
      "time": 0.04524350166320801,
      "error": null
    },
    "assert div_even_odd([5, 8, 8, 5, 9, 6, 11, 9]) == 1.6": {
      "result": true,
      "time": 0.04708695411682129,
      "error": null
    },
    "assert div_even_odd([2, 3, 8, 12, 3, 4, 11, 8]) == 0.6666666666666666": {
      "result": true,
      "time": 0.05522489547729492,
      "error": null
    },
    "assert div_even_odd([4, 7, 7, 7, 9, 2, 3, 5]) == 0.5714285714285714": {
      "result": true,
      "time": 0.04796195030212402,
      "error": null
    },
    "assert div_even_odd([4, 2, 5, 5, 6, 5, 3, 4]) == 0.8": {
      "result": true,
      "time": 0.049549102783203125,
      "error": null
    },
    "assert div_even_odd([1, 8, 10, 3, 4, 1, 1, 11]) == 8.0": {
      "result": true,
      "time": 0.04380035400390625,
      "error": null
    },
    "assert div_even_odd([3, 7, 5, 4, 3, 6, 11, 12]) == 1.3333333333333333": {
      "result": true,
      "time": 0.04114079475402832,
      "error": null
    },
    "assert div_even_odd([2, 2, 9, 12, 3, 3, 11, 13]) == 0.2222222222222222": {
      "result": true,
      "time": 0.05863618850708008,
      "error": null
    },
    "assert div_even_odd([1, 2, 4, 7, 5, 3, 11, 11]) == 2.0": {
      "result": true,
      "time": 0.036528587341308594,
      "error": null
    },
    "assert div_even_odd([5, 4, 6, 12, 6, 5, 1, 3]) == 0.8": {
      "result": true,
      "time": 0.05909299850463867,
      "error": null
    },
    "assert div_even_odd([6, 1, 7, 12, 7, 4, 8, 12]) == 6.0": {
      "result": true,
      "time": 0.058357954025268555,
      "error": null
    },
    "assert div_even_odd([4, 6, 2, 2, 3, 1, 10, 9]) == 1.3333333333333333": {
      "result": true,
      "time": 0.054624319076538086,
      "error": null
    },
    "assert div_even_odd([2, 6, 6, 7, 1, 4, 10, 11, 7, 8]) == 0.2857142857142857": {
      "result": true,
      "time": 0.04560279846191406,
      "error": null
    },
    "assert div_even_odd([2, 5, 1, 2, 4, 1, 9, 10, 12, 8]) == 0.4": {
      "result": true,
      "time": 0.051522016525268555,
      "error": null
    },
    "assert div_even_odd([3, 5, 1, 5, 9, 6, 4, 12, 12, 14]) == 2.0": {
      "result": true,
      "time": 0.07368636131286621,
      "error": null
    },
    "assert div_even_odd([2, 3, 2, 1, 8, 3, 12, 11, 5, 6]) == 0.6666666666666666": {
      "result": true,
      "time": 0.06814885139465332,
      "error": null
    },
    "assert div_even_odd([6, 2, 3, 8, 5, 11, 8, 3, 6, 15]) == 2.0": {
      "result": true,
      "time": 0.06355428695678711,
      "error": null
    },
    "assert div_even_odd([5, 3, 7, 4, 3, 7, 6, 13, 13, 8]) == 0.8": {
      "result": true,
      "time": 0.06252503395080566,
      "error": null
    },
    "assert div_even_odd([1, 1, 6, 4, 8, 3, 6, 11, 10, 7]) == 6.0": {
      "result": true,
      "time": 0.05194711685180664,
      "error": null
    },
    "assert div_even_odd([1, 3, 5, 1, 7, 11, 5, 10, 6, 14]) == 10.0": {
      "result": true,
      "time": 0.04132890701293945,
      "error": null
    },
    "assert div_even_odd([4, 3, 5, 9, 1, 8, 11, 6, 13, 12]) == 1.3333333333333333": {
      "result": true,
      "time": 0.03747367858886719,
      "error": null
    },
    "assert div_even_odd([2, 4, 4, 3, 3, 3, 6, 3, 4, 9]) == 0.6666666666666666": {
      "result": true,
      "time": 0.04344320297241211,
      "error": null
    },
    "assert div_even_odd([6, 4, 1, 2, 3, 11, 5, 13, 5, 8]) == 6.0": {
      "result": true,
      "time": 0.037609100341796875,
      "error": null
    },
    "assert div_even_odd([3, 4, 2, 6, 8, 2, 11, 11, 5, 12]) == 1.3333333333333333": {
      "result": true,
      "time": 0.04297614097595215,
      "error": null
    },
    "assert div_even_odd([3, 6, 2, 1, 7, 8, 11, 13, 10, 7]) == 2.0": {
      "result": true,
      "time": 0.04493236541748047,
      "error": null
    },
    "assert div_even_odd([2, 7, 5, 6, 6, 5, 2, 11, 13, 9]) == 0.2857142857142857": {
      "result": true,
      "time": 0.041641950607299805,
      "error": null
    },
    "assert div_even_odd([3, 6, 1, 2, 9, 11, 4, 11, 12, 10]) == 2.0": {
      "result": true,
      "time": 0.048065900802612305,
      "error": null
    },
    "assert div_even_odd([3, 6, 4, 5, 7, 3, 7, 12, 14, 8]) == 2.0": {
      "result": true,
      "time": 0.043952226638793945,
      "error": null
    },
    "assert div_even_odd([4, 2, 5, 1, 3, 3, 7, 13, 5, 10]) == 0.8": {
      "result": true,
      "time": 0.04346919059753418,
      "error": null
    },
    "assert div_even_odd([6, 5, 5, 6, 6, 4, 2, 5, 4, 12]) == 1.2": {
      "result": true,
      "time": 0.04217386245727539,
      "error": null
    },
    "assert div_even_odd([2, 5, 8, 6, 4, 4, 8, 3, 8, 15]) == 0.4": {
      "result": true,
      "time": 0.0441129207611084,
      "error": null
    },
    "assert div_even_odd([6, 4, 3, 1, 6, 3, 9, 10, 14, 5]) == 2.0": {
      "result": true,
      "time": 0.04000139236450195,
      "error": null
    },
    "assert div_even_odd([2, 3, 4, 4, 4, 11, 4, 12, 7, 13]) == 0.6666666666666666": {
      "result": true,
      "time": 0.05505251884460449,
      "error": null
    },
    "assert div_even_odd([2, 1, 6, 5, 6, 9, 10, 7, 10, 8]) == 2.0": {
      "result": true,
      "time": 0.03956031799316406,
      "error": null
    },
    "assert div_even_odd([6, 4, 3, 6, 8, 6, 2, 13, 12, 6]) == 2.0": {
      "result": true,
      "time": 0.04277157783508301,
      "error": null
    },
    "assert div_even_odd([1, 5, 2, 8, 10, 2, 3, 4, 4, 7]) == 2.0": {
      "result": true,
      "time": 0.03526592254638672,
      "error": null
    },
    "assert div_even_odd([5, 3, 6, 6, 2, 10, 10, 11, 13, 5]) == 1.2": {
      "result": true,
      "time": 0.04000520706176758,
      "error": null
    },
    "assert div_even_odd([1, 1, 3, 5, 8, 8, 8, 9, 11, 15]) == 8.0": {
      "result": true,
      "time": 0.03928351402282715,
      "error": null
    },
    "assert div_even_odd([4, 1, 7, 6, 9, 11, 2, 6, 10, 13]) == 4.0": {
      "result": true,
      "time": 0.0381317138671875,
      "error": null
    },
    "assert div_even_odd([4, 6, 4, 7, 4, 9, 9, 4, 4, 13]) == 0.5714285714285714": {
      "result": true,
      "time": 0.0337679386138916,
      "error": null
    },
    "assert div_even_odd([4, 2, 2, 7, 5, 11, 4, 5, 12, 12]) == 0.5714285714285714": {
      "result": true,
      "time": 0.03426933288574219,
      "error": null
    },
    "assert div_even_odd([5, 3, 7, 8, 4, 9, 8, 3, 13, 5]) == 1.6": {
      "result": true,
      "time": 0.04802703857421875,
      "error": null
    },
    "assert div_even_odd([5, 5, 4, 5, 3, 1, 12, 7, 11, 9]) == 0.8": {
      "result": true,
      "time": 0.0329136848449707,
      "error": null
    },
    "assert div_even_odd([4, 3, 1, 2, 9, 11, 9, 3, 4, 11]) == 1.3333333333333333": {
      "result": true,
      "time": 0.04128003120422363,
      "error": null
    },
    "assert div_even_odd([3, 3, 7, 9, 5, 11, 6, 9, 4, 8]) == 2.0": {
      "result": true,
      "time": 0.029134750366210938,
      "error": null
    },
    "assert div_even_odd([5, 8, 12, 4, 12]) == 1.6": {
      "result": true,
      "time": 0.03625369071960449,
      "error": null
    },
    "assert div_even_odd([2, 9, 8, 6, 14]) == 0.2222222222222222": {
      "result": true,
      "time": 0.03743147850036621,
      "error": null
    },
    "assert div_even_odd([2, 8, 3, 8, 8]) == 0.6666666666666666": {
      "result": true,
      "time": 0.040316104888916016,
      "error": null
    },
    "assert div_even_odd([5, 3, 4, 10, 15]) == 0.8": {
      "result": true,
      "time": 0.03726530075073242,
      "error": null
    },
    "assert div_even_odd([4, 4, 9, 7, 13]) == 0.4444444444444444": {
      "result": true,
      "time": 0.036782264709472656,
      "error": null
    },
    "assert div_even_odd([4, 9, 11, 9, 10]) == 0.4444444444444444": {
      "result": true,
      "time": 0.03493070602416992,
      "error": null
    },
    "assert div_even_odd([6, 7, 7, 7, 8]) == 0.8571428571428571": {
      "result": true,
      "time": 0.03578066825866699,
      "error": null
    },
    "assert div_even_odd([1, 10, 10, 5, 5]) == 10.0": {
      "result": true,
      "time": 0.0400083065032959,
      "error": null
    },
    "assert div_even_odd([6, 1, 6, 13, 14]) == 6.0": {
      "result": true,
      "time": 0.0358889102935791,
      "error": null
    },
    "assert div_even_odd([4, 2, 11, 12, 5]) == 0.36363636363636365": {
      "result": true,
      "time": 0.036975860595703125,
      "error": null
    },
    "assert div_even_odd([3, 7, 5, 4, 5]) == 1.3333333333333333": {
      "result": true,
      "time": 0.03669476509094238,
      "error": null
    },
    "assert div_even_odd([1, 9, 5, 11, 7]) == -1.0": {
      "result": false,
      "time": 0.03862452507019043,
      "error": null
    },
    "assert div_even_odd([5, 8, 10, 8, 6]) == 1.6": {
      "result": true,
      "time": 0.0371088981628418,
      "error": null
    },
    "assert div_even_odd([1, 6, 4, 11, 5]) == 6.0": {
      "result": true,
      "time": 0.03877377510070801,
      "error": null
    },
    "assert div_even_odd([6, 2, 10, 8, 10]) == -6.0": {
      "result": false,
      "time": 0.04012799263000488,
      "error": null
    },
    "assert div_even_odd([1, 7, 10, 7, 11]) == 10.0": {
      "result": true,
      "time": 0.0366520881652832,
      "error": null
    },
    "assert div_even_odd([4, 9, 7, 12, 13]) == 0.4444444444444444": {
      "result": true,
      "time": 0.03263115882873535,
      "error": null
    },
    "assert div_even_odd([6, 4, 4, 11, 15]) == 0.5454545454545454": {
      "result": true,
      "time": 0.0416865348815918,
      "error": null
    },
    "assert div_even_odd([5, 6, 2, 10, 11]) == 1.2": {
      "result": true,
      "time": 0.046491384506225586,
      "error": null
    },
    "assert div_even_odd([3, 5, 9, 4, 10]) == 1.3333333333333333": {
      "result": true,
      "time": 0.03093862533569336,
      "error": null
    },
    "assert div_even_odd([1, 6, 11, 6, 6]) == 6.0": {
      "result": true,
      "time": 0.042058467864990234,
      "error": null
    },
    "assert div_even_odd([6, 7, 11, 5, 12]) == 0.8571428571428571": {
      "result": true,
      "time": 0.03749966621398926,
      "error": null
    },
    "assert div_even_odd([3, 4, 2, 4, 8]) == 1.3333333333333333": {
      "result": true,
      "time": 0.03507566452026367,
      "error": null
    },
    "assert div_even_odd([2, 8, 2, 7, 7]) == 0.2857142857142857": {
      "result": true,
      "time": 0.04075932502746582,
      "error": null
    },
    "assert div_even_odd([6, 1, 6, 5, 9]) == 6.0": {
      "result": true,
      "time": 0.03529000282287598,
      "error": null
    },
    "assert div_even_odd([4, 8, 7, 4, 5]) == 0.5714285714285714": {
      "result": true,
      "time": 0.03348231315612793,
      "error": null
    },
    "assert div_even_odd([5, 9, 6, 6, 7]) == 1.2": {
      "result": true,
      "time": 0.037499427795410156,
      "error": null
    },
    "assert div_even_odd([2, 8, 6, 11, 15]) == 0.18181818181818182": {
      "result": true,
      "time": 0.036074161529541016,
      "error": null
    },
    "assert div_even_odd([3, 8, 6, 8, 13]) == 2.6666666666666665": {
      "result": true,
      "time": 0.035578012466430664,
      "error": null
    },
    "assert div_even_odd([2, 1, 7, 7, 6]) == 2.0": {
      "result": true,
      "time": 0.03963327407836914,
      "error": null
    },
    "assert div_even_odd([4, 5, 5, 11, 7]) == 0.8": {
      "result": true,
      "time": 0.03170633316040039,
      "error": null
    },
    "assert div_even_odd([5, 6, 6, 7, 10]) == 1.2": {
      "result": true,
      "time": 0.04184079170227051,
      "error": null
    },
    "assert div_even_odd([5, 2, 10, 9, 14]) == 0.4": {
      "result": true,
      "time": 0.04705166816711426,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9803921568627451,
  "general_error": "",
  "has_testcase_error": false
}