{
  "code": "def count_unset_bits(number):\n    binary_representation = bin(number)\n    binary_string = binary_representation[2:]\n    count = 0\n    for bit in binary_string:\n        if bit == '0':\n            count += 1\n    return count",
  "results": {
    "assert count_unset_bits(2) == 1": {
      "result": true,
      "time": 0.05278754234313965,
      "error": null
    },
    "assert count_unset_bits(4) == 2": {
      "result": true,
      "time": 0.043675899505615234,
      "error": null
    },
    "assert count_unset_bits(6) == 1": {
      "result": true,
      "time": 0.05756235122680664,
      "error": null
    },
    "assert count_unset_bits(5) == 1": {
      "result": true,
      "time": 0.04591965675354004,
      "error": null
    },
    "assert count_unset_bits(3) == 0": {
      "result": true,
      "time": 0.05169868469238281,
      "error": null
    },
    "assert count_unset_bits(7) == 0": {
      "result": true,
      "time": 0.04355120658874512,
      "error": null
    },
    "assert count_unset_bits(1) == 0": {
      "result": true,
      "time": 0.03954482078552246,
      "error": null
    },
    "assert count_unset_bits(9) == 2": {
      "result": true,
      "time": 0.046146392822265625,
      "error": null
    },
    "assert count_unset_bits(8) == 3": {
      "result": true,
      "time": 0.040174007415771484,
      "error": null
    },
    "assert count_unset_bits(11) == 1": {
      "result": true,
      "time": 0.04789447784423828,
      "error": null
    },
    "assert count_unset_bits(10) == 2": {
      "result": true,
      "time": 0.03879284858703613,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}