{
  "code": "def closest_num(n):\n    if n <= 1:\n        return None\n    result = n - 1\n    return result",
  "results": {
    "assert closest_num(11) == 10": {
      "result": true,
      "time": 0.04165339469909668,
      "error": null
    },
    "assert closest_num(7) == 6": {
      "result": true,
      "time": 0.04003429412841797,
      "error": null
    },
    "assert closest_num(12) == 11": {
      "result": true,
      "time": 0.04385256767272949,
      "error": null
    },
    "assert closest_num(8) == 7": {
      "result": true,
      "time": 0.03935050964355469,
      "error": null
    },
    "assert closest_num(10) == 9": {
      "result": true,
      "time": 0.04173016548156738,
      "error": null
    },
    "assert closest_num(16) == 15": {
      "result": true,
      "time": 0.034903764724731445,
      "error": null
    },
    "assert closest_num(15) == 14": {
      "result": true,
      "time": 0.04270458221435547,
      "error": null
    },
    "assert closest_num(14) == 13": {
      "result": true,
      "time": 0.050179243087768555,
      "error": null
    },
    "assert closest_num(9) == 8": {
      "result": true,
      "time": 0.03791165351867676,
      "error": null
    },
    "assert closest_num(13) == 12": {
      "result": true,
      "time": 0.040306806564331055,
      "error": null
    },
    "assert closest_num(6) == 5": {
      "result": true,
      "time": 0.04285550117492676,
      "error": null
    },
    "assert closest_num(2) == 1": {
      "result": true,
      "time": 0.040506601333618164,
      "error": null
    },
    "assert closest_num(3) == 2": {
      "result": true,
      "time": 0.03693866729736328,
      "error": null
    },
    "assert closest_num(5) == 4": {
      "result": true,
      "time": 0.042699575424194336,
      "error": null
    },
    "assert closest_num(4) == 3": {
      "result": true,
      "time": 0.045042991638183594,
      "error": null
    },
    "assert closest_num(17) == 16": {
      "result": true,
      "time": 0.038065195083618164,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}