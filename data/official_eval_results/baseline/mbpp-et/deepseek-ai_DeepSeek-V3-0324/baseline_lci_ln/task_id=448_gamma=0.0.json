{
  "code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    \n    perrin_numbers = [3, 0, 2]\n    sum_perrin = 5  # Sum of first three Perrin numbers (3 + 0 + 2)\n    \n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n        sum_perrin += next_perrin\n    \n    return sum_perrin",
  "results": {
    "assert cal_sum(9) == 49": {
      "result": true,
      "time": 0.05303192138671875,
      "error": null
    },
    "assert cal_sum(10) == 66": {
      "result": true,
      "time": 0.03797197341918945,
      "error": null
    },
    "assert cal_sum(11) == 88": {
      "result": true,
      "time": 0.044460296630859375,
      "error": null
    },
    "assert cal_sum(8) == 37": {
      "result": true,
      "time": 0.04722476005554199,
      "error": null
    },
    "assert cal_sum(14) == 207": {
      "result": true,
      "time": 0.04199647903442383,
      "error": null
    },
    "assert cal_sum(12) == 117": {
      "result": true,
      "time": 0.04761362075805664,
      "error": null
    },
    "assert cal_sum(4) == 10": {
      "result": true,
      "time": 0.0414271354675293,
      "error": null
    },
    "assert cal_sum(13) == 156": {
      "result": true,
      "time": 0.04030489921569824,
      "error": null
    },
    "assert cal_sum(5) == 15": {
      "result": true,
      "time": 0.057265520095825195,
      "error": null
    },
    "assert cal_sum(6) == 20": {
      "result": true,
      "time": 0.0447080135345459,
      "error": null
    },
    "assert cal_sum(7) == 27": {
      "result": true,
      "time": 0.04300546646118164,
      "error": null
    },
    "assert cal_sum(15) == 275": {
      "result": true,
      "time": 0.048313140869140625,
      "error": null
    },
    "assert cal_sum(16) == 365": {
      "result": true,
      "time": 0.04781317710876465,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}