{
  "code": "def tetrahedral_number(n):\n    # Calculate the sum of the first n triangular numbers\n    total = 0\n    for k in range(1, n + 1):\n        # Calculate the kth triangular number\n        triangular = k * (k + 1) / 2\n        # Add it to the total\n        total += triangular\n    return total",
  "results": {
    "assert tetrahedral_number(5) == 35.0": {
      "result": true,
      "time": 0.03595852851867676,
      "error": null
    },
    "assert tetrahedral_number(6) == 56.0": {
      "result": true,
      "time": 0.0374295711517334,
      "error": null
    },
    "assert tetrahedral_number(7) == 84.0": {
      "result": true,
      "time": 0.03908371925354004,
      "error": null
    },
    "assert tetrahedral_number(2) == 4.0": {
      "result": true,
      "time": 0.037355661392211914,
      "error": null
    },
    "assert tetrahedral_number(4) == 20.0": {
      "result": true,
      "time": 0.03777170181274414,
      "error": null
    },
    "assert tetrahedral_number(1) == 1.0": {
      "result": true,
      "time": 0.036939382553100586,
      "error": null
    },
    "assert tetrahedral_number(9) == 165.0": {
      "result": true,
      "time": 0.03712010383605957,
      "error": null
    },
    "assert tetrahedral_number(3) == 10.0": {
      "result": true,
      "time": 0.03301072120666504,
      "error": null
    },
    "assert tetrahedral_number(10) == 220.0": {
      "result": true,
      "time": 0.03583407402038574,
      "error": null
    },
    "assert tetrahedral_number(8) == 120.0": {
      "result": true,
      "time": 0.03490614891052246,
      "error": null
    },
    "assert tetrahedral_number(11) == 286.0": {
      "result": true,
      "time": 0.037366628646850586,
      "error": null
    },
    "assert tetrahedral_number(12) == 364.0": {
      "result": true,
      "time": 0.03595280647277832,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}