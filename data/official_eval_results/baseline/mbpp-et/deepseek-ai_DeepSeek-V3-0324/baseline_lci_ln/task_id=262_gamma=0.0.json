{
  "code": "def split_two_parts(input_list, n):\n    first_part = []\n    second_part = []\n    for i in range(len(input_list)):\n        if i < n:\n            first_part.append(input_list[i])\n        else:\n            second_part.append(input_list[i])\n    return (first_part, second_part)",
  "results": {
    "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])": {
      "result": true,
      "time": 0.05933523178100586,
      "error": null
    },
    "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])": {
      "result": true,
      "time": 0.04442000389099121,
      "error": null
    },
    "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])": {
      "result": true,
      "time": 0.05309629440307617,
      "error": null
    },
    "assert split_two_parts([5, 2, 7, 2, 9, 4, 3, 1], 2) == ([5, 2], [7, 2, 9, 4, 3, 1])": {
      "result": true,
      "time": 0.047661781311035156,
      "error": null
    },
    "assert split_two_parts([1, 4, 4, 6, 8, 2, 7, 1], 4) == ([1, 4, 4, 6], [8, 2, 7, 1])": {
      "result": true,
      "time": 0.05337119102478027,
      "error": null
    },
    "assert split_two_parts([1, 3, 1, 5, 2, 8, 9, 3], 6) == ([1, 3, 1, 5, 2, 8], [9, 3])": {
      "result": true,
      "time": 0.05190587043762207,
      "error": null
    },
    "assert split_two_parts([5, 3, 4, 1, 1, 7, 9, 3], 3) == ([5, 3, 4], [1, 1, 7, 9, 3])": {
      "result": true,
      "time": 0.0530095100402832,
      "error": null
    },
    "assert split_two_parts([2, 1, 1, 7, 7, 4, 8, 6], 6) == ([2, 1, 1, 7, 7, 4], [8, 6])": {
      "result": true,
      "time": 0.04842329025268555,
      "error": null
    },
    "assert split_two_parts([4, 3, 5, 1, 1, 7, 2, 5], 7) == ([4, 3, 5, 1, 1, 7, 2], [5])": {
      "result": true,
      "time": 0.049922943115234375,
      "error": null
    },
    "assert split_two_parts([1, 2, 3, 2, 5, 6, 1, 4], 1) == ([1], [2, 3, 2, 5, 6, 1, 4])": {
      "result": true,
      "time": 0.04091238975524902,
      "error": null
    },
    "assert split_two_parts([6, 2, 7, 1, 3, 3, 8, 3], 2) == ([6, 2], [7, 1, 3, 3, 8, 3])": {
      "result": true,
      "time": 0.06058073043823242,
      "error": null
    },
    "assert split_two_parts([1, 3, 5, 5, 6, 3, 5, 4], 8) == ([1, 3, 5, 5, 6, 3, 5, 4], [])": {
      "result": true,
      "time": 0.04977154731750488,
      "error": null
    },
    "assert split_two_parts([4, 1, 3, 3, 6, 7, 7, 3], 1) == ([4], [1, 3, 3, 6, 7, 7, 3])": {
      "result": true,
      "time": 0.04312777519226074,
      "error": null
    },
    "assert split_two_parts([4, 1, 5, 4, 4, 6, 1, 3], 4) == ([4, 1, 5, 4], [4, 6, 1, 3])": {
      "result": true,
      "time": 0.05981731414794922,
      "error": null
    },
    "assert split_two_parts([6, 1, 5, 4, 9, 9, 3, 6], 5) == ([6, 1, 5, 4, 9], [9, 3, 6])": {
      "result": true,
      "time": 0.05801582336425781,
      "error": null
    },
    "assert split_two_parts([2, 4, 7, 3, 5, 7, 4, 4], 5) == ([2, 4, 7, 3, 5], [7, 4, 4])": {
      "result": true,
      "time": 0.05325603485107422,
      "error": null
    },
    "assert split_two_parts([3, 6, 5, 3, 4, 7, 4, 4], 3) == ([3, 6, 5], [3, 4, 7, 4, 4])": {
      "result": true,
      "time": 0.06079840660095215,
      "error": null
    },
    "assert split_two_parts([2, 2, 7, 5, 6, 9, 10, 3], 8) == ([2, 2, 7, 5, 6, 9, 10, 3], [])": {
      "result": true,
      "time": 0.049040794372558594,
      "error": null
    },
    "assert split_two_parts([3, 4, 1, 7, 1, 9, 5, 4], 8) == ([3, 4, 1, 7, 1, 9, 5, 4], [])": {
      "result": true,
      "time": 0.04732775688171387,
      "error": null
    },
    "assert split_two_parts([3, 2, 2, 2, 6, 1, 7, 2], 1) == ([3], [2, 2, 2, 6, 1, 7, 2])": {
      "result": true,
      "time": 0.04273390769958496,
      "error": null
    },
    "assert split_two_parts([3, 6, 3, 4, 7, 5, 9, 4], 8) == ([3, 6, 3, 4, 7, 5, 9, 4], [])": {
      "result": true,
      "time": 0.05490684509277344,
      "error": null
    },
    "assert split_two_parts([2, 5, 3, 4, 6, 6, 6, 3], 4) == ([2, 5, 3, 4], [6, 6, 6, 3])": {
      "result": true,
      "time": 0.05305933952331543,
      "error": null
    },
    "assert split_two_parts([3, 4, 2, 1, 1, 3, 7, 1], 7) == ([3, 4, 2, 1, 1, 3, 7], [1])": {
      "result": true,
      "time": 0.05688619613647461,
      "error": null
    },
    "assert split_two_parts([3, 4, 1, 6, 4, 6, 8, 2], 5) == ([3, 4, 1, 6, 4], [6, 8, 2])": {
      "result": true,
      "time": 0.05131220817565918,
      "error": null
    },
    "assert split_two_parts([1, 1, 6, 3, 2, 3, 6, 1], 6) == ([1, 1, 6, 3, 2, 3], [6, 1])": {
      "result": true,
      "time": 0.05470013618469238,
      "error": null
    },
    "assert split_two_parts([5, 1, 4, 5, 5, 6, 2, 1], 6) == ([5, 1, 4, 5, 5, 6], [2, 1])": {
      "result": true,
      "time": 0.04773378372192383,
      "error": null
    },
    "assert split_two_parts([5, 1, 5, 6, 6, 6, 8, 6], 3) == ([5, 1, 5], [6, 6, 6, 8, 6])": {
      "result": true,
      "time": 0.04628729820251465,
      "error": null
    },
    "assert split_two_parts([2, 1, 7, 3, 3, 4, 9, 2], 2) == ([2, 1], [7, 3, 3, 4, 9, 2])": {
      "result": true,
      "time": 0.038971662521362305,
      "error": null
    },
    "assert split_two_parts([6, 3, 7, 4, 8, 5, 1, 4], 4) == ([6, 3, 7, 4], [8, 5, 1, 4])": {
      "result": true,
      "time": 0.0466768741607666,
      "error": null
    },
    "assert split_two_parts([1, 3, 5, 2, 6, 6, 6, 2], 6) == ([1, 3, 5, 2, 6, 6], [6, 2])": {
      "result": true,
      "time": 0.044339895248413086,
      "error": null
    },
    "assert split_two_parts([1, 5, 4, 4, 7, 3, 2, 6], 4) == ([1, 5, 4, 4], [7, 3, 2, 6])": {
      "result": true,
      "time": 0.03745102882385254,
      "error": null
    },
    "assert split_two_parts([3, 5, 2, 8, 8, 4, 2, 3], 5) == ([3, 5, 2, 8, 8], [4, 2, 3])": {
      "result": true,
      "time": 0.04179787635803223,
      "error": null
    },
    "assert split_two_parts([3, 6, 6, 4, 4, 8, 4, 2], 5) == ([3, 6, 6, 4, 4], [8, 4, 2])": {
      "result": true,
      "time": 0.038062095642089844,
      "error": null
    },
    "assert split_two_parts([2, 5, 3, 6, 7, 3, 10, 5], 7) == ([2, 5, 3, 6, 7, 3, 10], [5])": {
      "result": true,
      "time": 0.042250871658325195,
      "error": null
    },
    "assert split_two_parts([3, 5, 3, 2, 1, 9, 1, 6], 5) == ([3, 5, 3, 2, 1], [9, 1, 6])": {
      "result": true,
      "time": 0.039667367935180664,
      "error": null
    },
    "assert split_two_parts([6, 3, 4, 8, 4, 2, 3, 3], 7) == ([6, 3, 4, 8, 4, 2, 3], [3])": {
      "result": true,
      "time": 0.03954434394836426,
      "error": null
    },
    "assert split_two_parts(['b', 'g', 'i', 'k'], 6) == (['b', 'g', 'i', 'k'], [])": {
      "result": true,
      "time": 0.04389762878417969,
      "error": null
    },
    "assert split_two_parts(['b', 'q', 'c', 'c'], 7) == (['b', 'q', 'c', 'c'], [])": {
      "result": true,
      "time": 0.04116344451904297,
      "error": null
    },
    "assert split_two_parts(['s', 'x', 'u', 'g'], 5) == (['s', 'x', 'u', 'g'], [])": {
      "result": true,
      "time": 0.03732919692993164,
      "error": null
    },
    "assert split_two_parts(['a', 'q', 'n', 'g'], 1) == (['a'], ['q', 'n', 'g'])": {
      "result": true,
      "time": 0.0426480770111084,
      "error": null
    },
    "assert split_two_parts(['n', 'u', 'o', 'f'], 7) == (['n', 'u', 'o', 'f'], [])": {
      "result": true,
      "time": 0.03979849815368652,
      "error": null
    },
    "assert split_two_parts(['e', 's', 'q', 'a'], 3) == (['e', 's', 'q'], ['a'])": {
      "result": true,
      "time": 0.036536216735839844,
      "error": null
    },
    "assert split_two_parts(['b', 'v', 'g', 'w'], 2) == (['b', 'v'], ['g', 'w'])": {
      "result": true,
      "time": 0.03879714012145996,
      "error": null
    },
    "assert split_two_parts(['b', 'o', 'u', 'v'], 7) == (['b', 'o', 'u', 'v'], [])": {
      "result": true,
      "time": 0.03978538513183594,
      "error": null
    },
    "assert split_two_parts(['s', 'x', 'm', 'n'], 4) == (['s', 'x', 'm', 'n'], [])": {
      "result": true,
      "time": 0.03849506378173828,
      "error": null
    },
    "assert split_two_parts(['n', 'u', 'r', 'o'], 4) == (['n', 'u', 'r', 'o'], [])": {
      "result": true,
      "time": 0.03663277626037598,
      "error": null
    },
    "assert split_two_parts(['g', 'v', 'r', 'b'], 5) == (['g', 'v', 'r', 'b'], [])": {
      "result": true,
      "time": 0.040877580642700195,
      "error": null
    },
    "assert split_two_parts(['s', 'm', 'j', 't'], 1) == (['s'], ['m', 'j', 't'])": {
      "result": true,
      "time": 0.04719972610473633,
      "error": null
    },
    "assert split_two_parts(['s', 't', 'j', 's'], 5) == (['s', 't', 'j', 's'], [])": {
      "result": true,
      "time": 0.044295310974121094,
      "error": null
    },
    "assert split_two_parts(['q', 'e', 'l', 'k'], 6) == (['q', 'e', 'l', 'k'], [])": {
      "result": true,
      "time": 0.03917241096496582,
      "error": null
    },
    "assert split_two_parts(['h', 'n', 'l', 's'], 2) == (['h', 'n'], ['l', 's'])": {
      "result": true,
      "time": 0.04647088050842285,
      "error": null
    },
    "assert split_two_parts(['j', 'd', 'z', 'p'], 1) == (['j'], ['d', 'z', 'p'])": {
      "result": true,
      "time": 0.04858136177062988,
      "error": null
    },
    "assert split_two_parts(['w', 'z', 'u', 'v'], 4) == (['w', 'z', 'u', 'v'], [])": {
      "result": true,
      "time": 0.04824352264404297,
      "error": null
    },
    "assert split_two_parts(['m', 'n', 'd', 'n'], 4) == (['m', 'n', 'd', 'n'], [])": {
      "result": true,
      "time": 0.04157876968383789,
      "error": null
    },
    "assert split_two_parts(['v', 'o', 't', 'e'], 2) == (['v', 'o'], ['t', 'e'])": {
      "result": true,
      "time": 0.03689980506896973,
      "error": null
    },
    "assert split_two_parts(['u', 'w', 'j', 'u'], 6) == (['u', 'w', 'j', 'u'], [])": {
      "result": true,
      "time": 0.04221510887145996,
      "error": null
    },
    "assert split_two_parts(['o', 'o', 'p', 'j'], 2) == (['o', 'o'], ['p', 'j'])": {
      "result": true,
      "time": 0.04010343551635742,
      "error": null
    },
    "assert split_two_parts(['j', 'v', 'o', 't'], 1) == (['j'], ['v', 'o', 't'])": {
      "result": true,
      "time": 0.042115211486816406,
      "error": null
    },
    "assert split_two_parts(['x', 'r', 'l', 'k'], 6) == (['x', 'r', 'l', 'k'], [])": {
      "result": true,
      "time": 0.048815250396728516,
      "error": null
    },
    "assert split_two_parts(['t', 'x', 'v', 'j'], 2) == (['t', 'x'], ['v', 'j'])": {
      "result": true,
      "time": 0.04456901550292969,
      "error": null
    },
    "assert split_two_parts(['j', 'u', 't', 'k'], 2) == (['j', 'u'], ['t', 'k'])": {
      "result": true,
      "time": 0.04211854934692383,
      "error": null
    },
    "assert split_two_parts(['j', 'h', 'e', 't'], 7) == (['j', 'h', 'e', 't'], [])": {
      "result": true,
      "time": 0.0406651496887207,
      "error": null
    },
    "assert split_two_parts(['x', 'x', 'k', 'h'], 4) == (['x', 'x', 'k', 'h'], [])": {
      "result": true,
      "time": 0.03640913963317871,
      "error": null
    },
    "assert split_two_parts(['n', 'l', 'a', 'b'], 7) == (['n', 'l', 'a', 'b'], [])": {
      "result": true,
      "time": 0.04248976707458496,
      "error": null
    },
    "assert split_two_parts(['s', 'f', 'e', 'n'], 4) == (['s', 'f', 'e', 'n'], [])": {
      "result": true,
      "time": 0.040808677673339844,
      "error": null
    },
    "assert split_two_parts(['a', 'd', 'm', 'j'], 3) == (['a', 'd', 'm'], ['j'])": {
      "result": true,
      "time": 0.036808013916015625,
      "error": null
    },
    "assert split_two_parts(['e', 't', 'g', 'y'], 3) == (['e', 't', 'g'], ['y'])": {
      "result": true,
      "time": 0.03725481033325195,
      "error": null
    },
    "assert split_two_parts(['s', 'r', 'n', 'x'], 6) == (['s', 'r', 'n', 'x'], [])": {
      "result": true,
      "time": 0.037770986557006836,
      "error": null
    },
    "assert split_two_parts(['d', 'j', 'u', 'i'], 1) == (['d'], ['j', 'u', 'i'])": {
      "result": true,
      "time": 0.043738365173339844,
      "error": null
    },
    "assert split_two_parts(['c', 'c', 'k', 'f', 'p', 'a'], 8) == (['c', 'c', 'k', 'f', 'p', 'a'], [])": {
      "result": true,
      "time": 0.041204214096069336,
      "error": null
    },
    "assert split_two_parts(['v', 'm', 'l', 'k', 'g', 't'], 5) == (['v', 'm', 'l', 'k', 'g'], ['t'])": {
      "result": true,
      "time": 0.040004730224609375,
      "error": null
    },
    "assert split_two_parts(['m', 'l', 'g', 'w', 'g', 'a'], 8) == (['m', 'l', 'g', 'w', 'g', 'a'], [])": {
      "result": true,
      "time": 0.037607431411743164,
      "error": null
    },
    "assert split_two_parts(['m', 'a', 'l', 'g', 'l', 's'], 6) == (['m', 'a', 'l', 'g', 'l', 's'], [])": {
      "result": true,
      "time": 0.04656386375427246,
      "error": null
    },
    "assert split_two_parts(['b', 'm', 'l', 'u', 'm', 'm'], 8) == (['b', 'm', 'l', 'u', 'm', 'm'], [])": {
      "result": true,
      "time": 0.044219970703125,
      "error": null
    },
    "assert split_two_parts(['v', 'a', 'e', 's', 'd', 'e'], 5) == (['v', 'a', 'e', 's', 'd'], ['e'])": {
      "result": true,
      "time": 0.04183769226074219,
      "error": null
    },
    "assert split_two_parts(['n', 'l', 'l', 'v', 'm', 'h'], 7) == (['n', 'l', 'l', 'v', 'm', 'h'], [])": {
      "result": true,
      "time": 0.039284467697143555,
      "error": null
    },
    "assert split_two_parts(['h', 't', 'l', 'u', 'g', 'd'], 4) == (['h', 't', 'l', 'u'], ['g', 'd'])": {
      "result": true,
      "time": 0.041860342025756836,
      "error": null
    },
    "assert split_two_parts(['l', 'p', 'w', 'l', 'y', 'c'], 5) == (['l', 'p', 'w', 'l', 'y'], ['c'])": {
      "result": true,
      "time": 0.041852712631225586,
      "error": null
    },
    "assert split_two_parts(['w', 'g', 'h', 'd', 'v', 'k'], 9) == (['w', 'g', 'h', 'd', 'v', 'k'], [])": {
      "result": true,
      "time": 0.041748046875,
      "error": null
    },
    "assert split_two_parts(['r', 'k', 'k', 'e', 'r', 'v'], 1) == (['r'], ['k', 'k', 'e', 'r', 'v'])": {
      "result": true,
      "time": 0.042394161224365234,
      "error": null
    },
    "assert split_two_parts(['y', 'y', 'h', 'y', 'f', 'r'], 5) == (['y', 'y', 'h', 'y', 'f'], ['r'])": {
      "result": true,
      "time": 0.04048562049865723,
      "error": null
    },
    "assert split_two_parts(['m', 'u', 'k', 'l', 'v', 'w'], 5) == (['m', 'u', 'k', 'l', 'v'], ['w'])": {
      "result": true,
      "time": 0.03888869285583496,
      "error": null
    },
    "assert split_two_parts(['o', 'h', 'f', 'b', 'n', 'r'], 6) == (['o', 'h', 'f', 'b', 'n', 'r'], [])": {
      "result": true,
      "time": 0.04888796806335449,
      "error": null
    },
    "assert split_two_parts(['j', 'v', 'c', 'g', 'm', 'j'], 2) == (['j', 'v'], ['c', 'g', 'm', 'j'])": {
      "result": true,
      "time": 0.04300189018249512,
      "error": null
    },
    "assert split_two_parts(['w', 'r', 'e', 'g', 'u', 'q'], 3) == (['w', 'r', 'e'], ['g', 'u', 'q'])": {
      "result": true,
      "time": 0.038213253021240234,
      "error": null
    },
    "assert split_two_parts(['s', 'v', 'e', 's', 'u', 'k'], 7) == (['s', 'v', 'e', 's', 'u', 'k'], [])": {
      "result": true,
      "time": 0.039794921875,
      "error": null
    },
    "assert split_two_parts(['l', 'u', 'e', 'y', 'l', 'l'], 4) == (['l', 'u', 'e', 'y'], ['l', 'l'])": {
      "result": true,
      "time": 0.039330482482910156,
      "error": null
    },
    "assert split_two_parts(['o', 'e', 'q', 'h', 'p', 'w'], 7) == (['o', 'e', 'q', 'h', 'p', 'w'], [])": {
      "result": true,
      "time": 0.04689359664916992,
      "error": null
    },
    "assert split_two_parts(['e', 'x', 's', 'd', 'h', 'o'], 2) == (['e', 'x'], ['s', 'd', 'h', 'o'])": {
      "result": true,
      "time": 0.04600787162780762,
      "error": null
    },
    "assert split_two_parts(['h', 'o', 'b', 'c', 'k', 'p'], 6) == (['h', 'o', 'b', 'c', 'k', 'p'], [])": {
      "result": true,
      "time": 0.03975176811218262,
      "error": null
    },
    "assert split_two_parts(['e', 's', 'c', 'g', 'b', 'i'], 5) == (['e', 's', 'c', 'g', 'b'], ['i'])": {
      "result": true,
      "time": 0.032700538635253906,
      "error": null
    },
    "assert split_two_parts(['d', 'k', 'y', 'j', 's', 'n'], 6) == (['d', 'k', 'y', 'j', 's', 'n'], [])": {
      "result": true,
      "time": 0.0394895076751709,
      "error": null
    },
    "assert split_two_parts(['k', 'a', 'n', 'l', 's', 'r'], 9) == (['k', 'a', 'n', 'l', 's', 'r'], [])": {
      "result": true,
      "time": 0.04066967964172363,
      "error": null
    },
    "assert split_two_parts(['n', 'f', 'n', 't', 'h', 'v'], 9) == (['n', 'f', 'n', 't', 'h', 'v'], [])": {
      "result": true,
      "time": 0.0447688102722168,
      "error": null
    },
    "assert split_two_parts(['x', 'm', 'g', 'x', 'x', 'e'], 6) == (['x', 'm', 'g', 'x', 'x', 'e'], [])": {
      "result": true,
      "time": 0.04174160957336426,
      "error": null
    },
    "assert split_two_parts(['p', 't', 'o', 'x', 'r', 'z'], 6) == (['p', 't', 'o', 'x', 'r', 'z'], [])": {
      "result": true,
      "time": 0.03861379623413086,
      "error": null
    },
    "assert split_two_parts(['u', 'k', 't', 'l', 'n', 's'], 7) == (['u', 'k', 't', 'l', 'n', 's'], [])": {
      "result": true,
      "time": 0.03480219841003418,
      "error": null
    },
    "assert split_two_parts(['d', 'h', 'i', 't', 'e', 'b'], 5) == (['d', 'h', 'i', 't', 'e'], ['b'])": {
      "result": true,
      "time": 0.040374755859375,
      "error": null
    },
    "assert split_two_parts(['a', 'k', 's', 'm', 'e', 'z'], 9) == (['a', 'k', 's', 'm', 'e', 'z'], [])": {
      "result": true,
      "time": 0.03771257400512695,
      "error": null
    },
    "assert split_two_parts(['w', 'c', 'a', 'a', 'y', 'q'], 4) == (['w', 'c', 'a', 'a'], ['y', 'q'])": {
      "result": true,
      "time": 0.03380084037780762,
      "error": null
    },
    "assert split_two_parts(['i', 't', 'n', 'c', 'o', 'd'], 8) == (['i', 't', 'n', 'c', 'o', 'd'], [])": {
      "result": true,
      "time": 0.051423072814941406,
      "error": null
    },
    "assert split_two_parts(['p', 'q', 'f', 'z', 'n', 'z'], 1) == (['p'], ['q', 'f', 'z', 'n', 'z'])": {
      "result": true,
      "time": 0.0369420051574707,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}