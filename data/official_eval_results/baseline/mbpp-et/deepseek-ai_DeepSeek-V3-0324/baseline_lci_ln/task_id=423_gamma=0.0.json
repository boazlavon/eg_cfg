{
  "code": "def get_maxgold(gold, m, n):\n    # Create a DP table to store the maximum gold that can be collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Initialize the last column of the DP table\n    for i in range(m):\n        dp[i][n-1] = gold[i][n-1]\n    \n    # Fill the DP table from right to left\n    for j in range(n-2, -1, -1):\n        for i in range(m):\n            # Initialize the maximum gold from the current cell\n            max_gold = 0\n            \n            # Check the cell to the top-right\n            if i - 1 >= 0 and j + 1 < n:\n                top_right = dp[i-1][j+1]\n                if top_right > max_gold:\n                    max_gold = top_right\n            \n            # Check the cell to the right\n            if j + 1 < n:\n                right = dp[i][j+1]\n                if right > max_gold:\n                    max_gold = right\n            \n            # Check the cell to the bottom-right\n            if i + 1 < m and j + 1 < n:\n                bottom_right = dp[i+1][j+1]\n                if bottom_right > max_gold:\n                    max_gold = bottom_right\n            \n            # Update the DP table with the current cell's gold plus the maximum from possible moves\n            dp[i][j] = gold[i][j] + max_gold\n    \n    # Find the maximum value in the first column of the DP table\n    result = 0\n    for i in range(m):\n        if dp[i][0] > result:\n            result = dp[i][0]\n    \n    return result",
  "results": {
    "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16": {
      "result": true,
      "time": 0.04098010063171387,
      "error": null
    },
    "assert get_maxgold([[10,20],[30,40]],2,2)==70": {
      "result": true,
      "time": 0.03840136528015137,
      "error": null
    },
    "assert get_maxgold([[4,9],[3,7]],2,2)==13": {
      "result": true,
      "time": 0.03892803192138672,
      "error": null
    },
    "assert get_maxgold([[2, 8, 1, 9], [6, 4, 1, 3], [9, 3, 5, 2], [5, 10, 6, 2]], 1, 4) == 20": {
      "result": true,
      "time": 0.037633419036865234,
      "error": null
    },
    "assert get_maxgold([[5, 4, 2, 5], [4, 3, 1, 5], [8, 2, 2, 1], [2, 6, 5, 4]], 2, 4) == 16": {
      "result": true,
      "time": 0.03926897048950195,
      "error": null
    },
    "assert get_maxgold([[4, 1, 4, 6], [6, 3, 7, 5], [4, 2, 7, 8], [5, 6, 3, 1]], 3, 3) == 16": {
      "result": true,
      "time": 0.04668021202087402,
      "error": null
    },
    "assert get_maxgold([[4, 1, 4, 2], [4, 2, 7, 4], [7, 4, 7, 8], [2, 6, 5, 6]], 3, 3) == 18": {
      "result": true,
      "time": 0.043782711029052734,
      "error": null
    },
    "assert get_maxgold([[3, 4, 4, 7], [4, 2, 9, 6], [10, 1, 3, 8], [4, 7, 2, 5]], 2, 4) == 24": {
      "result": true,
      "time": 0.032143592834472656,
      "error": null
    },
    "assert get_maxgold([[6, 8, 5, 5], [7, 5, 3, 4], [3, 3, 1, 1], [5, 8, 4, 1]], 3, 1) == 7": {
      "result": true,
      "time": 0.03855156898498535,
      "error": null
    },
    "assert get_maxgold([[5, 2, 5, 9], [2, 3, 3, 3], [6, 1, 4, 7], [4, 5, 5, 6]], 2, 4) == 22": {
      "result": true,
      "time": 0.0428013801574707,
      "error": null
    },
    "assert get_maxgold([[3, 2, 2, 9], [6, 2, 6, 5], [6, 5, 4, 1], [1, 4, 5, 3]], 2, 2) == 8": {
      "result": true,
      "time": 0.03849339485168457,
      "error": null
    },
    "assert get_maxgold([[5, 4, 4, 4], [2, 2, 5, 1], [2, 4, 4, 8], [4, 9, 3, 1]], 2, 4) == 18": {
      "result": true,
      "time": 0.03571057319641113,
      "error": null
    },
    "assert get_maxgold([[1, 1, 5, 6], [1, 7, 2, 1], [2, 3, 7, 7], [2, 2, 3, 6]], 4, 2) == 9": {
      "result": true,
      "time": 0.03832840919494629,
      "error": null
    },
    "assert get_maxgold([[6, 4, 6, 2], [2, 7, 7, 1], [6, 3, 4, 7], [1, 10, 1, 6]], 4, 4) == 27": {
      "result": true,
      "time": 0.038800716400146484,
      "error": null
    },
    "assert get_maxgold([[3, 5, 2, 8], [1, 5, 8, 6], [4, 2, 2, 4], [4, 3, 4, 3]], 2, 3) == 16": {
      "result": true,
      "time": 0.03997611999511719,
      "error": null
    },
    "assert get_maxgold([[4, 5, 3, 4], [4, 7, 9, 5], [2, 1, 3, 5], [1, 1, 5, 4]], 2, 1) == 4": {
      "result": true,
      "time": 0.04033398628234863,
      "error": null
    },
    "assert get_maxgold([[3, 2, 3, 10], [6, 5, 9, 4], [7, 3, 6, 8], [2, 1, 1, 2]], 3, 2) == 12": {
      "result": true,
      "time": 0.041094064712524414,
      "error": null
    },
    "assert get_maxgold([[5, 4, 3, 8], [1, 4, 8, 2], [4, 5, 3, 7], [4, 7, 5, 6]], 2, 3) == 17": {
      "result": true,
      "time": 0.03800368309020996,
      "error": null
    },
    "assert get_maxgold([[4, 4, 6, 8], [4, 1, 4, 5], [9, 2, 6, 6], [2, 6, 1, 5]], 1, 1) == 4": {
      "result": true,
      "time": 0.0316164493560791,
      "error": null
    },
    "assert get_maxgold([[6, 1, 4, 4], [7, 3, 6, 2], [3, 5, 1, 8], [1, 3, 3, 3]], 4, 3) == 18": {
      "result": true,
      "time": 0.03194570541381836,
      "error": null
    },
    "assert get_maxgold([[3, 2, 4, 4], [6, 1, 4, 4], [2, 1, 3, 4], [1, 5, 5, 4]], 2, 4) == 16": {
      "result": true,
      "time": 0.036185503005981445,
      "error": null
    },
    "assert get_maxgold([[2, 3, 3, 5], [6, 2, 3, 1], [3, 5, 2, 5], [3, 2, 6, 2]], 2, 4) == 17": {
      "result": true,
      "time": 0.03534221649169922,
      "error": null
    },
    "assert get_maxgold([[4, 2, 2, 10], [6, 1, 5, 3], [2, 1, 7, 5], [2, 3, 2, 7]], 2, 3) == 13": {
      "result": true,
      "time": 0.032482147216796875,
      "error": null
    },
    "assert get_maxgold([[5, 8, 6, 1], [4, 5, 1, 1], [5, 2, 5, 3], [2, 2, 5, 7]], 2, 2) == 13": {
      "result": true,
      "time": 0.03831291198730469,
      "error": null
    },
    "assert get_maxgold([[6, 8, 5, 10], [2, 7, 2, 3], [7, 1, 4, 3], [3, 11, 5, 4]], 3, 1) == 7": {
      "result": true,
      "time": 0.04325079917907715,
      "error": null
    },
    "assert get_maxgold([[4, 5, 1, 2], [7, 5, 5, 4], [1, 4, 6, 6], [4, 10, 3, 1]], 4, 4) == 26": {
      "result": true,
      "time": 0.04197239875793457,
      "error": null
    },
    "assert get_maxgold([[3, 8, 4, 10], [7, 2, 4, 2], [9, 1, 1, 6], [1, 2, 5, 6]], 3, 3) == 19": {
      "result": true,
      "time": 0.03967118263244629,
      "error": null
    },
    "assert get_maxgold([[1, 3, 2, 4], [6, 3, 4, 6], [1, 1, 4, 3], [5, 1, 3, 1]], 2, 1) == 6": {
      "result": true,
      "time": 0.039669036865234375,
      "error": null
    },
    "assert get_maxgold([[3, 7, 1, 1], [4, 7, 2, 2], [2, 1, 6, 1], [1, 3, 6, 6]], 2, 3) == 13": {
      "result": true,
      "time": 0.04355978965759277,
      "error": null
    },
    "assert get_maxgold([[2, 8, 3, 7], [4, 2, 8, 6], [9, 1, 5, 3], [4, 2, 5, 5]], 3, 1) == 9": {
      "result": true,
      "time": 0.04090690612792969,
      "error": null
    },
    "assert get_maxgold([[4, 2, 3, 5], [4, 7, 2, 3], [2, 4, 6, 4], [4, 10, 5, 6]], 4, 3) == 20": {
      "result": true,
      "time": 0.04334282875061035,
      "error": null
    },
    "assert get_maxgold([[4, 8, 6, 6], [4, 4, 8, 1], [6, 1, 7, 4], [4, 5, 5, 4]], 4, 4) == 26": {
      "result": true,
      "time": 0.0355527400970459,
      "error": null
    },
    "assert get_maxgold([[6, 2, 2, 4], [2, 1, 2, 3], [6, 4, 6, 7], [4, 4, 6, 7]], 3, 4) == 23": {
      "result": true,
      "time": 0.04784369468688965,
      "error": null
    },
    "assert get_maxgold([[5, 5, 6, 3], [6, 7, 6, 5], [3, 2, 2, 2], [5, 3, 4, 5]], 3, 1) == 6": {
      "result": true,
      "time": 0.04232954978942871,
      "error": null
    },
    "assert get_maxgold([[4, 8, 4, 9], [3, 4, 1, 6], [7, 5, 3, 7], [5, 7, 2, 2]], 1, 3) == 16": {
      "result": true,
      "time": 0.038352012634277344,
      "error": null
    },
    "assert get_maxgold([[6, 7, 3, 2], [1, 5, 9, 6], [3, 5, 3, 3], [4, 11, 2, 3]], 3, 2) == 13": {
      "result": true,
      "time": 0.046753644943237305,
      "error": null
    },
    "assert get_maxgold([[8, 18], [35, 37]], 1, 2) == 26": {
      "result": true,
      "time": 0.04435849189758301,
      "error": null
    },
    "assert get_maxgold([[12, 20], [28, 43]], 2, 1) == 28": {
      "result": true,
      "time": 0.038770198822021484,
      "error": null
    },
    "assert get_maxgold([[9, 17], [29, 37]], 2, 1) == 29": {
      "result": true,
      "time": 0.034844160079956055,
      "error": null
    },
    "assert get_maxgold([[15, 19], [34, 36]], 2, 1) == 34": {
      "result": true,
      "time": 0.04212355613708496,
      "error": null
    },
    "assert get_maxgold([[9, 23], [27, 36]], 2, 2) == 63": {
      "result": true,
      "time": 0.04198861122131348,
      "error": null
    },
    "assert get_maxgold([[11, 20], [28, 41]], 2, 1) == 28": {
      "result": true,
      "time": 0.03899836540222168,
      "error": null
    },
    "assert get_maxgold([[13, 24], [34, 37]], 1, 1) == 13": {
      "result": true,
      "time": 0.03293108940124512,
      "error": null
    },
    "assert get_maxgold([[12, 15], [29, 40]], 2, 1) == 29": {
      "result": true,
      "time": 0.04392504692077637,
      "error": null
    },
    "assert get_maxgold([[6, 18], [29, 44]], 1, 2) == 24": {
      "result": true,
      "time": 0.03712725639343262,
      "error": null
    },
    "assert get_maxgold([[15, 23], [33, 37]], 2, 2) == 70": {
      "result": true,
      "time": 0.0359499454498291,
      "error": null
    },
    "assert get_maxgold([[9, 18], [25, 35]], 1, 2) == 27": {
      "result": true,
      "time": 0.04656243324279785,
      "error": null
    },
    "assert get_maxgold([[7, 18], [26, 42]], 2, 2) == 68": {
      "result": true,
      "time": 0.04461550712585449,
      "error": null
    },
    "assert get_maxgold([[7, 15], [28, 35]], 1, 1) == 7": {
      "result": true,
      "time": 0.04923868179321289,
      "error": null
    },
    "assert get_maxgold([[14, 16], [34, 43]], 2, 1) == 34": {
      "result": true,
      "time": 0.04086589813232422,
      "error": null
    },
    "assert get_maxgold([[6, 15], [29, 44]], 1, 1) == 6": {
      "result": true,
      "time": 0.032434701919555664,
      "error": null
    },
    "assert get_maxgold([[14, 24], [32, 43]], 2, 1) == 32": {
      "result": true,
      "time": 0.044901371002197266,
      "error": null
    },
    "assert get_maxgold([[12, 20], [32, 38]], 2, 2) == 70": {
      "result": true,
      "time": 0.03491973876953125,
      "error": null
    },
    "assert get_maxgold([[8, 24], [25, 40]], 2, 1) == 25": {
      "result": true,
      "time": 0.038448333740234375,
      "error": null
    },
    "assert get_maxgold([[10, 23], [31, 36]], 1, 1) == 10": {
      "result": true,
      "time": 0.036019086837768555,
      "error": null
    },
    "assert get_maxgold([[7, 15], [28, 42]], 1, 2) == 22": {
      "result": true,
      "time": 0.037032365798950195,
      "error": null
    },
    "assert get_maxgold([[13, 19], [25, 42]], 1, 1) == 13": {
      "result": true,
      "time": 0.03366255760192871,
      "error": null
    },
    "assert get_maxgold([[11, 23], [33, 37]], 1, 2) == 34": {
      "result": true,
      "time": 0.046053171157836914,
      "error": null
    },
    "assert get_maxgold([[11, 25], [35, 40]], 1, 2) == 36": {
      "result": true,
      "time": 0.03658795356750488,
      "error": null
    },
    "assert get_maxgold([[9, 23], [26, 35]], 1, 2) == 32": {
      "result": true,
      "time": 0.03863096237182617,
      "error": null
    },
    "assert get_maxgold([[8, 18], [25, 44]], 1, 1) == 8": {
      "result": true,
      "time": 0.03869915008544922,
      "error": null
    },
    "assert get_maxgold([[14, 19], [35, 45]], 1, 1) == 14": {
      "result": true,
      "time": 0.04227113723754883,
      "error": null
    },
    "assert get_maxgold([[6, 22], [34, 43]], 2, 1) == 34": {
      "result": true,
      "time": 0.04147982597351074,
      "error": null
    },
    "assert get_maxgold([[12, 21], [28, 45]], 1, 1) == 12": {
      "result": true,
      "time": 0.036226749420166016,
      "error": null
    },
    "assert get_maxgold([[13, 20], [27, 35]], 1, 1) == 13": {
      "result": true,
      "time": 0.04463028907775879,
      "error": null
    },
    "assert get_maxgold([[13, 23], [35, 35]], 2, 1) == 35": {
      "result": true,
      "time": 0.037367820739746094,
      "error": null
    },
    "assert get_maxgold([[10, 15], [32, 45]], 2, 1) == 32": {
      "result": true,
      "time": 0.03544354438781738,
      "error": null
    },
    "assert get_maxgold([[5, 23], [32, 43]], 1, 2) == 28": {
      "result": true,
      "time": 0.041362762451171875,
      "error": null
    },
    "assert get_maxgold([[6, 19], [33, 40]], 2, 2) == 73": {
      "result": true,
      "time": 0.03202533721923828,
      "error": null
    },
    "assert get_maxgold([[1, 10], [4, 3]], 1, 1) == 1": {
      "result": true,
      "time": 0.043018341064453125,
      "error": null
    },
    "assert get_maxgold([[9, 11], [4, 8]], 1, 2) == 20": {
      "result": true,
      "time": 0.041665077209472656,
      "error": null
    },
    "assert get_maxgold([[3, 8], [8, 2]], 1, 2) == 11": {
      "result": true,
      "time": 0.042017221450805664,
      "error": null
    },
    "assert get_maxgold([[2, 10], [6, 8]], 2, 1) == 6": {
      "result": true,
      "time": 0.04062151908874512,
      "error": null
    },
    "assert get_maxgold([[6, 7], [2, 12]], 2, 2) == 18": {
      "result": true,
      "time": 0.0360720157623291,
      "error": null
    },
    "assert get_maxgold([[2, 9], [8, 3]], 1, 1) == 2": {
      "result": true,
      "time": 0.04173445701599121,
      "error": null
    },
    "assert get_maxgold([[7, 5], [3, 10]], 2, 1) == 7": {
      "result": true,
      "time": 0.046564340591430664,
      "error": null
    },
    "assert get_maxgold([[2, 14], [5, 5]], 2, 2) == 19": {
      "result": true,
      "time": 0.03613162040710449,
      "error": null
    },
    "assert get_maxgold([[1, 13], [2, 4]], 1, 1) == 1": {
      "result": true,
      "time": 0.033745765686035156,
      "error": null
    },
    "assert get_maxgold([[2, 8], [3, 11]], 1, 2) == 10": {
      "result": true,
      "time": 0.033725738525390625,
      "error": null
    },
    "assert get_maxgold([[4, 10], [6, 3]], 1, 1) == 4": {
      "result": true,
      "time": 0.037099361419677734,
      "error": null
    },
    "assert get_maxgold([[1, 6], [6, 3]], 2, 2) == 12": {
      "result": true,
      "time": 0.03413534164428711,
      "error": null
    },
    "assert get_maxgold([[1, 5], [6, 7]], 2, 1) == 6": {
      "result": true,
      "time": 0.034596920013427734,
      "error": null
    },
    "assert get_maxgold([[9, 5], [4, 5]], 1, 1) == 9": {
      "result": true,
      "time": 0.037239789962768555,
      "error": null
    },
    "assert get_maxgold([[9, 4], [8, 11]], 1, 2) == 13": {
      "result": true,
      "time": 0.03372931480407715,
      "error": null
    },
    "assert get_maxgold([[7, 5], [8, 3]], 2, 2) == 13": {
      "result": true,
      "time": 0.03369331359863281,
      "error": null
    },
    "assert get_maxgold([[5, 6], [3, 4]], 2, 2) == 11": {
      "result": true,
      "time": 0.03627133369445801,
      "error": null
    },
    "assert get_maxgold([[5, 4], [6, 8]], 2, 1) == 6": {
      "result": true,
      "time": 0.0324094295501709,
      "error": null
    },
    "assert get_maxgold([[3, 6], [1, 5]], 1, 1) == 3": {
      "result": true,
      "time": 0.0428166389465332,
      "error": null
    },
    "assert get_maxgold([[8, 4], [3, 6]], 2, 2) == 14": {
      "result": true,
      "time": 0.034631967544555664,
      "error": null
    },
    "assert get_maxgold([[1, 4], [4, 11]], 1, 1) == 1": {
      "result": true,
      "time": 0.03131675720214844,
      "error": null
    },
    "assert get_maxgold([[1, 14], [4, 9]], 2, 2) == 18": {
      "result": true,
      "time": 0.037268877029418945,
      "error": null
    },
    "assert get_maxgold([[1, 7], [8, 9]], 2, 2) == 17": {
      "result": true,
      "time": 0.03439760208129883,
      "error": null
    },
    "assert get_maxgold([[8, 9], [3, 8]], 2, 2) == 17": {
      "result": true,
      "time": 0.03827786445617676,
      "error": null
    },
    "assert get_maxgold([[3, 11], [3, 8]], 2, 2) == 14": {
      "result": true,
      "time": 0.03511857986450195,
      "error": null
    },
    "assert get_maxgold([[3, 8], [2, 11]], 1, 1) == 3": {
      "result": true,
      "time": 0.03663277626037598,
      "error": null
    },
    "assert get_maxgold([[5, 4], [1, 12]], 1, 2) == 9": {
      "result": true,
      "time": 0.04012298583984375,
      "error": null
    },
    "assert get_maxgold([[1, 13], [4, 8]], 2, 1) == 4": {
      "result": true,
      "time": 0.0344698429107666,
      "error": null
    },
    "assert get_maxgold([[1, 13], [3, 3]], 2, 2) == 16": {
      "result": true,
      "time": 0.0347747802734375,
      "error": null
    },
    "assert get_maxgold([[6, 12], [8, 10]], 2, 1) == 8": {
      "result": true,
      "time": 0.03956413269042969,
      "error": null
    },
    "assert get_maxgold([[5, 9], [8, 9]], 2, 2) == 17": {
      "result": true,
      "time": 0.034551382064819336,
      "error": null
    },
    "assert get_maxgold([[3, 10], [8, 9]], 1, 2) == 13": {
      "result": true,
      "time": 0.03171277046203613,
      "error": null
    },
    "assert get_maxgold([[8, 6], [7, 3]], 2, 1) == 8": {
      "result": true,
      "time": 0.0359034538269043,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}