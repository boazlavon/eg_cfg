{
  "code": "def first_even(numbers):\n    for num in numbers:\n        remainder = num % 2\n        if remainder == 0:\n            first_even_num = num\n            return first_even_num\n    return None",
  "results": {
    "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4": {
      "result": true,
      "time": 0.03715395927429199,
      "error": null
    },
    "assert first_even([2, 3, 4]) == 2": {
      "result": true,
      "time": 0.04295802116394043,
      "error": null
    },
    "assert first_even([5, 6, 7]) == 6": {
      "result": true,
      "time": 0.052892446517944336,
      "error": null
    },
    "assert first_even ([5, 6, 4, 10, 6, 6, 4, 7]) == 6": {
      "result": true,
      "time": 0.05423760414123535,
      "error": null
    },
    "assert first_even ([2, 4, 10, 11, 4, 2, 1, 7]) == 2": {
      "result": true,
      "time": 0.04575324058532715,
      "error": null
    },
    "assert first_even ([4, 5, 7, 2, 4, 6, 3, 3]) == 4": {
      "result": true,
      "time": 0.044052839279174805,
      "error": null
    },
    "assert first_even ([6, 3, 5, 11, 9, 3, 2, 11]) == 6": {
      "result": true,
      "time": 0.048970937728881836,
      "error": null
    },
    "assert first_even ([6, 6, 7, 5, 5, 5, 8, 10]) == 6": {
      "result": true,
      "time": 0.046593666076660156,
      "error": null
    },
    "assert first_even ([4, 8, 10, 8, 3, 5, 6, 9]) == 4": {
      "result": true,
      "time": 0.03695869445800781,
      "error": null
    },
    "assert first_even ([2, 3, 9, 5, 5, 1, 10, 7]) == 2": {
      "result": true,
      "time": 0.045098066329956055,
      "error": null
    },
    "assert first_even ([3, 8, 7, 7, 5, 4, 2, 4]) == 8": {
      "result": true,
      "time": 0.049077510833740234,
      "error": null
    },
    "assert first_even ([4, 4, 6, 6, 2, 1, 5, 13]) == 4": {
      "result": true,
      "time": 0.044620513916015625,
      "error": null
    },
    "assert first_even ([5, 7, 9, 5, 5, 4, 5, 12]) == 4": {
      "result": true,
      "time": 0.059874534606933594,
      "error": null
    },
    "assert first_even ([3, 7, 1, 5, 3, 4, 3, 4]) == 4": {
      "result": true,
      "time": 0.04857993125915527,
      "error": null
    },
    "assert first_even ([1, 5, 5, 12, 7, 2, 7, 12]) == 12": {
      "result": true,
      "time": 0.04153609275817871,
      "error": null
    },
    "assert first_even ([1, 6, 5, 7, 1, 1, 10, 8]) == 6": {
      "result": true,
      "time": 0.04704594612121582,
      "error": null
    },
    "assert first_even ([4, 5, 7, 10, 1, 1, 7, 8]) == 4": {
      "result": true,
      "time": 0.053636789321899414,
      "error": null
    },
    "assert first_even ([2, 7, 10, 11, 7, 2, 1, 8]) == 2": {
      "result": true,
      "time": 0.04627633094787598,
      "error": null
    },
    "assert first_even ([2, 7, 10, 9, 7, 2, 1, 7]) == 2": {
      "result": true,
      "time": 0.04414653778076172,
      "error": null
    },
    "assert first_even ([1, 7, 9, 5, 3, 5, 2, 7]) == 2": {
      "result": true,
      "time": 0.04450368881225586,
      "error": null
    },
    "assert first_even ([2, 8, 7, 12, 9, 4, 1, 6]) == 2": {
      "result": true,
      "time": 0.04547691345214844,
      "error": null
    },
    "assert first_even ([4, 2, 2, 5, 5, 1, 6, 12]) == 4": {
      "result": true,
      "time": 0.0411524772644043,
      "error": null
    },
    "assert first_even ([1, 8, 2, 10, 9, 4, 11, 4]) == 8": {
      "result": true,
      "time": 0.054285526275634766,
      "error": null
    },
    "assert first_even ([5, 1, 8, 3, 1, 6, 8, 8]) == 8": {
      "result": true,
      "time": 0.04433441162109375,
      "error": null
    },
    "assert first_even ([6, 2, 10, 5, 9, 6, 5, 8]) == 6": {
      "result": true,
      "time": 0.039452314376831055,
      "error": null
    },
    "assert first_even ([4, 7, 5, 7, 3, 3, 1, 7]) == 4": {
      "result": true,
      "time": 0.04708051681518555,
      "error": null
    },
    "assert first_even ([2, 7, 2, 6, 5, 1, 9, 6]) == 2": {
      "result": true,
      "time": 0.03998923301696777,
      "error": null
    },
    "assert first_even ([4, 1, 2, 5, 2, 1, 7, 3]) == 4": {
      "result": true,
      "time": 0.04258394241333008,
      "error": null
    },
    "assert first_even ([2, 2, 5, 11, 5, 2, 2, 11]) == 2": {
      "result": true,
      "time": 0.045224666595458984,
      "error": null
    },
    "assert first_even ([6, 2, 3, 10, 4, 5, 11, 13]) == 6": {
      "result": true,
      "time": 0.046114444732666016,
      "error": null
    },
    "assert first_even ([3, 1, 6, 3, 9, 3, 9, 9]) == 6": {
      "result": true,
      "time": 0.04262280464172363,
      "error": null
    },
    "assert first_even ([3, 1, 7, 6, 4, 2, 5, 6]) == 6": {
      "result": true,
      "time": 0.03995108604431152,
      "error": null
    },
    "assert first_even ([5, 5, 5, 9, 1, 1, 11, 13]) == -1": {
      "result": false,
      "time": 0.03968954086303711,
      "error": null
    },
    "assert first_even ([3, 5, 7, 10, 6, 5, 8, 11]) == 10": {
      "result": true,
      "time": 0.03753018379211426,
      "error": null
    },
    "assert first_even ([1, 1, 2, 7, 5, 2, 11, 13]) == 2": {
      "result": true,
      "time": 0.04716801643371582,
      "error": null
    },
    "assert first_even ([2, 5, 6, 12, 1, 1, 10, 4]) == 2": {
      "result": true,
      "time": 0.05419731140136719,
      "error": null
    },
    "assert first_even ([7, 5, 1]) == -1": {
      "result": false,
      "time": 0.049318790435791016,
      "error": null
    },
    "assert first_even ([2, 5, 5]) == 2": {
      "result": true,
      "time": 0.04642224311828613,
      "error": null
    },
    "assert first_even ([5, 4, 8]) == 4": {
      "result": true,
      "time": 0.04570770263671875,
      "error": null
    },
    "assert first_even ([1, 3, 9]) == -1": {
      "result": false,
      "time": 0.0462799072265625,
      "error": null
    },
    "assert first_even ([6, 1, 1]) == 6": {
      "result": true,
      "time": 0.040563106536865234,
      "error": null
    },
    "assert first_even ([1, 8, 2]) == 8": {
      "result": true,
      "time": 0.05446505546569824,
      "error": null
    },
    "assert first_even ([7, 3, 8]) == 8": {
      "result": true,
      "time": 0.05480837821960449,
      "error": null
    },
    "assert first_even ([3, 8, 2]) == 8": {
      "result": true,
      "time": 0.04629969596862793,
      "error": null
    },
    "assert first_even ([4, 1, 7]) == 4": {
      "result": true,
      "time": 0.05315661430358887,
      "error": null
    },
    "assert first_even ([6, 7, 2]) == 6": {
      "result": true,
      "time": 0.0510861873626709,
      "error": null
    },
    "assert first_even ([1, 4, 2]) == 4": {
      "result": true,
      "time": 0.05281662940979004,
      "error": null
    },
    "assert first_even ([7, 3, 3]) == -1": {
      "result": false,
      "time": 0.04964017868041992,
      "error": null
    },
    "assert first_even ([7, 8, 7]) == 8": {
      "result": true,
      "time": 0.04040265083312988,
      "error": null
    },
    "assert first_even ([5, 2, 6]) == 2": {
      "result": true,
      "time": 0.0504148006439209,
      "error": null
    },
    "assert first_even ([2, 4, 7]) == 2": {
      "result": true,
      "time": 0.05502009391784668,
      "error": null
    },
    "assert first_even ([2, 8, 4]) == 2": {
      "result": true,
      "time": 0.04716801643371582,
      "error": null
    },
    "assert first_even ([4, 8, 1]) == 4": {
      "result": true,
      "time": 0.04721331596374512,
      "error": null
    },
    "assert first_even ([1, 2, 9]) == 2": {
      "result": true,
      "time": 0.04789400100708008,
      "error": null
    },
    "assert first_even ([5, 4, 7]) == 4": {
      "result": true,
      "time": 0.047392845153808594,
      "error": null
    },
    "assert first_even ([5, 1, 5]) == -1": {
      "result": false,
      "time": 0.06230592727661133,
      "error": null
    },
    "assert first_even ([1, 5, 5]) == -1": {
      "result": false,
      "time": 0.053101539611816406,
      "error": null
    },
    "assert first_even ([3, 3, 5]) == -1": {
      "result": false,
      "time": 0.06967902183532715,
      "error": null
    },
    "assert first_even ([1, 7, 8]) == 8": {
      "result": true,
      "time": 0.051943063735961914,
      "error": null
    },
    "assert first_even ([3, 2, 7]) == 2": {
      "result": true,
      "time": 0.060736894607543945,
      "error": null
    },
    "assert first_even ([5, 8, 8]) == 8": {
      "result": true,
      "time": 0.053911685943603516,
      "error": null
    },
    "assert first_even ([4, 1, 1]) == 4": {
      "result": true,
      "time": 0.06520676612854004,
      "error": null
    },
    "assert first_even ([1, 1, 1]) == -1": {
      "result": false,
      "time": 0.052603721618652344,
      "error": null
    },
    "assert first_even ([2, 6, 1]) == 2": {
      "result": true,
      "time": 0.06688690185546875,
      "error": null
    },
    "assert first_even ([4, 5, 3]) == 4": {
      "result": true,
      "time": 0.043395042419433594,
      "error": null
    },
    "assert first_even ([3, 4, 1]) == 4": {
      "result": true,
      "time": 0.05047416687011719,
      "error": null
    },
    "assert first_even ([2, 8, 9]) == 2": {
      "result": true,
      "time": 0.05193185806274414,
      "error": null
    },
    "assert first_even ([4, 4, 1]) == 4": {
      "result": true,
      "time": 0.05768322944641113,
      "error": null
    },
    "assert first_even ([4, 3, 12]) == 4": {
      "result": true,
      "time": 0.06355595588684082,
      "error": null
    },
    "assert first_even ([3, 9, 10]) == 10": {
      "result": true,
      "time": 0.05856776237487793,
      "error": null
    },
    "assert first_even ([1, 8, 9]) == 8": {
      "result": true,
      "time": 0.05736684799194336,
      "error": null
    },
    "assert first_even ([9, 4, 3]) == 4": {
      "result": true,
      "time": 0.052314043045043945,
      "error": null
    },
    "assert first_even ([5, 7, 3]) == -1": {
      "result": false,
      "time": 0.056174516677856445,
      "error": null
    },
    "assert first_even ([6, 1, 4]) == 6": {
      "result": true,
      "time": 0.056159257888793945,
      "error": null
    },
    "assert first_even ([1, 3, 2]) == 2": {
      "result": true,
      "time": 0.054749488830566406,
      "error": null
    },
    "assert first_even ([2, 2, 2]) == 2": {
      "result": true,
      "time": 0.04462289810180664,
      "error": null
    },
    "assert first_even ([5, 8, 7]) == 8": {
      "result": true,
      "time": 0.05650663375854492,
      "error": null
    },
    "assert first_even ([6, 4, 7]) == 6": {
      "result": true,
      "time": 0.07096457481384277,
      "error": null
    },
    "assert first_even ([8, 2, 7]) == 8": {
      "result": true,
      "time": 0.04568314552307129,
      "error": null
    },
    "assert first_even ([7, 1, 10]) == 10": {
      "result": true,
      "time": 0.04608011245727539,
      "error": null
    },
    "assert first_even ([2, 1, 11]) == 2": {
      "result": true,
      "time": 0.056417226791381836,
      "error": null
    },
    "assert first_even ([10, 2, 2]) == 10": {
      "result": true,
      "time": 0.055310964584350586,
      "error": null
    },
    "assert first_even ([7, 2, 9]) == 2": {
      "result": true,
      "time": 0.048490285873413086,
      "error": null
    },
    "assert first_even ([9, 7, 10]) == 10": {
      "result": true,
      "time": 0.04752182960510254,
      "error": null
    },
    "assert first_even ([9, 10, 3]) == 10": {
      "result": true,
      "time": 0.056915283203125,
      "error": null
    },
    "assert first_even ([2, 4, 5]) == 2": {
      "result": true,
      "time": 0.06208157539367676,
      "error": null
    },
    "assert first_even ([10, 9, 9]) == 10": {
      "result": true,
      "time": 0.05950164794921875,
      "error": null
    },
    "assert first_even ([4, 2, 3]) == 4": {
      "result": true,
      "time": 0.0408785343170166,
      "error": null
    },
    "assert first_even ([8, 9, 10]) == 8": {
      "result": true,
      "time": 0.047041893005371094,
      "error": null
    },
    "assert first_even ([4, 3, 9]) == 4": {
      "result": true,
      "time": 0.055782318115234375,
      "error": null
    },
    "assert first_even ([1, 1, 6]) == 6": {
      "result": true,
      "time": 0.05587577819824219,
      "error": null
    },
    "assert first_even ([7, 6, 3]) == 6": {
      "result": true,
      "time": 0.04025435447692871,
      "error": null
    },
    "assert first_even ([6, 7, 3]) == 6": {
      "result": true,
      "time": 0.0688629150390625,
      "error": null
    },
    "assert first_even ([8, 4, 10]) == 8": {
      "result": true,
      "time": 0.05475163459777832,
      "error": null
    },
    "assert first_even ([6, 3, 2]) == 6": {
      "result": true,
      "time": 0.047582387924194336,
      "error": null
    },
    "assert first_even ([8, 4, 9]) == 8": {
      "result": true,
      "time": 0.05010652542114258,
      "error": null
    },
    "assert first_even ([6, 2, 2]) == 6": {
      "result": true,
      "time": 0.03946542739868164,
      "error": null
    },
    "assert first_even ([1, 5, 6]) == 6": {
      "result": true,
      "time": 0.046733856201171875,
      "error": null
    },
    "assert first_even ([10, 3, 10]) == 10": {
      "result": true,
      "time": 0.04423713684082031,
      "error": null
    },
    "assert first_even ([4, 10, 6]) == 4": {
      "result": true,
      "time": 0.04474377632141113,
      "error": null
    },
    "assert first_even ([1, 1, 12]) == 12": {
      "result": true,
      "time": 0.04874610900878906,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9108910891089109,
  "general_error": "",
  "has_testcase_error": false
}