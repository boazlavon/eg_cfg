{
  "code": "def first_Digit(number):\n    absolute_value = abs(number)\n    number_str = str(absolute_value)\n    first_char = number_str[0]\n    first_digit = int(first_char)\n    return first_digit",
  "results": {
    "assert first_Digit(123) == 1": {
      "result": true,
      "time": 0.048012733459472656,
      "error": null
    },
    "assert first_Digit(456) == 4": {
      "result": true,
      "time": 0.04057431221008301,
      "error": null
    },
    "assert first_Digit(12) == 1": {
      "result": true,
      "time": 0.048536062240600586,
      "error": null
    },
    "assert first_Digit(125) == 1": {
      "result": true,
      "time": 0.03940296173095703,
      "error": null
    },
    "assert first_Digit(128) == 1": {
      "result": true,
      "time": 0.03373527526855469,
      "error": null
    },
    "assert first_Digit(122) == 1": {
      "result": true,
      "time": 0.04052400588989258,
      "error": null
    },
    "assert first_Digit(121) == 1": {
      "result": true,
      "time": 0.04825925827026367,
      "error": null
    },
    "assert first_Digit(120) == 1": {
      "result": true,
      "time": 0.03757977485656738,
      "error": null
    },
    "assert first_Digit(119) == 1": {
      "result": true,
      "time": 0.04918837547302246,
      "error": null
    },
    "assert first_Digit(124) == 1": {
      "result": true,
      "time": 0.05475616455078125,
      "error": null
    },
    "assert first_Digit(126) == 1": {
      "result": true,
      "time": 0.04365348815917969,
      "error": null
    },
    "assert first_Digit(118) == 1": {
      "result": true,
      "time": 0.036215782165527344,
      "error": null
    },
    "assert first_Digit(127) == 1": {
      "result": true,
      "time": 0.052317142486572266,
      "error": null
    },
    "assert first_Digit(453) == 4": {
      "result": true,
      "time": 0.04073166847229004,
      "error": null
    },
    "assert first_Digit(461) == 4": {
      "result": true,
      "time": 0.044733285903930664,
      "error": null
    },
    "assert first_Digit(457) == 4": {
      "result": true,
      "time": 0.036299943923950195,
      "error": null
    },
    "assert first_Digit(460) == 4": {
      "result": true,
      "time": 0.04541420936584473,
      "error": null
    },
    "assert first_Digit(454) == 4": {
      "result": true,
      "time": 0.037778615951538086,
      "error": null
    },
    "assert first_Digit(455) == 4": {
      "result": true,
      "time": 0.045340538024902344,
      "error": null
    },
    "assert first_Digit(451) == 4": {
      "result": true,
      "time": 0.0387115478515625,
      "error": null
    },
    "assert first_Digit(459) == 4": {
      "result": true,
      "time": 0.042618751525878906,
      "error": null
    },
    "assert first_Digit(458) == 4": {
      "result": true,
      "time": 0.0417180061340332,
      "error": null
    },
    "assert first_Digit(7) == 7": {
      "result": true,
      "time": 0.04620790481567383,
      "error": null
    },
    "assert first_Digit(17) == 1": {
      "result": true,
      "time": 0.03879380226135254,
      "error": null
    },
    "assert first_Digit(16) == 1": {
      "result": true,
      "time": 0.0445096492767334,
      "error": null
    },
    "assert first_Digit(13) == 1": {
      "result": true,
      "time": 0.03503131866455078,
      "error": null
    },
    "assert first_Digit(9) == 9": {
      "result": true,
      "time": 0.04770207405090332,
      "error": null
    },
    "assert first_Digit(10) == 1": {
      "result": true,
      "time": 0.0424802303314209,
      "error": null
    },
    "assert first_Digit(15) == 1": {
      "result": true,
      "time": 0.037194252014160156,
      "error": null
    },
    "assert first_Digit(8) == 8": {
      "result": true,
      "time": 0.04005742073059082,
      "error": null
    },
    "assert first_Digit(14) == 1": {
      "result": true,
      "time": 0.044487953186035156,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}