{
  "code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return 0  # or handle as per requirements, but test cases imply len >= 2\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        current_product = nums[i] * nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
  "results": {
    "assert adjacent_num_product([1,2,3,4,5,6]) == 30": {
      "result": true,
      "time": 0.05337381362915039,
      "error": null
    },
    "assert adjacent_num_product([1,2,3,4,5]) == 20": {
      "result": true,
      "time": 0.044901371002197266,
      "error": null
    },
    "assert adjacent_num_product([2,3]) == 6": {
      "result": true,
      "time": 0.049291372299194336,
      "error": null
    },
    "assert adjacent_num_product([1, 3, 3, 9, 4, 8]) == 36": {
      "result": true,
      "time": 0.04134011268615723,
      "error": null
    },
    "assert adjacent_num_product([1, 1, 4, 1, 9, 8]) == 72": {
      "result": true,
      "time": 0.04600858688354492,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 3, 6, 10, 2]) == 60": {
      "result": true,
      "time": 0.04477405548095703,
      "error": null
    },
    "assert adjacent_num_product([2, 6, 8, 6, 3, 6]) == 48": {
      "result": true,
      "time": 0.04559206962585449,
      "error": null
    },
    "assert adjacent_num_product([2, 5, 4, 3, 9, 9]) == 81": {
      "result": true,
      "time": 0.04538869857788086,
      "error": null
    },
    "assert adjacent_num_product([2, 5, 4, 1, 3, 1]) == 20": {
      "result": true,
      "time": 0.03969597816467285,
      "error": null
    },
    "assert adjacent_num_product([3, 4, 4, 2, 6, 4]) == 24": {
      "result": true,
      "time": 0.04256868362426758,
      "error": null
    },
    "assert adjacent_num_product([5, 1, 3, 4, 10, 6]) == 60": {
      "result": true,
      "time": 0.044678449630737305,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 5, 3, 9, 9]) == 81": {
      "result": true,
      "time": 0.04687643051147461,
      "error": null
    },
    "assert adjacent_num_product([3, 1, 4, 3, 5, 1]) == 15": {
      "result": true,
      "time": 0.03724336624145508,
      "error": null
    },
    "assert adjacent_num_product([2, 1, 4, 1, 8, 8]) == 64": {
      "result": true,
      "time": 0.05538153648376465,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 4, 6, 2, 8]) == 24": {
      "result": true,
      "time": 0.045351505279541016,
      "error": null
    },
    "assert adjacent_num_product([2, 1, 7, 4, 1, 4]) == 28": {
      "result": true,
      "time": 0.04327678680419922,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 1, 9, 7, 11]) == 77": {
      "result": true,
      "time": 0.041146039962768555,
      "error": null
    },
    "assert adjacent_num_product([3, 3, 7, 6, 9, 6]) == 54": {
      "result": true,
      "time": 0.04194760322570801,
      "error": null
    },
    "assert adjacent_num_product([1, 3, 5, 7, 1, 1]) == 35": {
      "result": true,
      "time": 0.04480743408203125,
      "error": null
    },
    "assert adjacent_num_product([4, 2, 8, 4, 8, 4]) == 32": {
      "result": true,
      "time": 0.05285358428955078,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 7, 9, 2, 3]) == 63": {
      "result": true,
      "time": 0.041959285736083984,
      "error": null
    },
    "assert adjacent_num_product([1, 2, 5, 5, 8, 3]) == 40": {
      "result": true,
      "time": 0.04110527038574219,
      "error": null
    },
    "assert adjacent_num_product([6, 6, 6, 6, 2, 1]) == 36": {
      "result": true,
      "time": 0.04209733009338379,
      "error": null
    },
    "assert adjacent_num_product([1, 7, 4, 5, 7, 11]) == 77": {
      "result": true,
      "time": 0.037213802337646484,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 4, 6, 1, 2]) == 24": {
      "result": true,
      "time": 0.04824542999267578,
      "error": null
    },
    "assert adjacent_num_product([5, 2, 1, 4, 8, 10]) == 80": {
      "result": true,
      "time": 0.04250454902648926,
      "error": null
    },
    "assert adjacent_num_product([1, 6, 3, 3, 4, 3]) == 18": {
      "result": true,
      "time": 0.039695024490356445,
      "error": null
    },
    "assert adjacent_num_product([3, 3, 4, 2, 6, 10]) == 60": {
      "result": true,
      "time": 0.04183793067932129,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 8, 7, 10, 1]) == 70": {
      "result": true,
      "time": 0.044304609298706055,
      "error": null
    },
    "assert adjacent_num_product([6, 4, 2, 7, 5, 9]) == 45": {
      "result": true,
      "time": 0.04753851890563965,
      "error": null
    },
    "assert adjacent_num_product([3, 7, 5, 3, 4, 2]) == 35": {
      "result": true,
      "time": 0.045844078063964844,
      "error": null
    },
    "assert adjacent_num_product([2, 1, 6, 1, 5, 9]) == 45": {
      "result": true,
      "time": 0.053853511810302734,
      "error": null
    },
    "assert adjacent_num_product([2, 2, 1, 6, 3, 8]) == 24": {
      "result": true,
      "time": 0.03606128692626953,
      "error": null
    },
    "assert adjacent_num_product([3, 4, 4, 4, 2, 3]) == 16": {
      "result": true,
      "time": 0.04689812660217285,
      "error": null
    },
    "assert adjacent_num_product([6, 5, 5, 8, 9, 11]) == 99": {
      "result": true,
      "time": 0.044640541076660156,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 1, 3, 9, 9]) == 81": {
      "result": true,
      "time": 0.04642748832702637,
      "error": null
    },
    "assert adjacent_num_product([5, 1, 1, 9, 4]) == 36": {
      "result": true,
      "time": 0.044586181640625,
      "error": null
    },
    "assert adjacent_num_product([3, 7, 8, 4, 5]) == 56": {
      "result": true,
      "time": 0.04493904113769531,
      "error": null
    },
    "assert adjacent_num_product([1, 7, 1, 9, 1]) == 9": {
      "result": true,
      "time": 0.04237103462219238,
      "error": null
    },
    "assert adjacent_num_product([3, 7, 1, 3, 5]) == 21": {
      "result": true,
      "time": 0.05080294609069824,
      "error": null
    },
    "assert adjacent_num_product([1, 3, 3, 1, 5]) == 9": {
      "result": true,
      "time": 0.04167771339416504,
      "error": null
    },
    "assert adjacent_num_product([1, 2, 4, 4, 5]) == 20": {
      "result": true,
      "time": 0.04573178291320801,
      "error": null
    },
    "assert adjacent_num_product([5, 6, 7, 8, 2]) == 56": {
      "result": true,
      "time": 0.0458829402923584,
      "error": null
    },
    "assert adjacent_num_product([3, 6, 8, 8, 5]) == 64": {
      "result": true,
      "time": 0.03941488265991211,
      "error": null
    },
    "assert adjacent_num_product([5, 1, 7, 1, 8]) == 8": {
      "result": true,
      "time": 0.04590415954589844,
      "error": null
    },
    "assert adjacent_num_product([5, 6, 8, 2, 5]) == 48": {
      "result": true,
      "time": 0.042968034744262695,
      "error": null
    },
    "assert adjacent_num_product([5, 5, 5, 9, 8]) == 72": {
      "result": true,
      "time": 0.04067397117614746,
      "error": null
    },
    "assert adjacent_num_product([4, 2, 4, 4, 3]) == 16": {
      "result": true,
      "time": 0.043033599853515625,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 3, 8, 2]) == 24": {
      "result": true,
      "time": 0.04362130165100098,
      "error": null
    },
    "assert adjacent_num_product([6, 3, 4, 7, 7]) == 49": {
      "result": true,
      "time": 0.040950775146484375,
      "error": null
    },
    "assert adjacent_num_product([6, 5, 4, 6, 3]) == 30": {
      "result": true,
      "time": 0.046138763427734375,
      "error": null
    },
    "assert adjacent_num_product([2, 4, 5, 1, 8]) == 20": {
      "result": true,
      "time": 0.04142284393310547,
      "error": null
    },
    "assert adjacent_num_product([6, 2, 2, 4, 4]) == 16": {
      "result": true,
      "time": 0.0448765754699707,
      "error": null
    },
    "assert adjacent_num_product([4, 6, 2, 1, 1]) == 24": {
      "result": true,
      "time": 0.04311370849609375,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 4, 5, 2]) == 20": {
      "result": true,
      "time": 0.04731893539428711,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 4, 9, 10]) == 90": {
      "result": true,
      "time": 0.04625272750854492,
      "error": null
    },
    "assert adjacent_num_product([2, 7, 5, 7, 1]) == 35": {
      "result": true,
      "time": 0.04506230354309082,
      "error": null
    },
    "assert adjacent_num_product([1, 1, 3, 9, 7]) == 63": {
      "result": true,
      "time": 0.039211273193359375,
      "error": null
    },
    "assert adjacent_num_product([1, 1, 2, 8, 1]) == 16": {
      "result": true,
      "time": 0.041999101638793945,
      "error": null
    },
    "assert adjacent_num_product([4, 4, 2, 1, 5]) == 16": {
      "result": true,
      "time": 0.03971743583679199,
      "error": null
    },
    "assert adjacent_num_product([4, 5, 4, 2, 3]) == 20": {
      "result": true,
      "time": 0.043297529220581055,
      "error": null
    },
    "assert adjacent_num_product([6, 6, 5, 5, 4]) == 36": {
      "result": true,
      "time": 0.046065568923950195,
      "error": null
    },
    "assert adjacent_num_product([6, 7, 7, 6, 1]) == 49": {
      "result": true,
      "time": 0.05421638488769531,
      "error": null
    },
    "assert adjacent_num_product([5, 2, 7, 2, 8]) == 16": {
      "result": true,
      "time": 0.05376601219177246,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 5, 7, 2]) == 35": {
      "result": true,
      "time": 0.04592394828796387,
      "error": null
    },
    "assert adjacent_num_product([6, 2, 8, 8, 4]) == 64": {
      "result": true,
      "time": 0.05473589897155762,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 6, 5, 5]) == 30": {
      "result": true,
      "time": 0.045470237731933594,
      "error": null
    },
    "assert adjacent_num_product([4, 7, 4, 9, 3]) == 36": {
      "result": true,
      "time": 0.05909371376037598,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 8, 1, 3]) == 24": {
      "result": true,
      "time": 0.0554051399230957,
      "error": null
    },
    "assert adjacent_num_product([3, 6]) == 18": {
      "result": true,
      "time": 0.054407596588134766,
      "error": null
    },
    "assert adjacent_num_product([5, 7]) == 35": {
      "result": true,
      "time": 0.06377720832824707,
      "error": null
    },
    "assert adjacent_num_product([3, 5]) == 15": {
      "result": true,
      "time": 0.06081843376159668,
      "error": null
    },
    "assert adjacent_num_product([6, 3]) == 18": {
      "result": true,
      "time": 0.06233811378479004,
      "error": null
    },
    "assert adjacent_num_product([2, 5]) == 10": {
      "result": true,
      "time": 0.05216574668884277,
      "error": null
    },
    "assert adjacent_num_product([7, 3]) == 21": {
      "result": true,
      "time": 0.05567288398742676,
      "error": null
    },
    "assert adjacent_num_product([6, 8]) == 48": {
      "result": true,
      "time": 0.06343436241149902,
      "error": null
    },
    "assert adjacent_num_product([2, 3]) == 6": {
      "result": true,
      "time": 0.054604291915893555,
      "error": null
    },
    "assert adjacent_num_product([2, 8]) == 16": {
      "result": true,
      "time": 0.04918313026428223,
      "error": null
    },
    "assert adjacent_num_product([3, 2]) == 6": {
      "result": true,
      "time": 0.06183600425720215,
      "error": null
    },
    "assert adjacent_num_product([2, 1]) == 2": {
      "result": true,
      "time": 0.05890965461730957,
      "error": null
    },
    "assert adjacent_num_product([2, 4]) == 8": {
      "result": true,
      "time": 0.04846310615539551,
      "error": null
    },
    "assert adjacent_num_product([6, 6]) == 36": {
      "result": true,
      "time": 0.056400299072265625,
      "error": null
    },
    "assert adjacent_num_product([5, 1]) == 5": {
      "result": true,
      "time": 0.05776691436767578,
      "error": null
    },
    "assert adjacent_num_product([4, 8]) == 32": {
      "result": true,
      "time": 0.0478975772857666,
      "error": null
    },
    "assert adjacent_num_product([3, 3]) == 9": {
      "result": true,
      "time": 0.0515899658203125,
      "error": null
    },
    "assert adjacent_num_product([4, 6]) == 24": {
      "result": true,
      "time": 0.04857921600341797,
      "error": null
    },
    "assert adjacent_num_product([1, 5]) == 5": {
      "result": true,
      "time": 0.04764580726623535,
      "error": null
    },
    "assert adjacent_num_product([5, 4]) == 20": {
      "result": true,
      "time": 0.05932784080505371,
      "error": null
    },
    "assert adjacent_num_product([7, 5]) == 35": {
      "result": true,
      "time": 0.05329728126525879,
      "error": null
    },
    "assert adjacent_num_product([7, 6]) == 42": {
      "result": true,
      "time": 0.05381965637207031,
      "error": null
    },
    "assert adjacent_num_product([1, 1]) == 1": {
      "result": true,
      "time": 0.04483938217163086,
      "error": null
    },
    "assert adjacent_num_product([1, 8]) == 8": {
      "result": true,
      "time": 0.06224870681762695,
      "error": null
    },
    "assert adjacent_num_product([2, 7]) == 14": {
      "result": true,
      "time": 0.05467343330383301,
      "error": null
    },
    "assert adjacent_num_product([3, 4]) == 12": {
      "result": true,
      "time": 0.05113506317138672,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}