{
  "code": "def inversion_elements(test_tup):\n    return tuple(-x - 1 for x in test_tup)",
  "results": {
    "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)": {
      "result": true,
      "time": 0.036484718322753906,
      "error": null
    },
    "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)": {
      "result": true,
      "time": 0.04224085807800293,
      "error": null
    },
    "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)": {
      "result": true,
      "time": 0.03731942176818848,
      "error": null
    },
    "assert inversion_elements((6, 6, 4, 2, 9, 5)) == (-7, -7, -5, -3, -10, -6)": {
      "result": true,
      "time": 0.03528594970703125,
      "error": null
    },
    "assert inversion_elements((2, 6, 13, 2, 13, 6)) == (-3, -7, -14, -3, -14, -7)": {
      "result": true,
      "time": 0.03979825973510742,
      "error": null
    },
    "assert inversion_elements((6, 3, 4, 3, 9, 6)) == (-7, -4, -5, -4, -10, -7)": {
      "result": true,
      "time": 0.03867077827453613,
      "error": null
    },
    "assert inversion_elements((3, 12, 10, 1, 7, 12)) == (-4, -13, -11, -2, -8, -13)": {
      "result": true,
      "time": 0.04195070266723633,
      "error": null
    },
    "assert inversion_elements((5, 8, 8, 6, 13, 3)) == (-6, -9, -9, -7, -14, -4)": {
      "result": true,
      "time": 0.03424978256225586,
      "error": null
    },
    "assert inversion_elements((11, 12, 14, 1, 5, 11)) == (-12, -13, -15, -2, -6, -12)": {
      "result": true,
      "time": 0.04002714157104492,
      "error": null
    },
    "assert inversion_elements((8, 4, 7, 6, 11, 7)) == (-9, -5, -8, -7, -12, -8)": {
      "result": true,
      "time": 0.049973487854003906,
      "error": null
    },
    "assert inversion_elements((9, 13, 10, 2, 13, 11)) == (-10, -14, -11, -3, -14, -12)": {
      "result": true,
      "time": 0.0411839485168457,
      "error": null
    },
    "assert inversion_elements((11, 12, 6, 2, 10, 4)) == (-12, -13, -7, -3, -11, -5)": {
      "result": true,
      "time": 0.05636739730834961,
      "error": null
    },
    "assert inversion_elements((5, 13, 5, 1, 7, 8)) == (-6, -14, -6, -2, -8, -9)": {
      "result": true,
      "time": 0.04868960380554199,
      "error": null
    },
    "assert inversion_elements((4, 9, 8, 5, 9, 3)) == (-5, -10, -9, -6, -10, -4)": {
      "result": true,
      "time": 0.06232762336730957,
      "error": null
    },
    "assert inversion_elements((3, 7, 13, 3, 14, 8)) == (-4, -8, -14, -4, -15, -9)": {
      "result": true,
      "time": 0.047039031982421875,
      "error": null
    },
    "assert inversion_elements((6, 3, 9, 6, 12, 9)) == (-7, -4, -10, -7, -13, -10)": {
      "result": true,
      "time": 0.06127285957336426,
      "error": null
    },
    "assert inversion_elements((12, 3, 8, 5, 14, 11)) == (-13, -4, -9, -6, -15, -12)": {
      "result": true,
      "time": 0.0688621997833252,
      "error": null
    },
    "assert inversion_elements((6, 3, 13, 4, 9, 11)) == (-7, -4, -14, -5, -10, -12)": {
      "result": true,
      "time": 0.06261777877807617,
      "error": null
    },
    "assert inversion_elements((9, 6, 11, 5, 12, 4)) == (-10, -7, -12, -6, -13, -5)": {
      "result": true,
      "time": 0.04777932167053223,
      "error": null
    },
    "assert inversion_elements((11, 11, 7, 1, 5, 3)) == (-12, -12, -8, -2, -6, -4)": {
      "result": true,
      "time": 0.05224037170410156,
      "error": null
    },
    "assert inversion_elements((9, 4, 10, 5, 14, 8)) == (-10, -5, -11, -6, -15, -9)": {
      "result": true,
      "time": 0.05330228805541992,
      "error": null
    },
    "assert inversion_elements((12, 5, 10, 5, 9, 3)) == (-13, -6, -11, -6, -10, -4)": {
      "result": true,
      "time": 0.055626869201660156,
      "error": null
    },
    "assert inversion_elements((12, 4, 10, 5, 15, 9)) == (-13, -5, -11, -6, -16, -10)": {
      "result": true,
      "time": 0.04696393013000488,
      "error": null
    },
    "assert inversion_elements((9, 5, 14, 6, 5, 2)) == (-10, -6, -15, -7, -6, -3)": {
      "result": true,
      "time": 0.05769848823547363,
      "error": null
    },
    "assert inversion_elements((9, 13, 10, 4, 14, 4)) == (-10, -14, -11, -5, -15, -5)": {
      "result": true,
      "time": 0.04887580871582031,
      "error": null
    },
    "assert inversion_elements((2, 8, 6, 3, 10, 12)) == (-3, -9, -7, -4, -11, -13)": {
      "result": true,
      "time": 0.06533479690551758,
      "error": null
    },
    "assert inversion_elements((6, 4, 13, 4, 11, 9)) == (-7, -5, -14, -5, -12, -10)": {
      "result": true,
      "time": 0.05131411552429199,
      "error": null
    },
    "assert inversion_elements((10, 6, 4, 5, 8, 11)) == (-11, -7, -5, -6, -9, -12)": {
      "result": true,
      "time": 0.04868602752685547,
      "error": null
    },
    "assert inversion_elements((5, 6, 7, 6, 14, 6)) == (-6, -7, -8, -7, -15, -7)": {
      "result": true,
      "time": 0.04833197593688965,
      "error": null
    },
    "assert inversion_elements((12, 10, 10, 2, 14, 5)) == (-13, -11, -11, -3, -15, -6)": {
      "result": true,
      "time": 0.03914022445678711,
      "error": null
    },
    "assert inversion_elements((7, 7, 14, 1, 6, 3)) == (-8, -8, -15, -2, -7, -4)": {
      "result": true,
      "time": 0.06177043914794922,
      "error": null
    },
    "assert inversion_elements((5, 5, 5, 5, 14, 6)) == (-6, -6, -6, -6, -15, -7)": {
      "result": true,
      "time": 0.05289602279663086,
      "error": null
    },
    "assert inversion_elements((4, 4, 5, 4, 6, 6)) == (-5, -5, -6, -5, -7, -7)": {
      "result": true,
      "time": 0.04946541786193848,
      "error": null
    },
    "assert inversion_elements((2, 6, 6, 2, 8, 12)) == (-3, -7, -7, -3, -9, -13)": {
      "result": true,
      "time": 0.05890154838562012,
      "error": null
    },
    "assert inversion_elements((8, 4, 11, 3, 12, 10)) == (-9, -5, -12, -4, -13, -11)": {
      "result": true,
      "time": 0.04999661445617676,
      "error": null
    },
    "assert inversion_elements((3, 12, 8, 1, 9, 5)) == (-4, -13, -9, -2, -10, -6)": {
      "result": true,
      "time": 0.06310796737670898,
      "error": null
    },
    "assert inversion_elements((3, 1, 1, 9, 5, 10)) == (-4, -2, -2, -10, -6, -11)": {
      "result": true,
      "time": 0.05960679054260254,
      "error": null
    },
    "assert inversion_elements((3, 4, 6, 2, 6, 8)) == (-4, -5, -7, -3, -7, -9)": {
      "result": true,
      "time": 0.03994560241699219,
      "error": null
    },
    "assert inversion_elements((2, 1, 10, 10, 5, 9)) == (-3, -2, -11, -11, -6, -10)": {
      "result": true,
      "time": 0.06338787078857422,
      "error": null
    },
    "assert inversion_elements((2, 2, 10, 11, 5, 10)) == (-3, -3, -11, -12, -6, -11)": {
      "result": true,
      "time": 0.04327964782714844,
      "error": null
    },
    "assert inversion_elements((1, 7, 2, 1, 6, 4)) == (-2, -8, -3, -2, -7, -5)": {
      "result": true,
      "time": 0.05656123161315918,
      "error": null
    },
    "assert inversion_elements((1, 3, 2, 1, 6, 10)) == (-2, -4, -3, -2, -7, -11)": {
      "result": true,
      "time": 0.053314208984375,
      "error": null
    },
    "assert inversion_elements((5, 8, 2, 5, 6, 6)) == (-6, -9, -3, -6, -7, -7)": {
      "result": true,
      "time": 0.04276466369628906,
      "error": null
    },
    "assert inversion_elements((4, 8, 3, 8, 6, 4)) == (-5, -9, -4, -9, -7, -5)": {
      "result": true,
      "time": 0.061020851135253906,
      "error": null
    },
    "assert inversion_elements((4, 9, 6, 10, 4, 2)) == (-5, -10, -7, -11, -5, -3)": {
      "result": true,
      "time": 0.06380701065063477,
      "error": null
    },
    "assert inversion_elements((3, 8, 1, 9, 3, 5)) == (-4, -9, -2, -10, -4, -6)": {
      "result": true,
      "time": 0.04541325569152832,
      "error": null
    },
    "assert inversion_elements((5, 1, 4, 7, 4, 4)) == (-6, -2, -5, -8, -5, -5)": {
      "result": true,
      "time": 0.06191587448120117,
      "error": null
    },
    "assert inversion_elements((1, 1, 2, 7, 6, 10)) == (-2, -2, -3, -8, -7, -11)": {
      "result": true,
      "time": 0.05658388137817383,
      "error": null
    },
    "assert inversion_elements((6, 4, 2, 8, 1, 12)) == (-7, -5, -3, -9, -2, -13)": {
      "result": true,
      "time": 0.057047128677368164,
      "error": null
    },
    "assert inversion_elements((1, 7, 8, 8, 4, 12)) == (-2, -8, -9, -9, -5, -13)": {
      "result": true,
      "time": 0.06265449523925781,
      "error": null
    },
    "assert inversion_elements((4, 5, 10, 5, 4, 3)) == (-5, -6, -11, -6, -5, -4)": {
      "result": true,
      "time": 0.046523094177246094,
      "error": null
    },
    "assert inversion_elements((2, 9, 9, 11, 3, 3)) == (-3, -10, -10, -12, -4, -4)": {
      "result": true,
      "time": 0.05158853530883789,
      "error": null
    },
    "assert inversion_elements((3, 1, 7, 7, 1, 3)) == (-4, -2, -8, -8, -2, -4)": {
      "result": true,
      "time": 0.0455775260925293,
      "error": null
    },
    "assert inversion_elements((3, 4, 7, 7, 1, 7)) == (-4, -5, -8, -8, -2, -8)": {
      "result": true,
      "time": 0.04855799674987793,
      "error": null
    },
    "assert inversion_elements((2, 1, 7, 8, 2, 7)) == (-3, -2, -8, -9, -3, -8)": {
      "result": true,
      "time": 0.06365442276000977,
      "error": null
    },
    "assert inversion_elements((6, 9, 3, 7, 2, 8)) == (-7, -10, -4, -8, -3, -9)": {
      "result": true,
      "time": 0.0473024845123291,
      "error": null
    },
    "assert inversion_elements((6, 7, 3, 10, 5, 4)) == (-7, -8, -4, -11, -6, -5)": {
      "result": true,
      "time": 0.051424264907836914,
      "error": null
    },
    "assert inversion_elements((7, 2, 9, 1, 1, 6)) == (-8, -3, -10, -2, -2, -7)": {
      "result": true,
      "time": 0.04416775703430176,
      "error": null
    },
    "assert inversion_elements((2, 9, 2, 5, 5, 3)) == (-3, -10, -3, -6, -6, -4)": {
      "result": true,
      "time": 0.04685640335083008,
      "error": null
    },
    "assert inversion_elements((3, 6, 7, 2, 3, 5)) == (-4, -7, -8, -3, -4, -6)": {
      "result": true,
      "time": 0.04294085502624512,
      "error": null
    },
    "assert inversion_elements((7, 6, 2, 9, 6, 9)) == (-8, -7, -3, -10, -7, -10)": {
      "result": true,
      "time": 0.03504300117492676,
      "error": null
    },
    "assert inversion_elements((3, 4, 5, 11, 6, 4)) == (-4, -5, -6, -12, -7, -5)": {
      "result": true,
      "time": 0.04200410842895508,
      "error": null
    },
    "assert inversion_elements((2, 5, 4, 7, 4, 8)) == (-3, -6, -5, -8, -5, -9)": {
      "result": true,
      "time": 0.03947734832763672,
      "error": null
    },
    "assert inversion_elements((7, 2, 2, 9, 6, 11)) == (-8, -3, -3, -10, -7, -12)": {
      "result": true,
      "time": 0.03590893745422363,
      "error": null
    },
    "assert inversion_elements((2, 2, 8, 1, 2, 3)) == (-3, -3, -9, -2, -3, -4)": {
      "result": true,
      "time": 0.043619394302368164,
      "error": null
    },
    "assert inversion_elements((6, 4, 6, 7, 6, 12)) == (-7, -5, -7, -8, -7, -13)": {
      "result": true,
      "time": 0.04611539840698242,
      "error": null
    },
    "assert inversion_elements((7, 6, 10, 11, 5, 2)) == (-8, -7, -11, -12, -6, -3)": {
      "result": true,
      "time": 0.048830270767211914,
      "error": null
    },
    "assert inversion_elements((7, 2, 3, 4, 6, 4)) == (-8, -3, -4, -5, -7, -5)": {
      "result": true,
      "time": 0.03815293312072754,
      "error": null
    },
    "assert inversion_elements((3, 8, 8, 3, 4, 10)) == (-4, -9, -9, -4, -5, -11)": {
      "result": true,
      "time": 0.041501522064208984,
      "error": null
    },
    "assert inversion_elements((7, 4, 9, 17, 13, 10)) == (-8, -5, -10, -18, -14, -11)": {
      "result": true,
      "time": 0.040924787521362305,
      "error": null
    },
    "assert inversion_elements((8, 7, 15, 19, 17, 12)) == (-9, -8, -16, -20, -18, -13)": {
      "result": true,
      "time": 0.04036664962768555,
      "error": null
    },
    "assert inversion_elements((10, 9, 10, 14, 16, 14)) == (-11, -10, -11, -15, -17, -15)": {
      "result": true,
      "time": 0.03675723075866699,
      "error": null
    },
    "assert inversion_elements((3, 5, 8, 14, 17, 9)) == (-4, -6, -9, -15, -18, -10)": {
      "result": true,
      "time": 0.04350781440734863,
      "error": null
    },
    "assert inversion_elements((6, 10, 8, 16, 13, 10)) == (-7, -11, -9, -17, -14, -11)": {
      "result": true,
      "time": 0.04634380340576172,
      "error": null
    },
    "assert inversion_elements((13, 5, 11, 11, 9, 11)) == (-14, -6, -12, -12, -10, -12)": {
      "result": true,
      "time": 0.05228710174560547,
      "error": null
    },
    "assert inversion_elements((10, 6, 15, 16, 15, 11)) == (-11, -7, -16, -17, -16, -12)": {
      "result": true,
      "time": 0.03988003730773926,
      "error": null
    },
    "assert inversion_elements((3, 13, 8, 12, 13, 18)) == (-4, -14, -9, -13, -14, -19)": {
      "result": true,
      "time": 0.0336153507232666,
      "error": null
    },
    "assert inversion_elements((5, 8, 15, 13, 8, 11)) == (-6, -9, -16, -14, -9, -12)": {
      "result": true,
      "time": 0.04172873497009277,
      "error": null
    },
    "assert inversion_elements((11, 4, 15, 18, 10, 12)) == (-12, -5, -16, -19, -11, -13)": {
      "result": true,
      "time": 0.03684234619140625,
      "error": null
    },
    "assert inversion_elements((9, 13, 9, 17, 11, 14)) == (-10, -14, -10, -18, -12, -15)": {
      "result": true,
      "time": 0.0421442985534668,
      "error": null
    },
    "assert inversion_elements((7, 4, 11, 18, 12, 16)) == (-8, -5, -12, -19, -13, -17)": {
      "result": true,
      "time": 0.041562557220458984,
      "error": null
    },
    "assert inversion_elements((4, 8, 6, 12, 13, 10)) == (-5, -9, -7, -13, -14, -11)": {
      "result": true,
      "time": 0.05304121971130371,
      "error": null
    },
    "assert inversion_elements((12, 4, 15, 14, 12, 8)) == (-13, -5, -16, -15, -13, -9)": {
      "result": true,
      "time": 0.03927493095397949,
      "error": null
    },
    "assert inversion_elements((7, 7, 11, 12, 15, 8)) == (-8, -8, -12, -13, -16, -9)": {
      "result": true,
      "time": 0.04329729080200195,
      "error": null
    },
    "assert inversion_elements((6, 13, 14, 13, 16, 18)) == (-7, -14, -15, -14, -17, -19)": {
      "result": true,
      "time": 0.04598426818847656,
      "error": null
    },
    "assert inversion_elements((11, 14, 11, 11, 10, 10)) == (-12, -15, -12, -12, -11, -11)": {
      "result": true,
      "time": 0.04689931869506836,
      "error": null
    },
    "assert inversion_elements((10, 7, 16, 11, 10, 13)) == (-11, -8, -17, -12, -11, -14)": {
      "result": true,
      "time": 0.043103933334350586,
      "error": null
    },
    "assert inversion_elements((13, 5, 15, 12, 11, 8)) == (-14, -6, -16, -13, -12, -9)": {
      "result": true,
      "time": 0.04034996032714844,
      "error": null
    },
    "assert inversion_elements((12, 7, 6, 19, 8, 9)) == (-13, -8, -7, -20, -9, -10)": {
      "result": true,
      "time": 0.041820526123046875,
      "error": null
    },
    "assert inversion_elements((13, 6, 13, 16, 7, 14)) == (-14, -7, -14, -17, -8, -15)": {
      "result": true,
      "time": 0.04243826866149902,
      "error": null
    },
    "assert inversion_elements((6, 9, 14, 16, 13, 8)) == (-7, -10, -15, -17, -14, -9)": {
      "result": true,
      "time": 0.04288125038146973,
      "error": null
    },
    "assert inversion_elements((8, 8, 11, 9, 8, 12)) == (-9, -9, -12, -10, -9, -13)": {
      "result": true,
      "time": 0.03987455368041992,
      "error": null
    },
    "assert inversion_elements((9, 14, 15, 11, 11, 13)) == (-10, -15, -16, -12, -12, -14)": {
      "result": true,
      "time": 0.042070865631103516,
      "error": null
    },
    "assert inversion_elements((3, 7, 16, 13, 13, 18)) == (-4, -8, -17, -14, -14, -19)": {
      "result": true,
      "time": 0.052860260009765625,
      "error": null
    },
    "assert inversion_elements((4, 9, 11, 16, 17, 9)) == (-5, -10, -12, -17, -18, -10)": {
      "result": true,
      "time": 0.04421401023864746,
      "error": null
    },
    "assert inversion_elements((3, 7, 9, 12, 15, 13)) == (-4, -8, -10, -13, -16, -14)": {
      "result": true,
      "time": 0.040840864181518555,
      "error": null
    },
    "assert inversion_elements((13, 7, 13, 17, 13, 9)) == (-14, -8, -14, -18, -14, -10)": {
      "result": true,
      "time": 0.03911089897155762,
      "error": null
    },
    "assert inversion_elements((9, 7, 12, 13, 12, 12)) == (-10, -8, -13, -14, -13, -13)": {
      "result": true,
      "time": 0.038320302963256836,
      "error": null
    },
    "assert inversion_elements((9, 13, 6, 17, 16, 13)) == (-10, -14, -7, -18, -17, -14)": {
      "result": true,
      "time": 0.04701972007751465,
      "error": null
    },
    "assert inversion_elements((8, 9, 10, 17, 11, 13)) == (-9, -10, -11, -18, -12, -14)": {
      "result": true,
      "time": 0.051629066467285156,
      "error": null
    },
    "assert inversion_elements((11, 8, 14, 17, 13, 13)) == (-12, -9, -15, -18, -14, -14)": {
      "result": true,
      "time": 0.045929908752441406,
      "error": null
    },
    "assert inversion_elements((13, 14, 9, 17, 12, 13)) == (-14, -15, -10, -18, -13, -14)": {
      "result": true,
      "time": 0.039151668548583984,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}