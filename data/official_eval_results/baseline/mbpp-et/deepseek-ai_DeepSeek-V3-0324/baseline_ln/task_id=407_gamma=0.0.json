{
  "code": "from itertools import permutations\n\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    perms = set(permutations(digits))  # Generate all unique permutations\n    numbers = []\n    for perm in perms:\n        num = int(''.join(perm))\n        if num > n:\n            numbers.append(num)\n    if not numbers:\n        return False\n    return min(numbers)  # The smallest number larger than n",
  "results": {
    "assert rearrange_bigger(12)==21": {
      "result": true,
      "time": 0.05349588394165039,
      "error": null
    },
    "assert rearrange_bigger(10)==False": {
      "result": true,
      "time": 0.05790138244628906,
      "error": null
    },
    "assert rearrange_bigger(102)==120": {
      "result": true,
      "time": 0.06438612937927246,
      "error": null
    },
    "assert rearrange_bigger(14) == 41": {
      "result": true,
      "time": 0.04776883125305176,
      "error": null
    },
    "assert rearrange_bigger(9) == False": {
      "result": true,
      "time": 0.06062626838684082,
      "error": null
    },
    "assert rearrange_bigger(8) == False": {
      "result": true,
      "time": 0.06369471549987793,
      "error": null
    },
    "assert rearrange_bigger(11) == False": {
      "result": true,
      "time": 0.05579519271850586,
      "error": null
    },
    "assert rearrange_bigger(15) == 51": {
      "result": true,
      "time": 0.059372901916503906,
      "error": null
    },
    "assert rearrange_bigger(12) == 21": {
      "result": true,
      "time": 0.07992005348205566,
      "error": null
    },
    "assert rearrange_bigger(13) == 31": {
      "result": true,
      "time": 0.06207919120788574,
      "error": null
    },
    "assert rearrange_bigger(16) == 61": {
      "result": true,
      "time": 0.06644010543823242,
      "error": null
    },
    "assert rearrange_bigger(17) == 71": {
      "result": true,
      "time": 0.07180166244506836,
      "error": null
    },
    "assert rearrange_bigger(7) == False": {
      "result": true,
      "time": 0.0628824234008789,
      "error": null
    },
    "assert rearrange_bigger(10) == False": {
      "result": true,
      "time": 0.05249643325805664,
      "error": null
    },
    "assert rearrange_bigger(6) == False": {
      "result": true,
      "time": 0.043608665466308594,
      "error": null
    },
    "assert rearrange_bigger(5) == False": {
      "result": true,
      "time": 0.0638742446899414,
      "error": null
    },
    "assert rearrange_bigger(106) == 160": {
      "result": true,
      "time": 0.05583667755126953,
      "error": null
    },
    "assert rearrange_bigger(104) == 140": {
      "result": true,
      "time": 0.06374788284301758,
      "error": null
    },
    "assert rearrange_bigger(107) == 170": {
      "result": true,
      "time": 0.06309270858764648,
      "error": null
    },
    "assert rearrange_bigger(99) == False": {
      "result": true,
      "time": 0.05752849578857422,
      "error": null
    },
    "assert rearrange_bigger(103) == 130": {
      "result": true,
      "time": 0.06344890594482422,
      "error": null
    },
    "assert rearrange_bigger(102) == 120": {
      "result": true,
      "time": 0.04786205291748047,
      "error": null
    },
    "assert rearrange_bigger(98) == False": {
      "result": true,
      "time": 0.043738365173339844,
      "error": null
    },
    "assert rearrange_bigger(100) == False": {
      "result": true,
      "time": 0.05032157897949219,
      "error": null
    },
    "assert rearrange_bigger(105) == 150": {
      "result": true,
      "time": 0.0419621467590332,
      "error": null
    },
    "assert rearrange_bigger(101) == 110": {
      "result": true,
      "time": 0.047583580017089844,
      "error": null
    },
    "assert rearrange_bigger(97) == False": {
      "result": true,
      "time": 0.04668927192687988,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}