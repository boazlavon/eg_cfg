{
  "code": "def div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even / first_odd",
  "results": {
    "assert div_even_odd([1,3,5,7,4,1,6,8])==4": {
      "result": true,
      "time": 0.041808366775512695,
      "error": null
    },
    "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2": {
      "result": true,
      "time": 0.04349064826965332,
      "error": null
    },
    "assert div_even_odd([1,5,7,9,10])==10": {
      "result": true,
      "time": 0.03796982765197754,
      "error": null
    },
    "assert div_even_odd([6, 1, 3, 4, 9, 2, 5, 3]) == 6.0": {
      "result": true,
      "time": 0.05140423774719238,
      "error": null
    },
    "assert div_even_odd([4, 8, 1, 12, 8, 6, 7, 5]) == 4.0": {
      "result": true,
      "time": 0.03785872459411621,
      "error": null
    },
    "assert div_even_odd([3, 6, 4, 4, 3, 5, 11, 5]) == 2.0": {
      "result": true,
      "time": 0.052793025970458984,
      "error": null
    },
    "assert div_even_odd([5, 3, 2, 10, 3, 5, 4, 7]) == 0.4": {
      "result": true,
      "time": 0.04075312614440918,
      "error": null
    },
    "assert div_even_odd([5, 8, 8, 3, 8, 1, 7, 12]) == 1.6": {
      "result": true,
      "time": 0.04352235794067383,
      "error": null
    },
    "assert div_even_odd([6, 2, 3, 10, 4, 2, 8, 10]) == 2.0": {
      "result": true,
      "time": 0.04588723182678223,
      "error": null
    },
    "assert div_even_odd([4, 1, 9, 12, 9, 2, 4, 7]) == 4.0": {
      "result": true,
      "time": 0.03933548927307129,
      "error": null
    },
    "assert div_even_odd([3, 8, 10, 7, 5, 4, 8, 7]) == 2.6666666666666665": {
      "result": true,
      "time": 0.043991804122924805,
      "error": null
    },
    "assert div_even_odd([4, 2, 5, 9, 7, 2, 11, 10]) == 0.8": {
      "result": true,
      "time": 0.038785696029663086,
      "error": null
    },
    "assert div_even_odd([5, 8, 3, 12, 3, 4, 3, 7]) == 1.6": {
      "result": true,
      "time": 0.04448199272155762,
      "error": null
    },
    "assert div_even_odd([1, 8, 9, 8, 9, 2, 7, 12]) == 8.0": {
      "result": true,
      "time": 0.043231964111328125,
      "error": null
    },
    "assert div_even_odd([2, 2, 1, 8, 6, 5, 4, 6]) == 2.0": {
      "result": true,
      "time": 0.053034305572509766,
      "error": null
    },
    "assert div_even_odd([6, 1, 5, 9, 1, 4, 4, 6]) == 6.0": {
      "result": true,
      "time": 0.050173044204711914,
      "error": null
    },
    "assert div_even_odd([6, 1, 7, 5, 9, 4, 7, 11]) == 6.0": {
      "result": true,
      "time": 0.03223228454589844,
      "error": null
    },
    "assert div_even_odd([2, 8, 9, 9, 3, 2, 9, 6]) == 0.2222222222222222": {
      "result": true,
      "time": 0.04390454292297363,
      "error": null
    },
    "assert div_even_odd([2, 5, 6, 6, 8, 1, 7, 6]) == 0.4": {
      "result": true,
      "time": 0.045378923416137695,
      "error": null
    },
    "assert div_even_odd([5, 1, 10, 6, 3, 2, 10, 11]) == 2.0": {
      "result": true,
      "time": 0.047548770904541016,
      "error": null
    },
    "assert div_even_odd([4, 6, 9, 11, 6, 4, 3, 12]) == 0.4444444444444444": {
      "result": true,
      "time": 0.04088783264160156,
      "error": null
    },
    "assert div_even_odd([4, 4, 2, 11, 4, 3, 5, 8]) == 0.36363636363636365": {
      "result": true,
      "time": 0.04062223434448242,
      "error": null
    },
    "assert div_even_odd([6, 5, 6, 9, 9, 3, 9, 6]) == 1.2": {
      "result": true,
      "time": 0.04330015182495117,
      "error": null
    },
    "assert div_even_odd([4, 4, 5, 2, 5, 1, 3, 8]) == 0.8": {
      "result": true,
      "time": 0.0448460578918457,
      "error": null
    },
    "assert div_even_odd([1, 7, 6, 5, 8, 1, 5, 8]) == 6.0": {
      "result": true,
      "time": 0.04552197456359863,
      "error": null
    },
    "assert div_even_odd([5, 8, 8, 5, 9, 6, 11, 9]) == 1.6": {
      "result": true,
      "time": 0.046907663345336914,
      "error": null
    },
    "assert div_even_odd([2, 3, 8, 12, 3, 4, 11, 8]) == 0.6666666666666666": {
      "result": true,
      "time": 0.051442861557006836,
      "error": null
    },
    "assert div_even_odd([4, 7, 7, 7, 9, 2, 3, 5]) == 0.5714285714285714": {
      "result": true,
      "time": 0.0403439998626709,
      "error": null
    },
    "assert div_even_odd([4, 2, 5, 5, 6, 5, 3, 4]) == 0.8": {
      "result": true,
      "time": 0.054721832275390625,
      "error": null
    },
    "assert div_even_odd([1, 8, 10, 3, 4, 1, 1, 11]) == 8.0": {
      "result": true,
      "time": 0.0464329719543457,
      "error": null
    },
    "assert div_even_odd([3, 7, 5, 4, 3, 6, 11, 12]) == 1.3333333333333333": {
      "result": true,
      "time": 0.05373406410217285,
      "error": null
    },
    "assert div_even_odd([2, 2, 9, 12, 3, 3, 11, 13]) == 0.2222222222222222": {
      "result": true,
      "time": 0.05254197120666504,
      "error": null
    },
    "assert div_even_odd([1, 2, 4, 7, 5, 3, 11, 11]) == 2.0": {
      "result": true,
      "time": 0.040842533111572266,
      "error": null
    },
    "assert div_even_odd([5, 4, 6, 12, 6, 5, 1, 3]) == 0.8": {
      "result": true,
      "time": 0.05299878120422363,
      "error": null
    },
    "assert div_even_odd([6, 1, 7, 12, 7, 4, 8, 12]) == 6.0": {
      "result": true,
      "time": 0.037934303283691406,
      "error": null
    },
    "assert div_even_odd([4, 6, 2, 2, 3, 1, 10, 9]) == 1.3333333333333333": {
      "result": true,
      "time": 0.04721522331237793,
      "error": null
    },
    "assert div_even_odd([2, 6, 6, 7, 1, 4, 10, 11, 7, 8]) == 0.2857142857142857": {
      "result": true,
      "time": 0.054547786712646484,
      "error": null
    },
    "assert div_even_odd([2, 5, 1, 2, 4, 1, 9, 10, 12, 8]) == 0.4": {
      "result": true,
      "time": 0.046625614166259766,
      "error": null
    },
    "assert div_even_odd([3, 5, 1, 5, 9, 6, 4, 12, 12, 14]) == 2.0": {
      "result": true,
      "time": 0.0432589054107666,
      "error": null
    },
    "assert div_even_odd([2, 3, 2, 1, 8, 3, 12, 11, 5, 6]) == 0.6666666666666666": {
      "result": true,
      "time": 0.052825927734375,
      "error": null
    },
    "assert div_even_odd([6, 2, 3, 8, 5, 11, 8, 3, 6, 15]) == 2.0": {
      "result": true,
      "time": 0.04694032669067383,
      "error": null
    },
    "assert div_even_odd([5, 3, 7, 4, 3, 7, 6, 13, 13, 8]) == 0.8": {
      "result": true,
      "time": 0.05316781997680664,
      "error": null
    },
    "assert div_even_odd([1, 1, 6, 4, 8, 3, 6, 11, 10, 7]) == 6.0": {
      "result": true,
      "time": 0.04465079307556152,
      "error": null
    },
    "assert div_even_odd([1, 3, 5, 1, 7, 11, 5, 10, 6, 14]) == 10.0": {
      "result": true,
      "time": 0.041231393814086914,
      "error": null
    },
    "assert div_even_odd([4, 3, 5, 9, 1, 8, 11, 6, 13, 12]) == 1.3333333333333333": {
      "result": true,
      "time": 0.03690600395202637,
      "error": null
    },
    "assert div_even_odd([2, 4, 4, 3, 3, 3, 6, 3, 4, 9]) == 0.6666666666666666": {
      "result": true,
      "time": 0.0427091121673584,
      "error": null
    },
    "assert div_even_odd([6, 4, 1, 2, 3, 11, 5, 13, 5, 8]) == 6.0": {
      "result": true,
      "time": 0.04337906837463379,
      "error": null
    },
    "assert div_even_odd([3, 4, 2, 6, 8, 2, 11, 11, 5, 12]) == 1.3333333333333333": {
      "result": true,
      "time": 0.05682826042175293,
      "error": null
    },
    "assert div_even_odd([3, 6, 2, 1, 7, 8, 11, 13, 10, 7]) == 2.0": {
      "result": true,
      "time": 0.04600191116333008,
      "error": null
    },
    "assert div_even_odd([2, 7, 5, 6, 6, 5, 2, 11, 13, 9]) == 0.2857142857142857": {
      "result": true,
      "time": 0.05600404739379883,
      "error": null
    },
    "assert div_even_odd([3, 6, 1, 2, 9, 11, 4, 11, 12, 10]) == 2.0": {
      "result": true,
      "time": 0.05956268310546875,
      "error": null
    },
    "assert div_even_odd([3, 6, 4, 5, 7, 3, 7, 12, 14, 8]) == 2.0": {
      "result": true,
      "time": 0.05229020118713379,
      "error": null
    },
    "assert div_even_odd([4, 2, 5, 1, 3, 3, 7, 13, 5, 10]) == 0.8": {
      "result": true,
      "time": 0.05875897407531738,
      "error": null
    },
    "assert div_even_odd([6, 5, 5, 6, 6, 4, 2, 5, 4, 12]) == 1.2": {
      "result": true,
      "time": 0.04605841636657715,
      "error": null
    },
    "assert div_even_odd([2, 5, 8, 6, 4, 4, 8, 3, 8, 15]) == 0.4": {
      "result": true,
      "time": 0.05075955390930176,
      "error": null
    },
    "assert div_even_odd([6, 4, 3, 1, 6, 3, 9, 10, 14, 5]) == 2.0": {
      "result": true,
      "time": 0.03506588935852051,
      "error": null
    },
    "assert div_even_odd([2, 3, 4, 4, 4, 11, 4, 12, 7, 13]) == 0.6666666666666666": {
      "result": true,
      "time": 0.03459286689758301,
      "error": null
    },
    "assert div_even_odd([2, 1, 6, 5, 6, 9, 10, 7, 10, 8]) == 2.0": {
      "result": true,
      "time": 0.04185676574707031,
      "error": null
    },
    "assert div_even_odd([6, 4, 3, 6, 8, 6, 2, 13, 12, 6]) == 2.0": {
      "result": true,
      "time": 0.04149484634399414,
      "error": null
    },
    "assert div_even_odd([1, 5, 2, 8, 10, 2, 3, 4, 4, 7]) == 2.0": {
      "result": true,
      "time": 0.04423689842224121,
      "error": null
    },
    "assert div_even_odd([5, 3, 6, 6, 2, 10, 10, 11, 13, 5]) == 1.2": {
      "result": true,
      "time": 0.05687737464904785,
      "error": null
    },
    "assert div_even_odd([1, 1, 3, 5, 8, 8, 8, 9, 11, 15]) == 8.0": {
      "result": true,
      "time": 0.06269979476928711,
      "error": null
    },
    "assert div_even_odd([4, 1, 7, 6, 9, 11, 2, 6, 10, 13]) == 4.0": {
      "result": true,
      "time": 0.04873847961425781,
      "error": null
    },
    "assert div_even_odd([4, 6, 4, 7, 4, 9, 9, 4, 4, 13]) == 0.5714285714285714": {
      "result": true,
      "time": 0.052137136459350586,
      "error": null
    },
    "assert div_even_odd([4, 2, 2, 7, 5, 11, 4, 5, 12, 12]) == 0.5714285714285714": {
      "result": true,
      "time": 0.047563791275024414,
      "error": null
    },
    "assert div_even_odd([5, 3, 7, 8, 4, 9, 8, 3, 13, 5]) == 1.6": {
      "result": true,
      "time": 0.0574488639831543,
      "error": null
    },
    "assert div_even_odd([5, 5, 4, 5, 3, 1, 12, 7, 11, 9]) == 0.8": {
      "result": true,
      "time": 0.05339336395263672,
      "error": null
    },
    "assert div_even_odd([4, 3, 1, 2, 9, 11, 9, 3, 4, 11]) == 1.3333333333333333": {
      "result": true,
      "time": 0.06707429885864258,
      "error": null
    },
    "assert div_even_odd([3, 3, 7, 9, 5, 11, 6, 9, 4, 8]) == 2.0": {
      "result": true,
      "time": 0.055701255798339844,
      "error": null
    },
    "assert div_even_odd([5, 8, 12, 4, 12]) == 1.6": {
      "result": true,
      "time": 0.06249880790710449,
      "error": null
    },
    "assert div_even_odd([2, 9, 8, 6, 14]) == 0.2222222222222222": {
      "result": true,
      "time": 0.0570986270904541,
      "error": null
    },
    "assert div_even_odd([2, 8, 3, 8, 8]) == 0.6666666666666666": {
      "result": true,
      "time": 0.06057024002075195,
      "error": null
    },
    "assert div_even_odd([5, 3, 4, 10, 15]) == 0.8": {
      "result": true,
      "time": 0.04833364486694336,
      "error": null
    },
    "assert div_even_odd([4, 4, 9, 7, 13]) == 0.4444444444444444": {
      "result": true,
      "time": 0.059413909912109375,
      "error": null
    },
    "assert div_even_odd([4, 9, 11, 9, 10]) == 0.4444444444444444": {
      "result": true,
      "time": 0.04865288734436035,
      "error": null
    },
    "assert div_even_odd([6, 7, 7, 7, 8]) == 0.8571428571428571": {
      "result": true,
      "time": 0.054605722427368164,
      "error": null
    },
    "assert div_even_odd([1, 10, 10, 5, 5]) == 10.0": {
      "result": true,
      "time": 0.05289959907531738,
      "error": null
    },
    "assert div_even_odd([6, 1, 6, 13, 14]) == 6.0": {
      "result": true,
      "time": 0.061739206314086914,
      "error": null
    },
    "assert div_even_odd([4, 2, 11, 12, 5]) == 0.36363636363636365": {
      "result": true,
      "time": 0.05423378944396973,
      "error": null
    },
    "assert div_even_odd([3, 7, 5, 4, 5]) == 1.3333333333333333": {
      "result": true,
      "time": 0.052486419677734375,
      "error": null
    },
    "assert div_even_odd([1, 9, 5, 11, 7]) == -1.0": {
      "result": false,
      "time": 0.05607748031616211,
      "error": null
    },
    "assert div_even_odd([5, 8, 10, 8, 6]) == 1.6": {
      "result": true,
      "time": 0.056159257888793945,
      "error": null
    },
    "assert div_even_odd([1, 6, 4, 11, 5]) == 6.0": {
      "result": true,
      "time": 0.06369304656982422,
      "error": null
    },
    "assert div_even_odd([6, 2, 10, 8, 10]) == -6.0": {
      "result": false,
      "time": 0.04786038398742676,
      "error": null
    },
    "assert div_even_odd([1, 7, 10, 7, 11]) == 10.0": {
      "result": true,
      "time": 0.06289052963256836,
      "error": null
    },
    "assert div_even_odd([4, 9, 7, 12, 13]) == 0.4444444444444444": {
      "result": true,
      "time": 0.07011842727661133,
      "error": null
    },
    "assert div_even_odd([6, 4, 4, 11, 15]) == 0.5454545454545454": {
      "result": true,
      "time": 0.06782364845275879,
      "error": null
    },
    "assert div_even_odd([5, 6, 2, 10, 11]) == 1.2": {
      "result": true,
      "time": 0.05781054496765137,
      "error": null
    },
    "assert div_even_odd([3, 5, 9, 4, 10]) == 1.3333333333333333": {
      "result": true,
      "time": 0.06142258644104004,
      "error": null
    },
    "assert div_even_odd([1, 6, 11, 6, 6]) == 6.0": {
      "result": true,
      "time": 0.05694103240966797,
      "error": null
    },
    "assert div_even_odd([6, 7, 11, 5, 12]) == 0.8571428571428571": {
      "result": true,
      "time": 0.05567026138305664,
      "error": null
    },
    "assert div_even_odd([3, 4, 2, 4, 8]) == 1.3333333333333333": {
      "result": true,
      "time": 0.04596877098083496,
      "error": null
    },
    "assert div_even_odd([2, 8, 2, 7, 7]) == 0.2857142857142857": {
      "result": true,
      "time": 0.06427741050720215,
      "error": null
    },
    "assert div_even_odd([6, 1, 6, 5, 9]) == 6.0": {
      "result": true,
      "time": 0.06106376647949219,
      "error": null
    },
    "assert div_even_odd([4, 8, 7, 4, 5]) == 0.5714285714285714": {
      "result": true,
      "time": 0.05890154838562012,
      "error": null
    },
    "assert div_even_odd([5, 9, 6, 6, 7]) == 1.2": {
      "result": true,
      "time": 0.05928349494934082,
      "error": null
    },
    "assert div_even_odd([2, 8, 6, 11, 15]) == 0.18181818181818182": {
      "result": true,
      "time": 0.049128055572509766,
      "error": null
    },
    "assert div_even_odd([3, 8, 6, 8, 13]) == 2.6666666666666665": {
      "result": true,
      "time": 0.05492281913757324,
      "error": null
    },
    "assert div_even_odd([2, 1, 7, 7, 6]) == 2.0": {
      "result": true,
      "time": 0.04967904090881348,
      "error": null
    },
    "assert div_even_odd([4, 5, 5, 11, 7]) == 0.8": {
      "result": true,
      "time": 0.056284189224243164,
      "error": null
    },
    "assert div_even_odd([5, 6, 6, 7, 10]) == 1.2": {
      "result": true,
      "time": 0.0522308349609375,
      "error": null
    },
    "assert div_even_odd([5, 2, 10, 9, 14]) == 0.4": {
      "result": true,
      "time": 0.051576852798461914,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9803921568627451,
  "general_error": "",
  "has_testcase_error": false
}