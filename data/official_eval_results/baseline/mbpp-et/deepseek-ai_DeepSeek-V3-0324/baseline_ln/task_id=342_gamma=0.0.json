{
  "code": "import heapq\n\ndef find_minimum_range(arrays):\n    min_heap = []\n    current_max = -float('inf')\n    range_start = -float('inf')\n    range_end = float('inf')\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if arrays[i]:\n            first_element = arrays[i][0]\n            heapq.heappush(min_heap, (first_element, i, 0))\n            current_max = max(current_max, first_element)\n    \n    while True:\n        if not min_heap:\n            break\n        # Get the smallest element from the heap\n        current_min, arr_idx, elem_idx = heapq.heappop(min_heap)\n        \n        # Check if the current range is smaller than the previous smallest range\n        if current_max - current_min < range_end - range_start:\n            range_start = current_min\n            range_end = current_max\n        \n        # Move to the next element in the array from which the smallest element was taken\n        next_elem_idx = elem_idx + 1\n        if next_elem_idx < len(arrays[arr_idx]):\n            next_element = arrays[arr_idx][next_elem_idx]\n            heapq.heappush(min_heap, (next_element, arr_idx, next_elem_idx))\n            current_max = max(current_max, next_element)\n        else:\n            #",
  "results": {
    "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)": {
      "result": false,
      "time": 0.058690547943115234,
      "error": null
    },
    "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)": {
      "result": false,
      "time": 0.05163764953613281,
      "error": null
    },
    "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)": {
      "result": false,
      "time": 0.05431056022644043,
      "error": null
    },
    "assert find_minimum_range([[4, 6, 13, 12, 12], [3, 2, 17], [9, 13, 19, 18], [5, 1]]) == (3, 9)": {
      "result": false,
      "time": 0.055231332778930664,
      "error": null
    },
    "assert find_minimum_range([[3, 1, 4, 6, 19], [3, 5, 16], [7, 9, 10, 13], [2, 4]]) == (4, 7)": {
      "result": false,
      "time": 0.06280016899108887,
      "error": null
    },
    "assert find_minimum_range([[6, 2, 5, 9, 16], [2, 8, 16], [9, 11, 16, 11], [1, 8]]) == (8, 9)": {
      "result": false,
      "time": 0.055208683013916016,
      "error": null
    },
    "assert find_minimum_range([[4, 2, 11, 9, 12], [5, 6, 12], [5, 8, 18, 11], [7, 11]]) == (4, 7)": {
      "result": false,
      "time": 0.049689531326293945,
      "error": null
    },
    "assert find_minimum_range([[7, 10, 4, 13, 20], [5, 1, 9], [2, 3, 16, 17], [1, 10]]) == (1, 7)": {
      "result": false,
      "time": 0.05576348304748535,
      "error": null
    },
    "assert find_minimum_range([[4, 7, 4, 5, 14], [6, 6, 12], [1, 3, 14, 12], [4, 2]]) == (3, 6)": {
      "result": false,
      "time": 0.060344696044921875,
      "error": null
    },
    "assert find_minimum_range([[8, 2, 7, 13, 16], [4, 7, 9], [4, 3, 11, 17], [5, 1]]) == (4, 8)": {
      "result": false,
      "time": 0.0551450252532959,
      "error": null
    },
    "assert find_minimum_range([[7, 11, 5, 7, 13], [3, 1, 16], [5, 11, 17, 11], [3, 1]]) == (3, 7)": {
      "result": false,
      "time": 0.057373046875,
      "error": null
    },
    "assert find_minimum_range([[1, 4, 12, 11, 18], [6, 9, 8], [2, 8, 14, 17], [7, 1]]) == (4, 8)": {
      "result": false,
      "time": 0.040497541427612305,
      "error": null
    },
    "assert find_minimum_range([[2, 2, 5, 15, 19], [6, 5, 7], [6, 3, 10, 15], [7, 5]]) == (5, 7)": {
      "result": false,
      "time": 0.045537471771240234,
      "error": null
    },
    "assert find_minimum_range([[5, 7, 13, 6, 16], [4, 1, 10], [1, 5, 20, 18], [1, 9]]) == (1, 5)": {
      "result": false,
      "time": 0.040357351303100586,
      "error": null
    },
    "assert find_minimum_range([[6, 5, 3, 12, 17], [4, 8, 12], [2, 12, 16, 21], [2, 1]]) == (2, 6)": {
      "result": false,
      "time": 0.04957103729248047,
      "error": null
    },
    "assert find_minimum_range([[6, 6, 13, 13, 18], [2, 3, 11], [3, 4, 20, 21], [7, 9]]) == (3, 7)": {
      "result": false,
      "time": 0.045615434646606445,
      "error": null
    },
    "assert find_minimum_range([[6, 8, 12, 6, 19], [3, 10, 16], [8, 9, 16, 14], [6, 10]]) == (8, 10)": {
      "result": false,
      "time": 0.04899454116821289,
      "error": null
    },
    "assert find_minimum_range([[3, 11, 9, 7, 16], [5, 1, 13], [5, 3, 16, 15], [2, 9]]) == (2, 5)": {
      "result": false,
      "time": 0.049488067626953125,
      "error": null
    },
    "assert find_minimum_range([[3, 7, 12, 13, 15], [5, 4, 7], [3, 6, 13, 21], [4, 4]]) == (3, 5)": {
      "result": false,
      "time": 0.0543675422668457,
      "error": null
    },
    "assert find_minimum_range([[7, 1, 10, 11, 16], [1, 4, 17], [1, 8, 12, 12], [6, 5]]) == (4, 8)": {
      "result": false,
      "time": 0.0547640323638916,
      "error": null
    },
    "assert find_minimum_range([[5, 3, 4, 6, 20], [2, 8, 8], [8, 13, 10, 19], [4, 2]]) == (4, 8)": {
      "result": false,
      "time": 0.04375600814819336,
      "error": null
    },
    "assert find_minimum_range([[4, 11, 5, 6, 15], [1, 7, 8], [7, 13, 10, 19], [6, 3]]) == (4, 7)": {
      "result": false,
      "time": 0.05120205879211426,
      "error": null
    },
    "assert find_minimum_range([[2, 9, 11, 6, 19], [6, 1, 8], [9, 7, 14, 15], [3, 4]]) == (4, 9)": {
      "result": false,
      "time": 0.046022653579711914,
      "error": null
    },
    "assert find_minimum_range([[8, 7, 13, 10, 10], [6, 9, 13], [3, 12, 17, 20], [2, 1]]) == (2, 8)": {
      "result": false,
      "time": 0.04653477668762207,
      "error": null
    },
    "assert find_minimum_range([[2, 10, 10, 10, 16], [4, 9, 10], [2, 8, 17, 13], [6, 6]]) == (2, 6)": {
      "result": false,
      "time": 0.04441642761230469,
      "error": null
    },
    "assert find_minimum_range([[5, 4, 12, 15, 19], [4, 8, 15], [6, 13, 14, 13], [7, 7]]) == (4, 7)": {
      "result": false,
      "time": 0.04221701622009277,
      "error": null
    },
    "assert find_minimum_range([[1, 8, 5, 10, 18], [3, 3, 17], [4, 4, 13, 21], [4, 2]]) == (1, 4)": {
      "result": false,
      "time": 0.04583263397216797,
      "error": null
    },
    "assert find_minimum_range([[7, 2, 11, 10, 20], [2, 6, 16], [4, 8, 15, 19], [5, 9]]) == (4, 7)": {
      "result": false,
      "time": 0.04757428169250488,
      "error": null
    },
    "assert find_minimum_range([[7, 6, 6, 7, 10], [6, 6, 7], [1, 13, 15, 15], [4, 11]]) == (1, 7)": {
      "result": false,
      "time": 0.04865837097167969,
      "error": null
    },
    "assert find_minimum_range([[2, 10, 11, 13, 11], [2, 9, 12], [5, 13, 12, 12], [3, 7]]) == (2, 5)": {
      "result": false,
      "time": 0.04800295829772949,
      "error": null
    },
    "assert find_minimum_range([[2, 6, 8, 8, 15], [6, 10, 7], [5, 9, 13, 15], [2, 8]]) == (8, 10)": {
      "result": false,
      "time": 0.053487539291381836,
      "error": null
    },
    "assert find_minimum_range([[3, 3, 6, 12, 13], [3, 7, 10], [2, 8, 18, 15], [7, 4]]) == (6, 8)": {
      "result": false,
      "time": 0.05152463912963867,
      "error": null
    },
    "assert find_minimum_range([[5, 2, 10, 12, 13], [5, 5, 16], [4, 3, 19, 20], [2, 2]]) == (2, 5)": {
      "result": false,
      "time": 0.05412912368774414,
      "error": null
    },
    "assert find_minimum_range([[8, 10, 13, 15, 10], [3, 1, 11], [7, 3, 12, 14], [4, 7]]) == (7, 11)": {
      "result": false,
      "time": 0.04622817039489746,
      "error": null
    },
    "assert find_minimum_range([[7, 6, 13, 15, 11], [5, 4, 10], [2, 8, 20, 16], [6, 6]]) == (5, 8)": {
      "result": false,
      "time": 0.0417637825012207,
      "error": null
    },
    "assert find_minimum_range([[4, 4, 9, 9, 20], [5, 8, 11], [6, 7, 17, 17], [6, 2]]) == (4, 6)": {
      "result": false,
      "time": 0.03863215446472168,
      "error": null
    },
    "assert find_minimum_range([[6, 2, 2, 11, 6, 17], [3, 5, 15], [12, 8, 17, 15], [8, 11]]) == (11, 15)": {
      "result": false,
      "time": 0.050548553466796875,
      "error": null
    },
    "assert find_minimum_range([[3, 2, 5, 11, 11, 17], [4, 6, 15], [10, 11, 17, 15], [8, 9]]) == (5, 10)": {
      "result": false,
      "time": 0.05113720893859863,
      "error": null
    },
    "assert find_minimum_range([[2, 5, 5, 11, 5, 14], [6, 10, 17], [12, 12, 19, 21], [6, 8]]) == (8, 12)": {
      "result": false,
      "time": 0.0377957820892334,
      "error": null
    },
    "assert find_minimum_range([[5, 3, 4, 5, 8, 20], [4, 10, 10], [4, 3, 14, 12], [3, 1]]) == (3, 5)": {
      "result": false,
      "time": 0.048834800720214844,
      "error": null
    },
    "assert find_minimum_range([[3, 1, 1, 7, 9, 17], [2, 7, 16], [4, 6, 13, 16], [7, 1]]) == (6, 7)": {
      "result": false,
      "time": 0.04203176498413086,
      "error": null
    },
    "assert find_minimum_range([[3, 7, 8, 7, 7, 15], [5, 2, 16], [3, 5, 11, 16], [7, 2]]) == (5, 7)": {
      "result": false,
      "time": 0.04790186882019043,
      "error": null
    },
    "assert find_minimum_range([[7, 6, 5, 13, 12, 17], [4, 2, 17], [7, 10, 14, 12], [3, 8]]) == (3, 7)": {
      "result": false,
      "time": 0.04407191276550293,
      "error": null
    },
    "assert find_minimum_range([[3, 2, 9, 6, 9, 18], [6, 9, 10], [10, 3, 14, 15], [4, 1]]) == (4, 10)": {
      "result": false,
      "time": 0.04790997505187988,
      "error": null
    },
    "assert find_minimum_range([[5, 4, 5, 11, 11, 10], [4, 4, 10], [6, 3, 11, 11], [5, 3]]) == (4, 6)": {
      "result": false,
      "time": 0.04072904586791992,
      "error": null
    },
    "assert find_minimum_range([[3, 7, 9, 13, 5, 13], [3, 5, 10], [3, 9, 11, 13], [4, 8]]) == (3, 4)": {
      "result": false,
      "time": 0.04577016830444336,
      "error": null
    },
    "assert find_minimum_range([[6, 8, 8, 13, 6, 20], [1, 7, 16], [5, 12, 12, 13], [1, 4]]) == (4, 7)": {
      "result": false,
      "time": 0.04535865783691406,
      "error": null
    },
    "assert find_minimum_range([[5, 1, 1, 9, 14, 13], [1, 6, 7], [10, 11, 20, 11], [7, 5]]) == (7, 10)": {
      "result": false,
      "time": 0.04498291015625,
      "error": null
    },
    "assert find_minimum_range([[2, 6, 6, 11, 8, 10], [4, 4, 13], [5, 3, 14, 20], [4, 1]]) == (4, 6)": {
      "result": false,
      "time": 0.05856752395629883,
      "error": null
    },
    "assert find_minimum_range([[1, 2, 9, 7, 8, 11], [1, 7, 17], [7, 6, 18, 12], [7, 2]]) == (7, 9)": {
      "result": false,
      "time": 0.05170726776123047,
      "error": null
    },
    "assert find_minimum_range([[4, 6, 8, 3, 7, 16], [6, 7, 10], [5, 4, 15, 13], [8, 10]]) == (5, 8)": {
      "result": false,
      "time": 0.05318760871887207,
      "error": null
    },
    "assert find_minimum_range([[5, 8, 1, 8, 5, 12], [6, 8, 8], [12, 3, 12, 14], [7, 2]]) == (7, 12)": {
      "result": false,
      "time": 0.056908369064331055,
      "error": null
    },
    "assert find_minimum_range([[7, 4, 2, 4, 7, 13], [6, 6, 10], [3, 9, 20, 13], [2, 2]]) == (2, 7)": {
      "result": false,
      "time": 0.05077075958251953,
      "error": null
    },
    "assert find_minimum_range([[6, 6, 1, 8, 9, 18], [6, 2, 14], [4, 9, 14, 18], [3, 6]]) == (4, 6)": {
      "result": false,
      "time": 0.055672645568847656,
      "error": null
    },
    "assert find_minimum_range([[4, 7, 4, 8, 5, 15], [6, 7, 13], [9, 9, 16, 21], [7, 3]]) == (7, 9)": {
      "result": false,
      "time": 0.0519256591796875,
      "error": null
    },
    "assert find_minimum_range([[3, 3, 5, 9, 8, 18], [4, 2, 7], [6, 12, 19, 12], [7, 5]]) == (5, 7)": {
      "result": false,
      "time": 0.046997785568237305,
      "error": null
    },
    "assert find_minimum_range([[7, 2, 3, 3, 8, 19], [6, 6, 15], [11, 6, 15, 20], [7, 5]]) == (6, 11)": {
      "result": false,
      "time": 0.061823129653930664,
      "error": null
    },
    "assert find_minimum_range([[2, 6, 8, 6, 12, 17], [3, 9, 17], [8, 9, 16, 12], [5, 7]]) == (7, 9)": {
      "result": false,
      "time": 0.05460691452026367,
      "error": null
    },
    "assert find_minimum_range([[1, 5, 5, 6, 7, 10], [3, 9, 10], [6, 3, 13, 20], [8, 11]]) == (6, 9)": {
      "result": false,
      "time": 0.06638336181640625,
      "error": null
    },
    "assert find_minimum_range([[4, 6, 8, 6, 12, 17], [5, 5, 9], [4, 8, 14, 21], [6, 5]]) == (4, 6)": {
      "result": false,
      "time": 0.06435537338256836,
      "error": null
    },
    "assert find_minimum_range([[2, 5, 7, 5, 8, 18], [1, 9, 14], [7, 6, 18, 20], [5, 8]]) == (7, 9)": {
      "result": false,
      "time": 0.06630587577819824,
      "error": null
    },
    "assert find_minimum_range([[1, 5, 6, 5, 14, 15], [4, 7, 10], [7, 9, 19, 15], [5, 10]]) == (5, 7)": {
      "result": false,
      "time": 0.06789660453796387,
      "error": null
    },
    "assert find_minimum_range([[6, 1, 1, 10, 9, 13], [1, 9, 9], [8, 9, 19, 13], [2, 5]]) == (5, 9)": {
      "result": false,
      "time": 0.051348209381103516,
      "error": null
    },
    "assert find_minimum_range([[6, 5, 9, 12, 10, 10], [2, 5, 13], [7, 7, 15, 11], [7, 5]]) == (5, 7)": {
      "result": false,
      "time": 0.05661177635192871,
      "error": null
    },
    "assert find_minimum_range([[3, 5, 2, 11, 5, 16], [6, 2, 13], [5, 4, 17, 17], [2, 4]]) == (4, 6)": {
      "result": false,
      "time": 0.054613351821899414,
      "error": null
    },
    "assert find_minimum_range([[6, 5, 4, 8, 12, 18], [6, 4, 17], [5, 13, 20, 21], [6, 9]]) == (5, 6)": {
      "result": false,
      "time": 0.04657936096191406,
      "error": null
    },
    "assert find_minimum_range([[3, 7, 8, 9, 5, 19], [1, 5, 10], [3, 7, 11, 12], [2, 11]]) == (1, 3)": {
      "result": false,
      "time": 0.05138421058654785,
      "error": null
    },
    "assert find_minimum_range([[2, 1, 8, 12, 12, 14], [1, 6, 10], [12, 9, 16, 20], [1, 8]]) == (8, 12)": {
      "result": false,
      "time": 0.05007219314575195,
      "error": null
    },
    "assert find_minimum_range([[2, 5, 2, 13, 10, 11], [5, 6, 15], [2, 3, 17, 17], [4, 1]]) == (3, 5)": {
      "result": false,
      "time": 0.042122602462768555,
      "error": null
    },
    "assert find_minimum_range([[2, 7, 7, 7, 17], [1, 5, 13], [9, 13, 18, 17], [7, 4]]) == (5, 9)": {
      "result": false,
      "time": 0.04439377784729004,
      "error": null
    },
    "assert find_minimum_range([[7, 2, 13, 8, 20], [4, 11, 14], [10, 10, 16, 21], [1, 11]]) == (10, 13)": {
      "result": false,
      "time": 0.048691511154174805,
      "error": null
    },
    "assert find_minimum_range([[3, 2, 8, 8, 11], [6, 4, 17], [10, 13, 18, 19], [4, 9]]) == (6, 10)": {
      "result": false,
      "time": 0.04147171974182129,
      "error": null
    },
    "assert find_minimum_range([[5, 2, 7, 10, 15], [6, 9, 12], [2, 13, 11, 18], [3, 8]]) == (2, 6)": {
      "result": false,
      "time": 0.053521156311035156,
      "error": null
    },
    "assert find_minimum_range([[2, 9, 6, 7, 19], [2, 10, 13], [10, 8, 16, 14], [8, 11]]) == (8, 10)": {
      "result": false,
      "time": 0.06366229057312012,
      "error": null
    },
    "assert find_minimum_range([[8, 4, 4, 11, 18], [4, 6, 10], [10, 10, 19, 20], [7, 11]]) == (10, 11)": {
      "result": false,
      "time": 0.04997515678405762,
      "error": null
    },
    "assert find_minimum_range([[7, 4, 7, 15, 18], [7, 8, 17], [3, 6, 21, 19], [8, 9]]) == (6, 8)": {
      "result": false,
      "time": 0.07074236869812012,
      "error": null
    },
    "assert find_minimum_range([[6, 9, 11, 9, 21], [7, 10, 16], [9, 7, 21, 21], [3, 3]]) == (3, 9)": {
      "result": false,
      "time": 0.059786081314086914,
      "error": null
    },
    "assert find_minimum_range([[9, 6, 7, 15, 18], [6, 1, 10], [3, 12, 19, 22], [5, 10]]) == (9, 12)": {
      "result": false,
      "time": 0.048484086990356445,
      "error": null
    },
    "assert find_minimum_range([[9, 3, 5, 14, 13], [3, 6, 8], [1, 4, 18, 15], [1, 12]]) == (1, 9)": {
      "result": false,
      "time": 0.059282541275024414,
      "error": null
    },
    "assert find_minimum_range([[2, 6, 6, 9, 19], [5, 2, 11], [7, 14, 17, 17], [4, 10]]) == (4, 7)": {
      "result": false,
      "time": 0.053345680236816406,
      "error": null
    },
    "assert find_minimum_range([[6, 5, 12, 8, 19], [4, 3, 11], [2, 12, 11, 12], [7, 4]]) == (2, 7)": {
      "result": false,
      "time": 0.053766727447509766,
      "error": null
    },
    "assert find_minimum_range([[9, 4, 10, 9, 11], [4, 3, 12], [10, 4, 17, 12], [5, 2]]) == (4, 10)": {
      "result": false,
      "time": 0.06221580505371094,
      "error": null
    },
    "assert find_minimum_range([[3, 3, 8, 7, 12], [3, 8, 17], [10, 13, 20, 19], [7, 2]]) == (7, 10)": {
      "result": false,
      "time": 0.062174320220947266,
      "error": null
    },
    "assert find_minimum_range([[5, 3, 7, 8, 17], [1, 2, 11], [10, 8, 15, 19], [3, 11]]) == (8, 11)": {
      "result": false,
      "time": 0.0597081184387207,
      "error": null
    },
    "assert find_minimum_range([[3, 11, 13, 16, 17], [2, 2, 15], [2, 6, 15, 15], [8, 2]]) == (2, 8)": {
      "result": false,
      "time": 0.0520014762878418,
      "error": null
    },
    "assert find_minimum_range([[9, 7, 9, 15, 14], [4, 2, 18], [6, 9, 17, 21], [4, 7]]) == (4, 9)": {
      "result": false,
      "time": 0.054718732833862305,
      "error": null
    },
    "assert find_minimum_range([[5, 7, 7, 14, 15], [4, 8, 15], [1, 14, 18, 22], [2, 11]]) == (1, 5)": {
      "result": false,
      "time": 0.04998469352722168,
      "error": null
    },
    "assert find_minimum_range([[3, 6, 13, 8, 19], [5, 11, 17], [1, 13, 15, 13], [5, 9]]) == (1, 5)": {
      "result": false,
      "time": 0.0544126033782959,
      "error": null
    },
    "assert find_minimum_range([[1, 9, 14, 7, 13], [1, 10, 11], [9, 11, 18, 16], [4, 3]]) == (4, 10)": {
      "result": false,
      "time": 0.04852771759033203,
      "error": null
    },
    "assert find_minimum_range([[5, 10, 14, 16, 14], [1, 2, 8], [7, 8, 17, 16], [6, 9]]) == (8, 10)": {
      "result": false,
      "time": 0.05321693420410156,
      "error": null
    },
    "assert find_minimum_range([[5, 11, 7, 12, 17], [6, 5, 8], [7, 10, 17, 15], [6, 7]]) == (5, 7)": {
      "result": false,
      "time": 0.04628157615661621,
      "error": null
    },
    "assert find_minimum_range([[4, 3, 14, 16, 18], [5, 9, 14], [4, 12, 18, 16], [6, 11]]) == (4, 6)": {
      "result": false,
      "time": 0.06077909469604492,
      "error": null
    },
    "assert find_minimum_range([[1, 12, 7, 16, 12], [6, 1, 9], [9, 12, 12, 13], [7, 3]]) == (7, 12)": {
      "result": false,
      "time": 0.05527472496032715,
      "error": null
    },
    "assert find_minimum_range([[1, 9, 7, 14, 15], [3, 1, 15], [5, 11, 15, 19], [4, 3]]) == (1, 5)": {
      "result": false,
      "time": 0.05659842491149902,
      "error": null
    },
    "assert find_minimum_range([[7, 12, 10, 8, 15], [7, 2, 15], [3, 8, 15, 21], [6, 12]]) == (6, 8)": {
      "result": false,
      "time": 0.05405783653259277,
      "error": null
    },
    "assert find_minimum_range([[1, 3, 8, 13, 21], [1, 8, 9], [3, 13, 16, 15], [7, 11]]) == (9, 13)": {
      "result": false,
      "time": 0.05759406089782715,
      "error": null
    },
    "assert find_minimum_range([[2, 11, 5, 7, 14], [1, 11, 13], [4, 14, 15, 19], [8, 7]]) == (8, 14)": {
      "result": false,
      "time": 0.0639505386352539,
      "error": null
    },
    "assert find_minimum_range([[1, 10, 14, 9, 21], [6, 8, 8], [9, 4, 17, 18], [8, 6]]) == (8, 10)": {
      "result": false,
      "time": 0.05597567558288574,
      "error": null
    },
    "assert find_minimum_range([[6, 8, 12, 13, 19], [7, 11, 17], [3, 12, 17, 22], [8, 4]]) == (8, 12)": {
      "result": false,
      "time": 0.05459308624267578,
      "error": null
    },
    "assert find_minimum_range([[3, 8, 5, 7, 13], [5, 3, 9], [8, 14, 19, 14], [2, 2]]) == (2, 8)": {
      "result": false,
      "time": 0.04785585403442383,
      "error": null
    },
    "assert find_minimum_range([[5, 3, 4, 10, 19], [6, 7, 9], [1, 13, 13, 20], [6, 7]]) == (1, 6)": {
      "result": false,
      "time": 0.03937077522277832,
      "error": null
    },
    "assert find_minimum_range([[6, 6, 8, 7, 20], [1, 3, 8], [1, 6, 21, 13], [7, 2]]) == (6, 8)": {
      "result": false,
      "time": 0.049250125885009766,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": "",
  "has_testcase_error": false
}