{
  "code": "def min_length_list(lst):\n    min_len = min(len(x) for x in lst)\n    min_list = next(x for x in lst if len(x) == min_len)\n    return (min_len, min_list)",
  "results": {
    "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])": {
      "result": true,
      "time": 0.036048173904418945,
      "error": null
    },
    "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])": {
      "result": true,
      "time": 0.03794074058532715,
      "error": null
    },
    "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])": {
      "result": true,
      "time": 0.03197312355041504,
      "error": null
    },
    "assert min_length_list([[4], [5, 6], [8, 11], [9, 6], [16, 19, 16]]) == (1, [4])": {
      "result": true,
      "time": 0.03585362434387207,
      "error": null
    },
    "assert min_length_list([[2], [2, 7], [9, 5], [7, 15], [16, 16, 21]]) == (1, [2])": {
      "result": true,
      "time": 0.045172929763793945,
      "error": null
    },
    "assert min_length_list([[3], [4, 8], [3, 6], [9, 7], [12, 11, 22]]) == (1, [3])": {
      "result": true,
      "time": 0.03898739814758301,
      "error": null
    },
    "assert min_length_list([[4], [4, 3], [7, 6], [7, 7], [11, 11, 17]]) == (1, [4])": {
      "result": true,
      "time": 0.03921794891357422,
      "error": null
    },
    "assert min_length_list([[4], [5, 5], [2, 8], [4, 14], [14, 17, 18]]) == (1, [4])": {
      "result": true,
      "time": 0.037500619888305664,
      "error": null
    },
    "assert min_length_list([[3], [1, 3], [2, 2], [13, 13], [16, 15, 13]]) == (1, [3])": {
      "result": true,
      "time": 0.04195690155029297,
      "error": null
    },
    "assert min_length_list([[5], [6, 1], [6, 2], [5, 9], [17, 17, 16]]) == (1, [5])": {
      "result": true,
      "time": 0.03978085517883301,
      "error": null
    },
    "assert min_length_list([[4], [5, 7], [7, 2], [8, 11], [10, 13, 20]]) == (1, [4])": {
      "result": true,
      "time": 0.03643608093261719,
      "error": null
    },
    "assert min_length_list([[4], [4, 3], [10, 5], [14, 12], [15, 18, 18]]) == (1, [4])": {
      "result": true,
      "time": 0.04123187065124512,
      "error": null
    },
    "assert min_length_list([[2], [4, 3], [4, 6], [6, 10], [15, 11, 14]]) == (1, [2])": {
      "result": true,
      "time": 0.040433645248413086,
      "error": null
    },
    "assert min_length_list([[4], [2, 5], [6, 3], [10, 6], [9, 16, 16]]) == (1, [4])": {
      "result": true,
      "time": 0.05060911178588867,
      "error": null
    },
    "assert min_length_list([[1], [1, 8], [4, 2], [6, 8], [16, 17, 18]]) == (1, [1])": {
      "result": true,
      "time": 0.04524564743041992,
      "error": null
    },
    "assert min_length_list([[4], [3, 1], [6, 4], [10, 13], [15, 16, 19]]) == (1, [4])": {
      "result": true,
      "time": 0.03317832946777344,
      "error": null
    },
    "assert min_length_list([[3], [1, 4], [10, 3], [8, 9], [11, 12, 19]]) == (1, [3])": {
      "result": true,
      "time": 0.03895115852355957,
      "error": null
    },
    "assert min_length_list([[4], [3, 7], [6, 10], [6, 8], [13, 17, 21]]) == (1, [4])": {
      "result": true,
      "time": 0.03954339027404785,
      "error": null
    },
    "assert min_length_list([[2], [5, 7], [3, 5], [11, 9], [12, 20, 20]]) == (1, [2])": {
      "result": true,
      "time": 0.03998374938964844,
      "error": null
    },
    "assert min_length_list([[3], [2, 1], [3, 6], [12, 11], [13, 19, 15]]) == (1, [3])": {
      "result": true,
      "time": 0.0412747859954834,
      "error": null
    },
    "assert min_length_list([[1], [2, 8], [6, 8], [13, 13], [15, 15, 19]]) == (1, [1])": {
      "result": true,
      "time": 0.03676748275756836,
      "error": null
    },
    "assert min_length_list([[3], [5, 7], [7, 9], [6, 14], [9, 16, 17]]) == (1, [3])": {
      "result": true,
      "time": 0.042775630950927734,
      "error": null
    },
    "assert min_length_list([[1], [3, 5], [4, 4], [14, 14], [15, 10, 14]]) == (1, [1])": {
      "result": true,
      "time": 0.038384437561035156,
      "error": null
    },
    "assert min_length_list([[5], [5, 6], [4, 4], [6, 10], [16, 19, 14]]) == (1, [5])": {
      "result": true,
      "time": 0.03928709030151367,
      "error": null
    },
    "assert min_length_list([[4], [1, 2], [10, 6], [5, 9], [8, 15, 20]]) == (1, [4])": {
      "result": true,
      "time": 0.029341459274291992,
      "error": null
    },
    "assert min_length_list([[4], [5, 5], [8, 7], [11, 10], [16, 13, 21]]) == (1, [4])": {
      "result": true,
      "time": 0.03599405288696289,
      "error": null
    },
    "assert min_length_list([[3], [1, 2], [5, 11], [4, 8], [8, 15, 15]]) == (1, [3])": {
      "result": true,
      "time": 0.041869163513183594,
      "error": null
    },
    "assert min_length_list([[3], [2, 6], [1, 12], [5, 15], [17, 18, 12]]) == (1, [3])": {
      "result": true,
      "time": 0.03773927688598633,
      "error": null
    },
    "assert min_length_list([[4], [2, 2], [8, 7], [13, 8], [16, 11, 13]]) == (1, [4])": {
      "result": true,
      "time": 0.04285025596618652,
      "error": null
    },
    "assert min_length_list([[5], [1, 2], [4, 2], [14, 6], [13, 14, 20]]) == (1, [5])": {
      "result": true,
      "time": 0.03136396408081055,
      "error": null
    },
    "assert min_length_list([[5], [1, 4], [5, 3], [8, 8], [9, 18, 16]]) == (1, [5])": {
      "result": true,
      "time": 0.037866830825805664,
      "error": null
    },
    "assert min_length_list([[1], [2, 4], [2, 11], [6, 15], [13, 18, 15]]) == (1, [1])": {
      "result": true,
      "time": 0.036248207092285156,
      "error": null
    },
    "assert min_length_list([[2], [1, 5], [10, 2], [8, 9], [13, 14, 13]]) == (1, [2])": {
      "result": true,
      "time": 0.04301905632019043,
      "error": null
    },
    "assert min_length_list([[2], [3, 3], [3, 4], [13, 12], [15, 18, 15]]) == (1, [2])": {
      "result": true,
      "time": 0.04043221473693848,
      "error": null
    },
    "assert min_length_list([[2], [2, 4], [2, 10], [8, 8], [12, 20, 12]]) == (1, [2])": {
      "result": true,
      "time": 0.03613734245300293,
      "error": null
    },
    "assert min_length_list([[4], [3, 6], [4, 2], [13, 11], [10, 16, 19]]) == (1, [4])": {
      "result": true,
      "time": 0.03586149215698242,
      "error": null
    },
    "assert min_length_list([[2, 6, 3, 9, 9], [4, 2, 4, 1], [6, 1, 8], [6, 7], [1]]) == (1, [1])": {
      "result": true,
      "time": 0.039775848388671875,
      "error": null
    },
    "assert min_length_list([[4, 6, 3, 9, 9], [4, 2, 8, 4], [4, 2, 2], [1, 1], [6]]) == (1, [6])": {
      "result": true,
      "time": 0.04163503646850586,
      "error": null
    },
    "assert min_length_list([[1, 1, 8, 6, 3], [2, 1, 2, 8], [5, 7, 5], [4, 1], [1]]) == (1, [1])": {
      "result": true,
      "time": 0.03191685676574707,
      "error": null
    },
    "assert min_length_list([[4, 3, 7, 6, 9], [5, 4, 5, 2], [6, 7, 8], [1, 1], [3]]) == (1, [3])": {
      "result": true,
      "time": 0.03800678253173828,
      "error": null
    },
    "assert min_length_list([[1, 6, 3, 9, 5], [5, 6, 4, 4], [5, 4, 5], [2, 5], [5]]) == (1, [5])": {
      "result": true,
      "time": 0.042016029357910156,
      "error": null
    },
    "assert min_length_list([[2, 1, 2, 3, 8], [2, 6, 7, 1], [6, 6, 1], [3, 5], [2]]) == (1, [2])": {
      "result": true,
      "time": 0.04061269760131836,
      "error": null
    },
    "assert min_length_list([[6, 5, 6, 8, 10], [3, 5, 1, 2], [4, 3, 2], [4, 3], [4]]) == (1, [4])": {
      "result": true,
      "time": 0.034055233001708984,
      "error": null
    },
    "assert min_length_list([[5, 1, 5, 8, 1], [6, 5, 1, 8], [5, 2, 6], [5, 3], [5]]) == (1, [5])": {
      "result": true,
      "time": 0.03837704658508301,
      "error": null
    },
    "assert min_length_list([[4, 6, 7, 1, 7], [4, 2, 6, 6], [6, 7, 7], [3, 6], [5]]) == (1, [5])": {
      "result": true,
      "time": 0.0374608039855957,
      "error": null
    },
    "assert min_length_list([[3, 1, 4, 1, 4], [2, 5, 1, 7], [3, 5, 8], [5, 1], [3]]) == (1, [3])": {
      "result": true,
      "time": 0.040688514709472656,
      "error": null
    },
    "assert min_length_list([[2, 6, 3, 2, 8], [4, 1, 1, 1], [1, 3, 2], [5, 4], [3]]) == (1, [3])": {
      "result": true,
      "time": 0.03341817855834961,
      "error": null
    },
    "assert min_length_list([[5, 7, 4, 4, 5], [4, 6, 3, 6], [4, 1, 3], [3, 1], [2]]) == (1, [2])": {
      "result": true,
      "time": 0.03771829605102539,
      "error": null
    },
    "assert min_length_list([[3, 1, 7, 5, 10], [2, 3, 5, 2], [1, 5, 8], [5, 5], [5]]) == (1, [5])": {
      "result": true,
      "time": 0.03676342964172363,
      "error": null
    },
    "assert min_length_list([[4, 2, 1, 5, 10], [2, 7, 2, 5], [5, 4, 1], [2, 2], [2]]) == (1, [2])": {
      "result": true,
      "time": 0.03377699851989746,
      "error": null
    },
    "assert min_length_list([[5, 3, 5, 9, 8], [2, 5, 8, 2], [2, 3, 6], [6, 3], [1]]) == (1, [1])": {
      "result": true,
      "time": 0.029140710830688477,
      "error": null
    },
    "assert min_length_list([[3, 5, 1, 4, 2], [6, 6, 1, 9], [3, 1, 5], [2, 4], [5]]) == (1, [5])": {
      "result": true,
      "time": 0.036200523376464844,
      "error": null
    },
    "assert min_length_list([[3, 6, 7, 3, 7], [4, 6, 3, 2], [2, 1, 1], [2, 1], [1]]) == (1, [1])": {
      "result": true,
      "time": 0.03483700752258301,
      "error": null
    },
    "assert min_length_list([[1, 6, 4, 8, 9], [3, 3, 7, 5], [2, 6, 5], [3, 5], [2]]) == (1, [2])": {
      "result": true,
      "time": 0.035622596740722656,
      "error": null
    },
    "assert min_length_list([[3, 4, 1, 7, 8], [6, 6, 4, 3], [1, 5, 2], [6, 6], [4]]) == (1, [4])": {
      "result": true,
      "time": 0.03392744064331055,
      "error": null
    },
    "assert min_length_list([[1, 7, 4, 2, 1], [5, 7, 7, 5], [4, 5, 4], [2, 1], [5]]) == (1, [5])": {
      "result": true,
      "time": 0.03619813919067383,
      "error": null
    },
    "assert min_length_list([[3, 2, 6, 3, 1], [1, 5, 6, 9], [6, 1, 3], [3, 6], [4]]) == (1, [4])": {
      "result": true,
      "time": 0.03766965866088867,
      "error": null
    },
    "assert min_length_list([[4, 1, 4, 9, 1], [3, 7, 8, 3], [2, 2, 6], [1, 5], [6]]) == (1, [6])": {
      "result": true,
      "time": 0.03512907028198242,
      "error": null
    },
    "assert min_length_list([[4, 1, 2, 9, 9], [1, 3, 1, 7], [3, 4, 3], [4, 1], [5]]) == (1, [5])": {
      "result": true,
      "time": 0.03453993797302246,
      "error": null
    },
    "assert min_length_list([[6, 5, 5, 8, 2], [1, 6, 6, 3], [6, 4, 6], [5, 1], [2]]) == (1, [2])": {
      "result": true,
      "time": 0.03572797775268555,
      "error": null
    },
    "assert min_length_list([[1, 6, 1, 4, 10], [1, 6, 8, 9], [4, 5, 2], [2, 3], [5]]) == (1, [5])": {
      "result": true,
      "time": 0.03743386268615723,
      "error": null
    },
    "assert min_length_list([[2, 1, 7, 6, 9], [3, 5, 5, 5], [5, 6, 1], [6, 1], [2]]) == (1, [2])": {
      "result": true,
      "time": 0.03755307197570801,
      "error": null
    },
    "assert min_length_list([[6, 7, 6, 4, 9], [2, 2, 7, 6], [2, 2, 7], [6, 6], [4]]) == (1, [4])": {
      "result": true,
      "time": 0.031755924224853516,
      "error": null
    },
    "assert min_length_list([[2, 3, 7, 2, 1], [6, 3, 3, 4], [6, 3, 2], [1, 4], [6]]) == (1, [6])": {
      "result": true,
      "time": 0.03514266014099121,
      "error": null
    },
    "assert min_length_list([[6, 2, 6, 2, 1], [5, 6, 7, 9], [1, 7, 7], [4, 1], [1]]) == (1, [1])": {
      "result": true,
      "time": 0.033957481384277344,
      "error": null
    },
    "assert min_length_list([[6, 3, 6, 5, 3], [2, 5, 4, 2], [5, 6, 6], [1, 1], [1]]) == (1, [1])": {
      "result": true,
      "time": 0.03695821762084961,
      "error": null
    },
    "assert min_length_list([[2, 7, 6, 8, 6], [1, 5, 4, 5], [3, 5, 7], [5, 6], [1]]) == (1, [1])": {
      "result": true,
      "time": 0.03534293174743652,
      "error": null
    },
    "assert min_length_list([[1, 2, 7, 4, 4], [3, 6, 5, 3], [6, 1, 2], [2, 1], [2]]) == (1, [2])": {
      "result": true,
      "time": 0.03379940986633301,
      "error": null
    },
    "assert min_length_list([[5, 7, 2, 1, 1], [1, 6, 4, 9], [3, 6, 3], [1, 5], [3]]) == (1, [3])": {
      "result": true,
      "time": 0.030580997467041016,
      "error": null
    },
    "assert min_length_list([[8, 3, 4], [7, 8, 6, 4], [14, 14, 13], [2, 7]]) == (2, [2, 7])": {
      "result": true,
      "time": 0.032323360443115234,
      "error": null
    },
    "assert min_length_list([[4, 1, 2], [6, 7, 10, 14], [9, 16, 10], [2, 5]]) == (2, [2, 5])": {
      "result": true,
      "time": 0.031732797622680664,
      "error": null
    },
    "assert min_length_list([[4, 6, 10], [10, 6, 7, 11], [10, 6, 13], [3, 2]]) == (2, [3, 2])": {
      "result": true,
      "time": 0.04218602180480957,
      "error": null
    },
    "assert min_length_list([[1, 1, 8], [3, 6, 9, 10], [14, 16, 14], [1, 7]]) == (2, [1, 7])": {
      "result": true,
      "time": 0.03745579719543457,
      "error": null
    },
    "assert min_length_list([[8, 4, 6], [11, 3, 8, 4], [13, 14, 16], [4, 4]]) == (2, [4, 4])": {
      "result": true,
      "time": 0.04243278503417969,
      "error": null
    },
    "assert min_length_list([[4, 4, 9], [2, 7, 4, 10], [7, 12, 10], [3, 4]]) == (2, [3, 4])": {
      "result": true,
      "time": 0.03552579879760742,
      "error": null
    },
    "assert min_length_list([[7, 2, 4], [6, 6, 13, 6], [14, 12, 15], [4, 7]]) == (2, [4, 7])": {
      "result": true,
      "time": 0.034554243087768555,
      "error": null
    },
    "assert min_length_list([[5, 7, 4], [10, 4, 8, 4], [6, 8, 16], [2, 1]]) == (2, [2, 1])": {
      "result": true,
      "time": 0.03374361991882324,
      "error": null
    },
    "assert min_length_list([[4, 1, 3], [6, 11, 8, 10], [13, 7, 13], [2, 4]]) == (2, [2, 4])": {
      "result": true,
      "time": 0.03528904914855957,
      "error": null
    },
    "assert min_length_list([[4, 3, 5], [6, 8, 12, 14], [12, 15, 7], [2, 4]]) == (2, [2, 4])": {
      "result": true,
      "time": 0.03712916374206543,
      "error": null
    },
    "assert min_length_list([[4, 6, 1], [9, 4, 9, 6], [13, 9, 9], [1, 4]]) == (2, [1, 4])": {
      "result": true,
      "time": 0.03265643119812012,
      "error": null
    },
    "assert min_length_list([[2, 2, 10], [1, 4, 9, 4], [10, 9, 13], [5, 4]]) == (2, [5, 4])": {
      "result": true,
      "time": 0.027834415435791016,
      "error": null
    },
    "assert min_length_list([[8, 8, 2], [1, 7, 3, 13], [5, 13, 13], [4, 4]]) == (2, [4, 4])": {
      "result": true,
      "time": 0.037288665771484375,
      "error": null
    },
    "assert min_length_list([[1, 4, 1], [5, 4, 11, 14], [15, 7, 8], [3, 5]]) == (2, [3, 5])": {
      "result": true,
      "time": 0.03243851661682129,
      "error": null
    },
    "assert min_length_list([[6, 6, 2], [3, 5, 5, 11], [10, 12, 16], [3, 1]]) == (2, [3, 1])": {
      "result": true,
      "time": 0.04381871223449707,
      "error": null
    },
    "assert min_length_list([[8, 5, 1], [5, 10, 5, 9], [15, 11, 14], [1, 2]]) == (2, [1, 2])": {
      "result": true,
      "time": 0.0345454216003418,
      "error": null
    },
    "assert min_length_list([[8, 5, 7], [7, 11, 4, 7], [6, 9, 13], [6, 3]]) == (2, [6, 3])": {
      "result": true,
      "time": 0.0286407470703125,
      "error": null
    },
    "assert min_length_list([[1, 3, 5], [2, 11, 3, 14], [7, 8, 12], [3, 5]]) == (2, [3, 5])": {
      "result": true,
      "time": 0.03725171089172363,
      "error": null
    },
    "assert min_length_list([[4, 7, 8], [6, 7, 6, 10], [11, 10, 9], [2, 1]]) == (2, [2, 1])": {
      "result": true,
      "time": 0.03784012794494629,
      "error": null
    },
    "assert min_length_list([[8, 5, 4], [3, 6, 7, 12], [14, 15, 11], [5, 1]]) == (2, [5, 1])": {
      "result": true,
      "time": 0.03780221939086914,
      "error": null
    },
    "assert min_length_list([[2, 7, 4], [1, 7, 5, 6], [8, 15, 12], [1, 6]]) == (2, [1, 6])": {
      "result": true,
      "time": 0.03831982612609863,
      "error": null
    },
    "assert min_length_list([[7, 9, 1], [10, 2, 13, 9], [13, 12, 12], [2, 5]]) == (2, [2, 5])": {
      "result": true,
      "time": 0.03293967247009277,
      "error": null
    },
    "assert min_length_list([[6, 7, 1], [11, 4, 9, 10], [12, 12, 16], [3, 2]]) == (2, [3, 2])": {
      "result": true,
      "time": 0.03330278396606445,
      "error": null
    },
    "assert min_length_list([[5, 3, 9], [8, 10, 12, 7], [13, 9, 9], [2, 2]]) == (2, [2, 2])": {
      "result": true,
      "time": 0.03817248344421387,
      "error": null
    },
    "assert min_length_list([[6, 6, 2], [2, 6, 9, 14], [13, 12, 12], [4, 3]]) == (2, [4, 3])": {
      "result": true,
      "time": 0.03185558319091797,
      "error": null
    },
    "assert min_length_list([[1, 4, 2], [3, 12, 5, 14], [9, 9, 8], [4, 2]]) == (2, [4, 2])": {
      "result": true,
      "time": 0.0337979793548584,
      "error": null
    },
    "assert min_length_list([[1, 6, 1], [4, 4, 11, 6], [12, 16, 10], [5, 2]]) == (2, [5, 2])": {
      "result": true,
      "time": 0.03739523887634277,
      "error": null
    },
    "assert min_length_list([[3, 6, 9], [9, 6, 12, 14], [9, 11, 10], [2, 3]]) == (2, [2, 3])": {
      "result": true,
      "time": 0.034569740295410156,
      "error": null
    },
    "assert min_length_list([[3, 8, 3], [10, 8, 11, 7], [6, 6, 14], [6, 1]]) == (2, [6, 1])": {
      "result": true,
      "time": 0.03274893760681152,
      "error": null
    },
    "assert min_length_list([[3, 8, 7], [3, 12, 3, 5], [15, 14, 11], [6, 4]]) == (2, [6, 4])": {
      "result": true,
      "time": 0.04233431816101074,
      "error": null
    },
    "assert min_length_list([[6, 2, 4], [10, 8, 6, 11], [11, 8, 8], [5, 2]]) == (2, [5, 2])": {
      "result": true,
      "time": 0.0379331111907959,
      "error": null
    },
    "assert min_length_list([[7, 2, 5], [9, 2, 6, 9], [7, 8, 15], [3, 3]]) == (2, [3, 3])": {
      "result": true,
      "time": 0.03694415092468262,
      "error": null
    },
    "assert min_length_list([[2, 4, 2], [6, 4, 8, 4], [11, 6, 13], [6, 4]]) == (2, [6, 4])": {
      "result": true,
      "time": 0.030899763107299805,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}