{
  "code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
  "results": {
    "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])": {
      "result": true,
      "time": 0.04598283767700195,
      "error": null
    },
    "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])": {
      "result": true,
      "time": 0.04233050346374512,
      "error": null
    },
    "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])": {
      "result": true,
      "time": 0.04219365119934082,
      "error": null
    },
    "assert split_two_parts([5, 2, 7, 2, 9, 4, 3, 1], 2) == ([5, 2], [7, 2, 9, 4, 3, 1])": {
      "result": true,
      "time": 0.04555511474609375,
      "error": null
    },
    "assert split_two_parts([1, 4, 4, 6, 8, 2, 7, 1], 4) == ([1, 4, 4, 6], [8, 2, 7, 1])": {
      "result": true,
      "time": 0.04810690879821777,
      "error": null
    },
    "assert split_two_parts([1, 3, 1, 5, 2, 8, 9, 3], 6) == ([1, 3, 1, 5, 2, 8], [9, 3])": {
      "result": true,
      "time": 0.04230046272277832,
      "error": null
    },
    "assert split_two_parts([5, 3, 4, 1, 1, 7, 9, 3], 3) == ([5, 3, 4], [1, 1, 7, 9, 3])": {
      "result": true,
      "time": 0.042864322662353516,
      "error": null
    },
    "assert split_two_parts([2, 1, 1, 7, 7, 4, 8, 6], 6) == ([2, 1, 1, 7, 7, 4], [8, 6])": {
      "result": true,
      "time": 0.039687156677246094,
      "error": null
    },
    "assert split_two_parts([4, 3, 5, 1, 1, 7, 2, 5], 7) == ([4, 3, 5, 1, 1, 7, 2], [5])": {
      "result": true,
      "time": 0.05281949043273926,
      "error": null
    },
    "assert split_two_parts([1, 2, 3, 2, 5, 6, 1, 4], 1) == ([1], [2, 3, 2, 5, 6, 1, 4])": {
      "result": true,
      "time": 0.04529547691345215,
      "error": null
    },
    "assert split_two_parts([6, 2, 7, 1, 3, 3, 8, 3], 2) == ([6, 2], [7, 1, 3, 3, 8, 3])": {
      "result": true,
      "time": 0.04548501968383789,
      "error": null
    },
    "assert split_two_parts([1, 3, 5, 5, 6, 3, 5, 4], 8) == ([1, 3, 5, 5, 6, 3, 5, 4], [])": {
      "result": true,
      "time": 0.047626495361328125,
      "error": null
    },
    "assert split_two_parts([4, 1, 3, 3, 6, 7, 7, 3], 1) == ([4], [1, 3, 3, 6, 7, 7, 3])": {
      "result": true,
      "time": 0.03998875617980957,
      "error": null
    },
    "assert split_two_parts([4, 1, 5, 4, 4, 6, 1, 3], 4) == ([4, 1, 5, 4], [4, 6, 1, 3])": {
      "result": true,
      "time": 0.03766989707946777,
      "error": null
    },
    "assert split_two_parts([6, 1, 5, 4, 9, 9, 3, 6], 5) == ([6, 1, 5, 4, 9], [9, 3, 6])": {
      "result": true,
      "time": 0.045270442962646484,
      "error": null
    },
    "assert split_two_parts([2, 4, 7, 3, 5, 7, 4, 4], 5) == ([2, 4, 7, 3, 5], [7, 4, 4])": {
      "result": true,
      "time": 0.047471046447753906,
      "error": null
    },
    "assert split_two_parts([3, 6, 5, 3, 4, 7, 4, 4], 3) == ([3, 6, 5], [3, 4, 7, 4, 4])": {
      "result": true,
      "time": 0.03977465629577637,
      "error": null
    },
    "assert split_two_parts([2, 2, 7, 5, 6, 9, 10, 3], 8) == ([2, 2, 7, 5, 6, 9, 10, 3], [])": {
      "result": true,
      "time": 0.04726886749267578,
      "error": null
    },
    "assert split_two_parts([3, 4, 1, 7, 1, 9, 5, 4], 8) == ([3, 4, 1, 7, 1, 9, 5, 4], [])": {
      "result": true,
      "time": 0.037780046463012695,
      "error": null
    },
    "assert split_two_parts([3, 2, 2, 2, 6, 1, 7, 2], 1) == ([3], [2, 2, 2, 6, 1, 7, 2])": {
      "result": true,
      "time": 0.0450131893157959,
      "error": null
    },
    "assert split_two_parts([3, 6, 3, 4, 7, 5, 9, 4], 8) == ([3, 6, 3, 4, 7, 5, 9, 4], [])": {
      "result": true,
      "time": 0.04750370979309082,
      "error": null
    },
    "assert split_two_parts([2, 5, 3, 4, 6, 6, 6, 3], 4) == ([2, 5, 3, 4], [6, 6, 6, 3])": {
      "result": true,
      "time": 0.04345417022705078,
      "error": null
    },
    "assert split_two_parts([3, 4, 2, 1, 1, 3, 7, 1], 7) == ([3, 4, 2, 1, 1, 3, 7], [1])": {
      "result": true,
      "time": 0.04470634460449219,
      "error": null
    },
    "assert split_two_parts([3, 4, 1, 6, 4, 6, 8, 2], 5) == ([3, 4, 1, 6, 4], [6, 8, 2])": {
      "result": true,
      "time": 0.05181455612182617,
      "error": null
    },
    "assert split_two_parts([1, 1, 6, 3, 2, 3, 6, 1], 6) == ([1, 1, 6, 3, 2, 3], [6, 1])": {
      "result": true,
      "time": 0.04615354537963867,
      "error": null
    },
    "assert split_two_parts([5, 1, 4, 5, 5, 6, 2, 1], 6) == ([5, 1, 4, 5, 5, 6], [2, 1])": {
      "result": true,
      "time": 0.038649559020996094,
      "error": null
    },
    "assert split_two_parts([5, 1, 5, 6, 6, 6, 8, 6], 3) == ([5, 1, 5], [6, 6, 6, 8, 6])": {
      "result": true,
      "time": 0.04465961456298828,
      "error": null
    },
    "assert split_two_parts([2, 1, 7, 3, 3, 4, 9, 2], 2) == ([2, 1], [7, 3, 3, 4, 9, 2])": {
      "result": true,
      "time": 0.044361114501953125,
      "error": null
    },
    "assert split_two_parts([6, 3, 7, 4, 8, 5, 1, 4], 4) == ([6, 3, 7, 4], [8, 5, 1, 4])": {
      "result": true,
      "time": 0.045935869216918945,
      "error": null
    },
    "assert split_two_parts([1, 3, 5, 2, 6, 6, 6, 2], 6) == ([1, 3, 5, 2, 6, 6], [6, 2])": {
      "result": true,
      "time": 0.04653286933898926,
      "error": null
    },
    "assert split_two_parts([1, 5, 4, 4, 7, 3, 2, 6], 4) == ([1, 5, 4, 4], [7, 3, 2, 6])": {
      "result": true,
      "time": 0.041159868240356445,
      "error": null
    },
    "assert split_two_parts([3, 5, 2, 8, 8, 4, 2, 3], 5) == ([3, 5, 2, 8, 8], [4, 2, 3])": {
      "result": true,
      "time": 0.039288997650146484,
      "error": null
    },
    "assert split_two_parts([3, 6, 6, 4, 4, 8, 4, 2], 5) == ([3, 6, 6, 4, 4], [8, 4, 2])": {
      "result": true,
      "time": 0.039981842041015625,
      "error": null
    },
    "assert split_two_parts([2, 5, 3, 6, 7, 3, 10, 5], 7) == ([2, 5, 3, 6, 7, 3, 10], [5])": {
      "result": true,
      "time": 0.03538632392883301,
      "error": null
    },
    "assert split_two_parts([3, 5, 3, 2, 1, 9, 1, 6], 5) == ([3, 5, 3, 2, 1], [9, 1, 6])": {
      "result": true,
      "time": 0.03599667549133301,
      "error": null
    },
    "assert split_two_parts([6, 3, 4, 8, 4, 2, 3, 3], 7) == ([6, 3, 4, 8, 4, 2, 3], [3])": {
      "result": true,
      "time": 0.03736996650695801,
      "error": null
    },
    "assert split_two_parts(['b', 'g', 'i', 'k'], 6) == (['b', 'g', 'i', 'k'], [])": {
      "result": true,
      "time": 0.03328061103820801,
      "error": null
    },
    "assert split_two_parts(['b', 'q', 'c', 'c'], 7) == (['b', 'q', 'c', 'c'], [])": {
      "result": true,
      "time": 0.046808481216430664,
      "error": null
    },
    "assert split_two_parts(['s', 'x', 'u', 'g'], 5) == (['s', 'x', 'u', 'g'], [])": {
      "result": true,
      "time": 0.03690624237060547,
      "error": null
    },
    "assert split_two_parts(['a', 'q', 'n', 'g'], 1) == (['a'], ['q', 'n', 'g'])": {
      "result": true,
      "time": 0.040276527404785156,
      "error": null
    },
    "assert split_two_parts(['n', 'u', 'o', 'f'], 7) == (['n', 'u', 'o', 'f'], [])": {
      "result": true,
      "time": 0.03630352020263672,
      "error": null
    },
    "assert split_two_parts(['e', 's', 'q', 'a'], 3) == (['e', 's', 'q'], ['a'])": {
      "result": true,
      "time": 0.039676666259765625,
      "error": null
    },
    "assert split_two_parts(['b', 'v', 'g', 'w'], 2) == (['b', 'v'], ['g', 'w'])": {
      "result": true,
      "time": 0.03559374809265137,
      "error": null
    },
    "assert split_two_parts(['b', 'o', 'u', 'v'], 7) == (['b', 'o', 'u', 'v'], [])": {
      "result": true,
      "time": 0.03745722770690918,
      "error": null
    },
    "assert split_two_parts(['s', 'x', 'm', 'n'], 4) == (['s', 'x', 'm', 'n'], [])": {
      "result": true,
      "time": 0.03492856025695801,
      "error": null
    },
    "assert split_two_parts(['n', 'u', 'r', 'o'], 4) == (['n', 'u', 'r', 'o'], [])": {
      "result": true,
      "time": 0.03854966163635254,
      "error": null
    },
    "assert split_two_parts(['g', 'v', 'r', 'b'], 5) == (['g', 'v', 'r', 'b'], [])": {
      "result": true,
      "time": 0.03338146209716797,
      "error": null
    },
    "assert split_two_parts(['s', 'm', 'j', 't'], 1) == (['s'], ['m', 'j', 't'])": {
      "result": true,
      "time": 0.04189562797546387,
      "error": null
    },
    "assert split_two_parts(['s', 't', 'j', 's'], 5) == (['s', 't', 'j', 's'], [])": {
      "result": true,
      "time": 0.03832292556762695,
      "error": null
    },
    "assert split_two_parts(['q', 'e', 'l', 'k'], 6) == (['q', 'e', 'l', 'k'], [])": {
      "result": true,
      "time": 0.03473663330078125,
      "error": null
    },
    "assert split_two_parts(['h', 'n', 'l', 's'], 2) == (['h', 'n'], ['l', 's'])": {
      "result": true,
      "time": 0.03498482704162598,
      "error": null
    },
    "assert split_two_parts(['j', 'd', 'z', 'p'], 1) == (['j'], ['d', 'z', 'p'])": {
      "result": true,
      "time": 0.043763160705566406,
      "error": null
    },
    "assert split_two_parts(['w', 'z', 'u', 'v'], 4) == (['w', 'z', 'u', 'v'], [])": {
      "result": true,
      "time": 0.032588958740234375,
      "error": null
    },
    "assert split_two_parts(['m', 'n', 'd', 'n'], 4) == (['m', 'n', 'd', 'n'], [])": {
      "result": true,
      "time": 0.030336618423461914,
      "error": null
    },
    "assert split_two_parts(['v', 'o', 't', 'e'], 2) == (['v', 'o'], ['t', 'e'])": {
      "result": true,
      "time": 0.042670249938964844,
      "error": null
    },
    "assert split_two_parts(['u', 'w', 'j', 'u'], 6) == (['u', 'w', 'j', 'u'], [])": {
      "result": true,
      "time": 0.034180641174316406,
      "error": null
    },
    "assert split_two_parts(['o', 'o', 'p', 'j'], 2) == (['o', 'o'], ['p', 'j'])": {
      "result": true,
      "time": 0.039460182189941406,
      "error": null
    },
    "assert split_two_parts(['j', 'v', 'o', 't'], 1) == (['j'], ['v', 'o', 't'])": {
      "result": true,
      "time": 0.03657650947570801,
      "error": null
    },
    "assert split_two_parts(['x', 'r', 'l', 'k'], 6) == (['x', 'r', 'l', 'k'], [])": {
      "result": true,
      "time": 0.043434858322143555,
      "error": null
    },
    "assert split_two_parts(['t', 'x', 'v', 'j'], 2) == (['t', 'x'], ['v', 'j'])": {
      "result": true,
      "time": 0.03612089157104492,
      "error": null
    },
    "assert split_two_parts(['j', 'u', 't', 'k'], 2) == (['j', 'u'], ['t', 'k'])": {
      "result": true,
      "time": 0.036522865295410156,
      "error": null
    },
    "assert split_two_parts(['j', 'h', 'e', 't'], 7) == (['j', 'h', 'e', 't'], [])": {
      "result": true,
      "time": 0.04152393341064453,
      "error": null
    },
    "assert split_two_parts(['x', 'x', 'k', 'h'], 4) == (['x', 'x', 'k', 'h'], [])": {
      "result": true,
      "time": 0.03651762008666992,
      "error": null
    },
    "assert split_two_parts(['n', 'l', 'a', 'b'], 7) == (['n', 'l', 'a', 'b'], [])": {
      "result": true,
      "time": 0.042814016342163086,
      "error": null
    },
    "assert split_two_parts(['s', 'f', 'e', 'n'], 4) == (['s', 'f', 'e', 'n'], [])": {
      "result": true,
      "time": 0.03743171691894531,
      "error": null
    },
    "assert split_two_parts(['a', 'd', 'm', 'j'], 3) == (['a', 'd', 'm'], ['j'])": {
      "result": true,
      "time": 0.037310123443603516,
      "error": null
    },
    "assert split_two_parts(['e', 't', 'g', 'y'], 3) == (['e', 't', 'g'], ['y'])": {
      "result": true,
      "time": 0.03529810905456543,
      "error": null
    },
    "assert split_two_parts(['s', 'r', 'n', 'x'], 6) == (['s', 'r', 'n', 'x'], [])": {
      "result": true,
      "time": 0.03730440139770508,
      "error": null
    },
    "assert split_two_parts(['d', 'j', 'u', 'i'], 1) == (['d'], ['j', 'u', 'i'])": {
      "result": true,
      "time": 0.04069066047668457,
      "error": null
    },
    "assert split_two_parts(['c', 'c', 'k', 'f', 'p', 'a'], 8) == (['c', 'c', 'k', 'f', 'p', 'a'], [])": {
      "result": true,
      "time": 0.03986501693725586,
      "error": null
    },
    "assert split_two_parts(['v', 'm', 'l', 'k', 'g', 't'], 5) == (['v', 'm', 'l', 'k', 'g'], ['t'])": {
      "result": true,
      "time": 0.03651738166809082,
      "error": null
    },
    "assert split_two_parts(['m', 'l', 'g', 'w', 'g', 'a'], 8) == (['m', 'l', 'g', 'w', 'g', 'a'], [])": {
      "result": true,
      "time": 0.0442805290222168,
      "error": null
    },
    "assert split_two_parts(['m', 'a', 'l', 'g', 'l', 's'], 6) == (['m', 'a', 'l', 'g', 'l', 's'], [])": {
      "result": true,
      "time": 0.038834571838378906,
      "error": null
    },
    "assert split_two_parts(['b', 'm', 'l', 'u', 'm', 'm'], 8) == (['b', 'm', 'l', 'u', 'm', 'm'], [])": {
      "result": true,
      "time": 0.02999734878540039,
      "error": null
    },
    "assert split_two_parts(['v', 'a', 'e', 's', 'd', 'e'], 5) == (['v', 'a', 'e', 's', 'd'], ['e'])": {
      "result": true,
      "time": 0.03630566596984863,
      "error": null
    },
    "assert split_two_parts(['n', 'l', 'l', 'v', 'm', 'h'], 7) == (['n', 'l', 'l', 'v', 'm', 'h'], [])": {
      "result": true,
      "time": 0.044080257415771484,
      "error": null
    },
    "assert split_two_parts(['h', 't', 'l', 'u', 'g', 'd'], 4) == (['h', 't', 'l', 'u'], ['g', 'd'])": {
      "result": true,
      "time": 0.04028916358947754,
      "error": null
    },
    "assert split_two_parts(['l', 'p', 'w', 'l', 'y', 'c'], 5) == (['l', 'p', 'w', 'l', 'y'], ['c'])": {
      "result": true,
      "time": 0.037831783294677734,
      "error": null
    },
    "assert split_two_parts(['w', 'g', 'h', 'd', 'v', 'k'], 9) == (['w', 'g', 'h', 'd', 'v', 'k'], [])": {
      "result": true,
      "time": 0.039266109466552734,
      "error": null
    },
    "assert split_two_parts(['r', 'k', 'k', 'e', 'r', 'v'], 1) == (['r'], ['k', 'k', 'e', 'r', 'v'])": {
      "result": true,
      "time": 0.037326812744140625,
      "error": null
    },
    "assert split_two_parts(['y', 'y', 'h', 'y', 'f', 'r'], 5) == (['y', 'y', 'h', 'y', 'f'], ['r'])": {
      "result": true,
      "time": 0.03132963180541992,
      "error": null
    },
    "assert split_two_parts(['m', 'u', 'k', 'l', 'v', 'w'], 5) == (['m', 'u', 'k', 'l', 'v'], ['w'])": {
      "result": true,
      "time": 0.03454875946044922,
      "error": null
    },
    "assert split_two_parts(['o', 'h', 'f', 'b', 'n', 'r'], 6) == (['o', 'h', 'f', 'b', 'n', 'r'], [])": {
      "result": true,
      "time": 0.0341181755065918,
      "error": null
    },
    "assert split_two_parts(['j', 'v', 'c', 'g', 'm', 'j'], 2) == (['j', 'v'], ['c', 'g', 'm', 'j'])": {
      "result": true,
      "time": 0.036293983459472656,
      "error": null
    },
    "assert split_two_parts(['w', 'r', 'e', 'g', 'u', 'q'], 3) == (['w', 'r', 'e'], ['g', 'u', 'q'])": {
      "result": true,
      "time": 0.039330244064331055,
      "error": null
    },
    "assert split_two_parts(['s', 'v', 'e', 's', 'u', 'k'], 7) == (['s', 'v', 'e', 's', 'u', 'k'], [])": {
      "result": true,
      "time": 0.03695511817932129,
      "error": null
    },
    "assert split_two_parts(['l', 'u', 'e', 'y', 'l', 'l'], 4) == (['l', 'u', 'e', 'y'], ['l', 'l'])": {
      "result": true,
      "time": 0.03530097007751465,
      "error": null
    },
    "assert split_two_parts(['o', 'e', 'q', 'h', 'p', 'w'], 7) == (['o', 'e', 'q', 'h', 'p', 'w'], [])": {
      "result": true,
      "time": 0.037485361099243164,
      "error": null
    },
    "assert split_two_parts(['e', 'x', 's', 'd', 'h', 'o'], 2) == (['e', 'x'], ['s', 'd', 'h', 'o'])": {
      "result": true,
      "time": 0.03496289253234863,
      "error": null
    },
    "assert split_two_parts(['h', 'o', 'b', 'c', 'k', 'p'], 6) == (['h', 'o', 'b', 'c', 'k', 'p'], [])": {
      "result": true,
      "time": 0.03797578811645508,
      "error": null
    },
    "assert split_two_parts(['e', 's', 'c', 'g', 'b', 'i'], 5) == (['e', 's', 'c', 'g', 'b'], ['i'])": {
      "result": true,
      "time": 0.03806114196777344,
      "error": null
    },
    "assert split_two_parts(['d', 'k', 'y', 'j', 's', 'n'], 6) == (['d', 'k', 'y', 'j', 's', 'n'], [])": {
      "result": true,
      "time": 0.03569364547729492,
      "error": null
    },
    "assert split_two_parts(['k', 'a', 'n', 'l', 's', 'r'], 9) == (['k', 'a', 'n', 'l', 's', 'r'], [])": {
      "result": true,
      "time": 0.03604483604431152,
      "error": null
    },
    "assert split_two_parts(['n', 'f', 'n', 't', 'h', 'v'], 9) == (['n', 'f', 'n', 't', 'h', 'v'], [])": {
      "result": true,
      "time": 0.03831672668457031,
      "error": null
    },
    "assert split_two_parts(['x', 'm', 'g', 'x', 'x', 'e'], 6) == (['x', 'm', 'g', 'x', 'x', 'e'], [])": {
      "result": true,
      "time": 0.03391766548156738,
      "error": null
    },
    "assert split_two_parts(['p', 't', 'o', 'x', 'r', 'z'], 6) == (['p', 't', 'o', 'x', 'r', 'z'], [])": {
      "result": true,
      "time": 0.03525066375732422,
      "error": null
    },
    "assert split_two_parts(['u', 'k', 't', 'l', 'n', 's'], 7) == (['u', 'k', 't', 'l', 'n', 's'], [])": {
      "result": true,
      "time": 0.03528141975402832,
      "error": null
    },
    "assert split_two_parts(['d', 'h', 'i', 't', 'e', 'b'], 5) == (['d', 'h', 'i', 't', 'e'], ['b'])": {
      "result": true,
      "time": 0.03254890441894531,
      "error": null
    },
    "assert split_two_parts(['a', 'k', 's', 'm', 'e', 'z'], 9) == (['a', 'k', 's', 'm', 'e', 'z'], [])": {
      "result": true,
      "time": 0.03512716293334961,
      "error": null
    },
    "assert split_two_parts(['w', 'c', 'a', 'a', 'y', 'q'], 4) == (['w', 'c', 'a', 'a'], ['y', 'q'])": {
      "result": true,
      "time": 0.037431955337524414,
      "error": null
    },
    "assert split_two_parts(['i', 't', 'n', 'c', 'o', 'd'], 8) == (['i', 't', 'n', 'c', 'o', 'd'], [])": {
      "result": true,
      "time": 0.04298543930053711,
      "error": null
    },
    "assert split_two_parts(['p', 'q', 'f', 'z', 'n', 'z'], 1) == (['p'], ['q', 'f', 'z', 'n', 'z'])": {
      "result": true,
      "time": 0.04431295394897461,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}