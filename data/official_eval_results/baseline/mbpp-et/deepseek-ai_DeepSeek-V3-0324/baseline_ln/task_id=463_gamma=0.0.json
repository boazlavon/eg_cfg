{
  "code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result",
  "results": {
    "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112": {
      "result": true,
      "time": 0.03236222267150879,
      "error": null
    },
    "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ": {
      "result": true,
      "time": 0.034990787506103516,
      "error": null
    },
    "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80": {
      "result": true,
      "time": 0.03779792785644531,
      "error": null
    },
    "assert max_subarray_product([6, 1, 1, 1, 8, -4, -1]) == 192": {
      "result": true,
      "time": 0.03463482856750488,
      "error": null
    },
    "assert max_subarray_product([6, -1, 1, 2, 4, -12, 0]) == 576": {
      "result": true,
      "time": 0.038413286209106445,
      "error": null
    },
    "assert max_subarray_product([1, -7, -7, 3, 5, -4, -2]) == 5880": {
      "result": true,
      "time": 0.040996551513671875,
      "error": null
    },
    "assert max_subarray_product([1, -5, -4, 2, 4, -3, 3]) == 288": {
      "result": true,
      "time": 0.03644084930419922,
      "error": null
    },
    "assert max_subarray_product([3, 1, -2, 2, 11, -10, 1]) == 1320": {
      "result": true,
      "time": 0.03934502601623535,
      "error": null
    },
    "assert max_subarray_product([1, -4, -1, 3, 6, -5, -4]) == 1440": {
      "result": true,
      "time": 0.03716301918029785,
      "error": null
    },
    "assert max_subarray_product([5, -4, -7, 1, 12, -5, 3]) == 1680": {
      "result": true,
      "time": 0.034348487854003906,
      "error": null
    },
    "assert max_subarray_product([5, -7, -7, 3, 8, -5, -7]) == 205800": {
      "result": true,
      "time": 0.03493070602416992,
      "error": null
    },
    "assert max_subarray_product([4, -5, -4, 2, 2, -7, -2]) == 4480": {
      "result": true,
      "time": 0.03985881805419922,
      "error": null
    },
    "assert max_subarray_product([5, -2, -1, 2, 7, -7, -3]) == 2940": {
      "result": true,
      "time": 0.03903985023498535,
      "error": null
    },
    "assert max_subarray_product([1, 2, 1, 3, 3, -4, 1]) == 18": {
      "result": true,
      "time": 0.039092063903808594,
      "error": null
    },
    "assert max_subarray_product([2, -3, -1, 5, 4, -6, -7]) == 5040": {
      "result": true,
      "time": 0.03614401817321777,
      "error": null
    },
    "assert max_subarray_product([6, 3, -3, 5, 5, -3, -5]) == 4050": {
      "result": true,
      "time": 0.0339665412902832,
      "error": null
    },
    "assert max_subarray_product([5, -6, -6, 4, 7, -9, 3]) == 5040": {
      "result": true,
      "time": 0.03919553756713867,
      "error": null
    },
    "assert max_subarray_product([1, -1, -1, 4, 3, -7, 1]) == 84": {
      "result": true,
      "time": 0.039399147033691406,
      "error": null
    },
    "assert max_subarray_product([2, -3, -2, 4, 11, -4, 1]) == 528": {
      "result": true,
      "time": 0.03431081771850586,
      "error": null
    },
    "assert max_subarray_product([2, 2, -1, 5, 2, -12, -2]) == 480": {
      "result": true,
      "time": 0.03984260559082031,
      "error": null
    },
    "assert max_subarray_product([5, -3, -3, 3, 3, -4, -6]) == 9720": {
      "result": true,
      "time": 0.03786206245422363,
      "error": null
    },
    "assert max_subarray_product([2, -4, -5, 2, 4, -6, -6]) == 11520": {
      "result": true,
      "time": 0.035913944244384766,
      "error": null
    },
    "assert max_subarray_product([2, -6, 0, 1, 3, -9, 0]) == 3": {
      "result": true,
      "time": 0.03388500213623047,
      "error": null
    },
    "assert max_subarray_product([2, 3, 2, 3, 11, -3, 0]) == 396": {
      "result": true,
      "time": 0.03676009178161621,
      "error": null
    },
    "assert max_subarray_product([6, 0, -6, 3, 12, -12, -6]) == 2592": {
      "result": true,
      "time": 0.037554264068603516,
      "error": null
    },
    "assert max_subarray_product([5, -7, 0, 2, 11, -8, -1]) == 176": {
      "result": true,
      "time": 0.03038311004638672,
      "error": null
    },
    "assert max_subarray_product([1, 3, -6, 1, 9, -8, -2]) == 1296": {
      "result": true,
      "time": 0.030827045440673828,
      "error": null
    },
    "assert max_subarray_product([4, 2, -5, 1, 9, -12, -2]) == 4320": {
      "result": true,
      "time": 0.03199887275695801,
      "error": null
    },
    "assert max_subarray_product([4, -2, 1, 3, 9, -9, -4]) == 1944": {
      "result": true,
      "time": 0.046364784240722656,
      "error": null
    },
    "assert max_subarray_product([1, -5, -1, 5, 4, -6, 3]) == 360": {
      "result": true,
      "time": 0.036628007888793945,
      "error": null
    },
    "assert max_subarray_product([4, 0, -2, 1, 12, -11, -3]) == 396": {
      "result": true,
      "time": 0.031636714935302734,
      "error": null
    },
    "assert max_subarray_product([5, 2, -6, 3, 6, -6, -5]) == 6480": {
      "result": true,
      "time": 0.03325676918029785,
      "error": null
    },
    "assert max_subarray_product([2, -5, -1, 2, 7, -7, -5]) == 4900": {
      "result": true,
      "time": 0.039832115173339844,
      "error": null
    },
    "assert max_subarray_product([5, -4, -6, 1, 11, -9, 3]) == 1782": {
      "result": true,
      "time": 0.03675198554992676,
      "error": null
    },
    "assert max_subarray_product([2, -1, -5, 5, 3, -9, -6]) == 8100": {
      "result": true,
      "time": 0.03552722930908203,
      "error": null
    },
    "assert max_subarray_product([1, 0, -7, 1, 7, -12, -7]) == 588": {
      "result": true,
      "time": 0.03970146179199219,
      "error": null
    },
    "assert max_subarray_product([3, -1, -12, 4, 7]) == 1008": {
      "result": true,
      "time": 0.04172515869140625,
      "error": null
    },
    "assert max_subarray_product([2, 0, -11, 2, 1]) == 2": {
      "result": true,
      "time": 0.03428006172180176,
      "error": null
    },
    "assert max_subarray_product([10, 2, -12, 3, 5]) == 20": {
      "result": true,
      "time": 0.03567934036254883,
      "error": null
    },
    "assert max_subarray_product([10, 0, -5, 4, 2]) == 10": {
      "result": true,
      "time": 0.03743624687194824,
      "error": null
    },
    "assert max_subarray_product([9, -7, -12, 4, 1]) == 3024": {
      "result": true,
      "time": 0.034189462661743164,
      "error": null
    },
    "assert max_subarray_product([2, -5, -10, 2, 1]) == 200": {
      "result": true,
      "time": 0.03383135795593262,
      "error": null
    },
    "assert max_subarray_product([4, -5, -13, 2, 1]) == 520": {
      "result": true,
      "time": 0.04113435745239258,
      "error": null
    },
    "assert max_subarray_product([5, -8, -7, 3, 1]) == 840": {
      "result": true,
      "time": 0.034142494201660156,
      "error": null
    },
    "assert max_subarray_product([1, -4, -7, 3, 7]) == 588": {
      "result": true,
      "time": 0.03580117225646973,
      "error": null
    },
    "assert max_subarray_product([10, -8, -7, 3, 1]) == 1680": {
      "result": true,
      "time": 0.0388493537902832,
      "error": null
    },
    "assert max_subarray_product([9, -5, -13, 3, 5]) == 8775": {
      "result": true,
      "time": 0.03469705581665039,
      "error": null
    },
    "assert max_subarray_product([2, -8, -9, 2, 3]) == 864": {
      "result": true,
      "time": 0.03350210189819336,
      "error": null
    },
    "assert max_subarray_product([1, 2, -14, 2, 6]) == 12": {
      "result": true,
      "time": 0.03600931167602539,
      "error": null
    },
    "assert max_subarray_product([5, 2, -15, 2, 1]) == 10": {
      "result": true,
      "time": 0.03783893585205078,
      "error": null
    },
    "assert max_subarray_product([7, -3, -10, 4, 4]) == 3360": {
      "result": true,
      "time": 0.043073415756225586,
      "error": null
    },
    "assert max_subarray_product([6, -4, -13, 1, 4]) == 1248": {
      "result": true,
      "time": 0.03844714164733887,
      "error": null
    },
    "assert max_subarray_product([6, -3, -5, 4, 4]) == 1440": {
      "result": true,
      "time": 0.03881573677062988,
      "error": null
    },
    "assert max_subarray_product([8, -8, -5, 2, 2]) == 1280": {
      "result": true,
      "time": 0.0382685661315918,
      "error": null
    },
    "assert max_subarray_product([7, -8, -11, 1, 1]) == 616": {
      "result": true,
      "time": 0.03650712966918945,
      "error": null
    },
    "assert max_subarray_product([3, -3, -12, 3, 6]) == 1944": {
      "result": true,
      "time": 0.03777313232421875,
      "error": null
    },
    "assert max_subarray_product([3, -6, -13, 4, 4]) == 3744": {
      "result": true,
      "time": 0.040375709533691406,
      "error": null
    },
    "assert max_subarray_product([11, 2, -9, 3, 4]) == 22": {
      "result": true,
      "time": 0.032962799072265625,
      "error": null
    },
    "assert max_subarray_product([9, -7, -12, 3, 7]) == 15876": {
      "result": true,
      "time": 0.037802696228027344,
      "error": null
    },
    "assert max_subarray_product([8, 0, -7, 3, 5]) == 15": {
      "result": true,
      "time": 0.04028940200805664,
      "error": null
    },
    "assert max_subarray_product([4, 1, -14, 5, 6]) == 30": {
      "result": true,
      "time": 0.03599214553833008,
      "error": null
    },
    "assert max_subarray_product([10, -7, -5, 5, 5]) == 8750": {
      "result": true,
      "time": 0.03240633010864258,
      "error": null
    },
    "assert max_subarray_product([3, -5, -14, 4, 2]) == 1680": {
      "result": true,
      "time": 0.03927946090698242,
      "error": null
    },
    "assert max_subarray_product([11, -6, -9, 5, 2]) == 5940": {
      "result": true,
      "time": 0.03603315353393555,
      "error": null
    },
    "assert max_subarray_product([4, -2, -9, 3, 6]) == 1296": {
      "result": true,
      "time": 0.03770852088928223,
      "error": null
    },
    "assert max_subarray_product([5, -6, -10, 1, 5]) == 1500": {
      "result": true,
      "time": 0.04079246520996094,
      "error": null
    },
    "assert max_subarray_product([4, 1, -10, 2, 6]) == 12": {
      "result": true,
      "time": 0.03772783279418945,
      "error": null
    },
    "assert max_subarray_product([6, -3, -11, 3, 7]) == 4158": {
      "result": true,
      "time": 0.03688383102416992,
      "error": null
    },
    "assert max_subarray_product([3, -1, -15, 3, 6]) == 810": {
      "result": true,
      "time": 0.03950834274291992,
      "error": null
    },
    "assert max_subarray_product([2, -39, 1, 0, 2]) == 2": {
      "result": true,
      "time": 0.03382301330566406,
      "error": null
    },
    "assert max_subarray_product([0, -35, 5, -1, 0]) == 175": {
      "result": true,
      "time": 0.04097723960876465,
      "error": null
    },
    "assert max_subarray_product([-2, -45, 1, -1, -3]) == 270": {
      "result": true,
      "time": 0.03965473175048828,
      "error": null
    },
    "assert max_subarray_product([3, -38, 1, 3, -4]) == 1368": {
      "result": true,
      "time": 0.033852338790893555,
      "error": null
    },
    "assert max_subarray_product([-1, -40, 3, 3, -1]) == 360": {
      "result": true,
      "time": 0.040609121322631836,
      "error": null
    },
    "assert max_subarray_product([2, -45, 4, -6, -3]) == 2160": {
      "result": true,
      "time": 0.034094810485839844,
      "error": null
    },
    "assert max_subarray_product([-7, -43, 4, -2, -6]) == 14448": {
      "result": true,
      "time": 0.03583097457885742,
      "error": null
    },
    "assert max_subarray_product([-1, -43, 5, -6, -3]) == 3870": {
      "result": true,
      "time": 0.038408756256103516,
      "error": null
    },
    "assert max_subarray_product([2, -45, 2, 0, -6]) == 2": {
      "result": true,
      "time": 0.03900480270385742,
      "error": null
    },
    "assert max_subarray_product([-2, -36, 5, -1, 0]) == 360": {
      "result": true,
      "time": 0.034313201904296875,
      "error": null
    },
    "assert max_subarray_product([0, -37, 3, -6, 1]) == 666": {
      "result": true,
      "time": 0.03590035438537598,
      "error": null
    },
    "assert max_subarray_product([3, -38, 4, -4, -1]) == 1824": {
      "result": true,
      "time": 0.03580498695373535,
      "error": null
    },
    "assert max_subarray_product([-4, -45, 2, -5, -8]) == 14400": {
      "result": true,
      "time": 0.03727364540100098,
      "error": null
    },
    "assert max_subarray_product([0, -44, 1, -4, 2]) == 352": {
      "result": true,
      "time": 0.03751802444458008,
      "error": null
    },
    "assert max_subarray_product([-3, -44, 3, -2, -7]) == 5544": {
      "result": true,
      "time": 0.032251596450805664,
      "error": null
    },
    "assert max_subarray_product([-4, -35, 2, 1, 0]) == 280": {
      "result": true,
      "time": 0.033802032470703125,
      "error": null
    },
    "assert max_subarray_product([-7, -36, 5, -5, -2]) == 12600": {
      "result": true,
      "time": 0.035120248794555664,
      "error": null
    },
    "assert max_subarray_product([-3, -45, 4, -3, -8]) == 12960": {
      "result": true,
      "time": 0.036669254302978516,
      "error": null
    },
    "assert max_subarray_product([-3, -36, 5, -7, -4]) == 15120": {
      "result": true,
      "time": 0.03409099578857422,
      "error": null
    },
    "assert max_subarray_product([-2, -38, 3, 2, -6]) == 1368": {
      "result": true,
      "time": 0.03740715980529785,
      "error": null
    },
    "assert max_subarray_product([3, -40, 5, -1, -4]) == 600": {
      "result": true,
      "time": 0.03797030448913574,
      "error": null
    },
    "assert max_subarray_product([-3, -41, 5, -7, -8]) == 34440": {
      "result": true,
      "time": 0.036528587341308594,
      "error": null
    },
    "assert max_subarray_product([2, -39, 5, -5, -4]) == 1950": {
      "result": true,
      "time": 0.031089305877685547,
      "error": null
    },
    "assert max_subarray_product([0, -38, 5, 0, 0]) == 5": {
      "result": true,
      "time": 0.03465676307678223,
      "error": null
    },
    "assert max_subarray_product([-7, -40, 2, -2, -5]) == 5600": {
      "result": true,
      "time": 0.04519510269165039,
      "error": null
    },
    "assert max_subarray_product([2, -43, 1, -7, -7]) == 602": {
      "result": true,
      "time": 0.038724660873413086,
      "error": null
    },
    "assert max_subarray_product([-1, -45, 5, -2, 1]) == 450": {
      "result": true,
      "time": 0.036385297775268555,
      "error": null
    },
    "assert max_subarray_product([-5, -45, 1, -3, -8]) == 5400": {
      "result": true,
      "time": 0.03972434997558594,
      "error": null
    },
    "assert max_subarray_product([1, -37, 1, -4, 0]) == 148": {
      "result": true,
      "time": 0.03891396522521973,
      "error": null
    },
    "assert max_subarray_product([-1, -44, 2, -4, 0]) == 352": {
      "result": true,
      "time": 0.03691673278808594,
      "error": null
    },
    "assert max_subarray_product([-5, -35, 3, -4, -1]) == 2100": {
      "result": true,
      "time": 0.038152456283569336,
      "error": null
    },
    "assert max_subarray_product([-1, -36, 2, -6, -2]) == 864": {
      "result": true,
      "time": 0.03555583953857422,
      "error": null
    },
    "assert max_subarray_product([3, -38, 4, -2, 2]) == 1824": {
      "result": true,
      "time": 0.03377819061279297,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}