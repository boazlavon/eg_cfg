{
  "code": "def min_Ops(arr, n, k):\n    # Check if it's possible to make all elements equal\n    max_element = max(arr)\n    operations = 0\n    \n    for num in arr:\n        diff = max_element - num\n        if diff % k != 0:\n            return -1\n        operations += diff // k\n    \n    return operations",
  "results": {
    "assert min_Ops([2,2,2,2],4,3) == 0": {
      "result": true,
      "time": 0.038849592208862305,
      "error": null
    },
    "assert min_Ops([4,2,6,8],4,3) == -1": {
      "result": true,
      "time": 0.04039478302001953,
      "error": null
    },
    "assert min_Ops([21,33,9,45,63],5,6) == 24": {
      "result": true,
      "time": 0.03795790672302246,
      "error": null
    },
    "assert min_Ops([2, 3, 6, 4], 6, 8) == -1": {
      "result": true,
      "time": 0.03848671913146973,
      "error": null
    },
    "assert min_Ops([5, 1, 1, 3], 2, 4) == 1": {
      "result": false,
      "time": 0.028463363647460938,
      "error": null
    },
    "assert min_Ops([4, 1, 1, 5], 9, 6) == -1": {
      "result": true,
      "time": 0.042769670486450195,
      "error": null
    },
    "assert min_Ops([7, 2, 5, 6], 1, 5) == 0": {
      "result": false,
      "time": 0.03721952438354492,
      "error": null
    },
    "assert min_Ops([2, 2, 3, 4], 1, 8) == -1": {
      "result": true,
      "time": 0.03435850143432617,
      "error": null
    },
    "assert min_Ops([6, 4, 1, 5], 7, 8) == -1": {
      "result": true,
      "time": 0.04276561737060547,
      "error": null
    },
    "assert min_Ops([5, 4, 5, 6], 3, 4) == -1": {
      "result": true,
      "time": 0.036598920822143555,
      "error": null
    },
    "assert min_Ops([5, 2, 4, 3], 8, 3) == -1": {
      "result": true,
      "time": 0.03401064872741699,
      "error": null
    },
    "assert min_Ops([5, 4, 6, 5], 1, 3) == -1": {
      "result": true,
      "time": 0.03485846519470215,
      "error": null
    },
    "assert min_Ops([7, 7, 4, 2], 9, 5) == -1": {
      "result": true,
      "time": 0.04350113868713379,
      "error": null
    },
    "assert min_Ops([5, 3, 1, 5], 3, 8) == -1": {
      "result": true,
      "time": 0.03587961196899414,
      "error": null
    },
    "assert min_Ops([1, 3, 2, 5], 5, 4) == -1": {
      "result": true,
      "time": 0.042876243591308594,
      "error": null
    },
    "assert min_Ops([6, 7, 3, 2], 4, 4) == -1": {
      "result": true,
      "time": 0.03712654113769531,
      "error": null
    },
    "assert min_Ops([2, 3, 6, 3], 7, 2) == -1": {
      "result": true,
      "time": 0.03865385055541992,
      "error": null
    },
    "assert min_Ops([1, 2, 6, 4], 3, 8) == -1": {
      "result": true,
      "time": 0.039028167724609375,
      "error": null
    },
    "assert min_Ops([7, 5, 5, 4], 3, 2) == 2": {
      "result": false,
      "time": 0.042710065841674805,
      "error": null
    },
    "assert min_Ops([7, 5, 2, 4], 5, 8) == -1": {
      "result": true,
      "time": 0.034146785736083984,
      "error": null
    },
    "assert min_Ops([1, 1, 1, 6], 2, 1) == 10": {
      "result": false,
      "time": 0.03980088233947754,
      "error": null
    },
    "assert min_Ops([6, 5, 3, 1], 3, 4) == -1": {
      "result": true,
      "time": 0.03537273406982422,
      "error": null
    },
    "assert min_Ops([4, 7, 7, 1], 4, 3) == 3": {
      "result": true,
      "time": 0.036200523376464844,
      "error": null
    },
    "assert min_Ops([6, 5, 5, 2], 8, 8) == -1": {
      "result": true,
      "time": 0.03604245185852051,
      "error": null
    },
    "assert min_Ops([5, 4, 4, 1], 3, 3) == -1": {
      "result": true,
      "time": 0.035584449768066406,
      "error": null
    },
    "assert min_Ops([7, 2, 6, 1], 8, 4) == -1": {
      "result": true,
      "time": 0.03754782676696777,
      "error": null
    },
    "assert min_Ops([1, 1, 6, 5], 8, 7) == -1": {
      "result": true,
      "time": 0.033957719802856445,
      "error": null
    },
    "assert min_Ops([7, 4, 5, 4], 7, 2) == -1": {
      "result": true,
      "time": 0.04079914093017578,
      "error": null
    },
    "assert min_Ops([3, 3, 4, 4], 3, 3) == -1": {
      "result": true,
      "time": 0.039742231369018555,
      "error": null
    },
    "assert min_Ops([3, 2, 5, 5], 2, 1) == 5": {
      "result": true,
      "time": 0.03698873519897461,
      "error": null
    },
    "assert min_Ops([3, 1, 5, 5], 5, 3) == -1": {
      "result": true,
      "time": 0.044111013412475586,
      "error": null
    },
    "assert min_Ops([2, 5, 5, 1], 2, 1) == 3": {
      "result": false,
      "time": 0.03383922576904297,
      "error": null
    },
    "assert min_Ops([3, 1, 2, 6], 7, 7) == -1": {
      "result": true,
      "time": 0.036139726638793945,
      "error": null
    },
    "assert min_Ops([4, 2, 5, 5], 3, 5) == -1": {
      "result": true,
      "time": 0.037618398666381836,
      "error": null
    },
    "assert min_Ops([7, 4, 2, 2], 5, 2) == -1": {
      "result": true,
      "time": 0.04426145553588867,
      "error": null
    },
    "assert min_Ops([7, 3, 4, 7], 9, 5) == -1": {
      "result": true,
      "time": 0.030727624893188477,
      "error": null
    },
    "assert min_Ops([6, 7, 9, 10], 8, 6) == -1": {
      "result": true,
      "time": 0.040802001953125,
      "error": null
    },
    "assert min_Ops([4, 5, 5, 7], 7, 8) == -1": {
      "result": true,
      "time": 0.033237457275390625,
      "error": null
    },
    "assert min_Ops([6, 6, 1, 4], 3, 7) == -1": {
      "result": true,
      "time": 0.03448128700256348,
      "error": null
    },
    "assert min_Ops([5, 3, 2, 4], 9, 3) == -1": {
      "result": true,
      "time": 0.036722421646118164,
      "error": null
    },
    "assert min_Ops([5, 6, 3, 10], 4, 4) == -1": {
      "result": true,
      "time": 0.03462409973144531,
      "error": null
    },
    "assert min_Ops([1, 3, 5, 12], 9, 6) == -1": {
      "result": true,
      "time": 0.03858184814453125,
      "error": null
    },
    "assert min_Ops([6, 5, 7, 10], 2, 7) == -1": {
      "result": true,
      "time": 0.03442096710205078,
      "error": null
    },
    "assert min_Ops([2, 3, 7, 10], 9, 7) == -1": {
      "result": true,
      "time": 0.03376507759094238,
      "error": null
    },
    "assert min_Ops([4, 2, 10, 9], 4, 5) == -1": {
      "result": true,
      "time": 0.03652596473693848,
      "error": null
    },
    "assert min_Ops([4, 2, 5, 8], 8, 6) == -1": {
      "result": true,
      "time": 0.03423786163330078,
      "error": null
    },
    "assert min_Ops([1, 6, 3, 9], 8, 3) == -1": {
      "result": true,
      "time": 0.03668093681335449,
      "error": null
    },
    "assert min_Ops([8, 2, 2, 11], 1, 7) == -1": {
      "result": true,
      "time": 0.037392616271972656,
      "error": null
    },
    "assert min_Ops([6, 1, 5, 9], 7, 2) == -1": {
      "result": true,
      "time": 0.03817296028137207,
      "error": null
    },
    "assert min_Ops([4, 6, 8, 8], 6, 4) == -1": {
      "result": true,
      "time": 0.04389476776123047,
      "error": null
    },
    "assert min_Ops([7, 7, 7, 6], 7, 5) == -1": {
      "result": true,
      "time": 0.03674507141113281,
      "error": null
    },
    "assert min_Ops([7, 7, 10, 5], 9, 2) == -1": {
      "result": true,
      "time": 0.03365206718444824,
      "error": null
    },
    "assert min_Ops([3, 2, 5, 11], 9, 4) == -1": {
      "result": true,
      "time": 0.03650665283203125,
      "error": null
    },
    "assert min_Ops([2, 5, 1, 7], 6, 8) == -1": {
      "result": true,
      "time": 0.02958393096923828,
      "error": null
    },
    "assert min_Ops([9, 2, 8, 12], 3, 4) == -1": {
      "result": true,
      "time": 0.037836551666259766,
      "error": null
    },
    "assert min_Ops([9, 6, 6, 12], 3, 2) == -1": {
      "result": true,
      "time": 0.03846311569213867,
      "error": null
    },
    "assert min_Ops([4, 6, 1, 12], 2, 6) == -1": {
      "result": true,
      "time": 0.040721893310546875,
      "error": null
    },
    "assert min_Ops([1, 6, 10, 11], 8, 3) == -1": {
      "result": true,
      "time": 0.04259085655212402,
      "error": null
    },
    "assert min_Ops([2, 7, 4, 12], 9, 2) == -1": {
      "result": true,
      "time": 0.040276288986206055,
      "error": null
    },
    "assert min_Ops([7, 4, 9, 9], 1, 3) == -1": {
      "result": true,
      "time": 0.036972999572753906,
      "error": null
    },
    "assert min_Ops([2, 7, 1, 10], 3, 6) == -1": {
      "result": true,
      "time": 0.04774737358093262,
      "error": null
    },
    "assert min_Ops([5, 2, 11, 4], 7, 8) == -1": {
      "result": true,
      "time": 0.0408787727355957,
      "error": null
    },
    "assert min_Ops([6, 7, 3, 11], 2, 5) == -1": {
      "result": true,
      "time": 0.05591320991516113,
      "error": null
    },
    "assert min_Ops([2, 6, 6, 10], 4, 5) == -1": {
      "result": true,
      "time": 0.03862929344177246,
      "error": null
    },
    "assert min_Ops([4, 6, 6, 11], 3, 8) == -1": {
      "result": true,
      "time": 0.04014420509338379,
      "error": null
    },
    "assert min_Ops([1, 5, 8, 7], 2, 2) == -1": {
      "result": true,
      "time": 0.04489612579345703,
      "error": null
    },
    "assert min_Ops([6, 5, 10, 13], 1, 6) == -1": {
      "result": true,
      "time": 0.03376626968383789,
      "error": null
    },
    "assert min_Ops([1, 1, 8, 12], 9, 7) == -1": {
      "result": true,
      "time": 0.03897690773010254,
      "error": null
    },
    "assert min_Ops([3, 4, 10, 4], 5, 5) == -1": {
      "result": true,
      "time": 0.04307913780212402,
      "error": null
    },
    "assert min_Ops([23, 35, 7, 45, 58], 10, 6) == -1": {
      "result": true,
      "time": 0.03390908241271973,
      "error": null
    },
    "assert min_Ops([26, 36, 13, 49, 63], 5, 10) == -1": {
      "result": true,
      "time": 0.03517603874206543,
      "error": null
    },
    "assert min_Ops([22, 31, 6, 41, 67], 5, 5) == -1": {
      "result": true,
      "time": 0.039014339447021484,
      "error": null
    },
    "assert min_Ops([24, 36, 9, 48, 58], 10, 6) == -1": {
      "result": true,
      "time": 0.03407692909240723,
      "error": null
    },
    "assert min_Ops([21, 35, 10, 50, 61], 9, 5) == -1": {
      "result": true,
      "time": 0.032172441482543945,
      "error": null
    },
    "assert min_Ops([25, 36, 11, 48, 58], 7, 4) == -1": {
      "result": true,
      "time": 0.042823076248168945,
      "error": null
    },
    "assert min_Ops([19, 38, 11, 43, 63], 3, 11) == -1": {
      "result": true,
      "time": 0.034098148345947266,
      "error": null
    },
    "assert min_Ops([25, 28, 10, 50, 59], 7, 7) == -1": {
      "result": true,
      "time": 0.03859281539916992,
      "error": null
    },
    "assert min_Ops([22, 31, 8, 41, 64], 5, 11) == -1": {
      "result": true,
      "time": 0.031607627868652344,
      "error": null
    },
    "assert min_Ops([16, 32, 9, 40, 67], 8, 5) == -1": {
      "result": true,
      "time": 0.03600001335144043,
      "error": null
    },
    "assert min_Ops([20, 38, 8, 46, 64], 6, 11) == -1": {
      "result": true,
      "time": 0.029219627380371094,
      "error": null
    },
    "assert min_Ops([23, 31, 13, 45, 60], 8, 2) == -1": {
      "result": true,
      "time": 0.03663325309753418,
      "error": null
    },
    "assert min_Ops([18, 37, 11, 40, 59], 5, 4) == -1": {
      "result": true,
      "time": 0.03281879425048828,
      "error": null
    },
    "assert min_Ops([16, 34, 8, 47, 62], 7, 9) == -1": {
      "result": true,
      "time": 0.03694486618041992,
      "error": null
    },
    "assert min_Ops([23, 38, 4, 42, 64], 6, 3) == -1": {
      "result": true,
      "time": 0.033918142318725586,
      "error": null
    },
    "assert min_Ops([24, 36, 9, 48, 64], 4, 9) == -1": {
      "result": true,
      "time": 0.03262948989868164,
      "error": null
    },
    "assert min_Ops([16, 38, 4, 50, 58], 10, 4) == -1": {
      "result": true,
      "time": 0.03450369834899902,
      "error": null
    },
    "assert min_Ops([17, 35, 12, 47, 62], 4, 11) == -1": {
      "result": true,
      "time": 0.03441619873046875,
      "error": null
    },
    "assert min_Ops([25, 31, 5, 42, 63], 6, 4) == -1": {
      "result": true,
      "time": 0.029833078384399414,
      "error": null
    },
    "assert min_Ops([24, 33, 6, 45, 61], 1, 7) == -1": {
      "result": true,
      "time": 0.030687570571899414,
      "error": null
    },
    "assert min_Ops([24, 34, 8, 45, 66], 5, 7) == -1": {
      "result": true,
      "time": 0.034821271896362305,
      "error": null
    },
    "assert min_Ops([18, 36, 14, 45, 66], 10, 7) == -1": {
      "result": true,
      "time": 0.032564401626586914,
      "error": null
    },
    "assert min_Ops([19, 36, 6, 45, 67], 4, 6) == -1": {
      "result": true,
      "time": 0.03249001502990723,
      "error": null
    },
    "assert min_Ops([16, 38, 5, 41, 61], 5, 4) == -1": {
      "result": true,
      "time": 0.03513956069946289,
      "error": null
    },
    "assert min_Ops([16, 34, 8, 43, 62], 5, 10) == -1": {
      "result": true,
      "time": 0.030849218368530273,
      "error": null
    },
    "assert min_Ops([26, 28, 7, 42, 58], 2, 5) == -1": {
      "result": true,
      "time": 0.03397011756896973,
      "error": null
    },
    "assert min_Ops([26, 38, 9, 50, 61], 10, 11) == -1": {
      "result": true,
      "time": 0.029510974884033203,
      "error": null
    },
    "assert min_Ops([18, 31, 8, 42, 60], 8, 2) == -1": {
      "result": true,
      "time": 0.033350229263305664,
      "error": null
    },
    "assert min_Ops([16, 30, 4, 50, 61], 10, 10) == -1": {
      "result": true,
      "time": 0.034487009048461914,
      "error": null
    },
    "assert min_Ops([16, 34, 12, 47, 67], 8, 3) == -1": {
      "result": true,
      "time": 0.03419232368469238,
      "error": null
    },
    "assert min_Ops([17, 34, 11, 46, 67], 7, 8) == -1": {
      "result": true,
      "time": 0.03670978546142578,
      "error": null
    },
    "assert min_Ops([22, 37, 4, 48, 58], 6, 9) == -1": {
      "result": true,
      "time": 0.029048681259155273,
      "error": null
    },
    "assert min_Ops([21, 34, 7, 42, 67], 10, 5) == -1": {
      "result": true,
      "time": 0.03555440902709961,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9509803921568627,
  "general_error": "",
  "has_testcase_error": false
}