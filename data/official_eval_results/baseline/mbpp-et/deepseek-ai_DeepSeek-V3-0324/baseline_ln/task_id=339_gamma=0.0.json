{
  "code": "from collections import defaultdict\n\ndef find_Divisor(start, end):\n    divisor_counts = defaultdict(int)\n    \n    for num in range(start, end + 1):\n        for i in range(2, num + 1):\n            if num % i == 0:\n                divisor_counts[i] += 1\n    \n    if not divisor_counts:\n        return None\n    \n    max_count = max(divisor_counts.values())\n    max_divisors = [divisor for divisor, count in divisor_counts.items() if count == max_count]\n    \n    return min(max_divisors)",
  "results": {
    "assert find_Divisor(2,2) == 2": {
      "result": true,
      "time": 0.29572534561157227,
      "error": null
    },
    "assert find_Divisor(2,5) == 2": {
      "result": true,
      "time": 0.28185272216796875,
      "error": null
    },
    "assert find_Divisor(5,10) == 2": {
      "result": true,
      "time": 0.28742146492004395,
      "error": null
    },
    "assert find_Divisor(3, 7) == 2": {
      "result": true,
      "time": 0.2940938472747803,
      "error": null
    },
    "assert find_Divisor(4, 4) == 4": {
      "result": false,
      "time": 0.28358912467956543,
      "error": null
    },
    "assert find_Divisor(4, 3) == 2": {
      "result": false,
      "time": 0.2669186592102051,
      "error": null
    },
    "assert find_Divisor(4, 7) == 2": {
      "result": true,
      "time": 0.19387221336364746,
      "error": null
    },
    "assert find_Divisor(5, 4) == 2": {
      "result": false,
      "time": 0.10428452491760254,
      "error": null
    },
    "assert find_Divisor(6, 2) == 2": {
      "result": false,
      "time": 0.29302978515625,
      "error": null
    },
    "assert find_Divisor(7, 4) == 2": {
      "result": false,
      "time": 0.3049921989440918,
      "error": null
    },
    "assert find_Divisor(6, 3) == 2": {
      "result": false,
      "time": 0.30616116523742676,
      "error": null
    },
    "assert find_Divisor(5, 1) == 2": {
      "result": false,
      "time": 0.2582433223724365,
      "error": null
    },
    "assert find_Divisor(6, 1) == 2": {
      "result": false,
      "time": 0.3050682544708252,
      "error": null
    },
    "assert find_Divisor(4, 6) == 2": {
      "result": true,
      "time": 0.2839641571044922,
      "error": null
    },
    "assert find_Divisor(6, 4) == 2": {
      "result": false,
      "time": 0.3113830089569092,
      "error": null
    },
    "assert find_Divisor(7, 1) == 2": {
      "result": false,
      "time": 0.27446722984313965,
      "error": null
    },
    "assert find_Divisor(1, 7) == 2": {
      "result": true,
      "time": 0.2730543613433838,
      "error": null
    },
    "assert find_Divisor(1, 6) == 2": {
      "result": true,
      "time": 0.2699296474456787,
      "error": null
    },
    "assert find_Divisor(3, 5) == 2": {
      "result": true,
      "time": 0.2640960216522217,
      "error": null
    },
    "assert find_Divisor(7, 5) == 2": {
      "result": false,
      "time": 0.2844667434692383,
      "error": null
    },
    "assert find_Divisor(1, 1) == 1": {
      "result": false,
      "time": 0.3184330463409424,
      "error": null
    },
    "assert find_Divisor(2, 6) == 2": {
      "result": true,
      "time": 0.29627513885498047,
      "error": null
    },
    "assert find_Divisor(6, 6) == 6": {
      "result": false,
      "time": 0.2792353630065918,
      "error": null
    },
    "assert find_Divisor(3, 1) == 2": {
      "result": false,
      "time": 0.2894582748413086,
      "error": null
    },
    "assert find_Divisor(3, 2) == 2": {
      "result": false,
      "time": 0.3003044128417969,
      "error": null
    },
    "assert find_Divisor(2, 5) == 2": {
      "result": true,
      "time": 0.29326748847961426,
      "error": null
    },
    "assert find_Divisor(1, 4) == 2": {
      "result": true,
      "time": 0.3130645751953125,
      "error": null
    },
    "assert find_Divisor(5, 7) == 2": {
      "result": true,
      "time": 0.31646084785461426,
      "error": null
    },
    "assert find_Divisor(6, 5) == 2": {
      "result": false,
      "time": 0.29796791076660156,
      "error": null
    },
    "assert find_Divisor(3, 10) == 2": {
      "result": true,
      "time": 0.292208194732666,
      "error": null
    },
    "assert find_Divisor(5, 5) == 5": {
      "result": true,
      "time": 0.2902543544769287,
      "error": null
    },
    "assert find_Divisor(3, 3) == 3": {
      "result": true,
      "time": 0.29158663749694824,
      "error": null
    },
    "assert find_Divisor(6, 7) == 2": {
      "result": true,
      "time": 0.2855684757232666,
      "error": null
    },
    "assert find_Divisor(5, 2) == 2": {
      "result": false,
      "time": 0.319671630859375,
      "error": null
    },
    "assert find_Divisor(4, 1) == 2": {
      "result": false,
      "time": 0.3116018772125244,
      "error": null
    },
    "assert find_Divisor(2, 7) == 2": {
      "result": true,
      "time": 0.28701043128967285,
      "error": null
    },
    "assert find_Divisor(2, 2) == 2": {
      "result": true,
      "time": 0.2710256576538086,
      "error": null
    },
    "assert find_Divisor(3, 9) == 2": {
      "result": true,
      "time": 0.28024816513061523,
      "error": null
    },
    "assert find_Divisor(1, 5) == 2": {
      "result": true,
      "time": 0.2904677391052246,
      "error": null
    },
    "assert find_Divisor(2, 9) == 2": {
      "result": true,
      "time": 0.26682615280151367,
      "error": null
    },
    "assert find_Divisor(7, 10) == 2": {
      "result": true,
      "time": 0.26026082038879395,
      "error": null
    },
    "assert find_Divisor(5, 3) == 2": {
      "result": false,
      "time": 0.27133941650390625,
      "error": null
    },
    "assert find_Divisor(1, 10) == 2": {
      "result": true,
      "time": 0.28620147705078125,
      "error": null
    },
    "assert find_Divisor(9, 10) == 2": {
      "result": true,
      "time": 0.3051416873931885,
      "error": null
    },
    "assert find_Divisor(4, 12) == 2": {
      "result": true,
      "time": 0.29022955894470215,
      "error": null
    },
    "assert find_Divisor(8, 7) == 2": {
      "result": false,
      "time": 0.2983541488647461,
      "error": null
    },
    "assert find_Divisor(3, 6) == 2": {
      "result": true,
      "time": 0.30292463302612305,
      "error": null
    },
    "assert find_Divisor(7, 6) == 2": {
      "result": false,
      "time": 0.29808902740478516,
      "error": null
    },
    "assert find_Divisor(2, 12) == 2": {
      "result": true,
      "time": 0.27581167221069336,
      "error": null
    },
    "assert find_Divisor(10, 9) == 2": {
      "result": false,
      "time": 0.2841517925262451,
      "error": null
    },
    "assert find_Divisor(5, 15) == 2": {
      "result": true,
      "time": 0.2768077850341797,
      "error": null
    },
    "assert find_Divisor(10, 12) == 2": {
      "result": true,
      "time": 0.3026697635650635,
      "error": null
    },
    "assert find_Divisor(9, 9) == 9": {
      "result": false,
      "time": 0.28177595138549805,
      "error": null
    },
    "assert find_Divisor(3, 12) == 2": {
      "result": true,
      "time": 0.27817773818969727,
      "error": null
    },
    "assert find_Divisor(4, 15) == 2": {
      "result": true,
      "time": 0.29624438285827637,
      "error": null
    },
    "assert find_Divisor(6, 12) == 2": {
      "result": true,
      "time": 0.28861403465270996,
      "error": null
    },
    "assert find_Divisor(9, 6) == 2": {
      "result": false,
      "time": 0.2814059257507324,
      "error": null
    },
    "assert find_Divisor(1, 12) == 2": {
      "result": true,
      "time": 0.28989553451538086,
      "error": null
    },
    "assert find_Divisor(1, 15) == 2": {
      "result": true,
      "time": 0.2888450622558594,
      "error": null
    },
    "assert find_Divisor(4, 11) == 2": {
      "result": true,
      "time": 0.27646327018737793,
      "error": null
    },
    "assert find_Divisor(1, 14) == 2": {
      "result": true,
      "time": 0.3130226135253906,
      "error": null
    },
    "assert find_Divisor(9, 14) == 2": {
      "result": true,
      "time": 0.25776004791259766,
      "error": null
    },
    "assert find_Divisor(6, 10) == 2": {
      "result": true,
      "time": 0.30292844772338867,
      "error": null
    },
    "assert find_Divisor(6, 15) == 2": {
      "result": true,
      "time": 0.2796003818511963,
      "error": null
    },
    "assert find_Divisor(7, 11) == 2": {
      "result": true,
      "time": 0.31391215324401855,
      "error": null
    },
    "assert find_Divisor(7, 15) == 2": {
      "result": true,
      "time": 0.2997400760650635,
      "error": null
    },
    "assert find_Divisor(8, 15) == 2": {
      "result": true,
      "time": 0.299088716506958,
      "error": null
    },
    "assert find_Divisor(9, 13) == 2": {
      "result": true,
      "time": 0.2693514823913574,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6470588235294118,
  "general_error": "",
  "has_testcase_error": false
}