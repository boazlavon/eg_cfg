{
  "code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None  # in case there are no even numbers, though test cases don't cover this",
  "results": {
    "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4": {
      "result": true,
      "time": 0.044071197509765625,
      "error": null
    },
    "assert first_even([2, 3, 4]) == 2": {
      "result": true,
      "time": 0.03643679618835449,
      "error": null
    },
    "assert first_even([5, 6, 7]) == 6": {
      "result": true,
      "time": 0.039281368255615234,
      "error": null
    },
    "assert first_even ([5, 6, 4, 10, 6, 6, 4, 7]) == 6": {
      "result": true,
      "time": 0.039350271224975586,
      "error": null
    },
    "assert first_even ([2, 4, 10, 11, 4, 2, 1, 7]) == 2": {
      "result": true,
      "time": 0.03475046157836914,
      "error": null
    },
    "assert first_even ([4, 5, 7, 2, 4, 6, 3, 3]) == 4": {
      "result": true,
      "time": 0.04091191291809082,
      "error": null
    },
    "assert first_even ([6, 3, 5, 11, 9, 3, 2, 11]) == 6": {
      "result": true,
      "time": 0.04452109336853027,
      "error": null
    },
    "assert first_even ([6, 6, 7, 5, 5, 5, 8, 10]) == 6": {
      "result": true,
      "time": 0.03779101371765137,
      "error": null
    },
    "assert first_even ([4, 8, 10, 8, 3, 5, 6, 9]) == 4": {
      "result": true,
      "time": 0.042999267578125,
      "error": null
    },
    "assert first_even ([2, 3, 9, 5, 5, 1, 10, 7]) == 2": {
      "result": true,
      "time": 0.039457082748413086,
      "error": null
    },
    "assert first_even ([3, 8, 7, 7, 5, 4, 2, 4]) == 8": {
      "result": true,
      "time": 0.043378353118896484,
      "error": null
    },
    "assert first_even ([4, 4, 6, 6, 2, 1, 5, 13]) == 4": {
      "result": true,
      "time": 0.03470587730407715,
      "error": null
    },
    "assert first_even ([5, 7, 9, 5, 5, 4, 5, 12]) == 4": {
      "result": true,
      "time": 0.03598213195800781,
      "error": null
    },
    "assert first_even ([3, 7, 1, 5, 3, 4, 3, 4]) == 4": {
      "result": true,
      "time": 0.04090166091918945,
      "error": null
    },
    "assert first_even ([1, 5, 5, 12, 7, 2, 7, 12]) == 12": {
      "result": true,
      "time": 0.03847146034240723,
      "error": null
    },
    "assert first_even ([1, 6, 5, 7, 1, 1, 10, 8]) == 6": {
      "result": true,
      "time": 0.03873181343078613,
      "error": null
    },
    "assert first_even ([4, 5, 7, 10, 1, 1, 7, 8]) == 4": {
      "result": true,
      "time": 0.03385019302368164,
      "error": null
    },
    "assert first_even ([2, 7, 10, 11, 7, 2, 1, 8]) == 2": {
      "result": true,
      "time": 0.04358315467834473,
      "error": null
    },
    "assert first_even ([2, 7, 10, 9, 7, 2, 1, 7]) == 2": {
      "result": true,
      "time": 0.04484128952026367,
      "error": null
    },
    "assert first_even ([1, 7, 9, 5, 3, 5, 2, 7]) == 2": {
      "result": true,
      "time": 0.03847026824951172,
      "error": null
    },
    "assert first_even ([2, 8, 7, 12, 9, 4, 1, 6]) == 2": {
      "result": true,
      "time": 0.03870415687561035,
      "error": null
    },
    "assert first_even ([4, 2, 2, 5, 5, 1, 6, 12]) == 4": {
      "result": true,
      "time": 0.042643070220947266,
      "error": null
    },
    "assert first_even ([1, 8, 2, 10, 9, 4, 11, 4]) == 8": {
      "result": true,
      "time": 0.04196667671203613,
      "error": null
    },
    "assert first_even ([5, 1, 8, 3, 1, 6, 8, 8]) == 8": {
      "result": true,
      "time": 0.03521585464477539,
      "error": null
    },
    "assert first_even ([6, 2, 10, 5, 9, 6, 5, 8]) == 6": {
      "result": true,
      "time": 0.04054856300354004,
      "error": null
    },
    "assert first_even ([4, 7, 5, 7, 3, 3, 1, 7]) == 4": {
      "result": true,
      "time": 0.04111528396606445,
      "error": null
    },
    "assert first_even ([2, 7, 2, 6, 5, 1, 9, 6]) == 2": {
      "result": true,
      "time": 0.04067850112915039,
      "error": null
    },
    "assert first_even ([4, 1, 2, 5, 2, 1, 7, 3]) == 4": {
      "result": true,
      "time": 0.03647899627685547,
      "error": null
    },
    "assert first_even ([2, 2, 5, 11, 5, 2, 2, 11]) == 2": {
      "result": true,
      "time": 0.0413815975189209,
      "error": null
    },
    "assert first_even ([6, 2, 3, 10, 4, 5, 11, 13]) == 6": {
      "result": true,
      "time": 0.03772592544555664,
      "error": null
    },
    "assert first_even ([3, 1, 6, 3, 9, 3, 9, 9]) == 6": {
      "result": true,
      "time": 0.038780927658081055,
      "error": null
    },
    "assert first_even ([3, 1, 7, 6, 4, 2, 5, 6]) == 6": {
      "result": true,
      "time": 0.030953168869018555,
      "error": null
    },
    "assert first_even ([5, 5, 5, 9, 1, 1, 11, 13]) == -1": {
      "result": false,
      "time": 0.03877758979797363,
      "error": null
    },
    "assert first_even ([3, 5, 7, 10, 6, 5, 8, 11]) == 10": {
      "result": true,
      "time": 0.04190707206726074,
      "error": null
    },
    "assert first_even ([1, 1, 2, 7, 5, 2, 11, 13]) == 2": {
      "result": true,
      "time": 0.03509330749511719,
      "error": null
    },
    "assert first_even ([2, 5, 6, 12, 1, 1, 10, 4]) == 2": {
      "result": true,
      "time": 0.036783695220947266,
      "error": null
    },
    "assert first_even ([7, 5, 1]) == -1": {
      "result": false,
      "time": 0.04000520706176758,
      "error": null
    },
    "assert first_even ([2, 5, 5]) == 2": {
      "result": true,
      "time": 0.038881778717041016,
      "error": null
    },
    "assert first_even ([5, 4, 8]) == 4": {
      "result": true,
      "time": 0.036561012268066406,
      "error": null
    },
    "assert first_even ([1, 3, 9]) == -1": {
      "result": false,
      "time": 0.0392613410949707,
      "error": null
    },
    "assert first_even ([6, 1, 1]) == 6": {
      "result": true,
      "time": 0.03674769401550293,
      "error": null
    },
    "assert first_even ([1, 8, 2]) == 8": {
      "result": true,
      "time": 0.03783702850341797,
      "error": null
    },
    "assert first_even ([7, 3, 8]) == 8": {
      "result": true,
      "time": 0.037143707275390625,
      "error": null
    },
    "assert first_even ([3, 8, 2]) == 8": {
      "result": true,
      "time": 0.0372922420501709,
      "error": null
    },
    "assert first_even ([4, 1, 7]) == 4": {
      "result": true,
      "time": 0.0393068790435791,
      "error": null
    },
    "assert first_even ([6, 7, 2]) == 6": {
      "result": true,
      "time": 0.03899955749511719,
      "error": null
    },
    "assert first_even ([1, 4, 2]) == 4": {
      "result": true,
      "time": 0.03620743751525879,
      "error": null
    },
    "assert first_even ([7, 3, 3]) == -1": {
      "result": false,
      "time": 0.04279184341430664,
      "error": null
    },
    "assert first_even ([7, 8, 7]) == 8": {
      "result": true,
      "time": 0.03996539115905762,
      "error": null
    },
    "assert first_even ([5, 2, 6]) == 2": {
      "result": true,
      "time": 0.043486833572387695,
      "error": null
    },
    "assert first_even ([2, 4, 7]) == 2": {
      "result": true,
      "time": 0.04466962814331055,
      "error": null
    },
    "assert first_even ([2, 8, 4]) == 2": {
      "result": true,
      "time": 0.0430903434753418,
      "error": null
    },
    "assert first_even ([4, 8, 1]) == 4": {
      "result": true,
      "time": 0.03867149353027344,
      "error": null
    },
    "assert first_even ([1, 2, 9]) == 2": {
      "result": true,
      "time": 0.04620647430419922,
      "error": null
    },
    "assert first_even ([5, 4, 7]) == 4": {
      "result": true,
      "time": 0.03852391242980957,
      "error": null
    },
    "assert first_even ([5, 1, 5]) == -1": {
      "result": false,
      "time": 0.040727853775024414,
      "error": null
    },
    "assert first_even ([1, 5, 5]) == -1": {
      "result": false,
      "time": 0.037268638610839844,
      "error": null
    },
    "assert first_even ([3, 3, 5]) == -1": {
      "result": false,
      "time": 0.03884315490722656,
      "error": null
    },
    "assert first_even ([1, 7, 8]) == 8": {
      "result": true,
      "time": 0.03960537910461426,
      "error": null
    },
    "assert first_even ([3, 2, 7]) == 2": {
      "result": true,
      "time": 0.03982186317443848,
      "error": null
    },
    "assert first_even ([5, 8, 8]) == 8": {
      "result": true,
      "time": 0.03852701187133789,
      "error": null
    },
    "assert first_even ([4, 1, 1]) == 4": {
      "result": true,
      "time": 0.03844118118286133,
      "error": null
    },
    "assert first_even ([1, 1, 1]) == -1": {
      "result": false,
      "time": 0.03970003128051758,
      "error": null
    },
    "assert first_even ([2, 6, 1]) == 2": {
      "result": true,
      "time": 0.04273581504821777,
      "error": null
    },
    "assert first_even ([4, 5, 3]) == 4": {
      "result": true,
      "time": 0.036275386810302734,
      "error": null
    },
    "assert first_even ([3, 4, 1]) == 4": {
      "result": true,
      "time": 0.042875051498413086,
      "error": null
    },
    "assert first_even ([2, 8, 9]) == 2": {
      "result": true,
      "time": 0.03669857978820801,
      "error": null
    },
    "assert first_even ([4, 4, 1]) == 4": {
      "result": true,
      "time": 0.041973114013671875,
      "error": null
    },
    "assert first_even ([4, 3, 12]) == 4": {
      "result": true,
      "time": 0.041181325912475586,
      "error": null
    },
    "assert first_even ([3, 9, 10]) == 10": {
      "result": true,
      "time": 0.044213056564331055,
      "error": null
    },
    "assert first_even ([1, 8, 9]) == 8": {
      "result": true,
      "time": 0.03724265098571777,
      "error": null
    },
    "assert first_even ([9, 4, 3]) == 4": {
      "result": true,
      "time": 0.051077842712402344,
      "error": null
    },
    "assert first_even ([5, 7, 3]) == -1": {
      "result": false,
      "time": 0.036475181579589844,
      "error": null
    },
    "assert first_even ([6, 1, 4]) == 6": {
      "result": true,
      "time": 0.03447270393371582,
      "error": null
    },
    "assert first_even ([1, 3, 2]) == 2": {
      "result": true,
      "time": 0.034951210021972656,
      "error": null
    },
    "assert first_even ([2, 2, 2]) == 2": {
      "result": true,
      "time": 0.044109344482421875,
      "error": null
    },
    "assert first_even ([5, 8, 7]) == 8": {
      "result": true,
      "time": 0.03708076477050781,
      "error": null
    },
    "assert first_even ([6, 4, 7]) == 6": {
      "result": true,
      "time": 0.03715109825134277,
      "error": null
    },
    "assert first_even ([8, 2, 7]) == 8": {
      "result": true,
      "time": 0.03968024253845215,
      "error": null
    },
    "assert first_even ([7, 1, 10]) == 10": {
      "result": true,
      "time": 0.03978371620178223,
      "error": null
    },
    "assert first_even ([2, 1, 11]) == 2": {
      "result": true,
      "time": 0.03941988945007324,
      "error": null
    },
    "assert first_even ([10, 2, 2]) == 10": {
      "result": true,
      "time": 0.037604570388793945,
      "error": null
    },
    "assert first_even ([7, 2, 9]) == 2": {
      "result": true,
      "time": 0.0360264778137207,
      "error": null
    },
    "assert first_even ([9, 7, 10]) == 10": {
      "result": true,
      "time": 0.04082775115966797,
      "error": null
    },
    "assert first_even ([9, 10, 3]) == 10": {
      "result": true,
      "time": 0.031249284744262695,
      "error": null
    },
    "assert first_even ([2, 4, 5]) == 2": {
      "result": true,
      "time": 0.03945589065551758,
      "error": null
    },
    "assert first_even ([10, 9, 9]) == 10": {
      "result": true,
      "time": 0.03995680809020996,
      "error": null
    },
    "assert first_even ([4, 2, 3]) == 4": {
      "result": true,
      "time": 0.03563380241394043,
      "error": null
    },
    "assert first_even ([8, 9, 10]) == 8": {
      "result": true,
      "time": 0.032294511795043945,
      "error": null
    },
    "assert first_even ([4, 3, 9]) == 4": {
      "result": true,
      "time": 0.04166293144226074,
      "error": null
    },
    "assert first_even ([1, 1, 6]) == 6": {
      "result": true,
      "time": 0.03470873832702637,
      "error": null
    },
    "assert first_even ([7, 6, 3]) == 6": {
      "result": true,
      "time": 0.034707069396972656,
      "error": null
    },
    "assert first_even ([6, 7, 3]) == 6": {
      "result": true,
      "time": 0.03807473182678223,
      "error": null
    },
    "assert first_even ([8, 4, 10]) == 8": {
      "result": true,
      "time": 0.03751707077026367,
      "error": null
    },
    "assert first_even ([6, 3, 2]) == 6": {
      "result": true,
      "time": 0.035279273986816406,
      "error": null
    },
    "assert first_even ([8, 4, 9]) == 8": {
      "result": true,
      "time": 0.037285804748535156,
      "error": null
    },
    "assert first_even ([6, 2, 2]) == 6": {
      "result": true,
      "time": 0.03621935844421387,
      "error": null
    },
    "assert first_even ([1, 5, 6]) == 6": {
      "result": true,
      "time": 0.03681755065917969,
      "error": null
    },
    "assert first_even ([10, 3, 10]) == 10": {
      "result": true,
      "time": 0.036971330642700195,
      "error": null
    },
    "assert first_even ([4, 10, 6]) == 4": {
      "result": true,
      "time": 0.0397038459777832,
      "error": null
    },
    "assert first_even ([1, 1, 12]) == 12": {
      "result": true,
      "time": 0.0365300178527832,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9108910891089109,
  "general_error": "",
  "has_testcase_error": false
}