{
  "code": "def closest_num(n):\n    return n - 1",
  "results": {
    "assert closest_num(11) == 10": {
      "result": true,
      "time": 0.04221200942993164,
      "error": null
    },
    "assert closest_num(7) == 6": {
      "result": true,
      "time": 0.03677654266357422,
      "error": null
    },
    "assert closest_num(12) == 11": {
      "result": true,
      "time": 0.04125714302062988,
      "error": null
    },
    "assert closest_num(8) == 7": {
      "result": true,
      "time": 0.0369565486907959,
      "error": null
    },
    "assert closest_num(10) == 9": {
      "result": true,
      "time": 0.034215450286865234,
      "error": null
    },
    "assert closest_num(16) == 15": {
      "result": true,
      "time": 0.04506063461303711,
      "error": null
    },
    "assert closest_num(15) == 14": {
      "result": true,
      "time": 0.03654956817626953,
      "error": null
    },
    "assert closest_num(14) == 13": {
      "result": true,
      "time": 0.037960052490234375,
      "error": null
    },
    "assert closest_num(9) == 8": {
      "result": true,
      "time": 0.04166078567504883,
      "error": null
    },
    "assert closest_num(13) == 12": {
      "result": true,
      "time": 0.03863382339477539,
      "error": null
    },
    "assert closest_num(6) == 5": {
      "result": true,
      "time": 0.04072904586791992,
      "error": null
    },
    "assert closest_num(2) == 1": {
      "result": true,
      "time": 0.037790536880493164,
      "error": null
    },
    "assert closest_num(3) == 2": {
      "result": true,
      "time": 0.03394770622253418,
      "error": null
    },
    "assert closest_num(5) == 4": {
      "result": true,
      "time": 0.034256935119628906,
      "error": null
    },
    "assert closest_num(4) == 3": {
      "result": true,
      "time": 0.03443002700805664,
      "error": null
    },
    "assert closest_num(17) == 16": {
      "result": true,
      "time": 0.035605669021606445,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}