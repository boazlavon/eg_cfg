{
  "code": "def check_equilateral(a, b, c):\n    return a == b == c != 0",
  "results": {
    "assert check_equilateral(6,8,12)==False ": {
      "result": true,
      "time": 0.03816413879394531,
      "error": null
    },
    "assert check_equilateral(6,6,12)==False": {
      "result": true,
      "time": 0.04192185401916504,
      "error": null
    },
    "assert check_equilateral(6,6,6)==True": {
      "result": true,
      "time": 0.03576183319091797,
      "error": null
    },
    "assert check_equilateral(2, 12, 13) == False": {
      "result": true,
      "time": 0.03482961654663086,
      "error": null
    },
    "assert check_equilateral(3, 6, 7) == False": {
      "result": true,
      "time": 0.034360408782958984,
      "error": null
    },
    "assert check_equilateral(1, 10, 11) == False": {
      "result": true,
      "time": 0.04410529136657715,
      "error": null
    },
    "assert check_equilateral(1, 6, 16) == False": {
      "result": true,
      "time": 0.0339198112487793,
      "error": null
    },
    "assert check_equilateral(4, 7, 12) == False": {
      "result": true,
      "time": 0.034356117248535156,
      "error": null
    },
    "assert check_equilateral(3, 12, 13) == False": {
      "result": true,
      "time": 0.04018807411193848,
      "error": null
    },
    "assert check_equilateral(4, 12, 8) == False": {
      "result": true,
      "time": 0.03708338737487793,
      "error": null
    },
    "assert check_equilateral(10, 10, 14) == False": {
      "result": true,
      "time": 0.04120945930480957,
      "error": null
    },
    "assert check_equilateral(4, 11, 7) == False": {
      "result": true,
      "time": 0.0457301139831543,
      "error": null
    },
    "assert check_equilateral(11, 13, 15) == False": {
      "result": true,
      "time": 0.03388094902038574,
      "error": null
    },
    "assert check_equilateral(6, 9, 10) == False": {
      "result": true,
      "time": 0.032761335372924805,
      "error": null
    },
    "assert check_equilateral(1, 10, 8) == False": {
      "result": true,
      "time": 0.03859758377075195,
      "error": null
    },
    "assert check_equilateral(1, 8, 17) == False": {
      "result": true,
      "time": 0.0463714599609375,
      "error": null
    },
    "assert check_equilateral(2, 4, 16) == False": {
      "result": true,
      "time": 0.04012608528137207,
      "error": null
    },
    "assert check_equilateral(10, 13, 15) == False": {
      "result": true,
      "time": 0.041883230209350586,
      "error": null
    },
    "assert check_equilateral(2, 5, 9) == False": {
      "result": true,
      "time": 0.03876757621765137,
      "error": null
    },
    "assert check_equilateral(8, 4, 17) == False": {
      "result": true,
      "time": 0.03797149658203125,
      "error": null
    },
    "assert check_equilateral(6, 13, 10) == False": {
      "result": true,
      "time": 0.0373685359954834,
      "error": null
    },
    "assert check_equilateral(10, 10, 11) == False": {
      "result": true,
      "time": 0.036257028579711914,
      "error": null
    },
    "assert check_equilateral(1, 10, 12) == False": {
      "result": true,
      "time": 0.0351107120513916,
      "error": null
    },
    "assert check_equilateral(5, 9, 12) == False": {
      "result": true,
      "time": 0.03369617462158203,
      "error": null
    },
    "assert check_equilateral(4, 4, 9) == False": {
      "result": true,
      "time": 0.04014730453491211,
      "error": null
    },
    "assert check_equilateral(6, 7, 16) == False": {
      "result": true,
      "time": 0.043367624282836914,
      "error": null
    },
    "assert check_equilateral(10, 12, 7) == False": {
      "result": true,
      "time": 0.038062334060668945,
      "error": null
    },
    "assert check_equilateral(8, 8, 14) == False": {
      "result": true,
      "time": 0.03335404396057129,
      "error": null
    },
    "assert check_equilateral(6, 13, 14) == False": {
      "result": true,
      "time": 0.03586912155151367,
      "error": null
    },
    "assert check_equilateral(8, 10, 9) == False": {
      "result": true,
      "time": 0.03573274612426758,
      "error": null
    },
    "assert check_equilateral(10, 11, 8) == False": {
      "result": true,
      "time": 0.03565526008605957,
      "error": null
    },
    "assert check_equilateral(6, 3, 8) == False": {
      "result": true,
      "time": 0.037403106689453125,
      "error": null
    },
    "assert check_equilateral(11, 8, 13) == False": {
      "result": true,
      "time": 0.03417038917541504,
      "error": null
    },
    "assert check_equilateral(4, 9, 7) == False": {
      "result": true,
      "time": 0.03053426742553711,
      "error": null
    },
    "assert check_equilateral(4, 10, 8) == False": {
      "result": true,
      "time": 0.03734469413757324,
      "error": null
    },
    "assert check_equilateral(7, 1, 10) == False": {
      "result": true,
      "time": 0.03483271598815918,
      "error": null
    },
    "assert check_equilateral(2, 10, 11) == False": {
      "result": true,
      "time": 0.0342104434967041,
      "error": null
    },
    "assert check_equilateral(9, 5, 12) == False": {
      "result": true,
      "time": 0.037268638610839844,
      "error": null
    },
    "assert check_equilateral(5, 4, 16) == False": {
      "result": true,
      "time": 0.032544851303100586,
      "error": null
    },
    "assert check_equilateral(6, 11, 17) == False": {
      "result": true,
      "time": 0.03159928321838379,
      "error": null
    },
    "assert check_equilateral(9, 5, 11) == False": {
      "result": true,
      "time": 0.035941362380981445,
      "error": null
    },
    "assert check_equilateral(8, 10, 17) == False": {
      "result": true,
      "time": 0.033188581466674805,
      "error": null
    },
    "assert check_equilateral(6, 4, 17) == False": {
      "result": true,
      "time": 0.03166627883911133,
      "error": null
    },
    "assert check_equilateral(10, 10, 8) == False": {
      "result": true,
      "time": 0.033261775970458984,
      "error": null
    },
    "assert check_equilateral(8, 7, 8) == False": {
      "result": true,
      "time": 0.03275728225708008,
      "error": null
    },
    "assert check_equilateral(2, 5, 12) == False": {
      "result": true,
      "time": 0.03624749183654785,
      "error": null
    },
    "assert check_equilateral(8, 1, 9) == False": {
      "result": true,
      "time": 0.03505706787109375,
      "error": null
    },
    "assert check_equilateral(4, 1, 8) == False": {
      "result": true,
      "time": 0.027777910232543945,
      "error": null
    },
    "assert check_equilateral(11, 8, 12) == False": {
      "result": true,
      "time": 0.03250241279602051,
      "error": null
    },
    "assert check_equilateral(2, 4, 14) == False": {
      "result": true,
      "time": 0.036128997802734375,
      "error": null
    },
    "assert check_equilateral(5, 2, 11) == False": {
      "result": true,
      "time": 0.033097028732299805,
      "error": null
    },
    "assert check_equilateral(7, 2, 15) == False": {
      "result": true,
      "time": 0.036423683166503906,
      "error": null
    },
    "assert check_equilateral(5, 11, 14) == False": {
      "result": true,
      "time": 0.03553438186645508,
      "error": null
    },
    "assert check_equilateral(11, 7, 11) == False": {
      "result": true,
      "time": 0.03818941116333008,
      "error": null
    },
    "assert check_equilateral(4, 1, 17) == False": {
      "result": true,
      "time": 0.03583812713623047,
      "error": null
    },
    "assert check_equilateral(2, 11, 16) == False": {
      "result": true,
      "time": 0.03320193290710449,
      "error": null
    },
    "assert check_equilateral(11, 8, 8) == False": {
      "result": true,
      "time": 0.0410771369934082,
      "error": null
    },
    "assert check_equilateral(6, 1, 12) == False": {
      "result": true,
      "time": 0.03390192985534668,
      "error": null
    },
    "assert check_equilateral(7, 7, 14) == False": {
      "result": true,
      "time": 0.035895586013793945,
      "error": null
    },
    "assert check_equilateral(4, 3, 7) == False": {
      "result": true,
      "time": 0.027130842208862305,
      "error": null
    },
    "assert check_equilateral(8, 2, 15) == False": {
      "result": true,
      "time": 0.034177541732788086,
      "error": null
    },
    "assert check_equilateral(10, 5, 13) == False": {
      "result": true,
      "time": 0.03449583053588867,
      "error": null
    },
    "assert check_equilateral(2, 5, 10) == False": {
      "result": true,
      "time": 0.03763699531555176,
      "error": null
    },
    "assert check_equilateral(5, 6, 16) == False": {
      "result": true,
      "time": 0.032973527908325195,
      "error": null
    },
    "assert check_equilateral(11, 7, 16) == False": {
      "result": true,
      "time": 0.03522491455078125,
      "error": null
    },
    "assert check_equilateral(1, 2, 17) == False": {
      "result": true,
      "time": 0.03419685363769531,
      "error": null
    },
    "assert check_equilateral(6, 11, 2) == False": {
      "result": true,
      "time": 0.034729957580566406,
      "error": null
    },
    "assert check_equilateral(9, 11, 1) == False": {
      "result": true,
      "time": 0.04102778434753418,
      "error": null
    },
    "assert check_equilateral(11, 1, 11) == False": {
      "result": true,
      "time": 0.033666133880615234,
      "error": null
    },
    "assert check_equilateral(11, 9, 11) == False": {
      "result": true,
      "time": 0.03649020195007324,
      "error": null
    },
    "assert check_equilateral(6, 7, 6) == False": {
      "result": true,
      "time": 0.033121347427368164,
      "error": null
    },
    "assert check_equilateral(7, 10, 7) == False": {
      "result": true,
      "time": 0.03258347511291504,
      "error": null
    },
    "assert check_equilateral(5, 6, 10) == False": {
      "result": true,
      "time": 0.03750729560852051,
      "error": null
    },
    "assert check_equilateral(10, 9, 2) == False": {
      "result": true,
      "time": 0.03737926483154297,
      "error": null
    },
    "assert check_equilateral(4, 10, 7) == False": {
      "result": true,
      "time": 0.04077625274658203,
      "error": null
    },
    "assert check_equilateral(1, 10, 10) == False": {
      "result": true,
      "time": 0.034201622009277344,
      "error": null
    },
    "assert check_equilateral(9, 10, 8) == False": {
      "result": true,
      "time": 0.0286715030670166,
      "error": null
    },
    "assert check_equilateral(3, 3, 8) == False": {
      "result": true,
      "time": 0.03694510459899902,
      "error": null
    },
    "assert check_equilateral(1, 4, 2) == False": {
      "result": true,
      "time": 0.036080121994018555,
      "error": null
    },
    "assert check_equilateral(10, 4, 7) == False": {
      "result": true,
      "time": 0.034711599349975586,
      "error": null
    },
    "assert check_equilateral(2, 11, 1) == False": {
      "result": true,
      "time": 0.034342288970947266,
      "error": null
    },
    "assert check_equilateral(10, 10, 5) == False": {
      "result": true,
      "time": 0.03413653373718262,
      "error": null
    },
    "assert check_equilateral(2, 3, 7) == False": {
      "result": true,
      "time": 0.03519868850708008,
      "error": null
    },
    "assert check_equilateral(7, 3, 7) == False": {
      "result": true,
      "time": 0.03354978561401367,
      "error": null
    },
    "assert check_equilateral(6, 7, 9) == False": {
      "result": true,
      "time": 0.030590057373046875,
      "error": null
    },
    "assert check_equilateral(6, 4, 8) == False": {
      "result": true,
      "time": 0.032874345779418945,
      "error": null
    },
    "assert check_equilateral(3, 2, 6) == False": {
      "result": true,
      "time": 0.03284764289855957,
      "error": null
    },
    "assert check_equilateral(7, 8, 7) == False": {
      "result": true,
      "time": 0.03567075729370117,
      "error": null
    },
    "assert check_equilateral(4, 7, 7) == False": {
      "result": true,
      "time": 0.03891348838806152,
      "error": null
    },
    "assert check_equilateral(11, 8, 4) == False": {
      "result": true,
      "time": 0.03585457801818848,
      "error": null
    },
    "assert check_equilateral(10, 3, 1) == False": {
      "result": true,
      "time": 0.03479957580566406,
      "error": null
    },
    "assert check_equilateral(3, 11, 6) == False": {
      "result": true,
      "time": 0.03080129623413086,
      "error": null
    },
    "assert check_equilateral(5, 11, 10) == False": {
      "result": true,
      "time": 0.04060077667236328,
      "error": null
    },
    "assert check_equilateral(11, 8, 5) == False": {
      "result": true,
      "time": 0.03829336166381836,
      "error": null
    },
    "assert check_equilateral(6, 11, 6) == False": {
      "result": true,
      "time": 0.036969661712646484,
      "error": null
    },
    "assert check_equilateral(9, 6, 11) == False": {
      "result": true,
      "time": 0.03936314582824707,
      "error": null
    },
    "assert check_equilateral(6, 2, 4) == False": {
      "result": true,
      "time": 0.03496432304382324,
      "error": null
    },
    "assert check_equilateral(1, 3, 3) == False": {
      "result": true,
      "time": 0.03663992881774902,
      "error": null
    },
    "assert check_equilateral(5, 1, 1) == False": {
      "result": true,
      "time": 0.03798341751098633,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}