{
  "code": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
  "results": {
    "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3": {
      "result": true,
      "time": 0.07123327255249023,
      "error": null
    },
    "assert count_first_elements((2, 9, (5, 7), 11) ) == 2": {
      "result": true,
      "time": 0.056844472885131836,
      "error": null
    },
    "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4": {
      "result": true,
      "time": 0.056061744689941406,
      "error": null
    },
    "assert count_first_elements((6, 1, 7, (5, 10), 6)) == 3": {
      "result": true,
      "time": 0.047258853912353516,
      "error": null
    },
    "assert count_first_elements((6, 2, 4, (7, 8), 7)) == 3": {
      "result": true,
      "time": 0.05126237869262695,
      "error": null
    },
    "assert count_first_elements((5, 5, 3, (1, 5), 14)) == 3": {
      "result": true,
      "time": 0.04074215888977051,
      "error": null
    },
    "assert count_first_elements((1, 3, 7, (5, 3), 15)) == 3": {
      "result": true,
      "time": 0.06401467323303223,
      "error": null
    },
    "assert count_first_elements((1, 1, 2, (5, 3), 6)) == 3": {
      "result": true,
      "time": 0.05825185775756836,
      "error": null
    },
    "assert count_first_elements((4, 4, 4, (2, 2), 12)) == 3": {
      "result": true,
      "time": 0.05112862586975098,
      "error": null
    },
    "assert count_first_elements((6, 6, 9, (5, 10), 13)) == 3": {
      "result": true,
      "time": 0.059741973876953125,
      "error": null
    },
    "assert count_first_elements((4, 6, 4, (9, 2), 15)) == 3": {
      "result": true,
      "time": 0.0557408332824707,
      "error": null
    },
    "assert count_first_elements((2, 4, 9, (7, 7), 7)) == 3": {
      "result": true,
      "time": 0.05707526206970215,
      "error": null
    },
    "assert count_first_elements((3, 8, 6, (8, 7), 8)) == 3": {
      "result": true,
      "time": 0.05563783645629883,
      "error": null
    },
    "assert count_first_elements((6, 1, 7, (2, 2), 6)) == 3": {
      "result": true,
      "time": 0.060014963150024414,
      "error": null
    },
    "assert count_first_elements((1, 5, 2, (3, 10), 9)) == 3": {
      "result": true,
      "time": 0.04983186721801758,
      "error": null
    },
    "assert count_first_elements((1, 6, 11, (4, 2), 9)) == 3": {
      "result": true,
      "time": 0.06499934196472168,
      "error": null
    },
    "assert count_first_elements((1, 6, 6, (4, 7), 5)) == 3": {
      "result": true,
      "time": 0.044999122619628906,
      "error": null
    },
    "assert count_first_elements((6, 10, 6, (9, 8), 5)) == 3": {
      "result": true,
      "time": 0.04802870750427246,
      "error": null
    },
    "assert count_first_elements((5, 1, 7, (3, 8), 7)) == 3": {
      "result": true,
      "time": 0.049468040466308594,
      "error": null
    },
    "assert count_first_elements((6, 6, 8, (6, 10), 14)) == 3": {
      "result": true,
      "time": 0.04903721809387207,
      "error": null
    },
    "assert count_first_elements((3, 6, 6, (9, 6), 10)) == 3": {
      "result": true,
      "time": 0.06524515151977539,
      "error": null
    },
    "assert count_first_elements((3, 4, 9, (9, 7), 6)) == 3": {
      "result": true,
      "time": 0.060066938400268555,
      "error": null
    },
    "assert count_first_elements((1, 8, 2, (9, 8), 5)) == 3": {
      "result": true,
      "time": 0.05266594886779785,
      "error": null
    },
    "assert count_first_elements((4, 4, 8, (4, 9), 7)) == 3": {
      "result": true,
      "time": 0.05780458450317383,
      "error": null
    },
    "assert count_first_elements((6, 2, 2, (2, 8), 10)) == 3": {
      "result": true,
      "time": 0.04043722152709961,
      "error": null
    },
    "assert count_first_elements((1, 8, 12, (1, 5), 9)) == 3": {
      "result": true,
      "time": 0.03389143943786621,
      "error": null
    },
    "assert count_first_elements((1, 9, 10, (4, 6), 14)) == 3": {
      "result": true,
      "time": 0.042737483978271484,
      "error": null
    },
    "assert count_first_elements((5, 2, 7, (4, 8), 8)) == 3": {
      "result": true,
      "time": 0.047844886779785156,
      "error": null
    },
    "assert count_first_elements((2, 3, 3, (3, 11), 11)) == 3": {
      "result": true,
      "time": 0.05034303665161133,
      "error": null
    },
    "assert count_first_elements((4, 3, 7, (1, 7), 10)) == 3": {
      "result": true,
      "time": 0.05042600631713867,
      "error": null
    },
    "assert count_first_elements((3, 10, 10, (7, 8), 11)) == 3": {
      "result": true,
      "time": 0.04973411560058594,
      "error": null
    },
    "assert count_first_elements((3, 2, 6, (9, 1), 8)) == 3": {
      "result": true,
      "time": 0.04325985908508301,
      "error": null
    },
    "assert count_first_elements((6, 10, 4, (3, 11), 5)) == 3": {
      "result": true,
      "time": 0.04937887191772461,
      "error": null
    },
    "assert count_first_elements((4, 5, 8, (8, 3), 7)) == 3": {
      "result": true,
      "time": 0.045226335525512695,
      "error": null
    },
    "assert count_first_elements((3, 8, 8, (7, 5), 7)) == 3": {
      "result": true,
      "time": 0.03749847412109375,
      "error": null
    },
    "assert count_first_elements((6, 5, 9, (1, 10), 15)) == 3": {
      "result": true,
      "time": 0.046701908111572266,
      "error": null
    },
    "assert count_first_elements((1, 7, (6, 8), 7)) == 2": {
      "result": true,
      "time": 0.04716062545776367,
      "error": null
    },
    "assert count_first_elements((2, 5, (10, 5), 15)) == 2": {
      "result": true,
      "time": 0.04899311065673828,
      "error": null
    },
    "assert count_first_elements((1, 8, (1, 4), 6)) == 2": {
      "result": true,
      "time": 0.05494213104248047,
      "error": null
    },
    "assert count_first_elements((7, 4, (10, 12), 9)) == 2": {
      "result": true,
      "time": 0.05481719970703125,
      "error": null
    },
    "assert count_first_elements((6, 8, (8, 9), 9)) == 2": {
      "result": true,
      "time": 0.04717087745666504,
      "error": null
    },
    "assert count_first_elements((2, 6, (6, 11), 8)) == 2": {
      "result": true,
      "time": 0.04300999641418457,
      "error": null
    },
    "assert count_first_elements((3, 13, (1, 11), 12)) == 2": {
      "result": true,
      "time": 0.04098200798034668,
      "error": null
    },
    "assert count_first_elements((1, 12, (8, 5), 13)) == 2": {
      "result": true,
      "time": 0.050426483154296875,
      "error": null
    },
    "assert count_first_elements((6, 12, (4, 8), 14)) == 2": {
      "result": true,
      "time": 0.04361772537231445,
      "error": null
    },
    "assert count_first_elements((1, 13, (2, 8), 15)) == 2": {
      "result": true,
      "time": 0.036217451095581055,
      "error": null
    },
    "assert count_first_elements((5, 4, (9, 7), 7)) == 2": {
      "result": true,
      "time": 0.04707479476928711,
      "error": null
    },
    "assert count_first_elements((3, 5, (9, 8), 7)) == 2": {
      "result": true,
      "time": 0.049494266510009766,
      "error": null
    },
    "assert count_first_elements((2, 10, (4, 7), 9)) == 2": {
      "result": true,
      "time": 0.05052685737609863,
      "error": null
    },
    "assert count_first_elements((3, 4, (6, 12), 8)) == 2": {
      "result": true,
      "time": 0.043172359466552734,
      "error": null
    },
    "assert count_first_elements((2, 6, (10, 10), 10)) == 2": {
      "result": true,
      "time": 0.042530059814453125,
      "error": null
    },
    "assert count_first_elements((7, 7, (8, 10), 12)) == 2": {
      "result": true,
      "time": 0.041435956954956055,
      "error": null
    },
    "assert count_first_elements((4, 13, (4, 6), 8)) == 2": {
      "result": true,
      "time": 0.04571080207824707,
      "error": null
    },
    "assert count_first_elements((2, 13, (9, 6), 10)) == 2": {
      "result": true,
      "time": 0.04235649108886719,
      "error": null
    },
    "assert count_first_elements((3, 7, (9, 9), 11)) == 2": {
      "result": true,
      "time": 0.046051025390625,
      "error": null
    },
    "assert count_first_elements((3, 14, (10, 10), 8)) == 2": {
      "result": true,
      "time": 0.043335914611816406,
      "error": null
    },
    "assert count_first_elements((6, 7, (8, 7), 12)) == 2": {
      "result": true,
      "time": 0.03770089149475098,
      "error": null
    },
    "assert count_first_elements((7, 9, (10, 3), 14)) == 2": {
      "result": true,
      "time": 0.042900800704956055,
      "error": null
    },
    "assert count_first_elements((3, 9, (4, 8), 12)) == 2": {
      "result": true,
      "time": 0.04822373390197754,
      "error": null
    },
    "assert count_first_elements((7, 7, (5, 2), 12)) == 2": {
      "result": true,
      "time": 0.0439298152923584,
      "error": null
    },
    "assert count_first_elements((6, 12, (9, 6), 9)) == 2": {
      "result": true,
      "time": 0.03931450843811035,
      "error": null
    },
    "assert count_first_elements((4, 7, (1, 5), 6)) == 2": {
      "result": true,
      "time": 0.04753518104553223,
      "error": null
    },
    "assert count_first_elements((6, 5, (7, 3), 16)) == 2": {
      "result": true,
      "time": 0.03795027732849121,
      "error": null
    },
    "assert count_first_elements((6, 13, (5, 12), 6)) == 2": {
      "result": true,
      "time": 0.05280280113220215,
      "error": null
    },
    "assert count_first_elements((1, 6, (5, 4), 11)) == 2": {
      "result": true,
      "time": 0.038628339767456055,
      "error": null
    },
    "assert count_first_elements((3, 9, (4, 4), 8)) == 2": {
      "result": true,
      "time": 0.05153989791870117,
      "error": null
    },
    "assert count_first_elements((6, 7, (3, 12), 16)) == 2": {
      "result": true,
      "time": 0.043740034103393555,
      "error": null
    },
    "assert count_first_elements((2, 5, (3, 3), 9)) == 2": {
      "result": true,
      "time": 0.04256916046142578,
      "error": null
    },
    "assert count_first_elements((5, 6, (2, 9), 12)) == 2": {
      "result": true,
      "time": 0.047342538833618164,
      "error": null
    },
    "assert count_first_elements((7, 16, 4, 9, (3, 3), 10)) == 4": {
      "result": true,
      "time": 0.04413247108459473,
      "error": null
    },
    "assert count_first_elements((6, 15, 8, 7, (3, 3), 9)) == 4": {
      "result": true,
      "time": 0.042000532150268555,
      "error": null
    },
    "assert count_first_elements((15, 13, 9, 8, (3, 4), 13)) == 4": {
      "result": true,
      "time": 0.03785586357116699,
      "error": null
    },
    "assert count_first_elements((10, 18, 10, 5, (6, 6), 7)) == 4": {
      "result": true,
      "time": 0.04690074920654297,
      "error": null
    },
    "assert count_first_elements((11, 13, 8, 5, (6, 6), 6)) == 4": {
      "result": true,
      "time": 0.04018545150756836,
      "error": null
    },
    "assert count_first_elements((12, 16, 10, 13, (6, 3), 3)) == 4": {
      "result": true,
      "time": 0.04275035858154297,
      "error": null
    },
    "assert count_first_elements((9, 13, 7, 8, (5, 4), 9)) == 4": {
      "result": true,
      "time": 0.04520392417907715,
      "error": null
    },
    "assert count_first_elements((11, 10, 10, 10, (7, 8), 4)) == 4": {
      "result": true,
      "time": 0.039292335510253906,
      "error": null
    },
    "assert count_first_elements((7, 17, 4, 8, (4, 2), 9)) == 4": {
      "result": true,
      "time": 0.050084829330444336,
      "error": null
    },
    "assert count_first_elements((7, 17, 6, 9, (2, 3), 8)) == 4": {
      "result": true,
      "time": 0.04350447654724121,
      "error": null
    },
    "assert count_first_elements((16, 17, 3, 7, (3, 1), 13)) == 4": {
      "result": true,
      "time": 0.041747093200683594,
      "error": null
    },
    "assert count_first_elements((12, 19, 10, 5, (3, 6), 12)) == 4": {
      "result": true,
      "time": 0.04859614372253418,
      "error": null
    },
    "assert count_first_elements((10, 13, 6, 13, (5, 7), 10)) == 4": {
      "result": true,
      "time": 0.04217410087585449,
      "error": null
    },
    "assert count_first_elements((15, 15, 3, 11, (2, 6), 6)) == 4": {
      "result": true,
      "time": 0.0381314754486084,
      "error": null
    },
    "assert count_first_elements((8, 20, 9, 8, (2, 6), 9)) == 4": {
      "result": true,
      "time": 0.047396183013916016,
      "error": null
    },
    "assert count_first_elements((13, 16, 3, 10, (7, 5), 12)) == 4": {
      "result": true,
      "time": 0.04892849922180176,
      "error": null
    },
    "assert count_first_elements((15, 13, 5, 10, (5, 6), 6)) == 4": {
      "result": true,
      "time": 0.03853297233581543,
      "error": null
    },
    "assert count_first_elements((9, 13, 7, 4, (3, 6), 7)) == 4": {
      "result": true,
      "time": 0.0398554801940918,
      "error": null
    },
    "assert count_first_elements((12, 15, 4, 9, (1, 5), 12)) == 4": {
      "result": true,
      "time": 0.04886507987976074,
      "error": null
    },
    "assert count_first_elements((14, 20, 1, 10, (2, 1), 10)) == 4": {
      "result": true,
      "time": 0.0392918586730957,
      "error": null
    },
    "assert count_first_elements((16, 10, 2, 7, (2, 3), 7)) == 4": {
      "result": true,
      "time": 0.042469024658203125,
      "error": null
    },
    "assert count_first_elements((9, 10, 4, 11, (7, 3), 13)) == 4": {
      "result": true,
      "time": 0.04893088340759277,
      "error": null
    },
    "assert count_first_elements((8, 17, 10, 8, (5, 3), 4)) == 4": {
      "result": true,
      "time": 0.050418853759765625,
      "error": null
    },
    "assert count_first_elements((13, 12, 3, 10, (7, 8), 9)) == 4": {
      "result": true,
      "time": 0.03778409957885742,
      "error": null
    },
    "assert count_first_elements((10, 13, 7, 7, (7, 4), 6)) == 4": {
      "result": true,
      "time": 0.036872148513793945,
      "error": null
    },
    "assert count_first_elements((13, 18, 10, 12, (6, 1), 8)) == 4": {
      "result": true,
      "time": 0.038986921310424805,
      "error": null
    },
    "assert count_first_elements((10, 19, 10, 7, (2, 4), 10)) == 4": {
      "result": true,
      "time": 0.040529727935791016,
      "error": null
    },
    "assert count_first_elements((9, 10, 2, 11, (4, 4), 8)) == 4": {
      "result": true,
      "time": 0.04337143898010254,
      "error": null
    },
    "assert count_first_elements((12, 10, 4, 13, (3, 1), 6)) == 4": {
      "result": true,
      "time": 0.045221805572509766,
      "error": null
    },
    "assert count_first_elements((15, 19, 5, 13, (1, 5), 4)) == 4": {
      "result": true,
      "time": 0.05136895179748535,
      "error": null
    },
    "assert count_first_elements((7, 18, 7, 3, (7, 8), 4)) == 4": {
      "result": true,
      "time": 0.04240846633911133,
      "error": null
    },
    "assert count_first_elements((6, 17, 1, 5, (7, 1), 3)) == 4": {
      "result": true,
      "time": 0.04056191444396973,
      "error": null
    },
    "assert count_first_elements((11, 10, 8, 11, (3, 4), 12)) == 4": {
      "result": true,
      "time": 0.04877519607543945,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}