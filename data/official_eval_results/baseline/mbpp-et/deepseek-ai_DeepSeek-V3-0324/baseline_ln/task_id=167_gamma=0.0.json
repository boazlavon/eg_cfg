{
  "code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
  "results": {
    "assert next_Power_Of_2(0) == 1": {
      "result": true,
      "time": 0.04199671745300293,
      "error": null
    },
    "assert next_Power_Of_2(5) == 8": {
      "result": true,
      "time": 0.03865385055541992,
      "error": null
    },
    "assert next_Power_Of_2(17) == 32": {
      "result": true,
      "time": 0.03477931022644043,
      "error": null
    },
    "assert next_Power_Of_2(2) == 2": {
      "result": true,
      "time": 0.039212703704833984,
      "error": null
    },
    "assert next_Power_Of_2(1) == 1": {
      "result": true,
      "time": 0.04083395004272461,
      "error": null
    },
    "assert next_Power_Of_2(3) == 4": {
      "result": true,
      "time": 0.04146265983581543,
      "error": null
    },
    "assert next_Power_Of_2(4) == 4": {
      "result": true,
      "time": 0.037743568420410156,
      "error": null
    },
    "assert next_Power_Of_2(10) == 16": {
      "result": true,
      "time": 0.03738594055175781,
      "error": null
    },
    "assert next_Power_Of_2(9) == 16": {
      "result": true,
      "time": 0.03422093391418457,
      "error": null
    },
    "assert next_Power_Of_2(6) == 8": {
      "result": true,
      "time": 0.039259910583496094,
      "error": null
    },
    "assert next_Power_Of_2(8) == 8": {
      "result": true,
      "time": 0.0318295955657959,
      "error": null
    },
    "assert next_Power_Of_2(7) == 8": {
      "result": true,
      "time": 0.03826308250427246,
      "error": null
    },
    "assert next_Power_Of_2(13) == 16": {
      "result": true,
      "time": 0.03230762481689453,
      "error": null
    },
    "assert next_Power_Of_2(14) == 16": {
      "result": true,
      "time": 0.04163718223571777,
      "error": null
    },
    "assert next_Power_Of_2(19) == 32": {
      "result": true,
      "time": 0.033559560775756836,
      "error": null
    },
    "assert next_Power_Of_2(18) == 32": {
      "result": true,
      "time": 0.042745351791381836,
      "error": null
    },
    "assert next_Power_Of_2(15) == 16": {
      "result": true,
      "time": 0.03821134567260742,
      "error": null
    },
    "assert next_Power_Of_2(22) == 32": {
      "result": true,
      "time": 0.03608417510986328,
      "error": null
    },
    "assert next_Power_Of_2(12) == 16": {
      "result": true,
      "time": 0.034674644470214844,
      "error": null
    },
    "assert next_Power_Of_2(20) == 32": {
      "result": true,
      "time": 0.033358097076416016,
      "error": null
    },
    "assert next_Power_Of_2(21) == 32": {
      "result": true,
      "time": 0.032357215881347656,
      "error": null
    },
    "assert next_Power_Of_2(16) == 16": {
      "result": true,
      "time": 0.035585641860961914,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}