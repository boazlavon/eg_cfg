{
  "code": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)",
  "results": {
    "assert Find_Min_Length([[1],[1,2]]) == 1": {
      "result": true,
      "time": 0.04401063919067383,
      "error": null
    },
    "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2": {
      "result": true,
      "time": 0.047850847244262695,
      "error": null
    },
    "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3": {
      "result": true,
      "time": 0.04806065559387207,
      "error": null
    },
    "assert Find_Min_Length([[3], [6, 5]]) == 1": {
      "result": true,
      "time": 0.04969000816345215,
      "error": null
    },
    "assert Find_Min_Length([[6], [1, 4]]) == 1": {
      "result": true,
      "time": 0.05190539360046387,
      "error": null
    },
    "assert Find_Min_Length([[5], [3, 4]]) == 1": {
      "result": true,
      "time": 0.04330325126647949,
      "error": null
    },
    "assert Find_Min_Length([[4], [1, 7]]) == 1": {
      "result": true,
      "time": 0.04198884963989258,
      "error": null
    },
    "assert Find_Min_Length([[6], [2, 2]]) == 1": {
      "result": true,
      "time": 0.04753470420837402,
      "error": null
    },
    "assert Find_Min_Length([[2], [4, 1]]) == 1": {
      "result": true,
      "time": 0.04434370994567871,
      "error": null
    },
    "assert Find_Min_Length([[6], [1, 5]]) == 1": {
      "result": true,
      "time": 0.06020975112915039,
      "error": null
    },
    "assert Find_Min_Length([[5], [4, 5]]) == 1": {
      "result": true,
      "time": 0.049686431884765625,
      "error": null
    },
    "assert Find_Min_Length([[6], [2, 7]]) == 1": {
      "result": true,
      "time": 0.044741153717041016,
      "error": null
    },
    "assert Find_Min_Length([[3], [6, 6]]) == 1": {
      "result": true,
      "time": 0.053375959396362305,
      "error": null
    },
    "assert Find_Min_Length([[4], [5, 7]]) == 1": {
      "result": true,
      "time": 0.04635119438171387,
      "error": null
    },
    "assert Find_Min_Length([[1], [4, 1]]) == 1": {
      "result": true,
      "time": 0.043106794357299805,
      "error": null
    },
    "assert Find_Min_Length([[3], [3, 5]]) == 1": {
      "result": true,
      "time": 0.05161643028259277,
      "error": null
    },
    "assert Find_Min_Length([[6], [4, 1]]) == 1": {
      "result": true,
      "time": 0.04316592216491699,
      "error": null
    },
    "assert Find_Min_Length([[1], [5, 4]]) == 1": {
      "result": true,
      "time": 0.046132802963256836,
      "error": null
    },
    "assert Find_Min_Length([[1], [3, 7]]) == 1": {
      "result": true,
      "time": 0.05140185356140137,
      "error": null
    },
    "assert Find_Min_Length([[6], [1, 1]]) == 1": {
      "result": true,
      "time": 0.04417705535888672,
      "error": null
    },
    "assert Find_Min_Length([[4], [6, 6]]) == 1": {
      "result": true,
      "time": 0.05095243453979492,
      "error": null
    },
    "assert Find_Min_Length([[6], [3, 1]]) == 1": {
      "result": true,
      "time": 0.04155778884887695,
      "error": null
    },
    "assert Find_Min_Length([[5], [4, 4]]) == 1": {
      "result": true,
      "time": 0.04858899116516113,
      "error": null
    },
    "assert Find_Min_Length([[3], [4, 6]]) == 1": {
      "result": true,
      "time": 0.05474710464477539,
      "error": null
    },
    "assert Find_Min_Length([[1], [1, 2]]) == 1": {
      "result": true,
      "time": 0.04866170883178711,
      "error": null
    },
    "assert Find_Min_Length([[4], [6, 7]]) == 1": {
      "result": true,
      "time": 0.04207634925842285,
      "error": null
    },
    "assert Find_Min_Length([[2], [6, 2]]) == 1": {
      "result": true,
      "time": 0.050464630126953125,
      "error": null
    },
    "assert Find_Min_Length([[6], [3, 2]]) == 1": {
      "result": true,
      "time": 0.04127645492553711,
      "error": null
    },
    "assert Find_Min_Length([[5], [2, 6]]) == 1": {
      "result": true,
      "time": 0.04670572280883789,
      "error": null
    },
    "assert Find_Min_Length([[6], [5, 7]]) == 1": {
      "result": true,
      "time": 0.04727363586425781,
      "error": null
    },
    "assert Find_Min_Length([[5], [3, 1]]) == 1": {
      "result": true,
      "time": 0.04278731346130371,
      "error": null
    },
    "assert Find_Min_Length([[2], [1, 7]]) == 1": {
      "result": true,
      "time": 0.048152923583984375,
      "error": null
    },
    "assert Find_Min_Length([[6], [4, 4]]) == 1": {
      "result": true,
      "time": 0.039545297622680664,
      "error": null
    },
    "assert Find_Min_Length([[4], [3, 5]]) == 1": {
      "result": true,
      "time": 0.04937410354614258,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [2, 1, 7], [2, 4, 8, 4]]) == 2": {
      "result": true,
      "time": 0.04725027084350586,
      "error": null
    },
    "assert Find_Min_Length([[3, 5], [3, 1, 7], [3, 5, 5, 2]]) == 2": {
      "result": true,
      "time": 0.04691576957702637,
      "error": null
    },
    "assert Find_Min_Length([[1, 1], [1, 7, 1], [1, 5, 8, 9]]) == 2": {
      "result": true,
      "time": 0.04235124588012695,
      "error": null
    },
    "assert Find_Min_Length([[6, 2], [6, 3, 7], [1, 2, 4, 9]]) == 2": {
      "result": true,
      "time": 0.03594350814819336,
      "error": null
    },
    "assert Find_Min_Length([[6, 7], [2, 1, 2], [1, 1, 2, 6]]) == 2": {
      "result": true,
      "time": 0.04399514198303223,
      "error": null
    },
    "assert Find_Min_Length([[1, 1], [1, 1, 2], [3, 1, 6, 9]]) == 2": {
      "result": true,
      "time": 0.04759407043457031,
      "error": null
    },
    "assert Find_Min_Length([[2, 6], [5, 4, 8], [1, 3, 7, 5]]) == 2": {
      "result": true,
      "time": 0.04283785820007324,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [3, 2, 5], [5, 7, 6, 2]]) == 2": {
      "result": true,
      "time": 0.04304194450378418,
      "error": null
    },
    "assert Find_Min_Length([[2, 1], [1, 7, 2], [5, 2, 7, 1]]) == 2": {
      "result": true,
      "time": 0.045879364013671875,
      "error": null
    },
    "assert Find_Min_Length([[5, 3], [6, 5, 7], [3, 1, 1, 9]]) == 2": {
      "result": true,
      "time": 0.04356789588928223,
      "error": null
    },
    "assert Find_Min_Length([[5, 2], [1, 1, 2], [6, 5, 1, 8]]) == 2": {
      "result": true,
      "time": 0.0449674129486084,
      "error": null
    },
    "assert Find_Min_Length([[4, 7], [3, 7, 3], [4, 3, 2, 5]]) == 2": {
      "result": true,
      "time": 0.0371243953704834,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [1, 4, 4], [2, 1, 5, 2]]) == 2": {
      "result": true,
      "time": 0.047215938568115234,
      "error": null
    },
    "assert Find_Min_Length([[4, 3], [5, 1, 1], [4, 4, 1, 7]]) == 2": {
      "result": true,
      "time": 0.05062055587768555,
      "error": null
    },
    "assert Find_Min_Length([[1, 6], [1, 2, 6], [2, 1, 5, 5]]) == 2": {
      "result": true,
      "time": 0.04735422134399414,
      "error": null
    },
    "assert Find_Min_Length([[2, 6], [1, 5, 3], [2, 4, 4, 1]]) == 2": {
      "result": true,
      "time": 0.05086374282836914,
      "error": null
    },
    "assert Find_Min_Length([[2, 5], [1, 6, 6], [5, 5, 7, 4]]) == 2": {
      "result": true,
      "time": 0.03952646255493164,
      "error": null
    },
    "assert Find_Min_Length([[4, 2], [4, 2, 5], [5, 2, 7, 1]]) == 2": {
      "result": true,
      "time": 0.04213309288024902,
      "error": null
    },
    "assert Find_Min_Length([[1, 1], [3, 5, 4], [3, 3, 4, 7]]) == 2": {
      "result": true,
      "time": 0.041181325912475586,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [2, 2, 2], [3, 7, 1, 9]]) == 2": {
      "result": true,
      "time": 0.05151176452636719,
      "error": null
    },
    "assert Find_Min_Length([[4, 6], [2, 7, 3], [4, 7, 8, 4]]) == 2": {
      "result": true,
      "time": 0.03833627700805664,
      "error": null
    },
    "assert Find_Min_Length([[6, 7], [2, 7, 3], [6, 3, 2, 9]]) == 2": {
      "result": true,
      "time": 0.04680132865905762,
      "error": null
    },
    "assert Find_Min_Length([[1, 5], [3, 3, 7], [6, 5, 2, 3]]) == 2": {
      "result": true,
      "time": 0.04572415351867676,
      "error": null
    },
    "assert Find_Min_Length([[2, 2], [4, 7, 7], [2, 7, 7, 5]]) == 2": {
      "result": true,
      "time": 0.041391849517822266,
      "error": null
    },
    "assert Find_Min_Length([[6, 4], [3, 2, 5], [5, 3, 7, 7]]) == 2": {
      "result": true,
      "time": 0.042290449142456055,
      "error": null
    },
    "assert Find_Min_Length([[6, 1], [2, 5, 3], [3, 6, 8, 8]]) == 2": {
      "result": true,
      "time": 0.04124784469604492,
      "error": null
    },
    "assert Find_Min_Length([[6, 4], [5, 3, 2], [5, 5, 5, 5]]) == 2": {
      "result": true,
      "time": 0.04288816452026367,
      "error": null
    },
    "assert Find_Min_Length([[4, 6], [1, 5, 3], [4, 3, 3, 6]]) == 2": {
      "result": true,
      "time": 0.053205013275146484,
      "error": null
    },
    "assert Find_Min_Length([[1, 6], [6, 1, 5], [2, 3, 3, 8]]) == 2": {
      "result": true,
      "time": 0.04629969596862793,
      "error": null
    },
    "assert Find_Min_Length([[6, 6], [6, 3, 8], [2, 7, 2, 6]]) == 2": {
      "result": true,
      "time": 0.03854227066040039,
      "error": null
    },
    "assert Find_Min_Length([[4, 4], [3, 1, 4], [1, 3, 2, 1]]) == 2": {
      "result": true,
      "time": 0.04602169990539551,
      "error": null
    },
    "assert Find_Min_Length([[1, 7], [3, 3, 3], [5, 2, 7, 9]]) == 2": {
      "result": true,
      "time": 0.0534970760345459,
      "error": null
    },
    "assert Find_Min_Length([[2, 3], [3, 3, 5], [4, 2, 4, 4]]) == 2": {
      "result": true,
      "time": 0.05193734169006348,
      "error": null
    },
    "assert Find_Min_Length([[1, 6, 5], [7, 9, 1, 8]]) == 3": {
      "result": true,
      "time": 0.05237555503845215,
      "error": null
    },
    "assert Find_Min_Length([[6, 1, 2], [4, 8, 2, 8]]) == 3": {
      "result": true,
      "time": 0.05371594429016113,
      "error": null
    },
    "assert Find_Min_Length([[7, 2, 6], [4, 1, 9, 8]]) == 3": {
      "result": true,
      "time": 0.059439897537231445,
      "error": null
    },
    "assert Find_Min_Length([[7, 5, 6], [2, 9, 6, 6]]) == 3": {
      "result": true,
      "time": 0.04571795463562012,
      "error": null
    },
    "assert Find_Min_Length([[1, 2, 4], [1, 9, 2, 6]]) == 3": {
      "result": true,
      "time": 0.06798791885375977,
      "error": null
    },
    "assert Find_Min_Length([[4, 6, 6], [5, 6, 3, 2]]) == 3": {
      "result": true,
      "time": 0.04928159713745117,
      "error": null
    },
    "assert Find_Min_Length([[4, 2, 2], [1, 2, 3, 4]]) == 3": {
      "result": true,
      "time": 0.04950666427612305,
      "error": null
    },
    "assert Find_Min_Length([[8, 1, 4], [6, 9, 1, 3]]) == 3": {
      "result": true,
      "time": 0.05983328819274902,
      "error": null
    },
    "assert Find_Min_Length([[5, 5, 2], [1, 5, 4, 2]]) == 3": {
      "result": true,
      "time": 0.05481386184692383,
      "error": null
    },
    "assert Find_Min_Length([[7, 6, 2], [5, 6, 5, 4]]) == 3": {
      "result": true,
      "time": 0.04376077651977539,
      "error": null
    },
    "assert Find_Min_Length([[2, 2, 1], [5, 9, 6, 9]]) == 3": {
      "result": true,
      "time": 0.04455256462097168,
      "error": null
    },
    "assert Find_Min_Length([[4, 6, 7], [1, 6, 7, 1]]) == 3": {
      "result": true,
      "time": 0.0478365421295166,
      "error": null
    },
    "assert Find_Min_Length([[2, 7, 8], [3, 4, 4, 2]]) == 3": {
      "result": true,
      "time": 0.05525851249694824,
      "error": null
    },
    "assert Find_Min_Length([[6, 4, 4], [3, 2, 8, 5]]) == 3": {
      "result": true,
      "time": 0.04620075225830078,
      "error": null
    },
    "assert Find_Min_Length([[6, 7, 1], [2, 5, 8, 2]]) == 3": {
      "result": true,
      "time": 0.05097460746765137,
      "error": null
    },
    "assert Find_Min_Length([[6, 6, 1], [4, 5, 2, 2]]) == 3": {
      "result": true,
      "time": 0.051891326904296875,
      "error": null
    },
    "assert Find_Min_Length([[2, 4, 2], [4, 4, 3, 9]]) == 3": {
      "result": true,
      "time": 0.05881214141845703,
      "error": null
    },
    "assert Find_Min_Length([[8, 7, 5], [8, 7, 8, 9]]) == 3": {
      "result": true,
      "time": 0.05532574653625488,
      "error": null
    },
    "assert Find_Min_Length([[4, 3, 5], [8, 9, 6, 8]]) == 3": {
      "result": true,
      "time": 0.048422813415527344,
      "error": null
    },
    "assert Find_Min_Length([[6, 4, 7], [9, 6, 2, 5]]) == 3": {
      "result": true,
      "time": 0.04726839065551758,
      "error": null
    },
    "assert Find_Min_Length([[3, 8, 7], [9, 4, 6, 5]]) == 3": {
      "result": true,
      "time": 0.051015615463256836,
      "error": null
    },
    "assert Find_Min_Length([[2, 1, 4], [9, 3, 6, 7]]) == 3": {
      "result": true,
      "time": 0.053319454193115234,
      "error": null
    },
    "assert Find_Min_Length([[4, 2, 4], [9, 4, 9, 8]]) == 3": {
      "result": true,
      "time": 0.05494809150695801,
      "error": null
    },
    "assert Find_Min_Length([[2, 7, 6], [4, 1, 9, 8]]) == 3": {
      "result": true,
      "time": 0.055474042892456055,
      "error": null
    },
    "assert Find_Min_Length([[5, 4, 7], [6, 2, 2, 2]]) == 3": {
      "result": true,
      "time": 0.04409480094909668,
      "error": null
    },
    "assert Find_Min_Length([[3, 6, 5], [7, 3, 8, 7]]) == 3": {
      "result": true,
      "time": 0.05494880676269531,
      "error": null
    },
    "assert Find_Min_Length([[8, 2, 1], [9, 9, 6, 6]]) == 3": {
      "result": true,
      "time": 0.0523681640625,
      "error": null
    },
    "assert Find_Min_Length([[5, 6, 2], [5, 8, 9, 5]]) == 3": {
      "result": true,
      "time": 0.057909250259399414,
      "error": null
    },
    "assert Find_Min_Length([[5, 5, 2], [8, 6, 7, 3]]) == 3": {
      "result": true,
      "time": 0.05084371566772461,
      "error": null
    },
    "assert Find_Min_Length([[2, 5, 3], [9, 8, 6, 8]]) == 3": {
      "result": true,
      "time": 0.052967071533203125,
      "error": null
    },
    "assert Find_Min_Length([[1, 6, 4], [4, 3, 2, 4]]) == 3": {
      "result": true,
      "time": 0.06567597389221191,
      "error": null
    },
    "assert Find_Min_Length([[4, 4, 3], [6, 5, 2, 4]]) == 3": {
      "result": true,
      "time": 0.049350738525390625,
      "error": null
    },
    "assert Find_Min_Length([[7, 5, 6], [1, 1, 8, 8]]) == 3": {
      "result": true,
      "time": 0.055667877197265625,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}