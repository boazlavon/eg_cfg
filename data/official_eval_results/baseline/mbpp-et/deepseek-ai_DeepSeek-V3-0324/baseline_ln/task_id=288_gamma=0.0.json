{
  "code": "def modular_inverse(arr, n, p):\n    count = 0\n    for a in arr:\n        if (a * a) % p == 1:\n            count += 1\n    return count",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": true,
      "time": 0.07217216491699219,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": true,
      "time": 0.055909156799316406,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": true,
      "time": 0.06654572486877441,
      "error": null
    },
    "assert modular_inverse([2, 2, 2, 4], 4, 2) == 0": {
      "result": true,
      "time": 0.06687545776367188,
      "error": null
    },
    "assert modular_inverse([4, 4, 9, 3], 3, 6) == 0": {
      "result": true,
      "time": 0.06804585456848145,
      "error": null
    },
    "assert modular_inverse([3, 6, 7, 4], 4, 3) == 2": {
      "result": true,
      "time": 0.040863752365112305,
      "error": null
    },
    "assert modular_inverse([2, 2, 5, 7], 3, 4) == 1": {
      "result": false,
      "time": 0.0469515323638916,
      "error": null
    },
    "assert modular_inverse([5, 4, 2, 1], 2, 3) == 2": {
      "result": false,
      "time": 0.06059908866882324,
      "error": null
    },
    "assert modular_inverse([6, 4, 6, 10], 3, 7) == 2": {
      "result": true,
      "time": 0.05492115020751953,
      "error": null
    },
    "assert modular_inverse([3, 2, 3, 9], 4, 8) == 3": {
      "result": true,
      "time": 0.054964542388916016,
      "error": null
    },
    "assert modular_inverse([2, 5, 5, 3], 3, 8) == 2": {
      "result": false,
      "time": 0.05599379539489746,
      "error": null
    },
    "assert modular_inverse([6, 9, 7, 2], 4, 2) == 2": {
      "result": true,
      "time": 0.04936957359313965,
      "error": null
    },
    "assert modular_inverse([2, 3, 5, 8], 2, 12) == 0": {
      "result": false,
      "time": 0.05004143714904785,
      "error": null
    },
    "assert modular_inverse([6, 8, 5, 1], 4, 8) == 2": {
      "result": true,
      "time": 0.053807973861694336,
      "error": null
    },
    "assert modular_inverse([1, 3, 6, 8], 1, 10) == 1": {
      "result": true,
      "time": 0.05516171455383301,
      "error": null
    },
    "assert modular_inverse([1, 1, 5, 4], 2, 7) == 2": {
      "result": true,
      "time": 0.05322408676147461,
      "error": null
    },
    "assert modular_inverse([1, 8, 1, 7], 2, 4) == 1": {
      "result": false,
      "time": 0.06071329116821289,
      "error": null
    },
    "assert modular_inverse([2, 9, 3, 3], 2, 2) == 1": {
      "result": false,
      "time": 0.06354737281799316,
      "error": null
    },
    "assert modular_inverse([4, 9, 5, 4], 2, 3) == 1": {
      "result": false,
      "time": 0.06607866287231445,
      "error": null
    },
    "assert modular_inverse([1, 3, 6, 10], 4, 11) == 2": {
      "result": true,
      "time": 0.0657649040222168,
      "error": null
    },
    "assert modular_inverse([6, 7, 6, 8], 1, 4) == 0": {
      "result": false,
      "time": 0.06571197509765625,
      "error": null
    },
    "assert modular_inverse([5, 4, 4, 10], 1, 7) == 0": {
      "result": true,
      "time": 0.06595230102539062,
      "error": null
    },
    "assert modular_inverse([4, 7, 3, 5], 4, 12) == 2": {
      "result": true,
      "time": 0.05634188652038574,
      "error": null
    },
    "assert modular_inverse([4, 6, 1, 5], 4, 9) == 1": {
      "result": true,
      "time": 0.07067584991455078,
      "error": null
    },
    "assert modular_inverse([3, 3, 8, 9], 3, 6) == 0": {
      "result": true,
      "time": 0.0626363754272461,
      "error": null
    },
    "assert modular_inverse([5, 3, 7, 1], 3, 11) == 0": {
      "result": false,
      "time": 0.06450939178466797,
      "error": null
    },
    "assert modular_inverse([2, 11, 3, 3], 3, 9) == 0": {
      "result": true,
      "time": 0.05431079864501953,
      "error": null
    },
    "assert modular_inverse([6, 10, 3, 9], 2, 2) == 0": {
      "result": false,
      "time": 0.06066012382507324,
      "error": null
    },
    "assert modular_inverse([3, 11, 9, 9], 1, 9) == 0": {
      "result": true,
      "time": 0.04379153251647949,
      "error": null
    },
    "assert modular_inverse([4, 7, 4, 10], 4, 10) == 0": {
      "result": true,
      "time": 0.053165435791015625,
      "error": null
    },
    "assert modular_inverse([2, 1, 1, 3], 3, 9) == 2": {
      "result": true,
      "time": 0.05416274070739746,
      "error": null
    },
    "assert modular_inverse([5, 1, 3, 9], 2, 12) == 2": {
      "result": true,
      "time": 0.06344056129455566,
      "error": null
    },
    "assert modular_inverse([5, 1, 9, 6], 2, 7) == 1": {
      "result": false,
      "time": 0.0647895336151123,
      "error": null
    },
    "assert modular_inverse([2, 2, 1, 10], 2, 2) == 0": {
      "result": false,
      "time": 0.06780815124511719,
      "error": null
    },
    "assert modular_inverse([5, 8, 2, 5], 4, 4) == 2": {
      "result": true,
      "time": 0.06782412528991699,
      "error": null
    },
    "assert modular_inverse([5, 1, 2, 4], 2, 3) == 2": {
      "result": false,
      "time": 0.041437625885009766,
      "error": null
    },
    "assert modular_inverse([5, 4, 7, 8, 11], 3, 10) == 0": {
      "result": false,
      "time": 0.056420326232910156,
      "error": null
    },
    "assert modular_inverse([4, 1, 10, 15, 16], 4, 17) == 1": {
      "result": false,
      "time": 0.05852031707763672,
      "error": null
    },
    "assert modular_inverse([3, 1, 5, 10, 10], 3, 13) == 1": {
      "result": true,
      "time": 0.043060302734375,
      "error": null
    },
    "assert modular_inverse([5, 6, 8, 12, 13], 5, 11) == 1": {
      "result": true,
      "time": 0.05594158172607422,
      "error": null
    },
    "assert modular_inverse([6, 5, 11, 9, 13], 5, 16) == 1": {
      "result": true,
      "time": 0.0597689151763916,
      "error": null
    },
    "assert modular_inverse([5, 5, 12, 14, 14], 5, 18) == 0": {
      "result": true,
      "time": 0.0628957748413086,
      "error": null
    },
    "assert modular_inverse([1, 8, 12, 16, 12], 4, 17) == 2": {
      "result": true,
      "time": 0.04623222351074219,
      "error": null
    },
    "assert modular_inverse([3, 3, 9, 15, 9], 1, 13) == 0": {
      "result": true,
      "time": 0.05513930320739746,
      "error": null
    },
    "assert modular_inverse([3, 6, 8, 14, 14], 2, 15) == 0": {
      "result": false,
      "time": 0.04551839828491211,
      "error": null
    },
    "assert modular_inverse([4, 4, 13, 8, 8], 4, 13) == 0": {
      "result": true,
      "time": 0.04596114158630371,
      "error": null
    },
    "assert modular_inverse([4, 4, 4, 12, 17], 2, 15) == 2": {
      "result": false,
      "time": 0.04063582420349121,
      "error": null
    },
    "assert modular_inverse([5, 1, 6, 12, 13], 2, 8) == 2": {
      "result": false,
      "time": 0.05282306671142578,
      "error": null
    },
    "assert modular_inverse([4, 8, 6, 9, 7], 3, 15) == 1": {
      "result": true,
      "time": 0.06162905693054199,
      "error": null
    },
    "assert modular_inverse([4, 6, 7, 11, 11], 2, 8) == 0": {
      "result": false,
      "time": 0.059308528900146484,
      "error": null
    },
    "assert modular_inverse([2, 2, 13, 17, 12], 2, 13) == 0": {
      "result": false,
      "time": 0.05175423622131348,
      "error": null
    },
    "assert modular_inverse([3, 4, 9, 16, 17], 5, 16) == 2": {
      "result": true,
      "time": 0.06409978866577148,
      "error": null
    },
    "assert modular_inverse([6, 2, 13, 17, 17], 3, 9) == 0": {
      "result": false,
      "time": 0.05655336380004883,
      "error": null
    },
    "assert modular_inverse([5, 4, 7, 17, 11], 1, 15) == 0": {
      "result": false,
      "time": 0.048813581466674805,
      "error": null
    },
    "assert modular_inverse([2, 5, 12, 11, 10], 3, 11) == 1": {
      "result": false,
      "time": 0.05477738380432129,
      "error": null
    },
    "assert modular_inverse([3, 2, 9, 16, 9], 5, 11) == 0": {
      "result": true,
      "time": 0.05195164680480957,
      "error": null
    },
    "assert modular_inverse([1, 8, 3, 8, 13], 2, 14) == 1": {
      "result": false,
      "time": 0.05757641792297363,
      "error": null
    },
    "assert modular_inverse([6, 5, 9, 7, 15], 1, 8) == 0": {
      "result": false,
      "time": 0.05014395713806152,
      "error": null
    },
    "assert modular_inverse([3, 4, 7, 7, 17], 5, 15) == 1": {
      "result": true,
      "time": 0.0696096420288086,
      "error": null
    },
    "assert modular_inverse([4, 7, 12, 13, 14], 2, 17) == 0": {
      "result": true,
      "time": 0.05668187141418457,
      "error": null
    },
    "assert modular_inverse([3, 1, 5, 10, 11], 5, 14) == 1": {
      "result": true,
      "time": 0.06746339797973633,
      "error": null
    },
    "assert modular_inverse([4, 4, 6, 16, 15], 3, 13) == 0": {
      "result": true,
      "time": 0.062419891357421875,
      "error": null
    },
    "assert modular_inverse([1, 6, 6, 12, 17], 5, 11) == 2": {
      "result": true,
      "time": 0.060280799865722656,
      "error": null
    },
    "assert modular_inverse([1, 3, 6, 8, 9], 4, 14) == 1": {
      "result": true,
      "time": 0.057328224182128906,
      "error": null
    },
    "assert modular_inverse([5, 6, 7, 13, 9], 3, 17) == 0": {
      "result": true,
      "time": 0.04605388641357422,
      "error": null
    },
    "assert modular_inverse([1, 3, 4, 15, 16], 2, 10) == 1": {
      "result": true,
      "time": 0.04704904556274414,
      "error": null
    },
    "assert modular_inverse([1, 6, 3, 7, 17], 4, 10) == 1": {
      "result": true,
      "time": 0.06806039810180664,
      "error": null
    },
    "assert modular_inverse([5, 7, 4, 13, 12], 1, 14) == 0": {
      "result": false,
      "time": 0.0461735725402832,
      "error": null
    },
    "assert modular_inverse([5, 6, 12, 15, 14], 5, 18) == 0": {
      "result": true,
      "time": 0.05664849281311035,
      "error": null
    },
    "assert modular_inverse([1, 8, 6, 3], 1, 2) == 1": {
      "result": false,
      "time": 0.043973445892333984,
      "error": null
    },
    "assert modular_inverse([6, 4, 7, 1], 4, 10) == 1": {
      "result": true,
      "time": 0.047087907791137695,
      "error": null
    },
    "assert modular_inverse([5, 8, 6, 8], 2, 6) == 1": {
      "result": true,
      "time": 0.05602836608886719,
      "error": null
    },
    "assert modular_inverse([5, 5, 9, 7], 2, 2) == 2": {
      "result": false,
      "time": 0.046309471130371094,
      "error": null
    },
    "assert modular_inverse([2, 8, 5, 8], 3, 6) == 1": {
      "result": true,
      "time": 0.04848527908325195,
      "error": null
    },
    "assert modular_inverse([1, 4, 2, 8], 4, 10) == 1": {
      "result": true,
      "time": 0.0543210506439209,
      "error": null
    },
    "assert modular_inverse([6, 6, 6, 4], 4, 7) == 3": {
      "result": true,
      "time": 0.05285215377807617,
      "error": null
    },
    "assert modular_inverse([4, 8, 4, 2], 3, 2) == 0": {
      "result": true,
      "time": 0.04594683647155762,
      "error": null
    },
    "assert modular_inverse([6, 5, 7, 3], 1, 6) == 0": {
      "result": false,
      "time": 0.059668540954589844,
      "error": null
    },
    "assert modular_inverse([2, 2, 1, 8], 2, 2) == 0": {
      "result": false,
      "time": 0.05492830276489258,
      "error": null
    },
    "assert modular_inverse([7, 7, 2, 6], 1, 10) == 0": {
      "result": true,
      "time": 0.04095339775085449,
      "error": null
    },
    "assert modular_inverse([5, 2, 1, 3], 1, 6) == 1": {
      "result": false,
      "time": 0.06514859199523926,
      "error": null
    },
    "assert modular_inverse([2, 2, 5, 1], 1, 7) == 0": {
      "result": false,
      "time": 0.055532217025756836,
      "error": null
    },
    "assert modular_inverse([4, 2, 3, 4], 4, 10) == 0": {
      "result": true,
      "time": 0.06510758399963379,
      "error": null
    },
    "assert modular_inverse([1, 3, 1, 2], 1, 5) == 1": {
      "result": false,
      "time": 0.06649637222290039,
      "error": null
    },
    "assert modular_inverse([6, 7, 4, 4], 2, 11) == 0": {
      "result": true,
      "time": 0.06998062133789062,
      "error": null
    },
    "assert modular_inverse([1, 1, 3, 6], 3, 6) == 2": {
      "result": true,
      "time": 0.06568789482116699,
      "error": null
    },
    "assert modular_inverse([1, 8, 5, 4], 3, 11) == 1": {
      "result": true,
      "time": 0.05994772911071777,
      "error": null
    },
    "assert modular_inverse([3, 8, 3, 10], 1, 6) == 0": {
      "result": true,
      "time": 0.06266331672668457,
      "error": null
    },
    "assert modular_inverse([1, 8, 3, 8], 2, 10) == 1": {
      "result": true,
      "time": 0.0744776725769043,
      "error": null
    },
    "assert modular_inverse([6, 8, 3, 3], 4, 6) == 0": {
      "result": true,
      "time": 0.07567000389099121,
      "error": null
    },
    "assert modular_inverse([5, 8, 4, 6], 4, 6) == 1": {
      "result": true,
      "time": 0.05297517776489258,
      "error": null
    },
    "assert modular_inverse([6, 2, 3, 7], 4, 11) == 0": {
      "result": true,
      "time": 0.06149005889892578,
      "error": null
    },
    "assert modular_inverse([6, 5, 1, 6], 4, 10) == 1": {
      "result": true,
      "time": 0.06674933433532715,
      "error": null
    },
    "assert modular_inverse([4, 5, 3, 4], 2, 7) == 0": {
      "result": true,
      "time": 0.07037019729614258,
      "error": null
    },
    "assert modular_inverse([6, 1, 7, 8], 3, 10) == 1": {
      "result": true,
      "time": 0.0577542781829834,
      "error": null
    },
    "assert modular_inverse([6, 7, 5, 6], 2, 8) == 1": {
      "result": false,
      "time": 0.06697797775268555,
      "error": null
    },
    "assert modular_inverse([7, 4, 9, 4], 2, 11) == 0": {
      "result": true,
      "time": 0.06099963188171387,
      "error": null
    },
    "assert modular_inverse([6, 7, 8, 9], 3, 4) == 1": {
      "result": false,
      "time": 0.07668375968933105,
      "error": null
    },
    "assert modular_inverse([3, 1, 9, 10], 4, 11) == 2": {
      "result": true,
      "time": 0.05520892143249512,
      "error": null
    },
    "assert modular_inverse([6, 1, 5, 9], 2, 11) == 1": {
      "result": true,
      "time": 0.046619415283203125,
      "error": null
    },
    "assert modular_inverse([6, 7, 5, 1], 3, 7) == 1": {
      "result": false,
      "time": 0.054810285568237305,
      "error": null
    },
    "assert modular_inverse([6, 4, 6, 7], 3, 11) == 0": {
      "result": true,
      "time": 0.05576920509338379,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6470588235294118,
  "general_error": "",
  "has_testcase_error": false
}