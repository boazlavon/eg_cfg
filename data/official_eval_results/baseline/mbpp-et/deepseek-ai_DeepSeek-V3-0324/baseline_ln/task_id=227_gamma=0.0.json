{
  "code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
  "results": {
    "assert min_of_three(10,20,0)==0": {
      "result": true,
      "time": 0.03801369667053223,
      "error": null
    },
    "assert min_of_three(19,15,18)==15": {
      "result": true,
      "time": 0.03761649131774902,
      "error": null
    },
    "assert min_of_three(-10,-20,-30)==-30": {
      "result": true,
      "time": 0.035730600357055664,
      "error": null
    },
    "assert min_of_three(9, 25, 4) == 4": {
      "result": true,
      "time": 0.04363226890563965,
      "error": null
    },
    "assert min_of_three(11, 19, 5) == 5": {
      "result": true,
      "time": 0.05599498748779297,
      "error": null
    },
    "assert min_of_three(12, 17, 4) == 4": {
      "result": true,
      "time": 0.043975114822387695,
      "error": null
    },
    "assert min_of_three(13, 15, 5) == 5": {
      "result": true,
      "time": 0.04606127738952637,
      "error": null
    },
    "assert min_of_three(6, 24, 2) == 2": {
      "result": true,
      "time": 0.048047780990600586,
      "error": null
    },
    "assert min_of_three(15, 16, 4) == 4": {
      "result": true,
      "time": 0.044313907623291016,
      "error": null
    },
    "assert min_of_three(10, 18, 4) == 4": {
      "result": true,
      "time": 0.04188799858093262,
      "error": null
    },
    "assert min_of_three(7, 23, 5) == 5": {
      "result": true,
      "time": 0.04904580116271973,
      "error": null
    },
    "assert min_of_three(12, 15, 2) == 2": {
      "result": true,
      "time": 0.04212021827697754,
      "error": null
    },
    "assert min_of_three(11, 24, 4) == 4": {
      "result": true,
      "time": 0.04048776626586914,
      "error": null
    },
    "assert min_of_three(7, 25, 1) == 1": {
      "result": true,
      "time": 0.04693436622619629,
      "error": null
    },
    "assert min_of_three(10, 24, 3) == 3": {
      "result": true,
      "time": 0.0380549430847168,
      "error": null
    },
    "assert min_of_three(11, 22, 5) == 5": {
      "result": true,
      "time": 0.04118490219116211,
      "error": null
    },
    "assert min_of_three(12, 24, 3) == 3": {
      "result": true,
      "time": 0.04439949989318848,
      "error": null
    },
    "assert min_of_three(7, 17, 5) == 5": {
      "result": true,
      "time": 0.042290687561035156,
      "error": null
    },
    "assert min_of_three(10, 23, 5) == 5": {
      "result": true,
      "time": 0.0443110466003418,
      "error": null
    },
    "assert min_of_three(7, 18, 4) == 4": {
      "result": true,
      "time": 0.04700756072998047,
      "error": null
    },
    "assert min_of_three(8, 19, 4) == 4": {
      "result": true,
      "time": 0.043736934661865234,
      "error": null
    },
    "assert min_of_three(6, 23, 2) == 2": {
      "result": true,
      "time": 0.0438542366027832,
      "error": null
    },
    "assert min_of_three(9, 24, 3) == 3": {
      "result": true,
      "time": 0.04412055015563965,
      "error": null
    },
    "assert min_of_three(10, 22, 2) == 2": {
      "result": true,
      "time": 0.042188167572021484,
      "error": null
    },
    "assert min_of_three(9, 19, 2) == 2": {
      "result": true,
      "time": 0.04781532287597656,
      "error": null
    },
    "assert min_of_three(6, 16, 2) == 2": {
      "result": true,
      "time": 0.042675018310546875,
      "error": null
    },
    "assert min_of_three(15, 18, 5) == 5": {
      "result": true,
      "time": 0.045891761779785156,
      "error": null
    },
    "assert min_of_three(6, 15, 3) == 3": {
      "result": true,
      "time": 0.04366898536682129,
      "error": null
    },
    "assert min_of_three(5, 20, 5) == 5": {
      "result": true,
      "time": 0.042441368103027344,
      "error": null
    },
    "assert min_of_three(8, 21, 1) == 1": {
      "result": true,
      "time": 0.040917158126831055,
      "error": null
    },
    "assert min_of_three(7, 21, 2) == 2": {
      "result": true,
      "time": 0.04351067543029785,
      "error": null
    },
    "assert min_of_three(9, 16, 1) == 1": {
      "result": true,
      "time": 0.035341501235961914,
      "error": null
    },
    "assert min_of_three(5, 24, 3) == 3": {
      "result": true,
      "time": 0.044450998306274414,
      "error": null
    },
    "assert min_of_three(13, 21, 5) == 5": {
      "result": true,
      "time": 0.04641222953796387,
      "error": null
    },
    "assert min_of_three(15, 18, 3) == 3": {
      "result": true,
      "time": 0.03857088088989258,
      "error": null
    },
    "assert min_of_three(11, 17, 5) == 5": {
      "result": true,
      "time": 0.045969486236572266,
      "error": null
    },
    "assert min_of_three(20, 19, 18) == 18": {
      "result": true,
      "time": 0.04369473457336426,
      "error": null
    },
    "assert min_of_three(21, 11, 19) == 11": {
      "result": true,
      "time": 0.0439763069152832,
      "error": null
    },
    "assert min_of_three(14, 17, 17) == 14": {
      "result": true,
      "time": 0.04165458679199219,
      "error": null
    },
    "assert min_of_three(24, 15, 16) == 15": {
      "result": true,
      "time": 0.036507368087768555,
      "error": null
    },
    "assert min_of_three(18, 16, 13) == 13": {
      "result": true,
      "time": 0.052138566970825195,
      "error": null
    },
    "assert min_of_three(23, 19, 18) == 18": {
      "result": true,
      "time": 0.04851531982421875,
      "error": null
    },
    "assert min_of_three(20, 12, 21) == 12": {
      "result": true,
      "time": 0.04397869110107422,
      "error": null
    },
    "assert min_of_three(20, 17, 21) == 17": {
      "result": true,
      "time": 0.0434114933013916,
      "error": null
    },
    "assert min_of_three(17, 15, 13) == 13": {
      "result": true,
      "time": 0.037964582443237305,
      "error": null
    },
    "assert min_of_three(19, 12, 17) == 12": {
      "result": true,
      "time": 0.03771495819091797,
      "error": null
    },
    "assert min_of_three(20, 12, 17) == 12": {
      "result": true,
      "time": 0.03972792625427246,
      "error": null
    },
    "assert min_of_three(21, 13, 16) == 13": {
      "result": true,
      "time": 0.04372525215148926,
      "error": null
    },
    "assert min_of_three(18, 17, 18) == 17": {
      "result": true,
      "time": 0.04500555992126465,
      "error": null
    },
    "assert min_of_three(24, 18, 14) == 14": {
      "result": true,
      "time": 0.045813560485839844,
      "error": null
    },
    "assert min_of_three(20, 10, 17) == 10": {
      "result": true,
      "time": 0.041518449783325195,
      "error": null
    },
    "assert min_of_three(24, 20, 16) == 16": {
      "result": true,
      "time": 0.04886794090270996,
      "error": null
    },
    "assert min_of_three(17, 19, 19) == 17": {
      "result": true,
      "time": 0.04125356674194336,
      "error": null
    },
    "assert min_of_three(16, 11, 23) == 11": {
      "result": true,
      "time": 0.04849672317504883,
      "error": null
    },
    "assert min_of_three(20, 12, 15) == 12": {
      "result": true,
      "time": 0.045610904693603516,
      "error": null
    },
    "assert min_of_three(19, 17, 21) == 17": {
      "result": true,
      "time": 0.04021763801574707,
      "error": null
    },
    "assert min_of_three(21, 18, 22) == 18": {
      "result": true,
      "time": 0.0534670352935791,
      "error": null
    },
    "assert min_of_three(19, 12, 19) == 12": {
      "result": true,
      "time": 0.034148454666137695,
      "error": null
    },
    "assert min_of_three(20, 20, 20) == 20": {
      "result": true,
      "time": 0.03370475769042969,
      "error": null
    },
    "assert min_of_three(14, 17, 14) == 14": {
      "result": true,
      "time": 0.034769535064697266,
      "error": null
    },
    "assert min_of_three(23, 18, 21) == 18": {
      "result": true,
      "time": 0.04196572303771973,
      "error": null
    },
    "assert min_of_three(20, 19, 16) == 16": {
      "result": true,
      "time": 0.03614473342895508,
      "error": null
    },
    "assert min_of_three(14, 12, 23) == 12": {
      "result": true,
      "time": 0.04183387756347656,
      "error": null
    },
    "assert min_of_three(14, 14, 13) == 13": {
      "result": true,
      "time": 0.03791379928588867,
      "error": null
    },
    "assert min_of_three(19, 15, 17) == 15": {
      "result": true,
      "time": 0.04091238975524902,
      "error": null
    },
    "assert min_of_three(22, 12, 18) == 12": {
      "result": true,
      "time": 0.037186622619628906,
      "error": null
    },
    "assert min_of_three(24, 10, 22) == 10": {
      "result": true,
      "time": 0.03934526443481445,
      "error": null
    },
    "assert min_of_three(18, 10, 14) == 10": {
      "result": true,
      "time": 0.042418479919433594,
      "error": null
    },
    "assert min_of_three(24, 20, 23) == 20": {
      "result": true,
      "time": 0.03467392921447754,
      "error": null
    },
    "assert min_of_three(-14, -18, -32) == -32": {
      "result": true,
      "time": 0.04195570945739746,
      "error": null
    },
    "assert min_of_three(-14, -20, -34) == -34": {
      "result": true,
      "time": 0.03893017768859863,
      "error": null
    },
    "assert min_of_three(-6, -22, -32) == -32": {
      "result": true,
      "time": 0.04220390319824219,
      "error": null
    },
    "assert min_of_three(-13, -19, -32) == -32": {
      "result": true,
      "time": 0.0425565242767334,
      "error": null
    },
    "assert min_of_three(-8, -23, -31) == -31": {
      "result": true,
      "time": 0.04810047149658203,
      "error": null
    },
    "assert min_of_three(-10, -19, -33) == -33": {
      "result": true,
      "time": 0.040770769119262695,
      "error": null
    },
    "assert min_of_three(-13, -24, -27) == -27": {
      "result": true,
      "time": 0.03511977195739746,
      "error": null
    },
    "assert min_of_three(-14, -22, -31) == -31": {
      "result": true,
      "time": 0.03938865661621094,
      "error": null
    },
    "assert min_of_three(-8, -24, -26) == -26": {
      "result": true,
      "time": 0.03922915458679199,
      "error": null
    },
    "assert min_of_three(-13, -22, -25) == -25": {
      "result": true,
      "time": 0.04276895523071289,
      "error": null
    },
    "assert min_of_three(-5, -25, -35) == -35": {
      "result": true,
      "time": 0.03533625602722168,
      "error": null
    },
    "assert min_of_three(-8, -18, -26) == -26": {
      "result": true,
      "time": 0.04068398475646973,
      "error": null
    },
    "assert min_of_three(-13, -22, -28) == -28": {
      "result": true,
      "time": 0.03268170356750488,
      "error": null
    },
    "assert min_of_three(-15, -23, -28) == -28": {
      "result": true,
      "time": 0.03459620475769043,
      "error": null
    },
    "assert min_of_three(-8, -15, -34) == -34": {
      "result": true,
      "time": 0.04127073287963867,
      "error": null
    },
    "assert min_of_three(-12, -21, -34) == -34": {
      "result": true,
      "time": 0.03835558891296387,
      "error": null
    },
    "assert min_of_three(-8, -16, -27) == -27": {
      "result": true,
      "time": 0.039600372314453125,
      "error": null
    },
    "assert min_of_three(-6, -21, -27) == -27": {
      "result": true,
      "time": 0.03975558280944824,
      "error": null
    },
    "assert min_of_three(-7, -23, -34) == -34": {
      "result": true,
      "time": 0.043055057525634766,
      "error": null
    },
    "assert min_of_three(-5, -15, -33) == -33": {
      "result": true,
      "time": 0.038297176361083984,
      "error": null
    },
    "assert min_of_three(-6, -21, -26) == -26": {
      "result": true,
      "time": 0.039861440658569336,
      "error": null
    },
    "assert min_of_three(-6, -15, -33) == -33": {
      "result": true,
      "time": 0.029790163040161133,
      "error": null
    },
    "assert min_of_three(-11, -16, -30) == -30": {
      "result": true,
      "time": 0.04102587699890137,
      "error": null
    },
    "assert min_of_three(-8, -24, -35) == -35": {
      "result": true,
      "time": 0.04183149337768555,
      "error": null
    },
    "assert min_of_three(-10, -21, -31) == -31": {
      "result": true,
      "time": 0.04033041000366211,
      "error": null
    },
    "assert min_of_three(-5, -17, -30) == -30": {
      "result": true,
      "time": 0.03901481628417969,
      "error": null
    },
    "assert min_of_three(-13, -15, -32) == -32": {
      "result": true,
      "time": 0.03400731086730957,
      "error": null
    },
    "assert min_of_three(-15, -24, -31) == -31": {
      "result": true,
      "time": 0.04216170310974121,
      "error": null
    },
    "assert min_of_three(-12, -20, -28) == -28": {
      "result": true,
      "time": 0.03973960876464844,
      "error": null
    },
    "assert min_of_three(-14, -17, -30) == -30": {
      "result": true,
      "time": 0.033835649490356445,
      "error": null
    },
    "assert min_of_three(-6, -19, -31) == -31": {
      "result": true,
      "time": 0.03989768028259277,
      "error": null
    },
    "assert min_of_three(-14, -21, -25) == -25": {
      "result": true,
      "time": 0.03518795967102051,
      "error": null
    },
    "assert min_of_three(-13, -22, -35) == -35": {
      "result": true,
      "time": 0.041956186294555664,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}