{
  "code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
  "results": {
    "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4": {
      "result": true,
      "time": 0.048899173736572266,
      "error": null
    },
    "assert count_odd([10,15,14,13,-18,12,-20])==2": {
      "result": true,
      "time": 0.0426020622253418,
      "error": null
    },
    "assert count_odd([1, 2, 4, 8, 9])==2": {
      "result": true,
      "time": 0.03996849060058594,
      "error": null
    },
    "assert count_odd([2, 7, 2, 10, 12, 10, 11]) == 2": {
      "result": true,
      "time": 0.04011368751525879,
      "error": null
    },
    "assert count_odd([5, 1, 5, 7, 3, 7, 7]) == 7": {
      "result": true,
      "time": 0.037462472915649414,
      "error": null
    },
    "assert count_odd([6, 7, 2, 4, 3, 7, 11]) == 4": {
      "result": true,
      "time": 0.04163384437561035,
      "error": null
    },
    "assert count_odd([3, 6, 1, 6, 10, 10, 15]) == 3": {
      "result": true,
      "time": 0.035512447357177734,
      "error": null
    },
    "assert count_odd([6, 4, 6, 6, 2, 4, 9]) == 1": {
      "result": true,
      "time": 0.04253816604614258,
      "error": null
    },
    "assert count_odd([5, 3, 3, 4, 10, 7, 9]) == 5": {
      "result": true,
      "time": 0.03412961959838867,
      "error": null
    },
    "assert count_odd([5, 6, 4, 3, 5, 8, 8]) == 3": {
      "result": true,
      "time": 0.034333229064941406,
      "error": null
    },
    "assert count_odd([1, 6, 7, 3, 2, 7, 8]) == 4": {
      "result": true,
      "time": 0.034850120544433594,
      "error": null
    },
    "assert count_odd([2, 3, 5, 4, 11, 9, 7]) == 5": {
      "result": true,
      "time": 0.03531694412231445,
      "error": null
    },
    "assert count_odd([6, 2, 7, 6, 2, 13, 5]) == 3": {
      "result": true,
      "time": 0.02978515625,
      "error": null
    },
    "assert count_odd([6, 5, 1, 7, 5, 4, 9]) == 5": {
      "result": true,
      "time": 0.03593611717224121,
      "error": null
    },
    "assert count_odd([2, 6, 7, 7, 8, 8, 8]) == 2": {
      "result": true,
      "time": 0.03335165977478027,
      "error": null
    },
    "assert count_odd([1, 6, 7, 2, 10, 12, 8]) == 2": {
      "result": true,
      "time": 0.04285788536071777,
      "error": null
    },
    "assert count_odd([6, 2, 5, 10, 3, 10, 11]) == 3": {
      "result": true,
      "time": 0.036638736724853516,
      "error": null
    },
    "assert count_odd([3, 5, 7, 5, 3, 11, 11]) == 7": {
      "result": true,
      "time": 0.03745007514953613,
      "error": null
    },
    "assert count_odd([3, 3, 1, 4, 9, 4, 9]) == 5": {
      "result": true,
      "time": 0.032724618911743164,
      "error": null
    },
    "assert count_odd([4, 6, 7, 1, 7, 5, 12]) == 4": {
      "result": true,
      "time": 0.03975081443786621,
      "error": null
    },
    "assert count_odd([6, 2, 3, 2, 3, 11, 15]) == 4": {
      "result": true,
      "time": 0.034421682357788086,
      "error": null
    },
    "assert count_odd([1, 2, 5, 2, 3, 7, 11]) == 5": {
      "result": true,
      "time": 0.03390026092529297,
      "error": null
    },
    "assert count_odd([6, 5, 6, 7, 4, 13, 11]) == 4": {
      "result": true,
      "time": 0.03588080406188965,
      "error": null
    },
    "assert count_odd([4, 4, 3, 1, 7, 5, 10]) == 4": {
      "result": true,
      "time": 0.03693032264709473,
      "error": null
    },
    "assert count_odd([2, 7, 8, 4, 12, 12, 15]) == 2": {
      "result": true,
      "time": 0.03948569297790527,
      "error": null
    },
    "assert count_odd([3, 4, 2, 5, 12, 4, 11]) == 3": {
      "result": true,
      "time": 0.036864280700683594,
      "error": null
    },
    "assert count_odd([3, 1, 1, 2, 10, 5, 11]) == 5": {
      "result": true,
      "time": 0.042778730392456055,
      "error": null
    },
    "assert count_odd([4, 6, 3, 5, 5, 3, 12]) == 4": {
      "result": true,
      "time": 0.03376126289367676,
      "error": null
    },
    "assert count_odd([6, 2, 5, 9, 9, 12, 15]) == 4": {
      "result": true,
      "time": 0.04208183288574219,
      "error": null
    },
    "assert count_odd([6, 5, 8, 8, 12, 4, 5]) == 2": {
      "result": true,
      "time": 0.03612709045410156,
      "error": null
    },
    "assert count_odd([4, 2, 1, 4, 2, 8, 10]) == 1": {
      "result": true,
      "time": 0.04260611534118652,
      "error": null
    },
    "assert count_odd([2, 7, 7, 3, 6, 11, 5]) == 5": {
      "result": true,
      "time": 0.03985190391540527,
      "error": null
    },
    "assert count_odd([4, 7, 4, 6, 9, 10, 14]) == 2": {
      "result": true,
      "time": 0.03870368003845215,
      "error": null
    },
    "assert count_odd([6, 7, 2, 7, 3, 6, 11]) == 4": {
      "result": true,
      "time": 0.04177498817443848,
      "error": null
    },
    "assert count_odd([3, 2, 5, 1, 10, 9, 8]) == 4": {
      "result": true,
      "time": 0.039304256439208984,
      "error": null
    },
    "assert count_odd([5, 1, 5, 1, 6, 10, 13]) == 5": {
      "result": true,
      "time": 0.04622149467468262,
      "error": null
    },
    "assert count_odd([13, 14, 17, 13, -14, 8, -16]) == 3": {
      "result": true,
      "time": 0.039247989654541016,
      "error": null
    },
    "assert count_odd([9, 13, 19, 16, -14, 17, -18]) == 4": {
      "result": true,
      "time": 0.04128670692443848,
      "error": null
    },
    "assert count_odd([8, 16, 17, 18, -14, 10, -20]) == 1": {
      "result": true,
      "time": 0.037631988525390625,
      "error": null
    },
    "assert count_odd([8, 14, 17, 13, -18, 16, -19]) == 3": {
      "result": true,
      "time": 0.03791046142578125,
      "error": null
    },
    "assert count_odd([14, 10, 17, 18, -17, 10, -16]) == 2": {
      "result": true,
      "time": 0.03262138366699219,
      "error": null
    },
    "assert count_odd([6, 12, 14, 15, -17, 8, -17]) == 3": {
      "result": true,
      "time": 0.0335850715637207,
      "error": null
    },
    "assert count_odd([11, 18, 16, 16, -22, 9, -21]) == 3": {
      "result": true,
      "time": 0.049132585525512695,
      "error": null
    },
    "assert count_odd([10, 16, 16, 11, -19, 11, -21]) == 4": {
      "result": true,
      "time": 0.042923688888549805,
      "error": null
    },
    "assert count_odd([5, 15, 10, 15, -21, 13, -19]) == 6": {
      "result": true,
      "time": 0.03381991386413574,
      "error": null
    },
    "assert count_odd([12, 20, 13, 12, -16, 14, -20]) == 1": {
      "result": true,
      "time": 0.03849291801452637,
      "error": null
    },
    "assert count_odd([6, 14, 10, 11, -17, 15, -23]) == 4": {
      "result": true,
      "time": 0.03512144088745117,
      "error": null
    },
    "assert count_odd([15, 15, 18, 15, -19, 7, -24]) == 5": {
      "result": true,
      "time": 0.04687237739562988,
      "error": null
    },
    "assert count_odd([10, 12, 18, 8, -14, 17, -18]) == 1": {
      "result": true,
      "time": 0.03684425354003906,
      "error": null
    },
    "assert count_odd([12, 17, 17, 16, -23, 15, -25]) == 5": {
      "result": true,
      "time": 0.03786277770996094,
      "error": null
    },
    "assert count_odd([11, 18, 12, 15, -15, 16, -15]) == 4": {
      "result": true,
      "time": 0.036808013916015625,
      "error": null
    },
    "assert count_odd([15, 18, 15, 15, -16, 17, -22]) == 4": {
      "result": true,
      "time": 0.040316104888916016,
      "error": null
    },
    "assert count_odd([14, 16, 9, 18, -18, 17, -20]) == 2": {
      "result": true,
      "time": 0.03890538215637207,
      "error": null
    },
    "assert count_odd([9, 20, 17, 13, -17, 14, -15]) == 5": {
      "result": true,
      "time": 0.038537025451660156,
      "error": null
    },
    "assert count_odd([8, 14, 11, 16, -20, 8, -22]) == 1": {
      "result": true,
      "time": 0.03697705268859863,
      "error": null
    },
    "assert count_odd([10, 10, 9, 14, -14, 9, -25]) == 3": {
      "result": true,
      "time": 0.03906512260437012,
      "error": null
    },
    "assert count_odd([14, 11, 17, 10, -15, 12, -23]) == 4": {
      "result": true,
      "time": 0.03933858871459961,
      "error": null
    },
    "assert count_odd([11, 15, 15, 17, -19, 17, -25]) == 7": {
      "result": true,
      "time": 0.03916811943054199,
      "error": null
    },
    "assert count_odd([15, 17, 17, 16, -18, 12, -15]) == 4": {
      "result": true,
      "time": 0.040793418884277344,
      "error": null
    },
    "assert count_odd([5, 17, 9, 17, -18, 14, -20]) == 4": {
      "result": true,
      "time": 0.0421452522277832,
      "error": null
    },
    "assert count_odd([5, 10, 10, 9, -14, 13, -22]) == 3": {
      "result": true,
      "time": 0.04436063766479492,
      "error": null
    },
    "assert count_odd([12, 14, 13, 16, -15, 12, -23]) == 3": {
      "result": true,
      "time": 0.04550600051879883,
      "error": null
    },
    "assert count_odd([5, 18, 16, 10, -22, 9, -19]) == 3": {
      "result": true,
      "time": 0.04048585891723633,
      "error": null
    },
    "assert count_odd([11, 10, 14, 14, -20, 7, -21]) == 3": {
      "result": true,
      "time": 0.04425406455993652,
      "error": null
    },
    "assert count_odd([12, 10, 11, 15, -23, 14, -22]) == 3": {
      "result": true,
      "time": 0.04597210884094238,
      "error": null
    },
    "assert count_odd([8, 17, 17, 15, -22, 15, -20]) == 4": {
      "result": true,
      "time": 0.04484152793884277,
      "error": null
    },
    "assert count_odd([8, 12, 12, 10, -13, 15, -19]) == 3": {
      "result": true,
      "time": 0.04165196418762207,
      "error": null
    },
    "assert count_odd([5, 17, 14, 8, -14, 9, -22]) == 3": {
      "result": true,
      "time": 0.04200482368469238,
      "error": null
    },
    "assert count_odd([5, 12, 11, 13, -18, 17, -15]) == 5": {
      "result": true,
      "time": 0.04009675979614258,
      "error": null
    },
    "assert count_odd([2, 3, 2, 5, 11]) == 3": {
      "result": true,
      "time": 0.04276084899902344,
      "error": null
    },
    "assert count_odd([3, 1, 1, 11, 13]) == 5": {
      "result": true,
      "time": 0.044265031814575195,
      "error": null
    },
    "assert count_odd([6, 1, 6, 11, 10]) == 2": {
      "result": true,
      "time": 0.04304313659667969,
      "error": null
    },
    "assert count_odd([2, 6, 2, 7, 11]) == 2": {
      "result": true,
      "time": 0.04639244079589844,
      "error": null
    },
    "assert count_odd([1, 5, 4, 5, 13]) == 4": {
      "result": true,
      "time": 0.030982255935668945,
      "error": null
    },
    "assert count_odd([1, 4, 8, 13, 7]) == 3": {
      "result": true,
      "time": 0.0464937686920166,
      "error": null
    },
    "assert count_odd([3, 2, 4, 4, 10]) == 1": {
      "result": true,
      "time": 0.042543649673461914,
      "error": null
    },
    "assert count_odd([4, 6, 4, 3, 12]) == 1": {
      "result": true,
      "time": 0.04053759574890137,
      "error": null
    },
    "assert count_odd([1, 7, 6, 13, 13]) == 4": {
      "result": true,
      "time": 0.043837547302246094,
      "error": null
    },
    "assert count_odd([3, 7, 2, 5, 14]) == 3": {
      "result": true,
      "time": 0.04450631141662598,
      "error": null
    },
    "assert count_odd([2, 2, 5, 4, 9]) == 2": {
      "result": true,
      "time": 0.04326772689819336,
      "error": null
    },
    "assert count_odd([2, 6, 2, 9, 8]) == 1": {
      "result": true,
      "time": 0.03925442695617676,
      "error": null
    },
    "assert count_odd([1, 3, 4, 4, 10]) == 2": {
      "result": true,
      "time": 0.04537487030029297,
      "error": null
    },
    "assert count_odd([5, 7, 4, 4, 7]) == 3": {
      "result": true,
      "time": 0.04042458534240723,
      "error": null
    },
    "assert count_odd([5, 2, 1, 7, 9]) == 4": {
      "result": true,
      "time": 0.0438232421875,
      "error": null
    },
    "assert count_odd([5, 6, 3, 8, 4]) == 2": {
      "result": true,
      "time": 0.03543353080749512,
      "error": null
    },
    "assert count_odd([2, 3, 8, 10, 7]) == 2": {
      "result": true,
      "time": 0.04078865051269531,
      "error": null
    },
    "assert count_odd([1, 4, 5, 13, 5]) == 4": {
      "result": true,
      "time": 0.04223275184631348,
      "error": null
    },
    "assert count_odd([6, 2, 2, 8, 4]) == 0": {
      "result": true,
      "time": 0.04985690116882324,
      "error": null
    },
    "assert count_odd([4, 3, 6, 8, 12]) == 1": {
      "result": true,
      "time": 0.04564332962036133,
      "error": null
    },
    "assert count_odd([1, 4, 8, 12, 11]) == 2": {
      "result": true,
      "time": 0.04920339584350586,
      "error": null
    },
    "assert count_odd([4, 3, 6, 8, 11]) == 2": {
      "result": true,
      "time": 0.04631853103637695,
      "error": null
    },
    "assert count_odd([1, 4, 5, 11, 9]) == 4": {
      "result": true,
      "time": 0.04591727256774902,
      "error": null
    },
    "assert count_odd([2, 3, 5, 4, 8]) == 2": {
      "result": true,
      "time": 0.0474851131439209,
      "error": null
    },
    "assert count_odd([3, 2, 3, 7, 14]) == 3": {
      "result": true,
      "time": 0.04018568992614746,
      "error": null
    },
    "assert count_odd([3, 1, 1, 12, 13]) == 4": {
      "result": true,
      "time": 0.041713714599609375,
      "error": null
    },
    "assert count_odd([4, 3, 3, 9, 7]) == 4": {
      "result": true,
      "time": 0.053334712982177734,
      "error": null
    },
    "assert count_odd([5, 1, 7, 7, 6]) == 4": {
      "result": true,
      "time": 0.04358720779418945,
      "error": null
    },
    "assert count_odd([1, 5, 5, 10, 13]) == 4": {
      "result": true,
      "time": 0.04136347770690918,
      "error": null
    },
    "assert count_odd([1, 7, 6, 4, 11]) == 3": {
      "result": true,
      "time": 0.04297685623168945,
      "error": null
    },
    "assert count_odd([1, 1, 4, 7, 7]) == 4": {
      "result": true,
      "time": 0.044039011001586914,
      "error": null
    },
    "assert count_odd([3, 6, 6, 5, 11]) == 3": {
      "result": true,
      "time": 0.040422916412353516,
      "error": null
    },
    "assert count_odd([2, 7, 8, 12, 12]) == 1": {
      "result": true,
      "time": 0.05551767349243164,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}