{
  "code": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1",
  "results": {
    "assert centered_hexagonal_number(10) == 271": {
      "result": true,
      "time": 0.04554033279418945,
      "error": null
    },
    "assert centered_hexagonal_number(2) == 7": {
      "result": true,
      "time": 0.0534815788269043,
      "error": null
    },
    "assert centered_hexagonal_number(9) == 217": {
      "result": true,
      "time": 0.04120922088623047,
      "error": null
    },
    "assert centered_hexagonal_number(8) == 169": {
      "result": true,
      "time": 0.049501895904541016,
      "error": null
    },
    "assert centered_hexagonal_number(7) == 127": {
      "result": true,
      "time": 0.0404505729675293,
      "error": null
    },
    "assert centered_hexagonal_number(11) == 331": {
      "result": true,
      "time": 0.046750783920288086,
      "error": null
    },
    "assert centered_hexagonal_number(6) == 91": {
      "result": true,
      "time": 0.04697585105895996,
      "error": null
    },
    "assert centered_hexagonal_number(15) == 631": {
      "result": true,
      "time": 0.041854143142700195,
      "error": null
    },
    "assert centered_hexagonal_number(14) == 547": {
      "result": true,
      "time": 0.03854489326477051,
      "error": null
    },
    "assert centered_hexagonal_number(13) == 469": {
      "result": true,
      "time": 0.05827069282531738,
      "error": null
    },
    "assert centered_hexagonal_number(12) == 397": {
      "result": true,
      "time": 0.047482967376708984,
      "error": null
    },
    "assert centered_hexagonal_number(5) == 61": {
      "result": true,
      "time": 0.04090070724487305,
      "error": null
    },
    "assert centered_hexagonal_number(4) == 37": {
      "result": true,
      "time": 0.041878700256347656,
      "error": null
    },
    "assert centered_hexagonal_number(1) == 1": {
      "result": true,
      "time": 0.039578914642333984,
      "error": null
    },
    "assert centered_hexagonal_number(3) == 19": {
      "result": true,
      "time": 0.04884839057922363,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}