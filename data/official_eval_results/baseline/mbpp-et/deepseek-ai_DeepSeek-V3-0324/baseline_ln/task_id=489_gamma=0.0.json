{
  "code": "def frequency_Of_Largest(n, arr):\n    if n == 0:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
  "results": {
    "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2": {
      "result": true,
      "time": 0.036475181579589844,
      "error": null
    },
    "assert frequency_Of_Largest(3,[5,6,5]) == 1": {
      "result": true,
      "time": 0.03107738494873047,
      "error": null
    },
    "assert frequency_Of_Largest(4,[2,7,7,7]) == 3": {
      "result": true,
      "time": 0.03600120544433594,
      "error": null
    },
    "assert frequency_Of_Largest(2, [2, 6, 7, 9, 2]) == 1": {
      "result": true,
      "time": 0.03451681137084961,
      "error": null
    },
    "assert frequency_Of_Largest(4, [6, 6, 1, 3, 1]) == 2": {
      "result": true,
      "time": 0.03433370590209961,
      "error": null
    },
    "assert frequency_Of_Largest(1, [1, 2, 4, 2, 2]) == 1": {
      "result": true,
      "time": 0.03859114646911621,
      "error": null
    },
    "assert frequency_Of_Largest(2, [3, 4, 5, 2, 1]) == 1": {
      "result": true,
      "time": 0.034461259841918945,
      "error": null
    },
    "assert frequency_Of_Largest(5, [4, 4, 2, 8, 5]) == 1": {
      "result": true,
      "time": 0.03740739822387695,
      "error": null
    },
    "assert frequency_Of_Largest(1, [4, 3, 6, 9, 1]) == 1": {
      "result": true,
      "time": 0.03396296501159668,
      "error": null
    },
    "assert frequency_Of_Largest(2, [2, 5, 3, 4, 7]) == 1": {
      "result": true,
      "time": 0.035369873046875,
      "error": null
    },
    "assert frequency_Of_Largest(1, [3, 6, 1, 3, 4]) == 1": {
      "result": true,
      "time": 0.03696489334106445,
      "error": null
    },
    "assert frequency_Of_Largest(4, [3, 7, 3, 8, 7]) == 1": {
      "result": true,
      "time": 0.03210330009460449,
      "error": null
    },
    "assert frequency_Of_Largest(1, [6, 3, 5, 5, 3]) == 1": {
      "result": true,
      "time": 0.03526735305786133,
      "error": null
    },
    "assert frequency_Of_Largest(2, [4, 6, 3, 7, 5]) == 1": {
      "result": true,
      "time": 0.028070688247680664,
      "error": null
    },
    "assert frequency_Of_Largest(4, [3, 6, 8, 3, 6]) == 1": {
      "result": true,
      "time": 0.036676883697509766,
      "error": null
    },
    "assert frequency_Of_Largest(4, [3, 1, 4, 7, 1]) == 1": {
      "result": true,
      "time": 0.03901195526123047,
      "error": null
    },
    "assert frequency_Of_Largest(5, [4, 1, 5, 7, 6]) == 1": {
      "result": true,
      "time": 0.03523421287536621,
      "error": null
    },
    "assert frequency_Of_Largest(2, [3, 1, 3, 3, 7]) == 1": {
      "result": true,
      "time": 0.04576373100280762,
      "error": null
    },
    "assert frequency_Of_Largest(5, [6, 3, 8, 2, 5]) == 1": {
      "result": true,
      "time": 0.03183889389038086,
      "error": null
    },
    "assert frequency_Of_Largest(2, [6, 3, 1, 7, 1]) == 1": {
      "result": true,
      "time": 0.034447669982910156,
      "error": null
    },
    "assert frequency_Of_Largest(2, [2, 4, 5, 4, 9]) == 1": {
      "result": true,
      "time": 0.03167366981506348,
      "error": null
    },
    "assert frequency_Of_Largest(4, [1, 2, 6, 1, 4]) == 1": {
      "result": true,
      "time": 0.03731656074523926,
      "error": null
    },
    "assert frequency_Of_Largest(5, [2, 5, 4, 6, 4]) == 1": {
      "result": true,
      "time": 0.03769540786743164,
      "error": null
    },
    "assert frequency_Of_Largest(1, [1, 2, 8, 8, 7]) == 1": {
      "result": false,
      "time": 0.04379439353942871,
      "error": null
    },
    "assert frequency_Of_Largest(1, [5, 7, 8, 4, 3]) == 1": {
      "result": true,
      "time": 0.04672503471374512,
      "error": null
    },
    "assert frequency_Of_Largest(1, [4, 5, 6, 7, 5]) == 1": {
      "result": true,
      "time": 0.05185508728027344,
      "error": null
    },
    "assert frequency_Of_Largest(3, [6, 7, 1, 2, 1]) == 1": {
      "result": true,
      "time": 0.039642333984375,
      "error": null
    },
    "assert frequency_Of_Largest(4, [5, 4, 6, 5, 2]) == 1": {
      "result": true,
      "time": 0.04068565368652344,
      "error": null
    },
    "assert frequency_Of_Largest(4, [6, 2, 7, 4, 3]) == 1": {
      "result": true,
      "time": 0.036064863204956055,
      "error": null
    },
    "assert frequency_Of_Largest(2, [1, 3, 4, 3, 9]) == 1": {
      "result": true,
      "time": 0.02905750274658203,
      "error": null
    },
    "assert frequency_Of_Largest(4, [1, 3, 8, 4, 9]) == 1": {
      "result": true,
      "time": 0.04140424728393555,
      "error": null
    },
    "assert frequency_Of_Largest(2, [5, 3, 5, 3, 2]) == 1": {
      "result": false,
      "time": 0.03536176681518555,
      "error": null
    },
    "assert frequency_Of_Largest(4, [6, 7, 5, 8, 4]) == 1": {
      "result": true,
      "time": 0.03460240364074707,
      "error": null
    },
    "assert frequency_Of_Largest(1, [2, 1, 2, 5, 8]) == 1": {
      "result": true,
      "time": 0.03038501739501953,
      "error": null
    },
    "assert frequency_Of_Largest(2, [2, 2, 4, 6, 7]) == 2": {
      "result": false,
      "time": 0.03703713417053223,
      "error": null
    },
    "assert frequency_Of_Largest(2, [5, 2, 7, 3, 6]) == 1": {
      "result": true,
      "time": 0.03383946418762207,
      "error": null
    },
    "assert frequency_Of_Largest(2, [1, 7, 2]) == 1": {
      "result": true,
      "time": 0.03516244888305664,
      "error": null
    },
    "assert frequency_Of_Largest(2, [10, 11, 1]) == 1": {
      "result": true,
      "time": 0.038997650146484375,
      "error": null
    },
    "assert frequency_Of_Largest(3, [2, 8, 7]) == 1": {
      "result": true,
      "time": 0.03638267517089844,
      "error": null
    },
    "assert frequency_Of_Largest(3, [1, 6, 6]) == 2": {
      "result": true,
      "time": 0.030635356903076172,
      "error": null
    },
    "assert frequency_Of_Largest(1, [3, 1, 5]) == 1": {
      "result": true,
      "time": 0.0390322208404541,
      "error": null
    },
    "assert frequency_Of_Largest(3, [6, 9, 5]) == 1": {
      "result": true,
      "time": 0.041330814361572266,
      "error": null
    },
    "assert frequency_Of_Largest(2, [8, 8, 6]) == 2": {
      "result": true,
      "time": 0.039167165756225586,
      "error": null
    },
    "assert frequency_Of_Largest(2, [8, 5, 3]) == 1": {
      "result": true,
      "time": 0.03621220588684082,
      "error": null
    },
    "assert frequency_Of_Largest(1, [6, 8, 4]) == 1": {
      "result": true,
      "time": 0.046415090560913086,
      "error": null
    },
    "assert frequency_Of_Largest(1, [7, 2, 5]) == 1": {
      "result": true,
      "time": 0.03599667549133301,
      "error": null
    },
    "assert frequency_Of_Largest(1, [8, 5, 2]) == 1": {
      "result": true,
      "time": 0.03409409523010254,
      "error": null
    },
    "assert frequency_Of_Largest(2, [2, 8, 5]) == 1": {
      "result": true,
      "time": 0.036104440689086914,
      "error": null
    },
    "assert frequency_Of_Largest(3, [5, 5, 10]) == 1": {
      "result": true,
      "time": 0.035620927810668945,
      "error": null
    },
    "assert frequency_Of_Largest(1, [9, 2, 1]) == 1": {
      "result": true,
      "time": 0.032674551010131836,
      "error": null
    },
    "assert frequency_Of_Largest(2, [5, 3, 8]) == 1": {
      "result": true,
      "time": 0.03693532943725586,
      "error": null
    },
    "assert frequency_Of_Largest(1, [2, 2, 9]) == 1": {
      "result": true,
      "time": 0.03671002388000488,
      "error": null
    },
    "assert frequency_Of_Largest(3, [8, 2, 3]) == 1": {
      "result": true,
      "time": 0.03581690788269043,
      "error": null
    },
    "assert frequency_Of_Largest(1, [2, 11, 10]) == 1": {
      "result": true,
      "time": 0.03284645080566406,
      "error": null
    },
    "assert frequency_Of_Largest(3, [5, 5, 4]) == 2": {
      "result": true,
      "time": 0.03764176368713379,
      "error": null
    },
    "assert frequency_Of_Largest(3, [7, 10, 5]) == 1": {
      "result": true,
      "time": 0.03498697280883789,
      "error": null
    },
    "assert frequency_Of_Largest(3, [8, 8, 9]) == 1": {
      "result": true,
      "time": 0.040090322494506836,
      "error": null
    },
    "assert frequency_Of_Largest(1, [3, 3, 3]) == 1": {
      "result": false,
      "time": 0.03612184524536133,
      "error": null
    },
    "assert frequency_Of_Largest(1, [1, 3, 9]) == 1": {
      "result": true,
      "time": 0.032891035079956055,
      "error": null
    },
    "assert frequency_Of_Largest(2, [4, 1, 10]) == 1": {
      "result": true,
      "time": 0.03742098808288574,
      "error": null
    },
    "assert frequency_Of_Largest(1, [4, 6, 5]) == 1": {
      "result": true,
      "time": 0.032179832458496094,
      "error": null
    },
    "assert frequency_Of_Largest(3, [8, 2, 7]) == 1": {
      "result": true,
      "time": 0.033905029296875,
      "error": null
    },
    "assert frequency_Of_Largest(1, [1, 5, 2]) == 1": {
      "result": true,
      "time": 0.03597426414489746,
      "error": null
    },
    "assert frequency_Of_Largest(3, [7, 4, 7]) == 2": {
      "result": true,
      "time": 0.03618502616882324,
      "error": null
    },
    "assert frequency_Of_Largest(2, [4, 6, 3]) == 1": {
      "result": true,
      "time": 0.029384136199951172,
      "error": null
    },
    "assert frequency_Of_Largest(1, [10, 7, 8]) == 1": {
      "result": true,
      "time": 0.03574228286743164,
      "error": null
    },
    "assert frequency_Of_Largest(2, [7, 1, 9]) == 1": {
      "result": true,
      "time": 0.039052486419677734,
      "error": null
    },
    "assert frequency_Of_Largest(2, [6, 9, 4]) == 1": {
      "result": true,
      "time": 0.0368046760559082,
      "error": null
    },
    "assert frequency_Of_Largest(1, [2, 3, 12, 8]) == 1": {
      "result": true,
      "time": 0.04369807243347168,
      "error": null
    },
    "assert frequency_Of_Largest(3, [3, 9, 11, 11]) == 1": {
      "result": false,
      "time": 0.03458571434020996,
      "error": null
    },
    "assert frequency_Of_Largest(2, [1, 10, 4, 8]) == 1": {
      "result": true,
      "time": 0.04220914840698242,
      "error": null
    },
    "assert frequency_Of_Largest(4, [1, 9, 5, 11]) == 1": {
      "result": true,
      "time": 0.03218388557434082,
      "error": null
    },
    "assert frequency_Of_Largest(1, [5, 2, 8, 10]) == 1": {
      "result": true,
      "time": 0.038666486740112305,
      "error": null
    },
    "assert frequency_Of_Largest(3, [1, 7, 7, 7]) == 2": {
      "result": false,
      "time": 0.031136274337768555,
      "error": null
    },
    "assert frequency_Of_Largest(2, [4, 4, 10, 2]) == 2": {
      "result": false,
      "time": 0.040700435638427734,
      "error": null
    },
    "assert frequency_Of_Largest(2, [3, 7, 8, 2]) == 1": {
      "result": true,
      "time": 0.029955148696899414,
      "error": null
    },
    "assert frequency_Of_Largest(3, [6, 9, 8, 5]) == 1": {
      "result": true,
      "time": 0.04333186149597168,
      "error": null
    },
    "assert frequency_Of_Largest(1, [6, 11, 3, 8]) == 1": {
      "result": true,
      "time": 0.03697013854980469,
      "error": null
    },
    "assert frequency_Of_Largest(4, [6, 3, 8, 5]) == 1": {
      "result": true,
      "time": 0.03723335266113281,
      "error": null
    },
    "assert frequency_Of_Largest(3, [7, 5, 2, 10]) == 1": {
      "result": true,
      "time": 0.0313870906829834,
      "error": null
    },
    "assert frequency_Of_Largest(4, [4, 3, 8, 5]) == 1": {
      "result": true,
      "time": 0.036296844482421875,
      "error": null
    },
    "assert frequency_Of_Largest(3, [5, 5, 4, 6]) == 2": {
      "result": false,
      "time": 0.03058934211730957,
      "error": null
    },
    "assert frequency_Of_Largest(3, [7, 7, 7, 3]) == 3": {
      "result": true,
      "time": 0.04054450988769531,
      "error": null
    },
    "assert frequency_Of_Largest(1, [1, 10, 5, 9]) == 1": {
      "result": true,
      "time": 0.03001117706298828,
      "error": null
    },
    "assert frequency_Of_Largest(1, [4, 7, 6, 12]) == 1": {
      "result": true,
      "time": 0.03995037078857422,
      "error": null
    },
    "assert frequency_Of_Largest(1, [7, 3, 10, 8]) == 1": {
      "result": true,
      "time": 0.03187870979309082,
      "error": null
    },
    "assert frequency_Of_Largest(2, [3, 9, 3, 12]) == 1": {
      "result": true,
      "time": 0.03296542167663574,
      "error": null
    },
    "assert frequency_Of_Largest(4, [5, 9, 10, 4]) == 1": {
      "result": true,
      "time": 0.036995887756347656,
      "error": null
    },
    "assert frequency_Of_Largest(1, [2, 3, 2, 11]) == 1": {
      "result": true,
      "time": 0.03628253936767578,
      "error": null
    },
    "assert frequency_Of_Largest(2, [6, 8, 9, 7]) == 1": {
      "result": true,
      "time": 0.036264657974243164,
      "error": null
    },
    "assert frequency_Of_Largest(1, [1, 6, 8, 12]) == 1": {
      "result": true,
      "time": 0.03635096549987793,
      "error": null
    },
    "assert frequency_Of_Largest(2, [3, 11, 7, 9]) == 1": {
      "result": true,
      "time": 0.03043055534362793,
      "error": null
    },
    "assert frequency_Of_Largest(4, [7, 2, 7, 12]) == 1": {
      "result": true,
      "time": 0.034250497817993164,
      "error": null
    },
    "assert frequency_Of_Largest(4, [5, 2, 7, 10]) == 1": {
      "result": true,
      "time": 0.03570747375488281,
      "error": null
    },
    "assert frequency_Of_Largest(4, [7, 7, 3, 3]) == 2": {
      "result": true,
      "time": 0.04187607765197754,
      "error": null
    },
    "assert frequency_Of_Largest(4, [7, 2, 6, 5]) == 1": {
      "result": true,
      "time": 0.028067588806152344,
      "error": null
    },
    "assert frequency_Of_Largest(1, [1, 9, 12, 11]) == 1": {
      "result": true,
      "time": 0.03083205223083496,
      "error": null
    },
    "assert frequency_Of_Largest(1, [5, 6, 8, 11]) == 1": {
      "result": true,
      "time": 0.03912973403930664,
      "error": null
    },
    "assert frequency_Of_Largest(4, [4, 2, 7, 9]) == 1": {
      "result": true,
      "time": 0.029319286346435547,
      "error": null
    },
    "assert frequency_Of_Largest(3, [7, 3, 2, 2]) == 1": {
      "result": true,
      "time": 0.03588581085205078,
      "error": null
    },
    "assert frequency_Of_Largest(3, [6, 2, 11, 7]) == 1": {
      "result": true,
      "time": 0.03564953804016113,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9207920792079208,
  "general_error": "",
  "has_testcase_error": false
}