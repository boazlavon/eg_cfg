{
  "code": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
  "results": {
    "assert highest_Power_of_2(10) == 8": {
      "result": true,
      "time": 0.0587615966796875,
      "error": null
    },
    "assert highest_Power_of_2(19) == 16": {
      "result": true,
      "time": 0.06797957420349121,
      "error": null
    },
    "assert highest_Power_of_2(32) == 32": {
      "result": true,
      "time": 0.07939791679382324,
      "error": null
    },
    "assert highest_Power_of_2(15) == 8": {
      "result": true,
      "time": 0.052011728286743164,
      "error": null
    },
    "assert highest_Power_of_2(11) == 8": {
      "result": true,
      "time": 0.06264781951904297,
      "error": null
    },
    "assert highest_Power_of_2(5) == 4": {
      "result": true,
      "time": 0.07222318649291992,
      "error": null
    },
    "assert highest_Power_of_2(8) == 8": {
      "result": true,
      "time": 0.06493449211120605,
      "error": null
    },
    "assert highest_Power_of_2(6) == 4": {
      "result": true,
      "time": 0.06270408630371094,
      "error": null
    },
    "assert highest_Power_of_2(9) == 8": {
      "result": true,
      "time": 0.07284927368164062,
      "error": null
    },
    "assert highest_Power_of_2(14) == 8": {
      "result": true,
      "time": 0.06131935119628906,
      "error": null
    },
    "assert highest_Power_of_2(13) == 8": {
      "result": true,
      "time": 0.0714101791381836,
      "error": null
    },
    "assert highest_Power_of_2(7) == 4": {
      "result": true,
      "time": 0.05224323272705078,
      "error": null
    },
    "assert highest_Power_of_2(12) == 8": {
      "result": true,
      "time": 0.0728142261505127,
      "error": null
    },
    "assert highest_Power_of_2(22) == 16": {
      "result": true,
      "time": 0.05523848533630371,
      "error": null
    },
    "assert highest_Power_of_2(16) == 16": {
      "result": true,
      "time": 0.06607723236083984,
      "error": null
    },
    "assert highest_Power_of_2(20) == 16": {
      "result": true,
      "time": 0.06455659866333008,
      "error": null
    },
    "assert highest_Power_of_2(18) == 16": {
      "result": true,
      "time": 0.06346583366394043,
      "error": null
    },
    "assert highest_Power_of_2(21) == 16": {
      "result": true,
      "time": 0.07507467269897461,
      "error": null
    },
    "assert highest_Power_of_2(17) == 16": {
      "result": true,
      "time": 0.053893089294433594,
      "error": null
    },
    "assert highest_Power_of_2(24) == 16": {
      "result": true,
      "time": 0.054944515228271484,
      "error": null
    },
    "assert highest_Power_of_2(23) == 16": {
      "result": true,
      "time": 0.0551602840423584,
      "error": null
    },
    "assert highest_Power_of_2(37) == 32": {
      "result": true,
      "time": 0.057915449142456055,
      "error": null
    },
    "assert highest_Power_of_2(29) == 16": {
      "result": true,
      "time": 0.05859255790710449,
      "error": null
    },
    "assert highest_Power_of_2(28) == 16": {
      "result": true,
      "time": 0.0559382438659668,
      "error": null
    },
    "assert highest_Power_of_2(33) == 32": {
      "result": true,
      "time": 0.05388832092285156,
      "error": null
    },
    "assert highest_Power_of_2(27) == 16": {
      "result": true,
      "time": 0.05656766891479492,
      "error": null
    },
    "assert highest_Power_of_2(30) == 16": {
      "result": true,
      "time": 0.0702054500579834,
      "error": null
    },
    "assert highest_Power_of_2(34) == 32": {
      "result": true,
      "time": 0.06133675575256348,
      "error": null
    },
    "assert highest_Power_of_2(36) == 32": {
      "result": true,
      "time": 0.05776786804199219,
      "error": null
    },
    "assert highest_Power_of_2(35) == 32": {
      "result": true,
      "time": 0.07146692276000977,
      "error": null
    },
    "assert highest_Power_of_2(31) == 16": {
      "result": true,
      "time": 0.06120181083679199,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}