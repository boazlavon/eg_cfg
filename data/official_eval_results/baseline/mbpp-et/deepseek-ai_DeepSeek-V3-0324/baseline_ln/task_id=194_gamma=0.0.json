{
  "code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        decimal += last_digit * (8 ** power)\n        power += 1\n        octal = octal // 10\n    return decimal",
  "results": {
    "assert octal_To_Decimal(25) == 21": {
      "result": true,
      "time": 0.04010367393493652,
      "error": null
    },
    "assert octal_To_Decimal(30) == 24": {
      "result": true,
      "time": 0.05231475830078125,
      "error": null
    },
    "assert octal_To_Decimal(40) == 32": {
      "result": true,
      "time": 0.03856396675109863,
      "error": null
    },
    "assert octal_To_Decimal(29) == 25": {
      "result": true,
      "time": 0.04688549041748047,
      "error": null
    },
    "assert octal_To_Decimal(24) == 20": {
      "result": true,
      "time": 0.037197113037109375,
      "error": null
    },
    "assert octal_To_Decimal(20) == 16": {
      "result": true,
      "time": 0.05115628242492676,
      "error": null
    },
    "assert octal_To_Decimal(26) == 22": {
      "result": true,
      "time": 0.06850099563598633,
      "error": null
    },
    "assert octal_To_Decimal(22) == 18": {
      "result": true,
      "time": 0.06057620048522949,
      "error": null
    },
    "assert octal_To_Decimal(28) == 24": {
      "result": true,
      "time": 0.05989551544189453,
      "error": null
    },
    "assert octal_To_Decimal(21) == 17": {
      "result": true,
      "time": 0.04812026023864746,
      "error": null
    },
    "assert octal_To_Decimal(27) == 23": {
      "result": true,
      "time": 0.05237627029418945,
      "error": null
    },
    "assert octal_To_Decimal(35) == 29": {
      "result": true,
      "time": 0.04857659339904785,
      "error": null
    },
    "assert octal_To_Decimal(32) == 26": {
      "result": true,
      "time": 0.051867008209228516,
      "error": null
    },
    "assert octal_To_Decimal(34) == 28": {
      "result": true,
      "time": 0.054027557373046875,
      "error": null
    },
    "assert octal_To_Decimal(31) == 25": {
      "result": true,
      "time": 0.05708193778991699,
      "error": null
    },
    "assert octal_To_Decimal(33) == 27": {
      "result": true,
      "time": 0.05557656288146973,
      "error": null
    },
    "assert octal_To_Decimal(42) == 34": {
      "result": true,
      "time": 0.04203987121582031,
      "error": null
    },
    "assert octal_To_Decimal(44) == 36": {
      "result": true,
      "time": 0.06105375289916992,
      "error": null
    },
    "assert octal_To_Decimal(43) == 35": {
      "result": true,
      "time": 0.04763650894165039,
      "error": null
    },
    "assert octal_To_Decimal(41) == 33": {
      "result": true,
      "time": 0.05534934997558594,
      "error": null
    },
    "assert octal_To_Decimal(36) == 30": {
      "result": true,
      "time": 0.04202723503112793,
      "error": null
    },
    "assert octal_To_Decimal(39) == 33": {
      "result": true,
      "time": 0.06827521324157715,
      "error": null
    },
    "assert octal_To_Decimal(45) == 37": {
      "result": true,
      "time": 0.05206561088562012,
      "error": null
    },
    "assert octal_To_Decimal(38) == 32": {
      "result": true,
      "time": 0.05964517593383789,
      "error": null
    },
    "assert octal_To_Decimal(37) == 31": {
      "result": true,
      "time": 0.0500028133392334,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}