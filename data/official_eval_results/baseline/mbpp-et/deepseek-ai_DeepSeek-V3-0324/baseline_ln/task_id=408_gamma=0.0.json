{
  "code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result",
  "results": {
    "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]": {
      "result": true,
      "time": 0.15514135360717773,
      "error": null
    },
    "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]": {
      "result": true,
      "time": 0.15032672882080078,
      "error": null
    },
    "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]": {
      "result": true,
      "time": 0.12923192977905273,
      "error": null
    },
    "assert k_smallest_pairs([5, 2, 11], [1, 7, 11], 5) == [[5, 1], [2, 1], [2, 7], [5, 7], [11, 1]]": {
      "result": false,
      "time": 0.13472509384155273,
      "error": null
    },
    "assert k_smallest_pairs([3, 7, 12], [6, 3, 6], 7) == [[3, 6], [3, 3], [3, 6], [7, 6], [7, 3], [7, 6], [12, 6]]": {
      "result": false,
      "time": 0.13652539253234863,
      "error": null
    },
    "assert k_smallest_pairs([2, 1, 9], [5, 3, 10], 6) == [[2, 5], [2, 3], [1, 5], [1, 3], [1, 10], [2, 10]]": {
      "result": false,
      "time": 0.15316462516784668,
      "error": null
    },
    "assert k_smallest_pairs([6, 5, 6], [5, 9, 5], 7) == [[6, 5], [5, 5], [6, 5], [5, 9], [5, 5], [6, 9], [6, 5]]": {
      "result": false,
      "time": 0.12287092208862305,
      "error": null
    },
    "assert k_smallest_pairs([2, 8, 5], [6, 8, 3], 6) == [[2, 6], [2, 8], [2, 3], [8, 6], [5, 6], [5, 8]]": {
      "result": false,
      "time": 0.13144993782043457,
      "error": null
    },
    "assert k_smallest_pairs([5, 2, 4], [4, 7, 6], 7) == [[5, 4], [2, 4], [4, 4], [2, 7], [2, 6], [4, 7], [4, 6]]": {
      "result": false,
      "time": 0.14655470848083496,
      "error": null
    },
    "assert k_smallest_pairs([4, 1, 10], [3, 2, 6], 7) == [[4, 3], [1, 3], [1, 2], [4, 2], [1, 6], [4, 6], [10, 3]]": {
      "result": false,
      "time": 0.14780735969543457,
      "error": null
    },
    "assert k_smallest_pairs([3, 7, 5], [2, 6, 3], 5) == [[3, 2], [3, 6], [3, 3], [7, 2], [5, 2]]": {
      "result": false,
      "time": 0.14777636528015137,
      "error": null
    },
    "assert k_smallest_pairs([6, 3, 8], [5, 8, 9], 6) == [[6, 5], [3, 5], [3, 8], [3, 9], [8, 5], [6, 8]]": {
      "result": false,
      "time": 0.13381004333496094,
      "error": null
    },
    "assert k_smallest_pairs([2, 2, 9], [6, 7, 6], 7) == [[2, 6], [2, 6], [2, 7], [2, 6], [2, 7], [2, 6], [9, 6]]": {
      "result": false,
      "time": 0.1342771053314209,
      "error": null
    },
    "assert k_smallest_pairs([3, 6, 4], [7, 1, 2], 6) == [[3, 7], [3, 1], [3, 2], [6, 7], [6, 1], [6, 2]]": {
      "result": false,
      "time": 0.1309819221496582,
      "error": null
    },
    "assert k_smallest_pairs([5, 3, 11], [2, 8, 7], 1) == [[5, 2]]": {
      "result": false,
      "time": 0.14223051071166992,
      "error": null
    },
    "assert k_smallest_pairs([4, 6, 5], [2, 6, 1], 2) == [[4, 2], [6, 2]]": {
      "result": false,
      "time": 0.14162111282348633,
      "error": null
    },
    "assert k_smallest_pairs([1, 7, 2], [6, 9, 3], 3) == [[1, 6], [1, 9], [1, 3]]": {
      "result": false,
      "time": 0.1167905330657959,
      "error": null
    },
    "assert k_smallest_pairs([3, 2, 12], [1, 8, 3], 5) == [[3, 1], [2, 1], [2, 8], [2, 3], [3, 8]]": {
      "result": false,
      "time": 0.12995147705078125,
      "error": null
    },
    "assert k_smallest_pairs([2, 8, 8], [1, 9, 10], 3) == [[2, 1], [8, 1], [8, 1]]": {
      "result": true,
      "time": 0.13926100730895996,
      "error": null
    },
    "assert k_smallest_pairs([2, 5, 4], [7, 1, 9], 6) == [[2, 7], [2, 1], [2, 9], [5, 7], [5, 1], [4, 7]]": {
      "result": false,
      "time": 0.12017130851745605,
      "error": null
    },
    "assert k_smallest_pairs([5, 4, 9], [4, 3, 9], 4) == [[5, 4], [5, 3], [4, 4], [4, 3]]": {
      "result": false,
      "time": 0.14496469497680664,
      "error": null
    },
    "assert k_smallest_pairs([6, 8, 7], [1, 9, 3], 4) == [[6, 1], [8, 1], [7, 1], [6, 9]]": {
      "result": false,
      "time": 0.15785932540893555,
      "error": null
    },
    "assert k_smallest_pairs([5, 3, 5], [3, 1, 2], 3) == [[5, 3], [5, 1], [3, 3]]": {
      "result": false,
      "time": 0.12784886360168457,
      "error": null
    },
    "assert k_smallest_pairs([1, 1, 10], [1, 7, 6], 3) == [[1, 1], [1, 1], [1, 7]]": {
      "result": false,
      "time": 0.1335313320159912,
      "error": null
    },
    "assert k_smallest_pairs([6, 7, 3], [1, 3, 8], 1) == [[6, 1]]": {
      "result": false,
      "time": 0.15958452224731445,
      "error": null
    },
    "assert k_smallest_pairs([6, 1, 8], [4, 8, 3], 3) == [[6, 4], [1, 4], [1, 8]]": {
      "result": false,
      "time": 0.14017391204833984,
      "error": null
    },
    "assert k_smallest_pairs([3, 1, 2], [1, 4, 10], 6) == [[3, 1], [1, 1], [2, 1], [1, 4], [2, 4], [3, 4]]": {
      "result": false,
      "time": 0.13730263710021973,
      "error": null
    },
    "assert k_smallest_pairs([2, 7, 4], [1, 5, 4], 3) == [[2, 1], [2, 5], [2, 4]]": {
      "result": false,
      "time": 0.13903188705444336,
      "error": null
    },
    "assert k_smallest_pairs([4, 4, 4], [1, 5, 2], 5) == [[4, 1], [4, 1], [4, 1], [4, 5], [4, 2]]": {
      "result": false,
      "time": 0.1448841094970703,
      "error": null
    },
    "assert k_smallest_pairs([2, 6, 5], [7, 7, 2], 7) == [[2, 7], [2, 7], [2, 2], [6, 7], [5, 7], [5, 7], [5, 2]]": {
      "result": false,
      "time": 0.1488194465637207,
      "error": null
    },
    "assert k_smallest_pairs([6, 2, 11], [4, 2, 6], 3) == [[6, 4], [2, 4], [2, 2]]": {
      "result": false,
      "time": 0.1446208953857422,
      "error": null
    },
    "assert k_smallest_pairs([2, 2, 8], [6, 3, 9], 5) == [[2, 6], [2, 3], [2, 6], [2, 3], [2, 9]]": {
      "result": false,
      "time": 0.1444838047027588,
      "error": null
    },
    "assert k_smallest_pairs([4, 2, 5], [2, 7, 6], 4) == [[4, 2], [2, 2], [5, 2], [2, 7]]": {
      "result": false,
      "time": 0.15300273895263672,
      "error": null
    },
    "assert k_smallest_pairs([6, 3, 9], [1, 4, 11], 4) == [[6, 1], [3, 1], [3, 4], [6, 4]]": {
      "result": false,
      "time": 0.13347554206848145,
      "error": null
    },
    "assert k_smallest_pairs([2, 7, 8], [7, 8, 8], 1) == [[2, 7]]": {
      "result": true,
      "time": 0.1484358310699463,
      "error": null
    },
    "assert k_smallest_pairs([5, 2, 9], [2, 8, 10], 7) == [[5, 2], [2, 2], [2, 8], [9, 2], [2, 10], [5, 8], [5, 10]]": {
      "result": false,
      "time": 0.11492109298706055,
      "error": null
    },
    "assert k_smallest_pairs([2, 1, 12], [5, 5, 3], 6) == [[2, 5], [1, 5], [1, 5], [1, 3], [2, 5], [2, 3]]": {
      "result": false,
      "time": 0.151564359664917,
      "error": null
    },
    "assert k_smallest_pairs([2, 8, 9], [3, 3, 10], 6) == [[2, 3], [2, 3], [8, 3], [8, 3], [2, 10], [9, 3]]": {
      "result": true,
      "time": 0.13039946556091309,
      "error": null
    },
    "assert k_smallest_pairs([3, 1, 9], [1, 8, 6], 4) == [[3, 1], [1, 1], [1, 8], [1, 6]]": {
      "result": false,
      "time": 0.14458036422729492,
      "error": null
    },
    "assert k_smallest_pairs([3, 6, 10], [3, 7, 11], 3) == [[3, 3], [6, 3], [3, 7]]": {
      "result": true,
      "time": 0.13549304008483887,
      "error": null
    },
    "assert k_smallest_pairs([2, 2, 10], [6, 2, 7], 4) == [[2, 6], [2, 2], [2, 6], [2, 2]]": {
      "result": false,
      "time": 0.13294291496276855,
      "error": null
    },
    "assert k_smallest_pairs([6, 3, 11], [3, 8, 3], 4) == [[6, 3], [3, 3], [3, 8], [3, 3]]": {
      "result": false,
      "time": 0.13381600379943848,
      "error": null
    },
    "assert k_smallest_pairs([6, 3, 6], [7, 4, 7], 2) == [[6, 7], [6, 4]]": {
      "result": false,
      "time": 0.1408088207244873,
      "error": null
    },
    "assert k_smallest_pairs([1, 8, 9], [4, 4, 3], 6) == [[1, 4], [1, 4], [1, 3], [8, 4], [8, 4], [8, 3]]": {
      "result": false,
      "time": 0.14764904975891113,
      "error": null
    },
    "assert k_smallest_pairs([4, 3, 11], [2, 6, 1], 6) == [[4, 2], [3, 2], [3, 6], [3, 1], [4, 6], [4, 1]]": {
      "result": false,
      "time": 0.13115286827087402,
      "error": null
    },
    "assert k_smallest_pairs([1, 1, 6], [2, 8, 5], 2) == [[1, 2], [1, 2]]": {
      "result": true,
      "time": 0.13440299034118652,
      "error": null
    },
    "assert k_smallest_pairs([6, 5, 9], [2, 6, 7], 6) == [[6, 2], [5, 2], [5, 6], [9, 2], [6, 6], [5, 7]]": {
      "result": false,
      "time": 0.1496143341064453,
      "error": null
    },
    "assert k_smallest_pairs([2, 7, 2], [5, 9, 6], 6) == [[2, 5], [2, 9], [2, 6], [7, 5], [2, 5], [2, 9]]": {
      "result": false,
      "time": 0.16200494766235352,
      "error": null
    },
    "assert k_smallest_pairs([1, 7, 12], [7, 1, 2], 6) == [[1, 7], [1, 1], [1, 2], [7, 7], [7, 1], [7, 2]]": {
      "result": false,
      "time": 0.1264791488647461,
      "error": null
    },
    "assert k_smallest_pairs([3, 7, 10], [3, 3, 10], 6) == [[3, 3], [3, 3], [7, 3], [7, 3], [3, 10], [10, 3]]": {
      "result": true,
      "time": 0.12994790077209473,
      "error": null
    },
    "assert k_smallest_pairs([5, 2, 3], [1, 7, 11], 2) == [[5, 1], [2, 1]]": {
      "result": false,
      "time": 0.13549518585205078,
      "error": null
    },
    "assert k_smallest_pairs([5, 5, 9], [2, 8, 6], 1) == [[5, 2]]": {
      "result": true,
      "time": 0.1343822479248047,
      "error": null
    },
    "assert k_smallest_pairs([1, 3, 2], [4, 8, 8], 3) == [[1, 4], [3, 4], [2, 4]]": {
      "result": false,
      "time": 0.12876558303833008,
      "error": null
    },
    "assert k_smallest_pairs([2, 5, 4], [7, 6, 2], 5) == [[2, 7], [2, 6], [2, 2], [5, 7], [5, 6]]": {
      "result": false,
      "time": 0.1299424171447754,
      "error": null
    },
    "assert k_smallest_pairs([1, 5, 12], [4, 8, 7], 3) == [[1, 4], [1, 8], [1, 7]]": {
      "result": false,
      "time": 0.13735651969909668,
      "error": null
    },
    "assert k_smallest_pairs([2, 2, 8], [2, 2, 5], 4) == [[2, 2], [2, 2], [2, 2], [2, 2]]": {
      "result": true,
      "time": 0.13027715682983398,
      "error": null
    },
    "assert k_smallest_pairs([1, 3, 9], [6, 4, 4], 4) == [[1, 6], [1, 4], [1, 4], [3, 6]]": {
      "result": false,
      "time": 0.1269090175628662,
      "error": null
    },
    "assert k_smallest_pairs([5, 2, 12], [5, 1, 7], 2) == [[5, 5], [5, 1]]": {
      "result": false,
      "time": 0.12846589088439941,
      "error": null
    },
    "assert k_smallest_pairs([6, 5, 7], [7, 6, 6], 2) == [[6, 7], [6, 6]]": {
      "result": false,
      "time": 0.14840126037597656,
      "error": null
    },
    "assert k_smallest_pairs([1, 4, 3], [7, 6, 8], 3) == [[1, 7], [1, 6], [1, 8]]": {
      "result": false,
      "time": 0.13381123542785645,
      "error": null
    },
    "assert k_smallest_pairs([4, 2, 9], [1, 2, 8], 6) == [[4, 1], [2, 1], [2, 2], [4, 2], [2, 8], [9, 1]]": {
      "result": false,
      "time": 0.15058064460754395,
      "error": null
    },
    "assert k_smallest_pairs([6, 5, 4], [3, 1, 2], 3) == [[6, 3], [6, 1], [6, 2]]": {
      "result": false,
      "time": 0.14432740211486816,
      "error": null
    },
    "assert k_smallest_pairs([3, 3, 10], [5, 8, 6], 6) == [[3, 5], [3, 5], [3, 8], [3, 6], [3, 8], [3, 6]]": {
      "result": false,
      "time": 0.14066529273986816,
      "error": null
    },
    "assert k_smallest_pairs([1, 1, 3], [1, 7, 9], 4) == [[1, 1], [1, 1], [3, 1], [1, 7]]": {
      "result": true,
      "time": 0.15214157104492188,
      "error": null
    },
    "assert k_smallest_pairs([3, 3, 4], [4, 1, 2], 6) == [[3, 4], [3, 1], [3, 2], [3, 4], [3, 1], [3, 2]]": {
      "result": false,
      "time": 0.35552287101745605,
      "error": null
    },
    "assert k_smallest_pairs([5, 3, 5], [6, 5, 11], 1) == [[5, 6]]": {
      "result": false,
      "time": 0.11832094192504883,
      "error": null
    },
    "assert k_smallest_pairs([6, 3, 3], [4, 9, 6], 4) == [[6, 4], [3, 4], [3, 4], [3, 9]]": {
      "result": false,
      "time": 0.12678933143615723,
      "error": null
    },
    "assert k_smallest_pairs([6, 2, 7], [4, 1, 4], 5) == [[6, 4], [2, 4], [2, 1], [2, 4], [6, 1]]": {
      "result": false,
      "time": 0.1608433723449707,
      "error": null
    },
    "assert k_smallest_pairs([2, 8, 3], [6, 5, 5], 6) == [[2, 6], [2, 5], [2, 5], [8, 6], [3, 6], [3, 5]]": {
      "result": false,
      "time": 0.13034844398498535,
      "error": null
    },
    "assert k_smallest_pairs([4, 2, 10], [3, 7, 1], 9) == [[4, 3], [2, 3], [2, 7], [2, 1], [4, 7], [4, 1], [10, 3], [10, 7], [10, 1]]": {
      "result": false,
      "time": 0.12777447700500488,
      "error": null
    },
    "assert k_smallest_pairs([1, 4, 4], [2, 8, 5], 3) == [[1, 2], [4, 2], [4, 2]]": {
      "result": false,
      "time": 0.13730192184448242,
      "error": null
    },
    "assert k_smallest_pairs([2, 4, 7], [2, 1, 7], 6) == [[2, 2], [2, 1], [4, 2], [4, 1], [2, 7], [7, 2]]": {
      "result": false,
      "time": 0.14690351486206055,
      "error": null
    },
    "assert k_smallest_pairs([5, 8, 2], [3, 5, 5], 7) == [[5, 3], [5, 5], [5, 5], [8, 3], [2, 3], [2, 5], [2, 5]]": {
      "result": false,
      "time": 0.13219070434570312,
      "error": null
    },
    "assert k_smallest_pairs([3, 3, 7], [1, 9, 9], 3) == [[3, 1], [3, 1], [7, 1]]": {
      "result": true,
      "time": 0.11586546897888184,
      "error": null
    },
    "assert k_smallest_pairs([4, 5, 8], [1, 1, 7], 7) == [[4, 1], [4, 1], [5, 1], [5, 1], [8, 1], [8, 1], [4, 7]]": {
      "result": true,
      "time": 0.13295340538024902,
      "error": null
    },
    "assert k_smallest_pairs([2, 8, 4], [6, 2, 9], 8) == [[2, 6], [2, 2], [2, 9], [8, 6], [8, 2], [4, 6], [4, 2], [4, 9]]": {
      "result": false,
      "time": 0.1401233673095703,
      "error": null
    },
    "assert k_smallest_pairs([3, 5, 4], [4, 7, 11], 9) == [[3, 4], [5, 4], [4, 4], [3, 7], [4, 7], [5, 7], [3, 11], [4, 11], [5, 11]]": {
      "result": false,
      "time": 0.13227629661560059,
      "error": null
    },
    "assert k_smallest_pairs([3, 5, 8], [6, 9, 3], 12) == [[3, 6], [5, 6], [3, 9], [3, 3], [5, 9], [5, 3], [8, 6], [8, 9], [8, 3]]": {
      "result": false,
      "time": 0.12926030158996582,
      "error": null
    },
    "assert k_smallest_pairs([3, 1, 11], [3, 3, 1], 12) == [[3, 3], [1, 3], [1, 3], [1, 1], [3, 3], [3, 1], [11, 3], [11, 3], [11, 1]]": {
      "result": false,
      "time": 0.13616085052490234,
      "error": null
    },
    "assert k_smallest_pairs([2, 5, 2], [1, 6, 4], 9) == [[2, 1], [5, 1], [2, 1], [2, 6], [2, 4], [2, 6], [2, 4], [5, 6], [5, 4]]": {
      "result": false,
      "time": 0.1365671157836914,
      "error": null
    },
    "assert k_smallest_pairs([4, 1, 3], [2, 4, 1], 4) == [[4, 2], [1, 2], [1, 4], [1, 1]]": {
      "result": false,
      "time": 0.135115385055542,
      "error": null
    },
    "assert k_smallest_pairs([6, 4, 9], [4, 3, 9], 10) == [[6, 4], [4, 4], [4, 3], [6, 3], [4, 9], [9, 4], [9, 3], [6, 9], [9, 9]]": {
      "result": false,
      "time": 0.1401536464691162,
      "error": null
    },
    "assert k_smallest_pairs([2, 6, 2], [4, 8, 4], 6) == [[2, 4], [2, 8], [2, 4], [6, 4], [2, 4], [2, 8]]": {
      "result": false,
      "time": 0.15430307388305664,
      "error": null
    },
    "assert k_smallest_pairs([3, 7, 10], [5, 3, 11], 12) == [[3, 5], [3, 3], [7, 5], [7, 3], [3, 11], [10, 5], [10, 3], [7, 11], [10, 11]]": {
      "result": false,
      "time": 0.14605474472045898,
      "error": null
    },
    "assert k_smallest_pairs([2, 7, 9], [5, 6, 9], 12) == [[2, 5], [2, 6], [2, 9], [7, 5], [7, 6], [9, 5], [9, 6], [7, 9], [9, 9]]": {
      "result": true,
      "time": 0.1489119529724121,
      "error": null
    },
    "assert k_smallest_pairs([5, 1, 8], [5, 7, 6], 8) == [[5, 5], [1, 5], [1, 7], [1, 6], [5, 7], [5, 6], [8, 5], [8, 7]]": {
      "result": false,
      "time": 0.13528037071228027,
      "error": null
    },
    "assert k_smallest_pairs([2, 1, 11], [3, 2, 11], 3) == [[2, 3], [2, 2], [1, 3]]": {
      "result": false,
      "time": 0.13570904731750488,
      "error": null
    },
    "assert k_smallest_pairs([2, 1, 12], [5, 8, 1], 9) == [[2, 5], [1, 5], [1, 8], [1, 1], [2, 8], [2, 1], [12, 5], [12, 8], [12, 1]]": {
      "result": false,
      "time": 0.1232447624206543,
      "error": null
    },
    "assert k_smallest_pairs([2, 4, 8], [4, 9, 9], 12) == [[2, 4], [4, 4], [2, 9], [2, 9], [8, 4], [4, 9], [4, 9], [8, 9], [8, 9]]": {
      "result": true,
      "time": 0.14436888694763184,
      "error": null
    },
    "assert k_smallest_pairs([5, 5, 7], [2, 2, 8], 4) == [[5, 2], [5, 2], [5, 2], [5, 2]]": {
      "result": true,
      "time": 0.12152481079101562,
      "error": null
    },
    "assert k_smallest_pairs([5, 5, 3], [3, 4, 3], 12) == [[5, 3], [5, 3], [3, 3], [3, 4], [3, 3], [5, 4], [5, 3], [5, 4], [5, 3]]": {
      "result": false,
      "time": 0.13037467002868652,
      "error": null
    },
    "assert k_smallest_pairs([2, 2, 9], [3, 7, 2], 10) == [[2, 3], [2, 3], [2, 7], [2, 2], [2, 7], [2, 2], [9, 3], [9, 7], [9, 2]]": {
      "result": false,
      "time": 0.14559364318847656,
      "error": null
    },
    "assert k_smallest_pairs([2, 2, 12], [2, 5, 10], 8) == [[2, 2], [2, 2], [2, 5], [2, 5], [2, 10], [2, 10], [12, 2], [12, 5]]": {
      "result": true,
      "time": 0.11480331420898438,
      "error": null
    },
    "assert k_smallest_pairs([4, 6, 3], [5, 6, 8], 12) == [[4, 5], [4, 6], [6, 5], [3, 5], [3, 6], [3, 8], [4, 8], [6, 6], [6, 8]]": {
      "result": false,
      "time": 0.13107824325561523,
      "error": null
    },
    "assert k_smallest_pairs([2, 3, 5], [2, 8, 8], 8) == [[2, 2], [3, 2], [5, 2], [2, 8], [2, 8], [3, 8], [3, 8], [5, 8]]": {
      "result": true,
      "time": 0.12751340866088867,
      "error": null
    },
    "assert k_smallest_pairs([6, 7, 4], [4, 8, 6], 9) == [[6, 4], [7, 4], [4, 4], [4, 8], [4, 6], [6, 8], [6, 6], [7, 8], [7, 6]]": {
      "result": false,
      "time": 0.1371150016784668,
      "error": null
    },
    "assert k_smallest_pairs([1, 1, 7], [7, 6, 2], 2) == [[1, 7], [1, 6]]": {
      "result": false,
      "time": 0.14563894271850586,
      "error": null
    },
    "assert k_smallest_pairs([2, 5, 6], [5, 9, 10], 3) == [[2, 5], [5, 5], [2, 9]]": {
      "result": true,
      "time": 0.16475772857666016,
      "error": null
    },
    "assert k_smallest_pairs([3, 7, 3], [7, 3, 8], 5) == [[3, 7], [3, 3], [3, 8], [7, 7], [7, 3]]": {
      "result": false,
      "time": 0.14188146591186523,
      "error": null
    },
    "assert k_smallest_pairs([1, 8, 12], [5, 3, 6], 9) == [[1, 5], [1, 3], [1, 6], [8, 5], [8, 3], [8, 6], [12, 5], [12, 3], [12, 6]]": {
      "result": false,
      "time": 0.1290130615234375,
      "error": null
    },
    "assert k_smallest_pairs([5, 1, 10], [7, 8, 3], 5) == [[5, 7], [1, 7], [1, 8], [1, 3], [5, 8]]": {
      "result": false,
      "time": 0.08826947212219238,
      "error": null
    },
    "assert k_smallest_pairs([6, 4, 9], [7, 7, 7], 8) == [[6, 7], [4, 7], [4, 7], [4, 7], [6, 7], [6, 7], [9, 7], [9, 7]]": {
      "result": false,
      "time": 0.1363387107849121,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.19607843137254902,
  "general_error": "",
  "has_testcase_error": false
}