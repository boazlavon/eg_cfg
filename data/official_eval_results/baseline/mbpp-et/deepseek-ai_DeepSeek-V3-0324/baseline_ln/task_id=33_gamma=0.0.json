{
  "code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = 0\n    i = 0\n    while n > 0:\n        remainder = n % 2\n        binary += remainder * (10 ** i)\n        n = n // 2\n        i += 1\n    return binary",
  "results": {
    "assert decimal_To_Binary(10) == 1010": {
      "result": true,
      "time": 0.061600685119628906,
      "error": null
    },
    "assert decimal_To_Binary(1) == 1": {
      "result": true,
      "time": 0.04969906806945801,
      "error": null
    },
    "assert decimal_To_Binary(20) == 10100": {
      "result": true,
      "time": 0.05501890182495117,
      "error": null
    },
    "assert decimal_To_Binary(7) == 111": {
      "result": true,
      "time": 0.05386066436767578,
      "error": null
    },
    "assert decimal_To_Binary(11) == 1011": {
      "result": true,
      "time": 0.05859947204589844,
      "error": null
    },
    "assert decimal_To_Binary(12) == 1100": {
      "result": true,
      "time": 0.05358123779296875,
      "error": null
    },
    "assert decimal_To_Binary(13) == 1101": {
      "result": true,
      "time": 0.05633115768432617,
      "error": null
    },
    "assert decimal_To_Binary(6) == 110": {
      "result": true,
      "time": 0.04843473434448242,
      "error": null
    },
    "assert decimal_To_Binary(14) == 1110": {
      "result": true,
      "time": 0.05721926689147949,
      "error": null
    },
    "assert decimal_To_Binary(5) == 101": {
      "result": true,
      "time": 0.060951948165893555,
      "error": null
    },
    "assert decimal_To_Binary(15) == 1111": {
      "result": true,
      "time": 0.061196088790893555,
      "error": null
    },
    "assert decimal_To_Binary(8) == 1000": {
      "result": true,
      "time": 0.04956173896789551,
      "error": null
    },
    "assert decimal_To_Binary(9) == 1001": {
      "result": true,
      "time": 0.05887484550476074,
      "error": null
    },
    "assert decimal_To_Binary(2) == 10": {
      "result": true,
      "time": 0.06490755081176758,
      "error": null
    },
    "assert decimal_To_Binary(3) == 11": {
      "result": true,
      "time": 0.05375838279724121,
      "error": null
    },
    "assert decimal_To_Binary(4) == 100": {
      "result": true,
      "time": 0.06299042701721191,
      "error": null
    },
    "assert decimal_To_Binary(23) == 10111": {
      "result": true,
      "time": 0.05888676643371582,
      "error": null
    },
    "assert decimal_To_Binary(25) == 11001": {
      "result": true,
      "time": 0.05662822723388672,
      "error": null
    },
    "assert decimal_To_Binary(18) == 10010": {
      "result": true,
      "time": 0.06284070014953613,
      "error": null
    },
    "assert decimal_To_Binary(17) == 10001": {
      "result": true,
      "time": 0.05806326866149902,
      "error": null
    },
    "assert decimal_To_Binary(21) == 10101": {
      "result": true,
      "time": 0.05849170684814453,
      "error": null
    },
    "assert decimal_To_Binary(22) == 10110": {
      "result": true,
      "time": 0.05622243881225586,
      "error": null
    },
    "assert decimal_To_Binary(19) == 10011": {
      "result": true,
      "time": 0.06858634948730469,
      "error": null
    },
    "assert decimal_To_Binary(16) == 10000": {
      "result": true,
      "time": 0.054096221923828125,
      "error": null
    },
    "assert decimal_To_Binary(24) == 11000": {
      "result": true,
      "time": 0.04831266403198242,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}