{
  "code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
  "results": {
    "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)": {
      "result": true,
      "time": 0.036226511001586914,
      "error": null
    },
    "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)": {
      "result": true,
      "time": 0.029254913330078125,
      "error": null
    },
    "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)": {
      "result": true,
      "time": 0.04398632049560547,
      "error": null
    },
    "assert substract_elements((12, 5, 8), (1, 1, 13)) == (11, 4, -5)": {
      "result": true,
      "time": 0.04105877876281738,
      "error": null
    },
    "assert substract_elements((10, 3, 5), (2, 10, 21)) == (8, -7, -16)": {
      "result": true,
      "time": 0.039270639419555664,
      "error": null
    },
    "assert substract_elements((9, 2, 1), (2, 8, 19)) == (7, -6, -18)": {
      "result": true,
      "time": 0.034574031829833984,
      "error": null
    },
    "assert substract_elements((15, 4, 4), (1, 9, 23)) == (14, -5, -19)": {
      "result": true,
      "time": 0.04011225700378418,
      "error": null
    },
    "assert substract_elements((7, 5, 10), (3, 1, 20)) == (4, 4, -10)": {
      "result": true,
      "time": 0.03570365905761719,
      "error": null
    },
    "assert substract_elements((13, 1, 8), (1, 1, 23)) == (12, 0, -15)": {
      "result": true,
      "time": 0.04296684265136719,
      "error": null
    },
    "assert substract_elements((8, 4, 2), (7, 1, 21)) == (1, 3, -19)": {
      "result": true,
      "time": 0.035272836685180664,
      "error": null
    },
    "assert substract_elements((12, 3, 2), (5, 3, 22)) == (7, 0, -20)": {
      "result": true,
      "time": 0.0320284366607666,
      "error": null
    },
    "assert substract_elements((15, 8, 4), (5, 2, 20)) == (10, 6, -16)": {
      "result": true,
      "time": 0.040143728256225586,
      "error": null
    },
    "assert substract_elements((6, 3, 6), (4, 5, 16)) == (2, -2, -10)": {
      "result": true,
      "time": 0.036975860595703125,
      "error": null
    },
    "assert substract_elements((8, 9, 9), (7, 5, 16)) == (1, 4, -7)": {
      "result": true,
      "time": 0.0300290584564209,
      "error": null
    },
    "assert substract_elements((13, 6, 10), (3, 6, 23)) == (10, 0, -13)": {
      "result": true,
      "time": 0.046579837799072266,
      "error": null
    },
    "assert substract_elements((11, 7, 10), (1, 4, 23)) == (10, 3, -13)": {
      "result": true,
      "time": 0.037817955017089844,
      "error": null
    },
    "assert substract_elements((10, 8, 8), (4, 4, 16)) == (6, 4, -8)": {
      "result": true,
      "time": 0.04166531562805176,
      "error": null
    },
    "assert substract_elements((8, 3, 2), (1, 2, 14)) == (7, 1, -12)": {
      "result": true,
      "time": 0.04174494743347168,
      "error": null
    },
    "assert substract_elements((10, 4, 1), (1, 1, 23)) == (9, 3, -22)": {
      "result": true,
      "time": 0.042815208435058594,
      "error": null
    },
    "assert substract_elements((9, 7, 1), (2, 7, 19)) == (7, 0, -18)": {
      "result": true,
      "time": 0.047844886779785156,
      "error": null
    },
    "assert substract_elements((10, 6, 3), (4, 2, 19)) == (6, 4, -16)": {
      "result": true,
      "time": 0.04453396797180176,
      "error": null
    },
    "assert substract_elements((10, 4, 5), (6, 4, 18)) == (4, 0, -13)": {
      "result": true,
      "time": 0.039560794830322266,
      "error": null
    },
    "assert substract_elements((6, 8, 1), (3, 1, 16)) == (3, 7, -15)": {
      "result": true,
      "time": 0.04282355308532715,
      "error": null
    },
    "assert substract_elements((8, 1, 1), (3, 10, 16)) == (5, -9, -15)": {
      "result": true,
      "time": 0.04223752021789551,
      "error": null
    },
    "assert substract_elements((11, 7, 1), (2, 3, 13)) == (9, 4, -12)": {
      "result": true,
      "time": 0.03883934020996094,
      "error": null
    },
    "assert substract_elements((5, 8, 5), (2, 7, 22)) == (3, 1, -17)": {
      "result": true,
      "time": 0.040135860443115234,
      "error": null
    },
    "assert substract_elements((14, 4, 2), (6, 4, 18)) == (8, 0, -16)": {
      "result": true,
      "time": 0.04331254959106445,
      "error": null
    },
    "assert substract_elements((10, 2, 9), (6, 5, 15)) == (4, -3, -6)": {
      "result": true,
      "time": 0.05243635177612305,
      "error": null
    },
    "assert substract_elements((5, 5, 3), (1, 6, 16)) == (4, -1, -13)": {
      "result": true,
      "time": 0.0419459342956543,
      "error": null
    },
    "assert substract_elements((5, 3, 2), (6, 4, 13)) == (-1, -1, -11)": {
      "result": true,
      "time": 0.04436898231506348,
      "error": null
    },
    "assert substract_elements((6, 9, 1), (7, 3, 19)) == (-1, 6, -18)": {
      "result": true,
      "time": 0.04200935363769531,
      "error": null
    },
    "assert substract_elements((11, 1, 5), (5, 6, 13)) == (6, -5, -8)": {
      "result": true,
      "time": 0.03774547576904297,
      "error": null
    },
    "assert substract_elements((7, 3, 4), (3, 3, 22)) == (4, 0, -18)": {
      "result": true,
      "time": 0.03416633605957031,
      "error": null
    },
    "assert substract_elements((11, 2, 1), (1, 9, 23)) == (10, -7, -22)": {
      "result": true,
      "time": 0.04325556755065918,
      "error": null
    },
    "assert substract_elements((8, 7, 7), (7, 6, 22)) == (1, 1, -15)": {
      "result": true,
      "time": 0.04852008819580078,
      "error": null
    },
    "assert substract_elements((8, 8, 3), (5, 1, 21)) == (3, 7, -18)": {
      "result": true,
      "time": 0.04675006866455078,
      "error": null
    },
    "assert substract_elements((13, 5, 1), (29, 40, 20)) == (-16, -35, -19)": {
      "result": true,
      "time": 0.04861283302307129,
      "error": null
    },
    "assert substract_elements((11, 4, 5), (21, 44, 21)) == (-10, -40, -16)": {
      "result": true,
      "time": 0.047159671783447266,
      "error": null
    },
    "assert substract_elements((7, 3, 6), (21, 41, 19)) == (-14, -38, -13)": {
      "result": true,
      "time": 0.043213844299316406,
      "error": null
    },
    "assert substract_elements((9, 1, 7), (23, 42, 17)) == (-14, -41, -10)": {
      "result": true,
      "time": 0.039942026138305664,
      "error": null
    },
    "assert substract_elements((15, 5, 7), (20, 50, 17)) == (-5, -45, -10)": {
      "result": true,
      "time": 0.041680097579956055,
      "error": null
    },
    "assert substract_elements((8, 2, 8), (27, 50, 18)) == (-19, -48, -10)": {
      "result": true,
      "time": 0.04644298553466797,
      "error": null
    },
    "assert substract_elements((16, 2, 2), (23, 43, 16)) == (-7, -41, -14)": {
      "result": true,
      "time": 0.04038381576538086,
      "error": null
    },
    "assert substract_elements((13, 5, 1), (21, 41, 19)) == (-8, -36, -18)": {
      "result": true,
      "time": 0.042089223861694336,
      "error": null
    },
    "assert substract_elements((15, 1, 7), (19, 47, 16)) == (-4, -46, -9)": {
      "result": true,
      "time": 0.0391695499420166,
      "error": null
    },
    "assert substract_elements((7, 6, 4), (24, 42, 15)) == (-17, -36, -11)": {
      "result": true,
      "time": 0.03939962387084961,
      "error": null
    },
    "assert substract_elements((14, 3, 8), (20, 48, 14)) == (-6, -45, -6)": {
      "result": true,
      "time": 0.0430448055267334,
      "error": null
    },
    "assert substract_elements((9, 5, 4), (19, 45, 21)) == (-10, -40, -17)": {
      "result": true,
      "time": 0.0363469123840332,
      "error": null
    },
    "assert substract_elements((7, 2, 2), (20, 42, 11)) == (-13, -40, -9)": {
      "result": true,
      "time": 0.05010414123535156,
      "error": null
    },
    "assert substract_elements((13, 5, 3), (24, 45, 20)) == (-11, -40, -17)": {
      "result": true,
      "time": 0.04422640800476074,
      "error": null
    },
    "assert substract_elements((8, 4, 2), (27, 45, 11)) == (-19, -41, -9)": {
      "result": true,
      "time": 0.04057669639587402,
      "error": null
    },
    "assert substract_elements((11, 6, 2), (22, 49, 18)) == (-11, -43, -16)": {
      "result": true,
      "time": 0.03821921348571777,
      "error": null
    },
    "assert substract_elements((9, 6, 3), (26, 42, 14)) == (-17, -36, -11)": {
      "result": true,
      "time": 0.04332423210144043,
      "error": null
    },
    "assert substract_elements((12, 5, 7), (20, 48, 14)) == (-8, -43, -7)": {
      "result": true,
      "time": 0.04315829277038574,
      "error": null
    },
    "assert substract_elements((16, 3, 8), (20, 43, 14)) == (-4, -40, -6)": {
      "result": true,
      "time": 0.04497504234313965,
      "error": null
    },
    "assert substract_elements((10, 7, 5), (19, 45, 15)) == (-9, -38, -10)": {
      "result": true,
      "time": 0.054388999938964844,
      "error": null
    },
    "assert substract_elements((13, 2, 7), (20, 48, 20)) == (-7, -46, -13)": {
      "result": true,
      "time": 0.032703399658203125,
      "error": null
    },
    "assert substract_elements((6, 5, 5), (26, 43, 14)) == (-20, -38, -9)": {
      "result": true,
      "time": 0.045763254165649414,
      "error": null
    },
    "assert substract_elements((9, 4, 4), (28, 40, 15)) == (-19, -36, -11)": {
      "result": true,
      "time": 0.043828487396240234,
      "error": null
    },
    "assert substract_elements((11, 7, 2), (29, 50, 18)) == (-18, -43, -16)": {
      "result": true,
      "time": 0.042136430740356445,
      "error": null
    },
    "assert substract_elements((6, 1, 5), (27, 45, 20)) == (-21, -44, -15)": {
      "result": true,
      "time": 0.04644036293029785,
      "error": null
    },
    "assert substract_elements((15, 2, 3), (25, 46, 17)) == (-10, -44, -14)": {
      "result": true,
      "time": 0.04604625701904297,
      "error": null
    },
    "assert substract_elements((8, 7, 6), (20, 49, 12)) == (-12, -42, -6)": {
      "result": true,
      "time": 0.045885324478149414,
      "error": null
    },
    "assert substract_elements((9, 6, 4), (25, 45, 15)) == (-16, -39, -11)": {
      "result": true,
      "time": 0.04448676109313965,
      "error": null
    },
    "assert substract_elements((13, 1, 3), (25, 40, 20)) == (-12, -39, -17)": {
      "result": true,
      "time": 0.041669368743896484,
      "error": null
    },
    "assert substract_elements((16, 7, 1), (21, 46, 12)) == (-5, -39, -11)": {
      "result": true,
      "time": 0.04066014289855957,
      "error": null
    },
    "assert substract_elements((15, 5, 5), (29, 47, 16)) == (-14, -42, -11)": {
      "result": true,
      "time": 0.052417755126953125,
      "error": null
    },
    "assert substract_elements((14, 5, 8), (21, 45, 21)) == (-7, -40, -13)": {
      "result": true,
      "time": 0.04695725440979004,
      "error": null
    },
    "assert substract_elements((15, 1, 4), (29, 46, 13)) == (-14, -45, -9)": {
      "result": true,
      "time": 0.04117393493652344,
      "error": null
    },
    "assert substract_elements((8, 21, 12), (11, 13, 12)) == (-3, 8, 0)": {
      "result": true,
      "time": 0.037546634674072266,
      "error": null
    },
    "assert substract_elements((2, 16, 5), (11, 11, 16)) == (-9, 5, -11)": {
      "result": true,
      "time": 0.04333066940307617,
      "error": null
    },
    "assert substract_elements((6, 15, 12), (9, 8, 13)) == (-3, 7, -1)": {
      "result": true,
      "time": 0.04247903823852539,
      "error": null
    },
    "assert substract_elements((6, 21, 4), (15, 12, 7)) == (-9, 9, -3)": {
      "result": true,
      "time": 0.04663991928100586,
      "error": null
    },
    "assert substract_elements((6, 20, 12), (12, 15, 11)) == (-6, 5, 1)": {
      "result": true,
      "time": 0.04215860366821289,
      "error": null
    },
    "assert substract_elements((7, 17, 4), (11, 12, 15)) == (-4, 5, -11)": {
      "result": true,
      "time": 0.04756665229797363,
      "error": null
    },
    "assert substract_elements((3, 16, 12), (15, 14, 13)) == (-12, 2, -1)": {
      "result": true,
      "time": 0.05116391181945801,
      "error": null
    },
    "assert substract_elements((5, 13, 4), (7, 7, 12)) == (-2, 6, -8)": {
      "result": true,
      "time": 0.0393829345703125,
      "error": null
    },
    "assert substract_elements((3, 14, 4), (10, 12, 9)) == (-7, 2, -5)": {
      "result": true,
      "time": 0.041748046875,
      "error": null
    },
    "assert substract_elements((6, 15, 12), (14, 14, 12)) == (-8, 1, 0)": {
      "result": true,
      "time": 0.04447054862976074,
      "error": null
    },
    "assert substract_elements((11, 20, 6), (15, 6, 11)) == (-4, 14, -5)": {
      "result": true,
      "time": 0.043094635009765625,
      "error": null
    },
    "assert substract_elements((2, 14, 11), (9, 10, 13)) == (-7, 4, -2)": {
      "result": true,
      "time": 0.03701901435852051,
      "error": null
    },
    "assert substract_elements((9, 23, 5), (10, 12, 14)) == (-1, 11, -9)": {
      "result": true,
      "time": 0.04427385330200195,
      "error": null
    },
    "assert substract_elements((6, 19, 10), (15, 6, 8)) == (-9, 13, 2)": {
      "result": true,
      "time": 0.05712413787841797,
      "error": null
    },
    "assert substract_elements((2, 20, 9), (5, 6, 8)) == (-3, 14, 1)": {
      "result": true,
      "time": 0.05486559867858887,
      "error": null
    },
    "assert substract_elements((11, 23, 11), (14, 7, 7)) == (-3, 16, 4)": {
      "result": true,
      "time": 0.05244708061218262,
      "error": null
    },
    "assert substract_elements((9, 13, 12), (11, 11, 14)) == (-2, 2, -2)": {
      "result": true,
      "time": 0.0685570240020752,
      "error": null
    },
    "assert substract_elements((2, 22, 14), (13, 16, 8)) == (-11, 6, 6)": {
      "result": true,
      "time": 0.05523681640625,
      "error": null
    },
    "assert substract_elements((2, 17, 11), (7, 10, 10)) == (-5, 7, 1)": {
      "result": true,
      "time": 0.04309988021850586,
      "error": null
    },
    "assert substract_elements((9, 16, 4), (6, 12, 9)) == (3, 4, -5)": {
      "result": true,
      "time": 0.06044459342956543,
      "error": null
    },
    "assert substract_elements((8, 22, 12), (6, 15, 17)) == (2, 7, -5)": {
      "result": true,
      "time": 0.05094289779663086,
      "error": null
    },
    "assert substract_elements((7, 17, 13), (9, 9, 8)) == (-2, 8, 5)": {
      "result": true,
      "time": 0.05472683906555176,
      "error": null
    },
    "assert substract_elements((12, 18, 7), (5, 12, 11)) == (7, 6, -4)": {
      "result": true,
      "time": 0.05184030532836914,
      "error": null
    },
    "assert substract_elements((8, 20, 8), (5, 9, 15)) == (3, 11, -7)": {
      "result": true,
      "time": 0.05646991729736328,
      "error": null
    },
    "assert substract_elements((12, 18, 4), (6, 11, 9)) == (6, 7, -5)": {
      "result": true,
      "time": 0.05725550651550293,
      "error": null
    },
    "assert substract_elements((9, 19, 10), (15, 7, 10)) == (-6, 12, 0)": {
      "result": true,
      "time": 0.05558180809020996,
      "error": null
    },
    "assert substract_elements((2, 20, 9), (9, 14, 11)) == (-7, 6, -2)": {
      "result": true,
      "time": 0.04851984977722168,
      "error": null
    },
    "assert substract_elements((11, 15, 5), (11, 12, 16)) == (0, 3, -11)": {
      "result": true,
      "time": 0.05946946144104004,
      "error": null
    },
    "assert substract_elements((5, 13, 12), (10, 8, 10)) == (-5, 5, 2)": {
      "result": true,
      "time": 0.061928510665893555,
      "error": null
    },
    "assert substract_elements((5, 16, 10), (7, 10, 7)) == (-2, 6, 3)": {
      "result": true,
      "time": 0.06121993064880371,
      "error": null
    },
    "assert substract_elements((2, 15, 13), (10, 11, 17)) == (-8, 4, -4)": {
      "result": true,
      "time": 0.05262041091918945,
      "error": null
    },
    "assert substract_elements((11, 18, 9), (13, 8, 7)) == (-2, 10, 2)": {
      "result": true,
      "time": 0.04462480545043945,
      "error": null
    },
    "assert substract_elements((8, 17, 6), (9, 7, 12)) == (-1, 10, -6)": {
      "result": true,
      "time": 0.0593717098236084,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}