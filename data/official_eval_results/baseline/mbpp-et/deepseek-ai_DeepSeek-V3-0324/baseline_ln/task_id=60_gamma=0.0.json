{
  "code": "def max_len_sub(arr, n):\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        current_length = 1\n        # Check for num - 1, num, and num + 1 in dp\n        if num - 1 in dp:\n            current_length = max(current_length, dp[num - 1] + 1)\n        if num in dp:\n            current_length = max(current_length, dp[num] + 0)  # Not increasing length if same num\n        if num + 1 in dp:\n            current_length = max(current_length, dp[num + 1] + 1)\n        \n        dp[num] = current_length\n        max_length = max(max_length, current_length)\n    \n    return max_length",
  "results": {
    "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5": {
      "result": true,
      "time": 0.03274655342102051,
      "error": null
    },
    "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4": {
      "result": false,
      "time": 0.03902459144592285,
      "error": null
    },
    "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1": {
      "result": true,
      "time": 0.04164600372314453,
      "error": null
    },
    "assert max_len_sub([7, 1, 4, 8, 6, 9, 7, 12], 5) == 2": {
      "result": false,
      "time": 0.04283308982849121,
      "error": null
    },
    "assert max_len_sub([4, 10, 9, 6, 10, 11, 6, 13], 7) == 4": {
      "result": true,
      "time": 0.04123830795288086,
      "error": null
    },
    "assert max_len_sub([3, 2, 9, 7, 4, 7, 10, 6], 3) == 2": {
      "result": true,
      "time": 0.03905224800109863,
      "error": null
    },
    "assert max_len_sub([4, 8, 9, 7, 8, 6, 2, 4], 6) == 3": {
      "result": true,
      "time": 0.04317164421081543,
      "error": null
    },
    "assert max_len_sub([6, 7, 10, 1, 4, 9, 7, 9], 4) == 2": {
      "result": true,
      "time": 0.03761553764343262,
      "error": null
    },
    "assert max_len_sub([4, 3, 8, 3, 9, 1, 4, 9], 8) == 4": {
      "result": false,
      "time": 0.041327476501464844,
      "error": null
    },
    "assert max_len_sub([2, 5, 10, 5, 11, 10, 8, 12], 6) == 3": {
      "result": true,
      "time": 0.036128997802734375,
      "error": null
    },
    "assert max_len_sub([2, 6, 2, 4, 11, 4, 5, 7], 6) == 2": {
      "result": true,
      "time": 0.03725147247314453,
      "error": null
    },
    "assert max_len_sub([5, 6, 2, 1, 4, 9, 8, 8], 6) == 2": {
      "result": true,
      "time": 0.03609037399291992,
      "error": null
    },
    "assert max_len_sub([1, 5, 7, 4, 6, 10, 4, 3], 5) == 2": {
      "result": false,
      "time": 0.03727364540100098,
      "error": null
    },
    "assert max_len_sub([3, 8, 8, 6, 12, 7, 7, 7], 7) == 4": {
      "result": false,
      "time": 0.035703182220458984,
      "error": null
    },
    "assert max_len_sub([3, 5, 4, 8, 7, 5, 8, 8], 5) == 2": {
      "result": false,
      "time": 0.03680562973022461,
      "error": null
    },
    "assert max_len_sub([7, 6, 2, 4, 2, 11, 8, 10], 3) == 2": {
      "result": true,
      "time": 0.04051685333251953,
      "error": null
    },
    "assert max_len_sub([5, 6, 7, 3, 3, 10, 1, 10], 3) == 3": {
      "result": true,
      "time": 0.03719925880432129,
      "error": null
    },
    "assert max_len_sub([4, 9, 10, 4, 10, 2, 7, 9], 8) == 4": {
      "result": false,
      "time": 0.0402987003326416,
      "error": null
    },
    "assert max_len_sub([1, 5, 6, 7, 4, 6, 8, 12], 8) == 4": {
      "result": true,
      "time": 0.03647041320800781,
      "error": null
    },
    "assert max_len_sub([4, 8, 2, 3, 8, 5, 5, 9], 4) == 2": {
      "result": true,
      "time": 0.035103559494018555,
      "error": null
    },
    "assert max_len_sub([4, 9, 9, 4, 11, 9, 4, 10], 4) == 2": {
      "result": true,
      "time": 0.03697514533996582,
      "error": null
    },
    "assert max_len_sub([5, 10, 8, 8, 11, 2, 1, 11], 3) == 1": {
      "result": false,
      "time": 0.041461944580078125,
      "error": null
    },
    "assert max_len_sub([3, 4, 11, 5, 9, 4, 3, 5], 4) == 3": {
      "result": false,
      "time": 0.03566861152648926,
      "error": null
    },
    "assert max_len_sub([4, 9, 2, 2, 9, 4, 8, 12], 6) == 2": {
      "result": true,
      "time": 0.035912513732910156,
      "error": null
    },
    "assert max_len_sub([2, 2, 8, 5, 7, 6, 6, 6], 4) == 2": {
      "result": false,
      "time": 0.03411698341369629,
      "error": null
    },
    "assert max_len_sub([1, 5, 10, 7, 11, 9, 7, 8], 7) == 2": {
      "result": false,
      "time": 0.03590679168701172,
      "error": null
    },
    "assert max_len_sub([7, 4, 1, 3, 8, 9, 5, 3], 3) == 1": {
      "result": false,
      "time": 0.041248321533203125,
      "error": null
    },
    "assert max_len_sub([2, 8, 2, 5, 6, 7, 2, 3], 4) == 2": {
      "result": false,
      "time": 0.038487911224365234,
      "error": null
    },
    "assert max_len_sub([4, 9, 2, 2, 8, 1, 3, 9], 3) == 1": {
      "result": false,
      "time": 0.041429758071899414,
      "error": null
    },
    "assert max_len_sub([1, 1, 8, 4, 5, 6, 6, 11], 6) == 3": {
      "result": true,
      "time": 0.04011225700378418,
      "error": null
    },
    "assert max_len_sub([4, 7, 3, 4, 3, 5, 1, 12], 3) == 2": {
      "result": false,
      "time": 0.047281503677368164,
      "error": null
    },
    "assert max_len_sub([1, 1, 3, 8, 10, 5, 9, 13], 4) == 2": {
      "result": true,
      "time": 0.04055190086364746,
      "error": null
    },
    "assert max_len_sub([1, 2, 11, 4, 7, 4, 5, 8], 6) == 2": {
      "result": true,
      "time": 0.032891035079956055,
      "error": null
    },
    "assert max_len_sub([1, 1, 9, 8, 6, 3, 1, 4], 4) == 2": {
      "result": true,
      "time": 0.049797773361206055,
      "error": null
    },
    "assert max_len_sub([2, 5, 7, 4, 11, 9, 4, 13], 7) == 3": {
      "result": false,
      "time": 0.04036831855773926,
      "error": null
    },
    "assert max_len_sub([7, 6, 2, 1, 12, 1, 1, 13], 8) == 4": {
      "result": false,
      "time": 0.040988922119140625,
      "error": null
    },
    "assert max_len_sub([-6, 2, 9, 3, 6, 4, 8], 3) == 1": {
      "result": false,
      "time": 0.03715324401855469,
      "error": null
    },
    "assert max_len_sub([-7, -2, 7, 2, 1, 3, 1], 3) == 1": {
      "result": false,
      "time": 0.038973093032836914,
      "error": null
    },
    "assert max_len_sub([-4, -4, 5, -5, 2, 1, 1], 3) == 2": {
      "result": true,
      "time": 0.04240870475769043,
      "error": null
    },
    "assert max_len_sub([-1, -2, 4, -1, 2, 3, 5], 4) == 3": {
      "result": true,
      "time": 0.0368504524230957,
      "error": null
    },
    "assert max_len_sub([-2, -6, 1, -1, 1, 3, 6], 2) == 1": {
      "result": false,
      "time": 0.037946462631225586,
      "error": null
    },
    "assert max_len_sub([-6, -6, 5, -4, 7, 4, 3], 6) == 2": {
      "result": false,
      "time": 0.04027509689331055,
      "error": null
    },
    "assert max_len_sub([-4, 1, 7, 1, 4, 1, 7], 2) == 1": {
      "result": true,
      "time": 0.03440427780151367,
      "error": null
    },
    "assert max_len_sub([2, 0, 1, 1, 2, 5, 7], 7) == 4": {
      "result": false,
      "time": 0.04337000846862793,
      "error": null
    },
    "assert max_len_sub([0, -2, 8, -1, 6, 1, 7], 3) == 1": {
      "result": false,
      "time": 0.038466453552246094,
      "error": null
    },
    "assert max_len_sub([-7, 3, 7, 0, 7, 5, 5], 7) == 2": {
      "result": false,
      "time": 0.0394139289855957,
      "error": null
    },
    "assert max_len_sub([-6, -4, 4, 0, 5, 5, 2], 4) == 1": {
      "result": false,
      "time": 0.03810405731201172,
      "error": null
    },
    "assert max_len_sub([-2, -3, 3, -1, 2, 3, 7], 3) == 2": {
      "result": false,
      "time": 0.037725210189819336,
      "error": null
    },
    "assert max_len_sub([0, -1, 2, -6, 1, 1, 8], 5) == 2": {
      "result": true,
      "time": 0.03676772117614746,
      "error": null
    },
    "assert max_len_sub([1, -3, 9, -1, 8, 3, 7], 7) == 3": {
      "result": true,
      "time": 0.03978228569030762,
      "error": null
    },
    "assert max_len_sub([-1, 2, 2, -6, 9, 5, 1], 2) == 1": {
      "result": false,
      "time": 0.04193902015686035,
      "error": null
    },
    "assert max_len_sub([1, -5, 1, -2, 5, 3, 3], 7) == 2": {
      "result": false,
      "time": 0.04765725135803223,
      "error": null
    },
    "assert max_len_sub([-4, -4, 1, 4, 7, 4, 1], 6) == 2": {
      "result": false,
      "time": 0.03632974624633789,
      "error": null
    },
    "assert max_len_sub([1, 2, 4, -6, 7, 5, 2], 3) == 2": {
      "result": true,
      "time": 0.03773641586303711,
      "error": null
    },
    "assert max_len_sub([-4, -3, 2, -4, 6, 1, 4], 4) == 3": {
      "result": true,
      "time": 0.039016008377075195,
      "error": null
    },
    "assert max_len_sub([1, -4, 9, -5, 2, 1, 5], 2) == 1": {
      "result": false,
      "time": 0.0379178524017334,
      "error": null
    },
    "assert max_len_sub([2, -4, 2, -2, 5, 3, 8], 7) == 3": {
      "result": false,
      "time": 0.040175437927246094,
      "error": null
    },
    "assert max_len_sub([-7, 0, 8, 3, 8, 1, 3], 4) == 1": {
      "result": false,
      "time": 0.044966936111450195,
      "error": null
    },
    "assert max_len_sub([2, -2, 6, -4, 3, 3, 7], 4) == 1": {
      "result": false,
      "time": 0.043289899826049805,
      "error": null
    },
    "assert max_len_sub([-7, 3, 8, -4, 7, 1, 4], 2) == 1": {
      "result": false,
      "time": 0.03913521766662598,
      "error": null
    },
    "assert max_len_sub([-3, 3, 10, -4, 2, 4, 6], 2) == 1": {
      "result": false,
      "time": 0.03550243377685547,
      "error": null
    },
    "assert max_len_sub([0, -1, 6, -1, 6, 4, 6], 7) == 3": {
      "result": false,
      "time": 0.035727739334106445,
      "error": null
    },
    "assert max_len_sub([1, -1, 7, 0, 3, 1, 7], 4) == 2": {
      "result": false,
      "time": 0.03987264633178711,
      "error": null
    },
    "assert max_len_sub([-1, -1, 1, -1, 9, 4, 1], 5) == 3": {
      "result": false,
      "time": 0.04184556007385254,
      "error": null
    },
    "assert max_len_sub([-7, 0, 8, -1, 6, 5, 1], 2) == 1": {
      "result": false,
      "time": 0.04147982597351074,
      "error": null
    },
    "assert max_len_sub([0, -1, 6, -3, 5, 4, 6], 7) == 3": {
      "result": true,
      "time": 0.03662419319152832,
      "error": null
    },
    "assert max_len_sub([0, 2, 2, -2, 7, 3, 8], 4) == 2": {
      "result": true,
      "time": 0.03530550003051758,
      "error": null
    },
    "assert max_len_sub([-3, -1, 4, 2, 3, 5, 8], 2) == 1": {
      "result": false,
      "time": 0.03876924514770508,
      "error": null
    },
    "assert max_len_sub([-4, 0, 10, -6, 5, 2, 5], 7) == 2": {
      "result": false,
      "time": 0.0404665470123291,
      "error": null
    },
    "assert max_len_sub([13, 13, 13, 17, 16], 1) == 1": {
      "result": false,
      "time": 0.04144740104675293,
      "error": null
    },
    "assert max_len_sub([6, 6, 17, 10, 22], 5) == 2": {
      "result": false,
      "time": 0.04456043243408203,
      "error": null
    },
    "assert max_len_sub([4, 7, 18, 17, 14], 3) == 1": {
      "result": false,
      "time": 0.04136514663696289,
      "error": null
    },
    "assert max_len_sub([10, 14, 10, 12, 16], 3) == 2": {
      "result": false,
      "time": 0.0374910831451416,
      "error": null
    },
    "assert max_len_sub([9, 6, 11, 18, 19], 1) == 1": {
      "result": false,
      "time": 0.03884601593017578,
      "error": null
    },
    "assert max_len_sub([7, 8, 11, 17, 18], 4) == 2": {
      "result": true,
      "time": 0.038831472396850586,
      "error": null
    },
    "assert max_len_sub([11, 11, 14, 20, 18], 2) == 2": {
      "result": false,
      "time": 0.047676801681518555,
      "error": null
    },
    "assert max_len_sub([9, 6, 12, 19, 18], 5) == 2": {
      "result": true,
      "time": 0.04059314727783203,
      "error": null
    },
    "assert max_len_sub([4, 10, 13, 12, 20], 3) == 1": {
      "result": false,
      "time": 0.04126858711242676,
      "error": null
    },
    "assert max_len_sub([12, 13, 9, 17, 16], 3) == 2": {
      "result": true,
      "time": 0.04736971855163574,
      "error": null
    },
    "assert max_len_sub([4, 9, 8, 11, 23], 2) == 1": {
      "result": false,
      "time": 0.043227195739746094,
      "error": null
    },
    "assert max_len_sub([7, 11, 16, 20, 19], 5) == 2": {
      "result": true,
      "time": 0.048911094665527344,
      "error": null
    },
    "assert max_len_sub([9, 12, 11, 20, 16], 2) == 1": {
      "result": false,
      "time": 0.051056623458862305,
      "error": null
    },
    "assert max_len_sub([11, 11, 18, 12, 21], 4) == 3": {
      "result": false,
      "time": 0.0504150390625,
      "error": null
    },
    "assert max_len_sub([13, 9, 11, 12, 20], 5) == 2": {
      "result": true,
      "time": 0.03891587257385254,
      "error": null
    },
    "assert max_len_sub([13, 15, 18, 10, 16], 4) == 1": {
      "result": false,
      "time": 0.05183720588684082,
      "error": null
    },
    "assert max_len_sub([11, 14, 18, 11, 22], 1) == 1": {
      "result": true,
      "time": 0.05000162124633789,
      "error": null
    },
    "assert max_len_sub([14, 8, 10, 19, 16], 1) == 1": {
      "result": true,
      "time": 0.03442072868347168,
      "error": null
    },
    "assert max_len_sub([5, 9, 18, 13, 21], 1) == 1": {
      "result": true,
      "time": 0.04696178436279297,
      "error": null
    },
    "assert max_len_sub([12, 12, 14, 17, 22], 2) == 2": {
      "result": false,
      "time": 0.04337906837463379,
      "error": null
    },
    "assert max_len_sub([9, 13, 11, 20, 19], 5) == 2": {
      "result": true,
      "time": 0.04674077033996582,
      "error": null
    },
    "assert max_len_sub([7, 6, 13, 16, 17], 3) == 2": {
      "result": true,
      "time": 0.03983759880065918,
      "error": null
    },
    "assert max_len_sub([6, 12, 18, 18, 17], 4) == 2": {
      "result": true,
      "time": 0.035535573959350586,
      "error": null
    },
    "assert max_len_sub([9, 11, 18, 19, 18], 3) == 1": {
      "result": false,
      "time": 0.04570293426513672,
      "error": null
    },
    "assert max_len_sub([9, 11, 11, 10, 21], 5) == 3": {
      "result": false,
      "time": 0.04066634178161621,
      "error": null
    },
    "assert max_len_sub([12, 16, 12, 15, 16], 1) == 1": {
      "result": false,
      "time": 0.05244874954223633,
      "error": null
    },
    "assert max_len_sub([9, 6, 11, 15, 18], 2) == 1": {
      "result": true,
      "time": 0.044591426849365234,
      "error": null
    },
    "assert max_len_sub([9, 13, 11, 14, 22], 4) == 2": {
      "result": true,
      "time": 0.04620814323425293,
      "error": null
    },
    "assert max_len_sub([7, 9, 13, 18, 18], 2) == 1": {
      "result": true,
      "time": 0.04686617851257324,
      "error": null
    },
    "assert max_len_sub([10, 13, 11, 15, 21], 3) == 2": {
      "result": true,
      "time": 0.043210506439208984,
      "error": null
    },
    "assert max_len_sub([6, 8, 11, 15, 22], 4) == 1": {
      "result": true,
      "time": 0.052078962326049805,
      "error": null
    },
    "assert max_len_sub([8, 14, 18, 13, 14], 3) == 1": {
      "result": false,
      "time": 0.04347085952758789,
      "error": null
    },
    "assert max_len_sub([4, 13, 17, 15, 21], 2) == 1": {
      "result": true,
      "time": 0.043557167053222656,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.4411764705882353,
  "general_error": "",
  "has_testcase_error": false
}