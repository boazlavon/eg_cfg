{
  "code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)  # Integer square root\n    if root * root == num:\n        return (root + 1) ** 2\n    else:\n        return (root + 1) ** 2",
  "results": {
    "assert next_Perfect_Square(35) == 36": {
      "result": true,
      "time": 0.08174419403076172,
      "error": null
    },
    "assert next_Perfect_Square(6) == 9": {
      "result": true,
      "time": 0.0754537582397461,
      "error": null
    },
    "assert next_Perfect_Square(9) == 16": {
      "result": true,
      "time": 0.08031344413757324,
      "error": null
    },
    "assert next_Perfect_Square(37) == 49": {
      "result": true,
      "time": 0.10320019721984863,
      "error": null
    },
    "assert next_Perfect_Square(33) == 36": {
      "result": true,
      "time": 0.07619738578796387,
      "error": null
    },
    "assert next_Perfect_Square(34) == 36": {
      "result": true,
      "time": 0.08609342575073242,
      "error": null
    },
    "assert next_Perfect_Square(39) == 49": {
      "result": true,
      "time": 0.0742640495300293,
      "error": null
    },
    "assert next_Perfect_Square(32) == 36": {
      "result": true,
      "time": 0.08452939987182617,
      "error": null
    },
    "assert next_Perfect_Square(31) == 36": {
      "result": true,
      "time": 0.0843191146850586,
      "error": null
    },
    "assert next_Perfect_Square(38) == 49": {
      "result": true,
      "time": 0.0905771255493164,
      "error": null
    },
    "assert next_Perfect_Square(36) == 49": {
      "result": true,
      "time": 0.08320450782775879,
      "error": null
    },
    "assert next_Perfect_Square(40) == 49": {
      "result": true,
      "time": 0.10083556175231934,
      "error": null
    },
    "assert next_Perfect_Square(30) == 36": {
      "result": true,
      "time": 0.09626102447509766,
      "error": null
    },
    "assert next_Perfect_Square(11) == 16": {
      "result": true,
      "time": 0.09921956062316895,
      "error": null
    },
    "assert next_Perfect_Square(3) == 4": {
      "result": true,
      "time": 0.07479453086853027,
      "error": null
    },
    "assert next_Perfect_Square(7) == 9": {
      "result": true,
      "time": 0.07463383674621582,
      "error": null
    },
    "assert next_Perfect_Square(2) == 4": {
      "result": true,
      "time": 0.09101271629333496,
      "error": null
    },
    "assert next_Perfect_Square(5) == 9": {
      "result": true,
      "time": 0.0886833667755127,
      "error": null
    },
    "assert next_Perfect_Square(1) == 4": {
      "result": true,
      "time": 0.08009457588195801,
      "error": null
    },
    "assert next_Perfect_Square(10) == 16": {
      "result": true,
      "time": 0.08576679229736328,
      "error": null
    },
    "assert next_Perfect_Square(4) == 9": {
      "result": true,
      "time": 0.09210467338562012,
      "error": null
    },
    "assert next_Perfect_Square(8) == 9": {
      "result": true,
      "time": 0.09245514869689941,
      "error": null
    },
    "assert next_Perfect_Square(14) == 16": {
      "result": true,
      "time": 0.1011343002319336,
      "error": null
    },
    "assert next_Perfect_Square(12) == 16": {
      "result": true,
      "time": 0.0769796371459961,
      "error": null
    },
    "assert next_Perfect_Square(13) == 16": {
      "result": true,
      "time": 0.09651994705200195,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}