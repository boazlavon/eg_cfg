{
  "code": "import math\n\ndef num_comm_div(a, b):\n    # Find the greatest common divisor (GCD) of the two numbers\n    gcd_value = math.gcd(a, b)\n    \n    # The number of common divisors is equal to the number of divisors of the GCD\n    # To find the number of divisors of the GCD, we need to count the divisors\n    if gcd_value == 0:\n        return 0\n    \n    # Initialize the count of divisors\n    count = 0\n    \n    # Iterate from 1 to the square root of the GCD\n    for i in range(1, int(math.sqrt(gcd_value)) + 1):\n        if gcd_value % i == 0:\n            # If divisors are equal, count only one\n            if gcd_value // i == i:\n                count += 1\n            else:\n                count += 2\n    return count",
  "results": {
    "assert num_comm_div(2,4) == 2": {
      "result": true,
      "time": 0.09325098991394043,
      "error": null
    },
    "assert num_comm_div(2,8) == 2": {
      "result": true,
      "time": 0.09190249443054199,
      "error": null
    },
    "assert num_comm_div(12,24) == 6": {
      "result": true,
      "time": 0.07674312591552734,
      "error": null
    },
    "assert num_comm_div(6, 9) == 2": {
      "result": true,
      "time": 0.0741415023803711,
      "error": null
    },
    "assert num_comm_div(6, 5) == 1": {
      "result": true,
      "time": 0.09417343139648438,
      "error": null
    },
    "assert num_comm_div(3, 1) == 1": {
      "result": true,
      "time": 0.09337043762207031,
      "error": null
    },
    "assert num_comm_div(1, 6) == 1": {
      "result": true,
      "time": 0.0954141616821289,
      "error": null
    },
    "assert num_comm_div(4, 7) == 1": {
      "result": true,
      "time": 0.07665395736694336,
      "error": null
    },
    "assert num_comm_div(1, 4) == 1": {
      "result": true,
      "time": 0.08715105056762695,
      "error": null
    },
    "assert num_comm_div(6, 6) == 4": {
      "result": true,
      "time": 0.10175776481628418,
      "error": null
    },
    "assert num_comm_div(1, 7) == 1": {
      "result": true,
      "time": 0.08563232421875,
      "error": null
    },
    "assert num_comm_div(2, 9) == 1": {
      "result": true,
      "time": 0.07285881042480469,
      "error": null
    },
    "assert num_comm_div(6, 7) == 1": {
      "result": true,
      "time": 0.08217382431030273,
      "error": null
    },
    "assert num_comm_div(3, 7) == 1": {
      "result": true,
      "time": 0.09547305107116699,
      "error": null
    },
    "assert num_comm_div(4, 6) == 2": {
      "result": true,
      "time": 0.09646439552307129,
      "error": null
    },
    "assert num_comm_div(6, 1) == 1": {
      "result": true,
      "time": 0.09060454368591309,
      "error": null
    },
    "assert num_comm_div(6, 2) == 2": {
      "result": true,
      "time": 0.08684802055358887,
      "error": null
    },
    "assert num_comm_div(7, 3) == 1": {
      "result": true,
      "time": 0.08655095100402832,
      "error": null
    },
    "assert num_comm_div(5, 1) == 1": {
      "result": true,
      "time": 0.09416460990905762,
      "error": null
    },
    "assert num_comm_div(1, 3) == 1": {
      "result": true,
      "time": 0.09407496452331543,
      "error": null
    },
    "assert num_comm_div(4, 9) == 1": {
      "result": true,
      "time": 0.09825897216796875,
      "error": null
    },
    "assert num_comm_div(3, 5) == 1": {
      "result": true,
      "time": 0.09660053253173828,
      "error": null
    },
    "assert num_comm_div(6, 3) == 2": {
      "result": true,
      "time": 0.08339881896972656,
      "error": null
    },
    "assert num_comm_div(2, 4) == 2": {
      "result": true,
      "time": 0.08329319953918457,
      "error": null
    },
    "assert num_comm_div(2, 1) == 1": {
      "result": true,
      "time": 0.08823585510253906,
      "error": null
    },
    "assert num_comm_div(7, 2) == 1": {
      "result": true,
      "time": 0.1095590591430664,
      "error": null
    },
    "assert num_comm_div(7, 8) == 1": {
      "result": true,
      "time": 0.08461403846740723,
      "error": null
    },
    "assert num_comm_div(2, 8) == 2": {
      "result": true,
      "time": 0.08947563171386719,
      "error": null
    },
    "assert num_comm_div(1, 11) == 1": {
      "result": true,
      "time": 0.09117937088012695,
      "error": null
    },
    "assert num_comm_div(5, 11) == 1": {
      "result": true,
      "time": 0.09702181816101074,
      "error": null
    },
    "assert num_comm_div(1, 9) == 1": {
      "result": true,
      "time": 0.08936262130737305,
      "error": null
    },
    "assert num_comm_div(7, 7) == 2": {
      "result": true,
      "time": 0.09442377090454102,
      "error": null
    },
    "assert num_comm_div(5, 5) == 2": {
      "result": true,
      "time": 0.10161280632019043,
      "error": null
    },
    "assert num_comm_div(1, 10) == 1": {
      "result": true,
      "time": 0.09532618522644043,
      "error": null
    },
    "assert num_comm_div(5, 9) == 1": {
      "result": true,
      "time": 0.09553647041320801,
      "error": null
    },
    "assert num_comm_div(4, 4) == 3": {
      "result": true,
      "time": 0.09222602844238281,
      "error": null
    },
    "assert num_comm_div(7, 9) == 1": {
      "result": true,
      "time": 0.09545254707336426,
      "error": null
    },
    "assert num_comm_div(2, 10) == 2": {
      "result": true,
      "time": 0.10218930244445801,
      "error": null
    },
    "assert num_comm_div(4, 13) == 1": {
      "result": true,
      "time": 0.08076357841491699,
      "error": null
    },
    "assert num_comm_div(3, 6) == 2": {
      "result": true,
      "time": 0.10302042961120605,
      "error": null
    },
    "assert num_comm_div(5, 7) == 1": {
      "result": true,
      "time": 0.08072590827941895,
      "error": null
    },
    "assert num_comm_div(3, 11) == 1": {
      "result": true,
      "time": 0.08141136169433594,
      "error": null
    },
    "assert num_comm_div(4, 12) == 3": {
      "result": true,
      "time": 0.07868790626525879,
      "error": null
    },
    "assert num_comm_div(1, 5) == 1": {
      "result": true,
      "time": 0.07842493057250977,
      "error": null
    },
    "assert num_comm_div(6, 8) == 2": {
      "result": true,
      "time": 0.07809305191040039,
      "error": null
    },
    "assert num_comm_div(7, 11) == 1": {
      "result": true,
      "time": 0.08896708488464355,
      "error": null
    },
    "assert num_comm_div(14, 19) == 1": {
      "result": true,
      "time": 0.07885169982910156,
      "error": null
    },
    "assert num_comm_div(7, 26) == 1": {
      "result": true,
      "time": 0.07887816429138184,
      "error": null
    },
    "assert num_comm_div(14, 23) == 1": {
      "result": true,
      "time": 0.06744527816772461,
      "error": null
    },
    "assert num_comm_div(8, 28) == 3": {
      "result": true,
      "time": 0.08200931549072266,
      "error": null
    },
    "assert num_comm_div(9, 23) == 1": {
      "result": true,
      "time": 0.07394051551818848,
      "error": null
    },
    "assert num_comm_div(13, 25) == 1": {
      "result": true,
      "time": 0.08534073829650879,
      "error": null
    },
    "assert num_comm_div(17, 21) == 1": {
      "result": true,
      "time": 0.0893404483795166,
      "error": null
    },
    "assert num_comm_div(11, 19) == 1": {
      "result": true,
      "time": 0.0886688232421875,
      "error": null
    },
    "assert num_comm_div(10, 28) == 2": {
      "result": true,
      "time": 0.08411049842834473,
      "error": null
    },
    "assert num_comm_div(10, 25) == 2": {
      "result": true,
      "time": 0.08827352523803711,
      "error": null
    },
    "assert num_comm_div(12, 22) == 2": {
      "result": true,
      "time": 0.08598828315734863,
      "error": null
    },
    "assert num_comm_div(7, 23) == 1": {
      "result": true,
      "time": 0.08256864547729492,
      "error": null
    },
    "assert num_comm_div(14, 27) == 1": {
      "result": true,
      "time": 0.07963919639587402,
      "error": null
    },
    "assert num_comm_div(14, 28) == 4": {
      "result": true,
      "time": 0.08855962753295898,
      "error": null
    },
    "assert num_comm_div(17, 27) == 1": {
      "result": true,
      "time": 0.07721996307373047,
      "error": null
    },
    "assert num_comm_div(11, 28) == 1": {
      "result": true,
      "time": 0.09777569770812988,
      "error": null
    },
    "assert num_comm_div(11, 29) == 1": {
      "result": true,
      "time": 0.08269762992858887,
      "error": null
    },
    "assert num_comm_div(15, 25) == 2": {
      "result": true,
      "time": 0.0848093032836914,
      "error": null
    },
    "assert num_comm_div(7, 24) == 1": {
      "result": true,
      "time": 0.09485697746276855,
      "error": null
    },
    "assert num_comm_div(10, 19) == 1": {
      "result": true,
      "time": 0.076141357421875,
      "error": null
    },
    "assert num_comm_div(9, 19) == 1": {
      "result": true,
      "time": 0.08307862281799316,
      "error": null
    },
    "assert num_comm_div(8, 22) == 2": {
      "result": true,
      "time": 0.08160519599914551,
      "error": null
    },
    "assert num_comm_div(12, 27) == 2": {
      "result": true,
      "time": 0.08007597923278809,
      "error": null
    },
    "assert num_comm_div(7, 19) == 1": {
      "result": true,
      "time": 0.0845649242401123,
      "error": null
    },
    "assert num_comm_div(9, 20) == 1": {
      "result": true,
      "time": 0.0792241096496582,
      "error": null
    },
    "assert num_comm_div(11, 25) == 1": {
      "result": true,
      "time": 0.08111381530761719,
      "error": null
    },
    "assert num_comm_div(8, 24) == 4": {
      "result": true,
      "time": 0.07663822174072266,
      "error": null
    },
    "assert num_comm_div(17, 28) == 1": {
      "result": true,
      "time": 0.09693026542663574,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}