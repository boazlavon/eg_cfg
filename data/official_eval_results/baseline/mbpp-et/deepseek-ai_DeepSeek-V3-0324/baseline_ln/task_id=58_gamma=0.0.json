{
  "code": "def opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)",
  "results": {
    "assert opposite_Signs(1,-2) == True": {
      "result": true,
      "time": 0.03562569618225098,
      "error": null
    },
    "assert opposite_Signs(3,2) == False": {
      "result": true,
      "time": 0.04199385643005371,
      "error": null
    },
    "assert opposite_Signs(-10,-10) == False": {
      "result": true,
      "time": 0.03824329376220703,
      "error": null
    },
    "assert opposite_Signs(5, -4) == True": {
      "result": true,
      "time": 0.0323491096496582,
      "error": null
    },
    "assert opposite_Signs(4, -3) == True": {
      "result": true,
      "time": 0.0356752872467041,
      "error": null
    },
    "assert opposite_Signs(4, 0) == False": {
      "result": true,
      "time": 0.041425228118896484,
      "error": null
    },
    "assert opposite_Signs(6, 0) == False": {
      "result": true,
      "time": 0.04490947723388672,
      "error": null
    },
    "assert opposite_Signs(6, -4) == True": {
      "result": true,
      "time": 0.036344289779663086,
      "error": null
    },
    "assert opposite_Signs(5, 1) == False": {
      "result": true,
      "time": 0.03431987762451172,
      "error": null
    },
    "assert opposite_Signs(6, -2) == True": {
      "result": true,
      "time": 0.03628826141357422,
      "error": null
    },
    "assert opposite_Signs(4, -2) == True": {
      "result": true,
      "time": 0.03473782539367676,
      "error": null
    },
    "assert opposite_Signs(4, -5) == True": {
      "result": true,
      "time": 0.03786611557006836,
      "error": null
    },
    "assert opposite_Signs(1, -6) == True": {
      "result": true,
      "time": 0.03679776191711426,
      "error": null
    },
    "assert opposite_Signs(4, 2) == False": {
      "result": true,
      "time": 0.039557695388793945,
      "error": null
    },
    "assert opposite_Signs(3, 1) == False": {
      "result": true,
      "time": 0.036016225814819336,
      "error": null
    },
    "assert opposite_Signs(1, -1) == True": {
      "result": true,
      "time": 0.03628897666931152,
      "error": null
    },
    "assert opposite_Signs(5, -1) == True": {
      "result": true,
      "time": 0.04007673263549805,
      "error": null
    },
    "assert opposite_Signs(1, -5) == True": {
      "result": true,
      "time": 0.040351152420043945,
      "error": null
    },
    "assert opposite_Signs(2, -6) == True": {
      "result": true,
      "time": 0.03810000419616699,
      "error": null
    },
    "assert opposite_Signs(1, 0) == False": {
      "result": true,
      "time": 0.04188251495361328,
      "error": null
    },
    "assert opposite_Signs(1, 2) == False": {
      "result": true,
      "time": 0.035683393478393555,
      "error": null
    },
    "assert opposite_Signs(2, 1) == False": {
      "result": true,
      "time": 0.036869049072265625,
      "error": null
    },
    "assert opposite_Signs(3, -6) == True": {
      "result": true,
      "time": 0.049727439880371094,
      "error": null
    },
    "assert opposite_Signs(5, 2) == False": {
      "result": true,
      "time": 0.036995887756347656,
      "error": null
    },
    "assert opposite_Signs(4, 3) == False": {
      "result": true,
      "time": 0.03996443748474121,
      "error": null
    },
    "assert opposite_Signs(4, 1) == False": {
      "result": true,
      "time": 0.03609156608581543,
      "error": null
    },
    "assert opposite_Signs(3, -7) == True": {
      "result": true,
      "time": 0.038939714431762695,
      "error": null
    },
    "assert opposite_Signs(1, -3) == True": {
      "result": true,
      "time": 0.03232598304748535,
      "error": null
    },
    "assert opposite_Signs(2, 6) == False": {
      "result": true,
      "time": 0.042517662048339844,
      "error": null
    },
    "assert opposite_Signs(8, 4) == False": {
      "result": true,
      "time": 0.03615927696228027,
      "error": null
    },
    "assert opposite_Signs(6, 2) == False": {
      "result": true,
      "time": 0.039379119873046875,
      "error": null
    },
    "assert opposite_Signs(8, 3) == False": {
      "result": true,
      "time": 0.034811973571777344,
      "error": null
    },
    "assert opposite_Signs(8, 6) == False": {
      "result": true,
      "time": 0.04069828987121582,
      "error": null
    },
    "assert opposite_Signs(5, 5) == False": {
      "result": true,
      "time": 0.04202079772949219,
      "error": null
    },
    "assert opposite_Signs(1, 1) == False": {
      "result": true,
      "time": 0.03558754920959473,
      "error": null
    },
    "assert opposite_Signs(8, 2) == False": {
      "result": true,
      "time": 0.03598642349243164,
      "error": null
    },
    "assert opposite_Signs(2, 3) == False": {
      "result": true,
      "time": 0.041701316833496094,
      "error": null
    },
    "assert opposite_Signs(6, 4) == False": {
      "result": true,
      "time": 0.03717041015625,
      "error": null
    },
    "assert opposite_Signs(2, 4) == False": {
      "result": true,
      "time": 0.040404558181762695,
      "error": null
    },
    "assert opposite_Signs(8, 1) == False": {
      "result": true,
      "time": 0.04194903373718262,
      "error": null
    },
    "assert opposite_Signs(7, 7) == False": {
      "result": true,
      "time": 0.036586761474609375,
      "error": null
    },
    "assert opposite_Signs(6, 5) == False": {
      "result": true,
      "time": 0.04617595672607422,
      "error": null
    },
    "assert opposite_Signs(5, 7) == False": {
      "result": true,
      "time": 0.033977508544921875,
      "error": null
    },
    "assert opposite_Signs(7, 2) == False": {
      "result": true,
      "time": 0.033136844635009766,
      "error": null
    },
    "assert opposite_Signs(3, 4) == False": {
      "result": true,
      "time": 0.04058670997619629,
      "error": null
    },
    "assert opposite_Signs(2, 5) == False": {
      "result": true,
      "time": 0.04369401931762695,
      "error": null
    },
    "assert opposite_Signs(1, 3) == False": {
      "result": true,
      "time": 0.03942394256591797,
      "error": null
    },
    "assert opposite_Signs(2, 7) == False": {
      "result": true,
      "time": 0.0371403694152832,
      "error": null
    },
    "assert opposite_Signs(3, 7) == False": {
      "result": true,
      "time": 0.03586745262145996,
      "error": null
    },
    "assert opposite_Signs(7, 3) == False": {
      "result": true,
      "time": 0.03535819053649902,
      "error": null
    },
    "assert opposite_Signs(5, 6) == False": {
      "result": true,
      "time": 0.03879976272583008,
      "error": null
    },
    "assert opposite_Signs(-8, -6) == False": {
      "result": true,
      "time": 0.03633713722229004,
      "error": null
    },
    "assert opposite_Signs(-12, -5) == False": {
      "result": true,
      "time": 0.03880476951599121,
      "error": null
    },
    "assert opposite_Signs(-15, -11) == False": {
      "result": true,
      "time": 0.04118633270263672,
      "error": null
    },
    "assert opposite_Signs(-12, -9) == False": {
      "result": true,
      "time": 0.039266347885131836,
      "error": null
    },
    "assert opposite_Signs(-7, -15) == False": {
      "result": true,
      "time": 0.03911471366882324,
      "error": null
    },
    "assert opposite_Signs(-6, -11) == False": {
      "result": true,
      "time": 0.033524513244628906,
      "error": null
    },
    "assert opposite_Signs(-12, -14) == False": {
      "result": true,
      "time": 0.03813934326171875,
      "error": null
    },
    "assert opposite_Signs(-6, -7) == False": {
      "result": true,
      "time": 0.039781808853149414,
      "error": null
    },
    "assert opposite_Signs(-9, -10) == False": {
      "result": true,
      "time": 0.0378267765045166,
      "error": null
    },
    "assert opposite_Signs(-6, -14) == False": {
      "result": true,
      "time": 0.03535604476928711,
      "error": null
    },
    "assert opposite_Signs(-14, -12) == False": {
      "result": true,
      "time": 0.03607916831970215,
      "error": null
    },
    "assert opposite_Signs(-5, -7) == False": {
      "result": true,
      "time": 0.037482261657714844,
      "error": null
    },
    "assert opposite_Signs(-15, -8) == False": {
      "result": true,
      "time": 0.04716849327087402,
      "error": null
    },
    "assert opposite_Signs(-10, -9) == False": {
      "result": true,
      "time": 0.031599998474121094,
      "error": null
    },
    "assert opposite_Signs(-15, -7) == False": {
      "result": true,
      "time": 0.03424501419067383,
      "error": null
    },
    "assert opposite_Signs(-14, -11) == False": {
      "result": true,
      "time": 0.03930306434631348,
      "error": null
    },
    "assert opposite_Signs(-7, -11) == False": {
      "result": true,
      "time": 0.03613471984863281,
      "error": null
    },
    "assert opposite_Signs(-14, -9) == False": {
      "result": true,
      "time": 0.041782379150390625,
      "error": null
    },
    "assert opposite_Signs(-14, -8) == False": {
      "result": true,
      "time": 0.03969764709472656,
      "error": null
    },
    "assert opposite_Signs(-14, -14) == False": {
      "result": true,
      "time": 0.030447006225585938,
      "error": null
    },
    "assert opposite_Signs(-9, -6) == False": {
      "result": true,
      "time": 0.035761356353759766,
      "error": null
    },
    "assert opposite_Signs(-9, -12) == False": {
      "result": true,
      "time": 0.03675055503845215,
      "error": null
    },
    "assert opposite_Signs(-8, -12) == False": {
      "result": true,
      "time": 0.0430755615234375,
      "error": null
    },
    "assert opposite_Signs(-10, -12) == False": {
      "result": true,
      "time": 0.03850197792053223,
      "error": null
    },
    "assert opposite_Signs(-12, -7) == False": {
      "result": true,
      "time": 0.036843061447143555,
      "error": null
    },
    "assert opposite_Signs(-6, -13) == False": {
      "result": true,
      "time": 0.03516387939453125,
      "error": null
    },
    "assert opposite_Signs(-13, -7) == False": {
      "result": true,
      "time": 0.043355464935302734,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}