{
  "code": "def min_of_three(num1, num2, num3):\n    return min(num1, num2, num3)\n",
  "results": {
    "assert min_of_three(10,20,0)==0": {
      "result": true,
      "time": 0.03607797622680664,
      "error": null
    },
    "assert min_of_three(19,15,18)==15": {
      "result": true,
      "time": 0.03662586212158203,
      "error": null
    },
    "assert min_of_three(-10,-20,-30)==-30": {
      "result": true,
      "time": 0.035843849182128906,
      "error": null
    },
    "assert min_of_three(9, 25, 4) == 4": {
      "result": true,
      "time": 0.04000544548034668,
      "error": null
    },
    "assert min_of_three(11, 19, 5) == 5": {
      "result": true,
      "time": 0.03276872634887695,
      "error": null
    },
    "assert min_of_three(12, 17, 4) == 4": {
      "result": true,
      "time": 0.03127098083496094,
      "error": null
    },
    "assert min_of_three(13, 15, 5) == 5": {
      "result": true,
      "time": 0.03684806823730469,
      "error": null
    },
    "assert min_of_three(6, 24, 2) == 2": {
      "result": true,
      "time": 0.030116558074951172,
      "error": null
    },
    "assert min_of_three(15, 16, 4) == 4": {
      "result": true,
      "time": 0.03258323669433594,
      "error": null
    },
    "assert min_of_three(10, 18, 4) == 4": {
      "result": true,
      "time": 0.03187298774719238,
      "error": null
    },
    "assert min_of_three(7, 23, 5) == 5": {
      "result": true,
      "time": 0.037488698959350586,
      "error": null
    },
    "assert min_of_three(12, 15, 2) == 2": {
      "result": true,
      "time": 0.03735852241516113,
      "error": null
    },
    "assert min_of_three(11, 24, 4) == 4": {
      "result": true,
      "time": 0.03495621681213379,
      "error": null
    },
    "assert min_of_three(7, 25, 1) == 1": {
      "result": true,
      "time": 0.03313755989074707,
      "error": null
    },
    "assert min_of_three(10, 24, 3) == 3": {
      "result": true,
      "time": 0.036237478256225586,
      "error": null
    },
    "assert min_of_three(11, 22, 5) == 5": {
      "result": true,
      "time": 0.03657889366149902,
      "error": null
    },
    "assert min_of_three(12, 24, 3) == 3": {
      "result": true,
      "time": 0.03761553764343262,
      "error": null
    },
    "assert min_of_three(7, 17, 5) == 5": {
      "result": true,
      "time": 0.03786611557006836,
      "error": null
    },
    "assert min_of_three(10, 23, 5) == 5": {
      "result": true,
      "time": 0.039581298828125,
      "error": null
    },
    "assert min_of_three(7, 18, 4) == 4": {
      "result": true,
      "time": 0.0447080135345459,
      "error": null
    },
    "assert min_of_three(8, 19, 4) == 4": {
      "result": true,
      "time": 0.03513002395629883,
      "error": null
    },
    "assert min_of_three(6, 23, 2) == 2": {
      "result": true,
      "time": 0.036447763442993164,
      "error": null
    },
    "assert min_of_three(9, 24, 3) == 3": {
      "result": true,
      "time": 0.04021000862121582,
      "error": null
    },
    "assert min_of_three(10, 22, 2) == 2": {
      "result": true,
      "time": 0.03867816925048828,
      "error": null
    },
    "assert min_of_three(9, 19, 2) == 2": {
      "result": true,
      "time": 0.03272366523742676,
      "error": null
    },
    "assert min_of_three(6, 16, 2) == 2": {
      "result": true,
      "time": 0.03534054756164551,
      "error": null
    },
    "assert min_of_three(15, 18, 5) == 5": {
      "result": true,
      "time": 0.036043643951416016,
      "error": null
    },
    "assert min_of_three(6, 15, 3) == 3": {
      "result": true,
      "time": 0.03700661659240723,
      "error": null
    },
    "assert min_of_three(5, 20, 5) == 5": {
      "result": true,
      "time": 0.035012006759643555,
      "error": null
    },
    "assert min_of_three(8, 21, 1) == 1": {
      "result": true,
      "time": 0.034908294677734375,
      "error": null
    },
    "assert min_of_three(7, 21, 2) == 2": {
      "result": true,
      "time": 0.03830552101135254,
      "error": null
    },
    "assert min_of_three(9, 16, 1) == 1": {
      "result": true,
      "time": 0.03694653511047363,
      "error": null
    },
    "assert min_of_three(5, 24, 3) == 3": {
      "result": true,
      "time": 0.032602548599243164,
      "error": null
    },
    "assert min_of_three(13, 21, 5) == 5": {
      "result": true,
      "time": 0.033692359924316406,
      "error": null
    },
    "assert min_of_three(15, 18, 3) == 3": {
      "result": true,
      "time": 0.03383946418762207,
      "error": null
    },
    "assert min_of_three(11, 17, 5) == 5": {
      "result": true,
      "time": 0.042635440826416016,
      "error": null
    },
    "assert min_of_three(20, 19, 18) == 18": {
      "result": true,
      "time": 0.03907442092895508,
      "error": null
    },
    "assert min_of_three(21, 11, 19) == 11": {
      "result": true,
      "time": 0.036566972732543945,
      "error": null
    },
    "assert min_of_three(14, 17, 17) == 14": {
      "result": true,
      "time": 0.03717446327209473,
      "error": null
    },
    "assert min_of_three(24, 15, 16) == 15": {
      "result": true,
      "time": 0.034441471099853516,
      "error": null
    },
    "assert min_of_three(18, 16, 13) == 13": {
      "result": true,
      "time": 0.03393697738647461,
      "error": null
    },
    "assert min_of_three(23, 19, 18) == 18": {
      "result": true,
      "time": 0.036351919174194336,
      "error": null
    },
    "assert min_of_three(20, 12, 21) == 12": {
      "result": true,
      "time": 0.03688693046569824,
      "error": null
    },
    "assert min_of_three(20, 17, 21) == 17": {
      "result": true,
      "time": 0.03746294975280762,
      "error": null
    },
    "assert min_of_three(17, 15, 13) == 13": {
      "result": true,
      "time": 0.03835892677307129,
      "error": null
    },
    "assert min_of_three(19, 12, 17) == 12": {
      "result": true,
      "time": 0.035939693450927734,
      "error": null
    },
    "assert min_of_three(20, 12, 17) == 12": {
      "result": true,
      "time": 0.036107540130615234,
      "error": null
    },
    "assert min_of_three(21, 13, 16) == 13": {
      "result": true,
      "time": 0.038115739822387695,
      "error": null
    },
    "assert min_of_three(18, 17, 18) == 17": {
      "result": true,
      "time": 0.04099607467651367,
      "error": null
    },
    "assert min_of_three(24, 18, 14) == 14": {
      "result": true,
      "time": 0.040203094482421875,
      "error": null
    },
    "assert min_of_three(20, 10, 17) == 10": {
      "result": true,
      "time": 0.03964972496032715,
      "error": null
    },
    "assert min_of_three(24, 20, 16) == 16": {
      "result": true,
      "time": 0.03552699089050293,
      "error": null
    },
    "assert min_of_three(17, 19, 19) == 17": {
      "result": true,
      "time": 0.043366432189941406,
      "error": null
    },
    "assert min_of_three(16, 11, 23) == 11": {
      "result": true,
      "time": 0.03390383720397949,
      "error": null
    },
    "assert min_of_three(20, 12, 15) == 12": {
      "result": true,
      "time": 0.03603672981262207,
      "error": null
    },
    "assert min_of_three(19, 17, 21) == 17": {
      "result": true,
      "time": 0.03666496276855469,
      "error": null
    },
    "assert min_of_three(21, 18, 22) == 18": {
      "result": true,
      "time": 0.03649330139160156,
      "error": null
    },
    "assert min_of_three(19, 12, 19) == 12": {
      "result": true,
      "time": 0.036791324615478516,
      "error": null
    },
    "assert min_of_three(20, 20, 20) == 20": {
      "result": true,
      "time": 0.04655575752258301,
      "error": null
    },
    "assert min_of_three(14, 17, 14) == 14": {
      "result": true,
      "time": 0.036783695220947266,
      "error": null
    },
    "assert min_of_three(23, 18, 21) == 18": {
      "result": true,
      "time": 0.0358586311340332,
      "error": null
    },
    "assert min_of_three(20, 19, 16) == 16": {
      "result": true,
      "time": 0.037827491760253906,
      "error": null
    },
    "assert min_of_three(14, 12, 23) == 12": {
      "result": true,
      "time": 0.04129981994628906,
      "error": null
    },
    "assert min_of_three(14, 14, 13) == 13": {
      "result": true,
      "time": 0.04641151428222656,
      "error": null
    },
    "assert min_of_three(19, 15, 17) == 15": {
      "result": true,
      "time": 0.03967547416687012,
      "error": null
    },
    "assert min_of_three(22, 12, 18) == 12": {
      "result": true,
      "time": 0.03825807571411133,
      "error": null
    },
    "assert min_of_three(24, 10, 22) == 10": {
      "result": true,
      "time": 0.036150217056274414,
      "error": null
    },
    "assert min_of_three(18, 10, 14) == 10": {
      "result": true,
      "time": 0.03242611885070801,
      "error": null
    },
    "assert min_of_three(24, 20, 23) == 20": {
      "result": true,
      "time": 0.036878108978271484,
      "error": null
    },
    "assert min_of_three(-14, -18, -32) == -32": {
      "result": true,
      "time": 0.0346064567565918,
      "error": null
    },
    "assert min_of_three(-14, -20, -34) == -34": {
      "result": true,
      "time": 0.03872084617614746,
      "error": null
    },
    "assert min_of_three(-6, -22, -32) == -32": {
      "result": true,
      "time": 0.03782916069030762,
      "error": null
    },
    "assert min_of_three(-13, -19, -32) == -32": {
      "result": true,
      "time": 0.038207292556762695,
      "error": null
    },
    "assert min_of_three(-8, -23, -31) == -31": {
      "result": true,
      "time": 0.03595781326293945,
      "error": null
    },
    "assert min_of_three(-10, -19, -33) == -33": {
      "result": true,
      "time": 0.03618574142456055,
      "error": null
    },
    "assert min_of_three(-13, -24, -27) == -27": {
      "result": true,
      "time": 0.03496217727661133,
      "error": null
    },
    "assert min_of_three(-14, -22, -31) == -31": {
      "result": true,
      "time": 0.03639340400695801,
      "error": null
    },
    "assert min_of_three(-8, -24, -26) == -26": {
      "result": true,
      "time": 0.039054155349731445,
      "error": null
    },
    "assert min_of_three(-13, -22, -25) == -25": {
      "result": true,
      "time": 0.03930473327636719,
      "error": null
    },
    "assert min_of_three(-5, -25, -35) == -35": {
      "result": true,
      "time": 0.033922433853149414,
      "error": null
    },
    "assert min_of_three(-8, -18, -26) == -26": {
      "result": true,
      "time": 0.037938833236694336,
      "error": null
    },
    "assert min_of_three(-13, -22, -28) == -28": {
      "result": true,
      "time": 0.036792755126953125,
      "error": null
    },
    "assert min_of_three(-15, -23, -28) == -28": {
      "result": true,
      "time": 0.03217720985412598,
      "error": null
    },
    "assert min_of_three(-8, -15, -34) == -34": {
      "result": true,
      "time": 0.036470651626586914,
      "error": null
    },
    "assert min_of_three(-12, -21, -34) == -34": {
      "result": true,
      "time": 0.04271578788757324,
      "error": null
    },
    "assert min_of_three(-8, -16, -27) == -27": {
      "result": true,
      "time": 0.03522777557373047,
      "error": null
    },
    "assert min_of_three(-6, -21, -27) == -27": {
      "result": true,
      "time": 0.0376126766204834,
      "error": null
    },
    "assert min_of_three(-7, -23, -34) == -34": {
      "result": true,
      "time": 0.038027286529541016,
      "error": null
    },
    "assert min_of_three(-5, -15, -33) == -33": {
      "result": true,
      "time": 0.044522762298583984,
      "error": null
    },
    "assert min_of_three(-6, -21, -26) == -26": {
      "result": true,
      "time": 0.0399169921875,
      "error": null
    },
    "assert min_of_three(-6, -15, -33) == -33": {
      "result": true,
      "time": 0.040361881256103516,
      "error": null
    },
    "assert min_of_three(-11, -16, -30) == -30": {
      "result": true,
      "time": 0.033972978591918945,
      "error": null
    },
    "assert min_of_three(-8, -24, -35) == -35": {
      "result": true,
      "time": 0.037004947662353516,
      "error": null
    },
    "assert min_of_three(-10, -21, -31) == -31": {
      "result": true,
      "time": 0.03681159019470215,
      "error": null
    },
    "assert min_of_three(-5, -17, -30) == -30": {
      "result": true,
      "time": 0.03326821327209473,
      "error": null
    },
    "assert min_of_three(-13, -15, -32) == -32": {
      "result": true,
      "time": 0.035717010498046875,
      "error": null
    },
    "assert min_of_three(-15, -24, -31) == -31": {
      "result": true,
      "time": 0.03608083724975586,
      "error": null
    },
    "assert min_of_three(-12, -20, -28) == -28": {
      "result": true,
      "time": 0.0303647518157959,
      "error": null
    },
    "assert min_of_three(-14, -17, -30) == -30": {
      "result": true,
      "time": 0.03764700889587402,
      "error": null
    },
    "assert min_of_three(-6, -19, -31) == -31": {
      "result": true,
      "time": 0.03850865364074707,
      "error": null
    },
    "assert min_of_three(-14, -21, -25) == -25": {
      "result": true,
      "time": 0.030861854553222656,
      "error": null
    },
    "assert min_of_three(-13, -22, -35) == -35": {
      "result": true,
      "time": 0.025747060775756836,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}