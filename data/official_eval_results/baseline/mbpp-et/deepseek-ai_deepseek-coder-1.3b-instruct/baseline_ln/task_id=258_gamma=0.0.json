{
  "code": "count_odd = lambda lst: sum(1 for i in lst if i % 2 != 0)\n",
  "results": {
    "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4": {
      "result": true,
      "time": 0.04132270812988281,
      "error": null
    },
    "assert count_odd([10,15,14,13,-18,12,-20])==2": {
      "result": true,
      "time": 0.04360508918762207,
      "error": null
    },
    "assert count_odd([1, 2, 4, 8, 9])==2": {
      "result": true,
      "time": 0.04280376434326172,
      "error": null
    },
    "assert count_odd([2, 7, 2, 10, 12, 10, 11]) == 2": {
      "result": true,
      "time": 0.04062795639038086,
      "error": null
    },
    "assert count_odd([5, 1, 5, 7, 3, 7, 7]) == 7": {
      "result": true,
      "time": 0.03845524787902832,
      "error": null
    },
    "assert count_odd([6, 7, 2, 4, 3, 7, 11]) == 4": {
      "result": true,
      "time": 0.03947567939758301,
      "error": null
    },
    "assert count_odd([3, 6, 1, 6, 10, 10, 15]) == 3": {
      "result": true,
      "time": 0.04665803909301758,
      "error": null
    },
    "assert count_odd([6, 4, 6, 6, 2, 4, 9]) == 1": {
      "result": true,
      "time": 0.0394597053527832,
      "error": null
    },
    "assert count_odd([5, 3, 3, 4, 10, 7, 9]) == 5": {
      "result": true,
      "time": 0.04347991943359375,
      "error": null
    },
    "assert count_odd([5, 6, 4, 3, 5, 8, 8]) == 3": {
      "result": true,
      "time": 0.04396557807922363,
      "error": null
    },
    "assert count_odd([1, 6, 7, 3, 2, 7, 8]) == 4": {
      "result": true,
      "time": 0.037421464920043945,
      "error": null
    },
    "assert count_odd([2, 3, 5, 4, 11, 9, 7]) == 5": {
      "result": true,
      "time": 0.04591536521911621,
      "error": null
    },
    "assert count_odd([6, 2, 7, 6, 2, 13, 5]) == 3": {
      "result": true,
      "time": 0.040004730224609375,
      "error": null
    },
    "assert count_odd([6, 5, 1, 7, 5, 4, 9]) == 5": {
      "result": true,
      "time": 0.03859972953796387,
      "error": null
    },
    "assert count_odd([2, 6, 7, 7, 8, 8, 8]) == 2": {
      "result": true,
      "time": 0.0373845100402832,
      "error": null
    },
    "assert count_odd([1, 6, 7, 2, 10, 12, 8]) == 2": {
      "result": true,
      "time": 0.04499697685241699,
      "error": null
    },
    "assert count_odd([6, 2, 5, 10, 3, 10, 11]) == 3": {
      "result": true,
      "time": 0.04538106918334961,
      "error": null
    },
    "assert count_odd([3, 5, 7, 5, 3, 11, 11]) == 7": {
      "result": true,
      "time": 0.03719902038574219,
      "error": null
    },
    "assert count_odd([3, 3, 1, 4, 9, 4, 9]) == 5": {
      "result": true,
      "time": 0.05094289779663086,
      "error": null
    },
    "assert count_odd([4, 6, 7, 1, 7, 5, 12]) == 4": {
      "result": true,
      "time": 0.039655208587646484,
      "error": null
    },
    "assert count_odd([6, 2, 3, 2, 3, 11, 15]) == 4": {
      "result": true,
      "time": 0.052335500717163086,
      "error": null
    },
    "assert count_odd([1, 2, 5, 2, 3, 7, 11]) == 5": {
      "result": true,
      "time": 0.0459444522857666,
      "error": null
    },
    "assert count_odd([6, 5, 6, 7, 4, 13, 11]) == 4": {
      "result": true,
      "time": 0.053269386291503906,
      "error": null
    },
    "assert count_odd([4, 4, 3, 1, 7, 5, 10]) == 4": {
      "result": true,
      "time": 0.04461026191711426,
      "error": null
    },
    "assert count_odd([2, 7, 8, 4, 12, 12, 15]) == 2": {
      "result": true,
      "time": 0.03604888916015625,
      "error": null
    },
    "assert count_odd([3, 4, 2, 5, 12, 4, 11]) == 3": {
      "result": true,
      "time": 0.041020870208740234,
      "error": null
    },
    "assert count_odd([3, 1, 1, 2, 10, 5, 11]) == 5": {
      "result": true,
      "time": 0.03914999961853027,
      "error": null
    },
    "assert count_odd([4, 6, 3, 5, 5, 3, 12]) == 4": {
      "result": true,
      "time": 0.03487038612365723,
      "error": null
    },
    "assert count_odd([6, 2, 5, 9, 9, 12, 15]) == 4": {
      "result": true,
      "time": 0.04201936721801758,
      "error": null
    },
    "assert count_odd([6, 5, 8, 8, 12, 4, 5]) == 2": {
      "result": true,
      "time": 0.03826475143432617,
      "error": null
    },
    "assert count_odd([4, 2, 1, 4, 2, 8, 10]) == 1": {
      "result": true,
      "time": 0.051247358322143555,
      "error": null
    },
    "assert count_odd([2, 7, 7, 3, 6, 11, 5]) == 5": {
      "result": true,
      "time": 0.04586291313171387,
      "error": null
    },
    "assert count_odd([4, 7, 4, 6, 9, 10, 14]) == 2": {
      "result": true,
      "time": 0.051944732666015625,
      "error": null
    },
    "assert count_odd([6, 7, 2, 7, 3, 6, 11]) == 4": {
      "result": true,
      "time": 0.03870272636413574,
      "error": null
    },
    "assert count_odd([3, 2, 5, 1, 10, 9, 8]) == 4": {
      "result": true,
      "time": 0.04259300231933594,
      "error": null
    },
    "assert count_odd([5, 1, 5, 1, 6, 10, 13]) == 5": {
      "result": true,
      "time": 0.03255152702331543,
      "error": null
    },
    "assert count_odd([13, 14, 17, 13, -14, 8, -16]) == 3": {
      "result": true,
      "time": 0.03835558891296387,
      "error": null
    },
    "assert count_odd([9, 13, 19, 16, -14, 17, -18]) == 4": {
      "result": true,
      "time": 0.04107189178466797,
      "error": null
    },
    "assert count_odd([8, 16, 17, 18, -14, 10, -20]) == 1": {
      "result": true,
      "time": 0.04379129409790039,
      "error": null
    },
    "assert count_odd([8, 14, 17, 13, -18, 16, -19]) == 3": {
      "result": true,
      "time": 0.039403676986694336,
      "error": null
    },
    "assert count_odd([14, 10, 17, 18, -17, 10, -16]) == 2": {
      "result": true,
      "time": 0.0549776554107666,
      "error": null
    },
    "assert count_odd([6, 12, 14, 15, -17, 8, -17]) == 3": {
      "result": true,
      "time": 0.051065921783447266,
      "error": null
    },
    "assert count_odd([11, 18, 16, 16, -22, 9, -21]) == 3": {
      "result": true,
      "time": 0.0384974479675293,
      "error": null
    },
    "assert count_odd([10, 16, 16, 11, -19, 11, -21]) == 4": {
      "result": true,
      "time": 0.04111599922180176,
      "error": null
    },
    "assert count_odd([5, 15, 10, 15, -21, 13, -19]) == 6": {
      "result": true,
      "time": 0.036546945571899414,
      "error": null
    },
    "assert count_odd([12, 20, 13, 12, -16, 14, -20]) == 1": {
      "result": true,
      "time": 0.043164730072021484,
      "error": null
    },
    "assert count_odd([6, 14, 10, 11, -17, 15, -23]) == 4": {
      "result": true,
      "time": 0.04708242416381836,
      "error": null
    },
    "assert count_odd([15, 15, 18, 15, -19, 7, -24]) == 5": {
      "result": true,
      "time": 0.04355812072753906,
      "error": null
    },
    "assert count_odd([10, 12, 18, 8, -14, 17, -18]) == 1": {
      "result": true,
      "time": 0.035324811935424805,
      "error": null
    },
    "assert count_odd([12, 17, 17, 16, -23, 15, -25]) == 5": {
      "result": true,
      "time": 0.04460406303405762,
      "error": null
    },
    "assert count_odd([11, 18, 12, 15, -15, 16, -15]) == 4": {
      "result": true,
      "time": 0.029651403427124023,
      "error": null
    },
    "assert count_odd([15, 18, 15, 15, -16, 17, -22]) == 4": {
      "result": true,
      "time": 0.04734539985656738,
      "error": null
    },
    "assert count_odd([14, 16, 9, 18, -18, 17, -20]) == 2": {
      "result": true,
      "time": 0.04542183876037598,
      "error": null
    },
    "assert count_odd([9, 20, 17, 13, -17, 14, -15]) == 5": {
      "result": true,
      "time": 0.04336714744567871,
      "error": null
    },
    "assert count_odd([8, 14, 11, 16, -20, 8, -22]) == 1": {
      "result": true,
      "time": 0.041658639907836914,
      "error": null
    },
    "assert count_odd([10, 10, 9, 14, -14, 9, -25]) == 3": {
      "result": true,
      "time": 0.03451943397521973,
      "error": null
    },
    "assert count_odd([14, 11, 17, 10, -15, 12, -23]) == 4": {
      "result": true,
      "time": 0.04482293128967285,
      "error": null
    },
    "assert count_odd([11, 15, 15, 17, -19, 17, -25]) == 7": {
      "result": true,
      "time": 0.0446467399597168,
      "error": null
    },
    "assert count_odd([15, 17, 17, 16, -18, 12, -15]) == 4": {
      "result": true,
      "time": 0.04274725914001465,
      "error": null
    },
    "assert count_odd([5, 17, 9, 17, -18, 14, -20]) == 4": {
      "result": true,
      "time": 0.04902291297912598,
      "error": null
    },
    "assert count_odd([5, 10, 10, 9, -14, 13, -22]) == 3": {
      "result": true,
      "time": 0.04403853416442871,
      "error": null
    },
    "assert count_odd([12, 14, 13, 16, -15, 12, -23]) == 3": {
      "result": true,
      "time": 0.04040646553039551,
      "error": null
    },
    "assert count_odd([5, 18, 16, 10, -22, 9, -19]) == 3": {
      "result": true,
      "time": 0.03508567810058594,
      "error": null
    },
    "assert count_odd([11, 10, 14, 14, -20, 7, -21]) == 3": {
      "result": true,
      "time": 0.046830177307128906,
      "error": null
    },
    "assert count_odd([12, 10, 11, 15, -23, 14, -22]) == 3": {
      "result": true,
      "time": 0.04316067695617676,
      "error": null
    },
    "assert count_odd([8, 17, 17, 15, -22, 15, -20]) == 4": {
      "result": true,
      "time": 0.04154634475708008,
      "error": null
    },
    "assert count_odd([8, 12, 12, 10, -13, 15, -19]) == 3": {
      "result": true,
      "time": 0.04540538787841797,
      "error": null
    },
    "assert count_odd([5, 17, 14, 8, -14, 9, -22]) == 3": {
      "result": true,
      "time": 0.04248619079589844,
      "error": null
    },
    "assert count_odd([5, 12, 11, 13, -18, 17, -15]) == 5": {
      "result": true,
      "time": 0.04839205741882324,
      "error": null
    },
    "assert count_odd([2, 3, 2, 5, 11]) == 3": {
      "result": true,
      "time": 0.05222797393798828,
      "error": null
    },
    "assert count_odd([3, 1, 1, 11, 13]) == 5": {
      "result": true,
      "time": 0.058084726333618164,
      "error": null
    },
    "assert count_odd([6, 1, 6, 11, 10]) == 2": {
      "result": true,
      "time": 0.04922628402709961,
      "error": null
    },
    "assert count_odd([2, 6, 2, 7, 11]) == 2": {
      "result": true,
      "time": 0.03491353988647461,
      "error": null
    },
    "assert count_odd([1, 5, 4, 5, 13]) == 4": {
      "result": true,
      "time": 0.03931593894958496,
      "error": null
    },
    "assert count_odd([1, 4, 8, 13, 7]) == 3": {
      "result": true,
      "time": 0.04227852821350098,
      "error": null
    },
    "assert count_odd([3, 2, 4, 4, 10]) == 1": {
      "result": true,
      "time": 0.04100680351257324,
      "error": null
    },
    "assert count_odd([4, 6, 4, 3, 12]) == 1": {
      "result": true,
      "time": 0.05159187316894531,
      "error": null
    },
    "assert count_odd([1, 7, 6, 13, 13]) == 4": {
      "result": true,
      "time": 0.04318976402282715,
      "error": null
    },
    "assert count_odd([3, 7, 2, 5, 14]) == 3": {
      "result": true,
      "time": 0.04576253890991211,
      "error": null
    },
    "assert count_odd([2, 2, 5, 4, 9]) == 2": {
      "result": true,
      "time": 0.04175543785095215,
      "error": null
    },
    "assert count_odd([2, 6, 2, 9, 8]) == 1": {
      "result": true,
      "time": 0.047028303146362305,
      "error": null
    },
    "assert count_odd([1, 3, 4, 4, 10]) == 2": {
      "result": true,
      "time": 0.04641842842102051,
      "error": null
    },
    "assert count_odd([5, 7, 4, 4, 7]) == 3": {
      "result": true,
      "time": 0.04341006278991699,
      "error": null
    },
    "assert count_odd([5, 2, 1, 7, 9]) == 4": {
      "result": true,
      "time": 0.044821977615356445,
      "error": null
    },
    "assert count_odd([5, 6, 3, 8, 4]) == 2": {
      "result": true,
      "time": 0.048815011978149414,
      "error": null
    },
    "assert count_odd([2, 3, 8, 10, 7]) == 2": {
      "result": true,
      "time": 0.03608131408691406,
      "error": null
    },
    "assert count_odd([1, 4, 5, 13, 5]) == 4": {
      "result": true,
      "time": 0.04577517509460449,
      "error": null
    },
    "assert count_odd([6, 2, 2, 8, 4]) == 0": {
      "result": true,
      "time": 0.03591275215148926,
      "error": null
    },
    "assert count_odd([4, 3, 6, 8, 12]) == 1": {
      "result": true,
      "time": 0.04404425621032715,
      "error": null
    },
    "assert count_odd([1, 4, 8, 12, 11]) == 2": {
      "result": true,
      "time": 0.04411768913269043,
      "error": null
    },
    "assert count_odd([4, 3, 6, 8, 11]) == 2": {
      "result": true,
      "time": 0.0469965934753418,
      "error": null
    },
    "assert count_odd([1, 4, 5, 11, 9]) == 4": {
      "result": true,
      "time": 0.036926984786987305,
      "error": null
    },
    "assert count_odd([2, 3, 5, 4, 8]) == 2": {
      "result": true,
      "time": 0.04226541519165039,
      "error": null
    },
    "assert count_odd([3, 2, 3, 7, 14]) == 3": {
      "result": true,
      "time": 0.04567241668701172,
      "error": null
    },
    "assert count_odd([3, 1, 1, 12, 13]) == 4": {
      "result": true,
      "time": 0.053164005279541016,
      "error": null
    },
    "assert count_odd([4, 3, 3, 9, 7]) == 4": {
      "result": true,
      "time": 0.04082512855529785,
      "error": null
    },
    "assert count_odd([5, 1, 7, 7, 6]) == 4": {
      "result": true,
      "time": 0.03870868682861328,
      "error": null
    },
    "assert count_odd([1, 5, 5, 10, 13]) == 4": {
      "result": true,
      "time": 0.03576231002807617,
      "error": null
    },
    "assert count_odd([1, 7, 6, 4, 11]) == 3": {
      "result": true,
      "time": 0.052453041076660156,
      "error": null
    },
    "assert count_odd([1, 1, 4, 7, 7]) == 4": {
      "result": true,
      "time": 0.04425334930419922,
      "error": null
    },
    "assert count_odd([3, 6, 6, 5, 11]) == 3": {
      "result": true,
      "time": 0.04080462455749512,
      "error": null
    },
    "assert count_odd([2, 7, 8, 12, 12]) == 1": {
      "result": true,
      "time": 0.04548287391662598,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}