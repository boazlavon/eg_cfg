{
  "code": "def find_Max_Num(nums, k):\n    nums = sorted(nums, reverse=True)\n    max_num = int(''.join(map(str, nums[:k])))\n    return max_num\n",
  "results": {
    "assert find_Max_Num([1,2,3],3) == 321": {
      "result": true,
      "time": 0.04251813888549805,
      "error": null
    },
    "assert find_Max_Num([4,5,6,1],4) == 6541": {
      "result": true,
      "time": 0.056108951568603516,
      "error": null
    },
    "assert find_Max_Num([1,2,3,9],4) == 9321": {
      "result": true,
      "time": 0.05420851707458496,
      "error": null
    },
    "assert find_Max_Num([4, 3, 2], 3) == 432": {
      "result": true,
      "time": 0.058670759201049805,
      "error": null
    },
    "assert find_Max_Num([5, 1, 8], 2) == 85": {
      "result": true,
      "time": 0.04402613639831543,
      "error": null
    },
    "assert find_Max_Num([2, 2, 5], 1) == 5": {
      "result": true,
      "time": 0.039983272552490234,
      "error": null
    },
    "assert find_Max_Num([5, 7, 5], 1) == 7": {
      "result": true,
      "time": 0.050049543380737305,
      "error": null
    },
    "assert find_Max_Num([2, 2, 8], 3) == 822": {
      "result": true,
      "time": 0.05088686943054199,
      "error": null
    },
    "assert find_Max_Num([5, 1, 4], 1) == 5": {
      "result": true,
      "time": 0.054802894592285156,
      "error": null
    },
    "assert find_Max_Num([5, 1, 3], 2) == 53": {
      "result": true,
      "time": 0.0409092903137207,
      "error": null
    },
    "assert find_Max_Num([6, 3, 7], 3) == 763": {
      "result": true,
      "time": 0.05283188819885254,
      "error": null
    },
    "assert find_Max_Num([2, 4, 1], 2) == 42": {
      "result": true,
      "time": 0.04107213020324707,
      "error": null
    },
    "assert find_Max_Num([5, 2, 6], 1) == 6": {
      "result": true,
      "time": 0.037288665771484375,
      "error": null
    },
    "assert find_Max_Num([2, 3, 7], 1) == 7": {
      "result": true,
      "time": 0.04322052001953125,
      "error": null
    },
    "assert find_Max_Num([1, 3, 3], 3) == 331": {
      "result": true,
      "time": 0.03874564170837402,
      "error": null
    },
    "assert find_Max_Num([3, 1, 3], 1) == 3": {
      "result": true,
      "time": 0.037514686584472656,
      "error": null
    },
    "assert find_Max_Num([6, 7, 4], 1) == 7": {
      "result": true,
      "time": 0.03812241554260254,
      "error": null
    },
    "assert find_Max_Num([2, 5, 8], 1) == 8": {
      "result": true,
      "time": 0.031560659408569336,
      "error": null
    },
    "assert find_Max_Num([3, 4, 6], 3) == 643": {
      "result": true,
      "time": 0.04010629653930664,
      "error": null
    },
    "assert find_Max_Num([1, 7, 8], 2) == 87": {
      "result": true,
      "time": 0.04004049301147461,
      "error": null
    },
    "assert find_Max_Num([5, 7, 2], 2) == 75": {
      "result": true,
      "time": 0.037735939025878906,
      "error": null
    },
    "assert find_Max_Num([5, 6, 7], 3) == 765": {
      "result": true,
      "time": 0.03593611717224121,
      "error": null
    },
    "assert find_Max_Num([3, 4, 5], 1) == 5": {
      "result": true,
      "time": 0.03916287422180176,
      "error": null
    },
    "assert find_Max_Num([2, 7, 1], 3) == 721": {
      "result": true,
      "time": 0.029493093490600586,
      "error": null
    },
    "assert find_Max_Num([6, 1, 1], 2) == 61": {
      "result": true,
      "time": 0.03749418258666992,
      "error": null
    },
    "assert find_Max_Num([3, 3, 4], 2) == 43": {
      "result": true,
      "time": 0.03811001777648926,
      "error": null
    },
    "assert find_Max_Num([2, 5, 4], 1) == 5": {
      "result": true,
      "time": 0.03909182548522949,
      "error": null
    },
    "assert find_Max_Num([1, 1, 2], 2) == 21": {
      "result": true,
      "time": 0.040892601013183594,
      "error": null
    },
    "assert find_Max_Num([6, 4, 7], 2) == 76": {
      "result": true,
      "time": 0.03818678855895996,
      "error": null
    },
    "assert find_Max_Num([1, 3, 2], 2) == 32": {
      "result": true,
      "time": 0.03832674026489258,
      "error": null
    },
    "assert find_Max_Num([2, 2, 7], 2) == 72": {
      "result": true,
      "time": 0.03505229949951172,
      "error": null
    },
    "assert find_Max_Num([4, 2, 7], 1) == 7": {
      "result": true,
      "time": 0.03793907165527344,
      "error": null
    },
    "assert find_Max_Num([1, 4, 3], 3) == 431": {
      "result": true,
      "time": 0.03653883934020996,
      "error": null
    },
    "assert find_Max_Num([1, 1, 4], 3) == 411": {
      "result": true,
      "time": 0.035123348236083984,
      "error": null
    },
    "assert find_Max_Num([1, 3, 3], 2) == 33": {
      "result": true,
      "time": 0.03673386573791504,
      "error": null
    },
    "assert find_Max_Num([1, 9, 11, 5], 2) == 119": {
      "result": true,
      "time": 0.03770637512207031,
      "error": null
    },
    "assert find_Max_Num([1, 3, 1, 4], 2) == 43": {
      "result": true,
      "time": 0.04109692573547363,
      "error": null
    },
    "assert find_Max_Num([5, 8, 5, 3], 3) == 855": {
      "result": true,
      "time": 0.03361654281616211,
      "error": null
    },
    "assert find_Max_Num([4, 2, 8, 1], 4) == 8421": {
      "result": true,
      "time": 0.043768882751464844,
      "error": null
    },
    "assert find_Max_Num([2, 8, 11, 2], 3) == 1182": {
      "result": true,
      "time": 0.03644609451293945,
      "error": null
    },
    "assert find_Max_Num([2, 10, 10, 6], 1) == 10": {
      "result": true,
      "time": 0.05699729919433594,
      "error": null
    },
    "assert find_Max_Num([8, 3, 5, 5], 4) == 8553": {
      "result": true,
      "time": 0.06145954132080078,
      "error": null
    },
    "assert find_Max_Num([4, 1, 11, 5], 2) == 115": {
      "result": true,
      "time": 0.05640435218811035,
      "error": null
    },
    "assert find_Max_Num([4, 9, 7, 4], 3) == 974": {
      "result": true,
      "time": 0.036086320877075195,
      "error": null
    },
    "assert find_Max_Num([1, 10, 11, 2], 4) == 12021": {
      "result": false,
      "time": 0.03970217704772949,
      "error": null
    },
    "assert find_Max_Num([9, 7, 5, 2], 2) == 97": {
      "result": true,
      "time": 0.04033064842224121,
      "error": null
    },
    "assert find_Max_Num([3, 1, 6, 1], 2) == 63": {
      "result": true,
      "time": 0.04043412208557129,
      "error": null
    },
    "assert find_Max_Num([9, 7, 10, 3], 1) == 10": {
      "result": true,
      "time": 0.034871816635131836,
      "error": null
    },
    "assert find_Max_Num([3, 5, 3, 3], 4) == 5333": {
      "result": true,
      "time": 0.042476654052734375,
      "error": null
    },
    "assert find_Max_Num([2, 8, 9, 1], 3) == 982": {
      "result": true,
      "time": 0.03991293907165527,
      "error": null
    },
    "assert find_Max_Num([2, 1, 11, 3], 2) == 113": {
      "result": true,
      "time": 0.038193702697753906,
      "error": null
    },
    "assert find_Max_Num([5, 4, 3, 1], 3) == 543": {
      "result": true,
      "time": 0.03360414505004883,
      "error": null
    },
    "assert find_Max_Num([3, 6, 10, 2], 1) == 10": {
      "result": true,
      "time": 0.040543556213378906,
      "error": null
    },
    "assert find_Max_Num([8, 6, 10, 1], 1) == 10": {
      "result": true,
      "time": 0.03692436218261719,
      "error": null
    },
    "assert find_Max_Num([2, 8, 11, 2], 2) == 118": {
      "result": true,
      "time": 0.0365605354309082,
      "error": null
    },
    "assert find_Max_Num([1, 2, 7, 2], 3) == 722": {
      "result": true,
      "time": 0.03702402114868164,
      "error": null
    },
    "assert find_Max_Num([5, 7, 6, 1], 4) == 7651": {
      "result": true,
      "time": 0.040925025939941406,
      "error": null
    },
    "assert find_Max_Num([2, 10, 11, 3], 1) == 11": {
      "result": true,
      "time": 0.03516387939453125,
      "error": null
    },
    "assert find_Max_Num([5, 8, 10, 6], 3) == 1086": {
      "result": true,
      "time": 0.03448367118835449,
      "error": null
    },
    "assert find_Max_Num([6, 8, 6, 3], 1) == 8": {
      "result": true,
      "time": 0.0395200252532959,
      "error": null
    },
    "assert find_Max_Num([3, 4, 4, 2], 2) == 44": {
      "result": true,
      "time": 0.03486180305480957,
      "error": null
    },
    "assert find_Max_Num([7, 6, 8, 4], 4) == 8764": {
      "result": true,
      "time": 0.04189109802246094,
      "error": null
    },
    "assert find_Max_Num([4, 7, 11, 2], 2) == 117": {
      "result": true,
      "time": 0.03406047821044922,
      "error": null
    },
    "assert find_Max_Num([3, 4, 10, 5], 4) == 10543": {
      "result": true,
      "time": 0.035660743713378906,
      "error": null
    },
    "assert find_Max_Num([3, 8, 11, 4], 4) == 11843": {
      "result": true,
      "time": 0.04166245460510254,
      "error": null
    },
    "assert find_Max_Num([1, 6, 10, 5], 4) == 10651": {
      "result": true,
      "time": 0.043532609939575195,
      "error": null
    },
    "assert find_Max_Num([7, 7, 4, 4], 2) == 77": {
      "result": true,
      "time": 0.03246259689331055,
      "error": null
    },
    "assert find_Max_Num([2, 2, 4, 2], 1) == 4": {
      "result": true,
      "time": 0.03447604179382324,
      "error": null
    },
    "assert find_Max_Num([2, 5, 8, 5], 2) == 85": {
      "result": true,
      "time": 0.03064441680908203,
      "error": null
    },
    "assert find_Max_Num([6, 1, 5, 7], 3) == 765": {
      "result": true,
      "time": 0.03684568405151367,
      "error": null
    },
    "assert find_Max_Num([5, 2, 7, 12], 4) == 12752": {
      "result": true,
      "time": 0.03313136100769043,
      "error": null
    },
    "assert find_Max_Num([1, 1, 8, 7], 3) == 871": {
      "result": true,
      "time": 0.03676342964172363,
      "error": null
    },
    "assert find_Max_Num([3, 1, 4, 10], 2) == 104": {
      "result": true,
      "time": 0.03287863731384277,
      "error": null
    },
    "assert find_Max_Num([5, 2, 5, 11], 2) == 115": {
      "result": true,
      "time": 0.031774044036865234,
      "error": null
    },
    "assert find_Max_Num([5, 3, 4, 5], 1) == 5": {
      "result": true,
      "time": 0.030524492263793945,
      "error": null
    },
    "assert find_Max_Num([1, 1, 6, 7], 2) == 76": {
      "result": true,
      "time": 0.03378915786743164,
      "error": null
    },
    "assert find_Max_Num([3, 6, 5, 11], 4) == 11653": {
      "result": true,
      "time": 0.035144805908203125,
      "error": null
    },
    "assert find_Max_Num([5, 4, 2, 8], 2) == 85": {
      "result": true,
      "time": 0.03647971153259277,
      "error": null
    },
    "assert find_Max_Num([2, 5, 5, 6], 4) == 6552": {
      "result": true,
      "time": 0.036373138427734375,
      "error": null
    },
    "assert find_Max_Num([5, 5, 4, 4], 4) == 5544": {
      "result": true,
      "time": 0.04025530815124512,
      "error": null
    },
    "assert find_Max_Num([1, 7, 8, 7], 1) == 8": {
      "result": true,
      "time": 0.03879880905151367,
      "error": null
    },
    "assert find_Max_Num([6, 4, 2, 13], 4) == 13642": {
      "result": true,
      "time": 0.04398369789123535,
      "error": null
    },
    "assert find_Max_Num([5, 1, 4, 6], 2) == 65": {
      "result": true,
      "time": 0.0374753475189209,
      "error": null
    },
    "assert find_Max_Num([3, 2, 5, 7], 4) == 7532": {
      "result": true,
      "time": 0.03272891044616699,
      "error": null
    },
    "assert find_Max_Num([3, 1, 2, 14], 3) == 1432": {
      "result": true,
      "time": 0.032943010330200195,
      "error": null
    },
    "assert find_Max_Num([3, 6, 4, 9], 3) == 964": {
      "result": true,
      "time": 0.03966116905212402,
      "error": null
    },
    "assert find_Max_Num([3, 5, 6, 13], 3) == 1365": {
      "result": true,
      "time": 0.03576970100402832,
      "error": null
    },
    "assert find_Max_Num([4, 1, 4, 11], 4) == 11441": {
      "result": true,
      "time": 0.040599822998046875,
      "error": null
    },
    "assert find_Max_Num([4, 7, 7, 7], 2) == 77": {
      "result": true,
      "time": 0.042925119400024414,
      "error": null
    },
    "assert find_Max_Num([6, 1, 1, 10], 4) == 10611": {
      "result": true,
      "time": 0.03803825378417969,
      "error": null
    },
    "assert find_Max_Num([4, 3, 6, 12], 1) == 12": {
      "result": true,
      "time": 0.03414583206176758,
      "error": null
    },
    "assert find_Max_Num([1, 6, 3, 12], 1) == 12": {
      "result": true,
      "time": 0.033770084381103516,
      "error": null
    },
    "assert find_Max_Num([6, 2, 1, 10], 1) == 10": {
      "result": true,
      "time": 0.039447784423828125,
      "error": null
    },
    "assert find_Max_Num([3, 5, 3, 5], 4) == 5533": {
      "result": true,
      "time": 0.036388397216796875,
      "error": null
    },
    "assert find_Max_Num([6, 2, 5, 7], 3) == 765": {
      "result": true,
      "time": 0.029576778411865234,
      "error": null
    },
    "assert find_Max_Num([2, 2, 5, 6], 1) == 6": {
      "result": true,
      "time": 0.04068136215209961,
      "error": null
    },
    "assert find_Max_Num([6, 4, 3, 10], 2) == 106": {
      "result": true,
      "time": 0.04181385040283203,
      "error": null
    },
    "assert find_Max_Num([1, 2, 8, 10], 2) == 108": {
      "result": true,
      "time": 0.03544330596923828,
      "error": null
    },
    "assert find_Max_Num([2, 5, 5, 7], 3) == 755": {
      "result": true,
      "time": 0.041747093200683594,
      "error": null
    },
    "assert find_Max_Num([2, 7, 8, 4], 4) == 8742": {
      "result": true,
      "time": 0.0420074462890625,
      "error": null
    },
    "assert find_Max_Num([3, 6, 6, 5], 3) == 665": {
      "result": true,
      "time": 0.035881757736206055,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9900990099009901,
  "general_error": "",
  "has_testcase_error": false
}