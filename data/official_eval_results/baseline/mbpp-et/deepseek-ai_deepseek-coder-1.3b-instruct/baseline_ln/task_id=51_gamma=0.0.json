{
  "code": "def check_equilateral(a, b, c):\n    # Check if the triangle is valid\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n\n    # Check if the triangle is equilateral\n    if a == b == c:\n        return True\n    else:\n        return False\n",
  "results": {
    "assert check_equilateral(6,8,12)==False ": {
      "result": true,
      "time": 0.05013108253479004,
      "error": null
    },
    "assert check_equilateral(6,6,12)==False": {
      "result": true,
      "time": 0.045960187911987305,
      "error": null
    },
    "assert check_equilateral(6,6,6)==True": {
      "result": true,
      "time": 0.06715869903564453,
      "error": null
    },
    "assert check_equilateral(2, 12, 13) == False": {
      "result": true,
      "time": 0.049364328384399414,
      "error": null
    },
    "assert check_equilateral(3, 6, 7) == False": {
      "result": true,
      "time": 0.0477597713470459,
      "error": null
    },
    "assert check_equilateral(1, 10, 11) == False": {
      "result": true,
      "time": 0.04883623123168945,
      "error": null
    },
    "assert check_equilateral(1, 6, 16) == False": {
      "result": true,
      "time": 0.04555201530456543,
      "error": null
    },
    "assert check_equilateral(4, 7, 12) == False": {
      "result": true,
      "time": 0.058013916015625,
      "error": null
    },
    "assert check_equilateral(3, 12, 13) == False": {
      "result": true,
      "time": 0.045426130294799805,
      "error": null
    },
    "assert check_equilateral(4, 12, 8) == False": {
      "result": true,
      "time": 0.06505775451660156,
      "error": null
    },
    "assert check_equilateral(10, 10, 14) == False": {
      "result": true,
      "time": 0.054168701171875,
      "error": null
    },
    "assert check_equilateral(4, 11, 7) == False": {
      "result": true,
      "time": 0.046063899993896484,
      "error": null
    },
    "assert check_equilateral(11, 13, 15) == False": {
      "result": true,
      "time": 0.04512453079223633,
      "error": null
    },
    "assert check_equilateral(6, 9, 10) == False": {
      "result": true,
      "time": 0.04105544090270996,
      "error": null
    },
    "assert check_equilateral(1, 10, 8) == False": {
      "result": true,
      "time": 0.045525550842285156,
      "error": null
    },
    "assert check_equilateral(1, 8, 17) == False": {
      "result": true,
      "time": 0.03994584083557129,
      "error": null
    },
    "assert check_equilateral(2, 4, 16) == False": {
      "result": true,
      "time": 0.04107379913330078,
      "error": null
    },
    "assert check_equilateral(10, 13, 15) == False": {
      "result": true,
      "time": 0.035646915435791016,
      "error": null
    },
    "assert check_equilateral(2, 5, 9) == False": {
      "result": true,
      "time": 0.03938484191894531,
      "error": null
    },
    "assert check_equilateral(8, 4, 17) == False": {
      "result": true,
      "time": 0.0393376350402832,
      "error": null
    },
    "assert check_equilateral(6, 13, 10) == False": {
      "result": true,
      "time": 0.03638935089111328,
      "error": null
    },
    "assert check_equilateral(10, 10, 11) == False": {
      "result": true,
      "time": 0.03656649589538574,
      "error": null
    },
    "assert check_equilateral(1, 10, 12) == False": {
      "result": true,
      "time": 0.04253506660461426,
      "error": null
    },
    "assert check_equilateral(5, 9, 12) == False": {
      "result": true,
      "time": 0.04343867301940918,
      "error": null
    },
    "assert check_equilateral(4, 4, 9) == False": {
      "result": true,
      "time": 0.034064531326293945,
      "error": null
    },
    "assert check_equilateral(6, 7, 16) == False": {
      "result": true,
      "time": 0.033968210220336914,
      "error": null
    },
    "assert check_equilateral(10, 12, 7) == False": {
      "result": true,
      "time": 0.0410768985748291,
      "error": null
    },
    "assert check_equilateral(8, 8, 14) == False": {
      "result": true,
      "time": 0.039423465728759766,
      "error": null
    },
    "assert check_equilateral(6, 13, 14) == False": {
      "result": true,
      "time": 0.0371851921081543,
      "error": null
    },
    "assert check_equilateral(8, 10, 9) == False": {
      "result": true,
      "time": 0.038396358489990234,
      "error": null
    },
    "assert check_equilateral(10, 11, 8) == False": {
      "result": true,
      "time": 0.034981489181518555,
      "error": null
    },
    "assert check_equilateral(6, 3, 8) == False": {
      "result": true,
      "time": 0.04759955406188965,
      "error": null
    },
    "assert check_equilateral(11, 8, 13) == False": {
      "result": true,
      "time": 0.03724837303161621,
      "error": null
    },
    "assert check_equilateral(4, 9, 7) == False": {
      "result": true,
      "time": 0.051715850830078125,
      "error": null
    },
    "assert check_equilateral(4, 10, 8) == False": {
      "result": true,
      "time": 0.03927731513977051,
      "error": null
    },
    "assert check_equilateral(7, 1, 10) == False": {
      "result": true,
      "time": 0.03690505027770996,
      "error": null
    },
    "assert check_equilateral(2, 10, 11) == False": {
      "result": true,
      "time": 0.034880638122558594,
      "error": null
    },
    "assert check_equilateral(9, 5, 12) == False": {
      "result": true,
      "time": 0.036997318267822266,
      "error": null
    },
    "assert check_equilateral(5, 4, 16) == False": {
      "result": true,
      "time": 0.03912544250488281,
      "error": null
    },
    "assert check_equilateral(6, 11, 17) == False": {
      "result": true,
      "time": 0.036531925201416016,
      "error": null
    },
    "assert check_equilateral(9, 5, 11) == False": {
      "result": true,
      "time": 0.03718852996826172,
      "error": null
    },
    "assert check_equilateral(8, 10, 17) == False": {
      "result": true,
      "time": 0.038692474365234375,
      "error": null
    },
    "assert check_equilateral(6, 4, 17) == False": {
      "result": true,
      "time": 0.041716814041137695,
      "error": null
    },
    "assert check_equilateral(10, 10, 8) == False": {
      "result": true,
      "time": 0.03743720054626465,
      "error": null
    },
    "assert check_equilateral(8, 7, 8) == False": {
      "result": true,
      "time": 0.0367889404296875,
      "error": null
    },
    "assert check_equilateral(2, 5, 12) == False": {
      "result": true,
      "time": 0.03476357460021973,
      "error": null
    },
    "assert check_equilateral(8, 1, 9) == False": {
      "result": true,
      "time": 0.03227972984313965,
      "error": null
    },
    "assert check_equilateral(4, 1, 8) == False": {
      "result": true,
      "time": 0.0320582389831543,
      "error": null
    },
    "assert check_equilateral(11, 8, 12) == False": {
      "result": true,
      "time": 0.031778812408447266,
      "error": null
    },
    "assert check_equilateral(2, 4, 14) == False": {
      "result": true,
      "time": 0.037735939025878906,
      "error": null
    },
    "assert check_equilateral(5, 2, 11) == False": {
      "result": true,
      "time": 0.03476572036743164,
      "error": null
    },
    "assert check_equilateral(7, 2, 15) == False": {
      "result": true,
      "time": 0.03546595573425293,
      "error": null
    },
    "assert check_equilateral(5, 11, 14) == False": {
      "result": true,
      "time": 0.03493475914001465,
      "error": null
    },
    "assert check_equilateral(11, 7, 11) == False": {
      "result": true,
      "time": 0.030091047286987305,
      "error": null
    },
    "assert check_equilateral(4, 1, 17) == False": {
      "result": true,
      "time": 0.03755021095275879,
      "error": null
    },
    "assert check_equilateral(2, 11, 16) == False": {
      "result": true,
      "time": 0.0401453971862793,
      "error": null
    },
    "assert check_equilateral(11, 8, 8) == False": {
      "result": true,
      "time": 0.0404820442199707,
      "error": null
    },
    "assert check_equilateral(6, 1, 12) == False": {
      "result": true,
      "time": 0.03753495216369629,
      "error": null
    },
    "assert check_equilateral(7, 7, 14) == False": {
      "result": true,
      "time": 0.03291010856628418,
      "error": null
    },
    "assert check_equilateral(4, 3, 7) == False": {
      "result": true,
      "time": 0.04360222816467285,
      "error": null
    },
    "assert check_equilateral(8, 2, 15) == False": {
      "result": true,
      "time": 0.04044508934020996,
      "error": null
    },
    "assert check_equilateral(10, 5, 13) == False": {
      "result": true,
      "time": 0.03555440902709961,
      "error": null
    },
    "assert check_equilateral(2, 5, 10) == False": {
      "result": true,
      "time": 0.03128671646118164,
      "error": null
    },
    "assert check_equilateral(5, 6, 16) == False": {
      "result": true,
      "time": 0.035314321517944336,
      "error": null
    },
    "assert check_equilateral(11, 7, 16) == False": {
      "result": true,
      "time": 0.03911328315734863,
      "error": null
    },
    "assert check_equilateral(1, 2, 17) == False": {
      "result": true,
      "time": 0.03792762756347656,
      "error": null
    },
    "assert check_equilateral(6, 11, 2) == False": {
      "result": true,
      "time": 0.04132485389709473,
      "error": null
    },
    "assert check_equilateral(9, 11, 1) == False": {
      "result": true,
      "time": 0.03350567817687988,
      "error": null
    },
    "assert check_equilateral(11, 1, 11) == False": {
      "result": true,
      "time": 0.041732072830200195,
      "error": null
    },
    "assert check_equilateral(11, 9, 11) == False": {
      "result": true,
      "time": 0.032245635986328125,
      "error": null
    },
    "assert check_equilateral(6, 7, 6) == False": {
      "result": true,
      "time": 0.037192344665527344,
      "error": null
    },
    "assert check_equilateral(7, 10, 7) == False": {
      "result": true,
      "time": 0.0370631217956543,
      "error": null
    },
    "assert check_equilateral(5, 6, 10) == False": {
      "result": true,
      "time": 0.04466819763183594,
      "error": null
    },
    "assert check_equilateral(10, 9, 2) == False": {
      "result": true,
      "time": 0.0389857292175293,
      "error": null
    },
    "assert check_equilateral(4, 10, 7) == False": {
      "result": true,
      "time": 0.036432504653930664,
      "error": null
    },
    "assert check_equilateral(1, 10, 10) == False": {
      "result": true,
      "time": 0.036252498626708984,
      "error": null
    },
    "assert check_equilateral(9, 10, 8) == False": {
      "result": true,
      "time": 0.04294157028198242,
      "error": null
    },
    "assert check_equilateral(3, 3, 8) == False": {
      "result": true,
      "time": 0.03759932518005371,
      "error": null
    },
    "assert check_equilateral(1, 4, 2) == False": {
      "result": true,
      "time": 0.03990602493286133,
      "error": null
    },
    "assert check_equilateral(10, 4, 7) == False": {
      "result": true,
      "time": 0.03732013702392578,
      "error": null
    },
    "assert check_equilateral(2, 11, 1) == False": {
      "result": true,
      "time": 0.03704023361206055,
      "error": null
    },
    "assert check_equilateral(10, 10, 5) == False": {
      "result": true,
      "time": 0.04606318473815918,
      "error": null
    },
    "assert check_equilateral(2, 3, 7) == False": {
      "result": true,
      "time": 0.03772139549255371,
      "error": null
    },
    "assert check_equilateral(7, 3, 7) == False": {
      "result": true,
      "time": 0.03504633903503418,
      "error": null
    },
    "assert check_equilateral(6, 7, 9) == False": {
      "result": true,
      "time": 0.03767561912536621,
      "error": null
    },
    "assert check_equilateral(6, 4, 8) == False": {
      "result": true,
      "time": 0.03623557090759277,
      "error": null
    },
    "assert check_equilateral(3, 2, 6) == False": {
      "result": true,
      "time": 0.03609800338745117,
      "error": null
    },
    "assert check_equilateral(7, 8, 7) == False": {
      "result": true,
      "time": 0.03899836540222168,
      "error": null
    },
    "assert check_equilateral(4, 7, 7) == False": {
      "result": true,
      "time": 0.036185503005981445,
      "error": null
    },
    "assert check_equilateral(11, 8, 4) == False": {
      "result": true,
      "time": 0.03408694267272949,
      "error": null
    },
    "assert check_equilateral(10, 3, 1) == False": {
      "result": true,
      "time": 0.04317188262939453,
      "error": null
    },
    "assert check_equilateral(3, 11, 6) == False": {
      "result": true,
      "time": 0.03510117530822754,
      "error": null
    },
    "assert check_equilateral(5, 11, 10) == False": {
      "result": true,
      "time": 0.04530811309814453,
      "error": null
    },
    "assert check_equilateral(11, 8, 5) == False": {
      "result": true,
      "time": 0.03956174850463867,
      "error": null
    },
    "assert check_equilateral(6, 11, 6) == False": {
      "result": true,
      "time": 0.0376589298248291,
      "error": null
    },
    "assert check_equilateral(9, 6, 11) == False": {
      "result": true,
      "time": 0.040936946868896484,
      "error": null
    },
    "assert check_equilateral(6, 2, 4) == False": {
      "result": true,
      "time": 0.032488107681274414,
      "error": null
    },
    "assert check_equilateral(1, 3, 3) == False": {
      "result": true,
      "time": 0.03482365608215332,
      "error": null
    },
    "assert check_equilateral(5, 1, 1) == False": {
      "result": true,
      "time": 0.0375368595123291,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}