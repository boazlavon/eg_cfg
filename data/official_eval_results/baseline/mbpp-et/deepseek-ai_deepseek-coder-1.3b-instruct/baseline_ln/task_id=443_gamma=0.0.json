{
  "code": "def largest_neg(nums):\n    return max(nums, key=abs)",
  "results": {
    "assert largest_neg([1,2,3,-4,-6]) == -6": {
      "result": true,
      "time": 0.03542900085449219,
      "error": null
    },
    "assert largest_neg([1,2,3,-8,-9]) == -9": {
      "result": true,
      "time": 0.04217195510864258,
      "error": null
    },
    "assert largest_neg([1,2,3,4,-1]) == -1": {
      "result": false,
      "time": 0.04241657257080078,
      "error": null
    },
    "assert largest_neg([4, 1, 5, -8, -8]) == -8": {
      "result": true,
      "time": 0.04705810546875,
      "error": null
    },
    "assert largest_neg([1, 6, 8, -2, -5]) == -5": {
      "result": false,
      "time": 0.06281924247741699,
      "error": null
    },
    "assert largest_neg([5, 6, 8, 0, -1]) == -1": {
      "result": false,
      "time": 0.0512692928314209,
      "error": null
    },
    "assert largest_neg([3, 4, 6, -7, -3]) == -7": {
      "result": true,
      "time": 0.03567337989807129,
      "error": null
    },
    "assert largest_neg([2, 7, 6, 1, -5]) == -5": {
      "result": false,
      "time": 0.04360342025756836,
      "error": null
    },
    "assert largest_neg([2, 1, 1, -4, -11]) == -11": {
      "result": true,
      "time": 0.0383305549621582,
      "error": null
    },
    "assert largest_neg([1, 6, 8, -6, -7]) == -7": {
      "result": false,
      "time": 0.049913644790649414,
      "error": null
    },
    "assert largest_neg([3, 7, 5, 1, -3]) == -3": {
      "result": false,
      "time": 0.05753636360168457,
      "error": null
    },
    "assert largest_neg([2, 7, 3, -6, -4]) == -6": {
      "result": false,
      "time": 0.048459768295288086,
      "error": null
    },
    "assert largest_neg([2, 7, 7, -5, -4]) == -5": {
      "result": false,
      "time": 0.04363536834716797,
      "error": null
    },
    "assert largest_neg([4, 1, 2, -9, -5]) == -9": {
      "result": true,
      "time": 0.046512603759765625,
      "error": null
    },
    "assert largest_neg([2, 7, 7, -1, -9]) == -9": {
      "result": true,
      "time": 0.05333757400512695,
      "error": null
    },
    "assert largest_neg([5, 2, 2, -3, -10]) == -10": {
      "result": true,
      "time": 0.04059886932373047,
      "error": null
    },
    "assert largest_neg([2, 4, 5, 1, -10]) == -10": {
      "result": true,
      "time": 0.039682865142822266,
      "error": null
    },
    "assert largest_neg([5, 4, 2, -6, -7]) == -7": {
      "result": true,
      "time": 0.04270172119140625,
      "error": null
    },
    "assert largest_neg([2, 7, 4, -1, -7]) == -7": {
      "result": false,
      "time": 0.04282546043395996,
      "error": null
    },
    "assert largest_neg([2, 1, 4, -3, -8]) == -8": {
      "result": true,
      "time": 0.0487518310546875,
      "error": null
    },
    "assert largest_neg([3, 4, 4, 0, -9]) == -9": {
      "result": true,
      "time": 0.04926562309265137,
      "error": null
    },
    "assert largest_neg([5, 7, 1, -6, -10]) == -10": {
      "result": true,
      "time": 0.04693412780761719,
      "error": null
    },
    "assert largest_neg([4, 4, 1, 1, -7]) == -7": {
      "result": true,
      "time": 0.047247886657714844,
      "error": null
    },
    "assert largest_neg([1, 3, 2, -6, -7]) == -7": {
      "result": true,
      "time": 0.054158926010131836,
      "error": null
    },
    "assert largest_neg([6, 5, 4, 0, -6]) == -6": {
      "result": false,
      "time": 0.04393577575683594,
      "error": null
    },
    "assert largest_neg([5, 3, 6, -6, -8]) == -8": {
      "result": true,
      "time": 0.04572582244873047,
      "error": null
    },
    "assert largest_neg([4, 2, 3, -9, -10]) == -10": {
      "result": true,
      "time": 0.04497098922729492,
      "error": null
    },
    "assert largest_neg([4, 2, 3, -6, -6]) == -6": {
      "result": true,
      "time": 0.05608725547790527,
      "error": null
    },
    "assert largest_neg([5, 2, 8, -9, -10]) == -10": {
      "result": true,
      "time": 0.05633687973022461,
      "error": null
    },
    "assert largest_neg([2, 6, 4, -4, -3]) == -4": {
      "result": false,
      "time": 0.04405331611633301,
      "error": null
    },
    "assert largest_neg([6, 5, 5, -4, -8]) == -8": {
      "result": true,
      "time": 0.04142355918884277,
      "error": null
    },
    "assert largest_neg([3, 4, 8, 1, -11]) == -11": {
      "result": true,
      "time": 0.04755115509033203,
      "error": null
    },
    "assert largest_neg([5, 1, 3, -3, -1]) == -3": {
      "result": false,
      "time": 0.048914432525634766,
      "error": null
    },
    "assert largest_neg([5, 6, 4, -5, -9]) == -9": {
      "result": true,
      "time": 0.04502105712890625,
      "error": null
    },
    "assert largest_neg([3, 1, 1, -4, -4]) == -4": {
      "result": true,
      "time": 0.04643678665161133,
      "error": null
    },
    "assert largest_neg([6, 7, 3, -4, -6]) == -6": {
      "result": false,
      "time": 0.0468599796295166,
      "error": null
    },
    "assert largest_neg([4, 5, 4, -3, -9]) == -9": {
      "result": true,
      "time": 0.04217028617858887,
      "error": null
    },
    "assert largest_neg([6, 3, 1, -8, -4]) == -8": {
      "result": true,
      "time": 0.04087686538696289,
      "error": null
    },
    "assert largest_neg([6, 5, 5, -11, -4]) == -11": {
      "result": true,
      "time": 0.04398083686828613,
      "error": null
    },
    "assert largest_neg([3, 7, 3, -3, -6]) == -6": {
      "result": false,
      "time": 0.041307926177978516,
      "error": null
    },
    "assert largest_neg([5, 4, 2, -6, -11]) == -11": {
      "result": true,
      "time": 0.04092884063720703,
      "error": null
    },
    "assert largest_neg([3, 5, 3, -12, -10]) == -12": {
      "result": true,
      "time": 0.04856228828430176,
      "error": null
    },
    "assert largest_neg([5, 1, 4, -10, -5]) == -10": {
      "result": true,
      "time": 0.044741153717041016,
      "error": null
    },
    "assert largest_neg([4, 7, 5, -3, -10]) == -10": {
      "result": true,
      "time": 0.04236173629760742,
      "error": null
    },
    "assert largest_neg([6, 6, 6, -7, -4]) == -7": {
      "result": true,
      "time": 0.04951214790344238,
      "error": null
    },
    "assert largest_neg([3, 6, 3, -9, -9]) == -9": {
      "result": true,
      "time": 0.0550084114074707,
      "error": null
    },
    "assert largest_neg([2, 3, 8, -10, -14]) == -14": {
      "result": true,
      "time": 0.03866863250732422,
      "error": null
    },
    "assert largest_neg([4, 5, 4, -3, -12]) == -12": {
      "result": true,
      "time": 0.04828047752380371,
      "error": null
    },
    "assert largest_neg([3, 3, 8, -5, -11]) == -11": {
      "result": true,
      "time": 0.0469820499420166,
      "error": null
    },
    "assert largest_neg([4, 3, 8, -8, -6]) == -8": {
      "result": false,
      "time": 0.038062334060668945,
      "error": null
    },
    "assert largest_neg([1, 5, 3, -4, -14]) == -14": {
      "result": true,
      "time": 0.047351837158203125,
      "error": null
    },
    "assert largest_neg([1, 3, 1, -7, -5]) == -7": {
      "result": true,
      "time": 0.04193592071533203,
      "error": null
    },
    "assert largest_neg([1, 7, 1, -7, -11]) == -11": {
      "result": true,
      "time": 0.05180191993713379,
      "error": null
    },
    "assert largest_neg([1, 2, 2, -7, -5]) == -7": {
      "result": true,
      "time": 0.04848194122314453,
      "error": null
    },
    "assert largest_neg([6, 5, 1, -4, -7]) == -7": {
      "result": true,
      "time": 0.04192709922790527,
      "error": null
    },
    "assert largest_neg([5, 4, 4, -8, -9]) == -9": {
      "result": true,
      "time": 0.03635382652282715,
      "error": null
    },
    "assert largest_neg([3, 2, 4, -8, -10]) == -10": {
      "result": true,
      "time": 0.04783797264099121,
      "error": null
    },
    "assert largest_neg([5, 5, 6, -9, -7]) == -9": {
      "result": true,
      "time": 0.04311728477478027,
      "error": null
    },
    "assert largest_neg([3, 3, 1, -7, -9]) == -9": {
      "result": true,
      "time": 0.044702768325805664,
      "error": null
    },
    "assert largest_neg([3, 7, 5, -13, -13]) == -13": {
      "result": true,
      "time": 0.04110288619995117,
      "error": null
    },
    "assert largest_neg([3, 5, 5, -13, -14]) == -14": {
      "result": true,
      "time": 0.04666495323181152,
      "error": null
    },
    "assert largest_neg([2, 4, 5, -10, -7]) == -10": {
      "result": true,
      "time": 0.043453216552734375,
      "error": null
    },
    "assert largest_neg([4, 4, 7, -9, -11]) == -11": {
      "result": true,
      "time": 0.04929995536804199,
      "error": null
    },
    "assert largest_neg([6, 1, 8, -8, -6]) == -8": {
      "result": false,
      "time": 0.043257951736450195,
      "error": null
    },
    "assert largest_neg([1, 1, 2, -12, -8]) == -12": {
      "result": true,
      "time": 0.05190110206604004,
      "error": null
    },
    "assert largest_neg([6, 1, 3, -7, -8]) == -8": {
      "result": true,
      "time": 0.04429006576538086,
      "error": null
    },
    "assert largest_neg([3, 2, 3, -3, -10]) == -10": {
      "result": true,
      "time": 0.042429208755493164,
      "error": null
    },
    "assert largest_neg([4, 3, 4, -5, -7]) == -7": {
      "result": true,
      "time": 0.04660749435424805,
      "error": null
    },
    "assert largest_neg([5, 4, 5, -3, -7]) == -7": {
      "result": true,
      "time": 0.0422816276550293,
      "error": null
    },
    "assert largest_neg([3, 7, 4, 8, -4]) == -4": {
      "result": false,
      "time": 0.04616260528564453,
      "error": null
    },
    "assert largest_neg([2, 3, 5, 6, -3]) == -3": {
      "result": false,
      "time": 0.042200326919555664,
      "error": null
    },
    "assert largest_neg([6, 5, 6, 2, -1]) == -1": {
      "result": false,
      "time": 0.04445648193359375,
      "error": null
    },
    "assert largest_neg([2, 3, 7, 7, 4]) == 2": {
      "result": false,
      "time": 0.04724717140197754,
      "error": null
    },
    "assert largest_neg([3, 7, 8, 2, -6]) == -6": {
      "result": false,
      "time": 0.04331707954406738,
      "error": null
    },
    "assert largest_neg([5, 6, 1, 7, -4]) == -4": {
      "result": false,
      "time": 0.04043459892272949,
      "error": null
    },
    "assert largest_neg([2, 7, 1, 6, -4]) == -4": {
      "result": false,
      "time": 0.04057765007019043,
      "error": null
    },
    "assert largest_neg([1, 1, 4, 1, -3]) == -3": {
      "result": false,
      "time": 0.04663896560668945,
      "error": null
    },
    "assert largest_neg([4, 3, 3, 1, -5]) == -5": {
      "result": true,
      "time": 0.05079984664916992,
      "error": null
    },
    "assert largest_neg([1, 7, 8, 4, 3]) == 1": {
      "result": false,
      "time": 0.05383610725402832,
      "error": null
    },
    "assert largest_neg([6, 7, 3, 9, -2]) == -2": {
      "result": false,
      "time": 0.03821420669555664,
      "error": null
    },
    "assert largest_neg([5, 3, 3, 1, -3]) == -3": {
      "result": false,
      "time": 0.044231414794921875,
      "error": null
    },
    "assert largest_neg([5, 3, 8, 6, 3]) == 3": {
      "result": false,
      "time": 0.04955124855041504,
      "error": null
    },
    "assert largest_neg([2, 3, 7, 8, -3]) == -3": {
      "result": false,
      "time": 0.040703535079956055,
      "error": null
    },
    "assert largest_neg([3, 2, 3, 3, -4]) == -4": {
      "result": true,
      "time": 0.04011845588684082,
      "error": null
    },
    "assert largest_neg([4, 1, 7, 1, 4]) == 1": {
      "result": false,
      "time": 0.0484158992767334,
      "error": null
    },
    "assert largest_neg([2, 6, 6, 3, -4]) == -4": {
      "result": false,
      "time": 0.04299306869506836,
      "error": null
    },
    "assert largest_neg([5, 6, 8, 4, -1]) == -1": {
      "result": false,
      "time": 0.04357194900512695,
      "error": null
    },
    "assert largest_neg([3, 3, 8, 2, -5]) == -5": {
      "result": false,
      "time": 0.03957796096801758,
      "error": null
    },
    "assert largest_neg([3, 1, 4, 7, -4]) == -4": {
      "result": false,
      "time": 0.040442705154418945,
      "error": null
    },
    "assert largest_neg([2, 4, 8, 1, 2]) == 1": {
      "result": false,
      "time": 0.047995567321777344,
      "error": null
    },
    "assert largest_neg([1, 5, 6, 4, -2]) == -2": {
      "result": false,
      "time": 0.04936480522155762,
      "error": null
    },
    "assert largest_neg([4, 5, 6, 3, -5]) == -5": {
      "result": false,
      "time": 0.04370474815368652,
      "error": null
    },
    "assert largest_neg([4, 1, 2, 5, 0]) == 0": {
      "result": false,
      "time": 0.04016900062561035,
      "error": null
    },
    "assert largest_neg([4, 6, 3, 6, -3]) == -3": {
      "result": false,
      "time": 0.06325292587280273,
      "error": null
    },
    "assert largest_neg([2, 7, 3, 3, -3]) == -3": {
      "result": false,
      "time": 0.040637969970703125,
      "error": null
    },
    "assert largest_neg([3, 2, 1, 2, -3]) == -3": {
      "result": false,
      "time": 0.04995298385620117,
      "error": null
    },
    "assert largest_neg([5, 4, 4, 2, 0]) == 0": {
      "result": false,
      "time": 0.042833805084228516,
      "error": null
    },
    "assert largest_neg([1, 4, 6, 1, 0]) == 0": {
      "result": false,
      "time": 0.04714179039001465,
      "error": null
    },
    "assert largest_neg([1, 1, 1, 7, -1]) == -1": {
      "result": false,
      "time": 0.04246950149536133,
      "error": null
    },
    "assert largest_neg([1, 3, 4, 1, -4]) == -4": {
      "result": false,
      "time": 0.0427250862121582,
      "error": null
    },
    "assert largest_neg([1, 1, 6, 1, -1]) == -1": {
      "result": false,
      "time": 0.03802084922790527,
      "error": null
    },
    "assert largest_neg([3, 7, 4, 6, -5]) == -5": {
      "result": false,
      "time": 0.04487442970275879,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.5392156862745098,
  "general_error": "",
  "has_testcase_error": false
}