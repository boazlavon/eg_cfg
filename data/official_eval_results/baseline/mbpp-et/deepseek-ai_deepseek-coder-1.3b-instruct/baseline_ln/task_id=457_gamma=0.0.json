{
  "code": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
  "results": {
    "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]": {
      "result": true,
      "time": 0.04012727737426758,
      "error": null
    },
    "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]": {
      "result": true,
      "time": 0.04115700721740723,
      "error": null
    },
    "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']": {
      "result": true,
      "time": 0.0388941764831543,
      "error": null
    },
    "assert Find_Min([[5], [3, 6], [5, 6, 7]]) == [3, 6]": {
      "result": false,
      "time": 0.04023098945617676,
      "error": null
    },
    "assert Find_Min([[1], [6, 1], [3, 5, 4]]) == [1]": {
      "result": true,
      "time": 0.04156947135925293,
      "error": null
    },
    "assert Find_Min([[5], [4, 1], [5, 1, 5]]) == [4, 1]": {
      "result": false,
      "time": 0.03892397880554199,
      "error": null
    },
    "assert Find_Min([[1], [1, 6], [2, 2, 8]]) == [1]": {
      "result": true,
      "time": 0.03758406639099121,
      "error": null
    },
    "assert Find_Min([[6], [4, 7], [2, 2, 4]]) == [2, 2, 4]": {
      "result": false,
      "time": 0.048578500747680664,
      "error": null
    },
    "assert Find_Min([[6], [1, 7], [1, 1, 7]]) == [1, 1, 7]": {
      "result": false,
      "time": 0.04096269607543945,
      "error": null
    },
    "assert Find_Min([[3], [2, 5], [2, 3, 5]]) == [2, 3, 5]": {
      "result": false,
      "time": 0.040854454040527344,
      "error": null
    },
    "assert Find_Min([[4], [6, 6], [1, 3, 5]]) == [1, 3, 5]": {
      "result": false,
      "time": 0.041654109954833984,
      "error": null
    },
    "assert Find_Min([[1], [5, 4], [6, 2, 2]]) == [1]": {
      "result": true,
      "time": 0.043233394622802734,
      "error": null
    },
    "assert Find_Min([[6], [4, 4], [5, 4, 4]]) == [4, 4]": {
      "result": false,
      "time": 0.03966879844665527,
      "error": null
    },
    "assert Find_Min([[5], [4, 5], [5, 6, 1]]) == [4, 5]": {
      "result": false,
      "time": 0.03961753845214844,
      "error": null
    },
    "assert Find_Min([[6], [6, 6], [4, 7, 8]]) == [4, 7, 8]": {
      "result": false,
      "time": 0.03406047821044922,
      "error": null
    },
    "assert Find_Min([[6], [1, 5], [5, 6, 4]]) == [1, 5]": {
      "result": false,
      "time": 0.03827691078186035,
      "error": null
    },
    "assert Find_Min([[4], [4, 4], [6, 6, 3]]) == [4]": {
      "result": true,
      "time": 0.03755354881286621,
      "error": null
    },
    "assert Find_Min([[6], [5, 3], [6, 3, 2]]) == [5, 3]": {
      "result": false,
      "time": 0.03746438026428223,
      "error": null
    },
    "assert Find_Min([[3], [1, 2], [2, 6, 5]]) == [1, 2]": {
      "result": false,
      "time": 0.04355263710021973,
      "error": null
    },
    "assert Find_Min([[6], [1, 6], [2, 3, 8]]) == [1, 6]": {
      "result": false,
      "time": 0.04023432731628418,
      "error": null
    },
    "assert Find_Min([[5], [6, 5], [2, 5, 6]]) == [2, 5, 6]": {
      "result": false,
      "time": 0.038985490798950195,
      "error": null
    },
    "assert Find_Min([[3], [4, 1], [3, 7, 7]]) == [3]": {
      "result": true,
      "time": 0.03890347480773926,
      "error": null
    },
    "assert Find_Min([[2], [2, 2], [5, 7, 5]]) == [2]": {
      "result": true,
      "time": 0.041394948959350586,
      "error": null
    },
    "assert Find_Min([[3], [4, 7], [5, 3, 7]]) == [3]": {
      "result": true,
      "time": 0.033463478088378906,
      "error": null
    },
    "assert Find_Min([[6], [4, 3], [1, 2, 6]]) == [1, 2, 6]": {
      "result": false,
      "time": 0.032973289489746094,
      "error": null
    },
    "assert Find_Min([[3], [3, 1], [2, 2, 5]]) == [2, 2, 5]": {
      "result": false,
      "time": 0.03410029411315918,
      "error": null
    },
    "assert Find_Min([[1], [3, 7], [1, 2, 6]]) == [1]": {
      "result": true,
      "time": 0.03202009201049805,
      "error": null
    },
    "assert Find_Min([[3], [2, 5], [6, 2, 1]]) == [2, 5]": {
      "result": false,
      "time": 0.03738093376159668,
      "error": null
    },
    "assert Find_Min([[4], [3, 4], [4, 3, 8]]) == [3, 4]": {
      "result": false,
      "time": 0.03755903244018555,
      "error": null
    },
    "assert Find_Min([[1], [1, 4], [4, 6, 7]]) == [1]": {
      "result": true,
      "time": 0.03891563415527344,
      "error": null
    },
    "assert Find_Min([[5], [6, 5], [5, 5, 6]]) == [5]": {
      "result": true,
      "time": 0.03609895706176758,
      "error": null
    },
    "assert Find_Min([[3], [3, 4], [3, 1, 6]]) == [3]": {
      "result": true,
      "time": 0.040024757385253906,
      "error": null
    },
    "assert Find_Min([[6], [3, 3], [4, 2, 8]]) == [3, 3]": {
      "result": false,
      "time": 0.043584585189819336,
      "error": null
    },
    "assert Find_Min([[4], [3, 7], [6, 5, 8]]) == [3, 7]": {
      "result": false,
      "time": 0.041336774826049805,
      "error": null
    },
    "assert Find_Min([[4], [4, 6], [2, 5, 1]]) == [2, 5, 1]": {
      "result": false,
      "time": 0.04909825325012207,
      "error": null
    },
    "assert Find_Min([[4], [6, 2], [4, 6, 7]]) == [4]": {
      "result": true,
      "time": 0.05145978927612305,
      "error": null
    },
    "assert Find_Min([[4, 5], [1, 4, 1], [6, 2, 9, 13]]) == [1, 4, 1]": {
      "result": false,
      "time": 0.04576873779296875,
      "error": null
    },
    "assert Find_Min([[4, 3], [4, 5, 3], [2, 3, 4, 8]]) == [2, 3, 4, 8]": {
      "result": false,
      "time": 0.04950118064880371,
      "error": null
    },
    "assert Find_Min([[3, 4], [5, 6, 4], [6, 5, 4, 12]]) == [3, 4]": {
      "result": true,
      "time": 0.04902195930480957,
      "error": null
    },
    "assert Find_Min([[4, 4], [1, 5, 6], [5, 3, 12, 11]]) == [1, 5, 6]": {
      "result": false,
      "time": 0.04419350624084473,
      "error": null
    },
    "assert Find_Min([[2, 2], [4, 2, 5], [1, 5, 10, 3]]) == [1, 5, 10, 3]": {
      "result": false,
      "time": 0.049958229064941406,
      "error": null
    },
    "assert Find_Min([[1, 6], [5, 2, 6], [5, 7, 11, 5]]) == [1, 6]": {
      "result": true,
      "time": 0.04786801338195801,
      "error": null
    },
    "assert Find_Min([[3, 1], [4, 2, 1], [2, 5, 6, 5]]) == [2, 5, 6, 5]": {
      "result": false,
      "time": 0.03347659111022949,
      "error": null
    },
    "assert Find_Min([[2, 4], [2, 1, 1], [4, 3, 11, 9]]) == [2, 1, 1]": {
      "result": false,
      "time": 0.05134177207946777,
      "error": null
    },
    "assert Find_Min([[1, 4], [2, 2, 4], [5, 4, 10, 8]]) == [1, 4]": {
      "result": true,
      "time": 0.039639949798583984,
      "error": null
    },
    "assert Find_Min([[2, 2], [1, 5, 6], [5, 7, 2, 8]]) == [1, 5, 6]": {
      "result": false,
      "time": 0.04473376274108887,
      "error": null
    },
    "assert Find_Min([[3, 6], [4, 2, 3], [6, 2, 7, 12]]) == [3, 6]": {
      "result": true,
      "time": 0.03893303871154785,
      "error": null
    },
    "assert Find_Min([[2, 1], [3, 1, 5], [1, 6, 10, 11]]) == [1, 6, 10, 11]": {
      "result": false,
      "time": 0.045844078063964844,
      "error": null
    },
    "assert Find_Min([[3, 4], [5, 1, 2], [3, 5, 4, 11]]) == [3, 4]": {
      "result": true,
      "time": 0.047377586364746094,
      "error": null
    },
    "assert Find_Min([[4, 2], [4, 1, 3], [5, 7, 4, 4]]) == [4, 1, 3]": {
      "result": false,
      "time": 0.045517683029174805,
      "error": null
    },
    "assert Find_Min([[5, 3], [6, 1, 1], [6, 5, 11, 7]]) == [5, 3]": {
      "result": true,
      "time": 0.04736518859863281,
      "error": null
    },
    "assert Find_Min([[2, 6], [5, 6, 2], [3, 7, 3, 11]]) == [2, 6]": {
      "result": true,
      "time": 0.04614567756652832,
      "error": null
    },
    "assert Find_Min([[4, 6], [6, 4, 6], [6, 2, 8, 7]]) == [4, 6]": {
      "result": true,
      "time": 0.03931927680969238,
      "error": null
    },
    "assert Find_Min([[4, 2], [6, 4, 5], [1, 6, 3, 4]]) == [1, 6, 3, 4]": {
      "result": false,
      "time": 0.048364877700805664,
      "error": null
    },
    "assert Find_Min([[4, 3], [6, 2, 2], [2, 2, 7, 10]]) == [2, 2, 7, 10]": {
      "result": false,
      "time": 0.04205632209777832,
      "error": null
    },
    "assert Find_Min([[2, 1], [3, 5, 4], [4, 6, 12, 9]]) == [2, 1]": {
      "result": true,
      "time": 0.0470273494720459,
      "error": null
    },
    "assert Find_Min([[3, 6], [2, 3, 6], [3, 2, 10, 8]]) == [2, 3, 6]": {
      "result": false,
      "time": 0.04413962364196777,
      "error": null
    },
    "assert Find_Min([[2, 6], [6, 2, 3], [6, 2, 9, 8]]) == [2, 6]": {
      "result": true,
      "time": 0.048803091049194336,
      "error": null
    },
    "assert Find_Min([[6, 2], [2, 1, 3], [2, 2, 8, 4]]) == [2, 1, 3]": {
      "result": false,
      "time": 0.04632258415222168,
      "error": null
    },
    "assert Find_Min([[2, 5], [4, 4, 5], [2, 2, 3, 12]]) == [2, 2, 3, 12]": {
      "result": false,
      "time": 0.04809880256652832,
      "error": null
    },
    "assert Find_Min([[6, 5], [4, 2, 2], [2, 7, 8, 13]]) == [2, 7, 8, 13]": {
      "result": false,
      "time": 0.04429268836975098,
      "error": null
    },
    "assert Find_Min([[5, 5], [3, 6, 5], [2, 6, 12, 11]]) == [2, 6, 12, 11]": {
      "result": false,
      "time": 0.04670357704162598,
      "error": null
    },
    "assert Find_Min([[6, 6], [1, 2, 3], [4, 2, 2, 9]]) == [1, 2, 3]": {
      "result": false,
      "time": 0.05088067054748535,
      "error": null
    },
    "assert Find_Min([[1, 6], [2, 6, 1], [5, 7, 7, 7]]) == [1, 6]": {
      "result": true,
      "time": 0.048774003982543945,
      "error": null
    },
    "assert Find_Min([[5, 2], [6, 4, 6], [6, 2, 6, 5]]) == [5, 2]": {
      "result": true,
      "time": 0.04489541053771973,
      "error": null
    },
    "assert Find_Min([[2, 5], [4, 5, 3], [6, 4, 6, 12]]) == [2, 5]": {
      "result": true,
      "time": 0.04850459098815918,
      "error": null
    },
    "assert Find_Min([[3, 2], [3, 3, 5], [6, 6, 5, 10]]) == [3, 2]": {
      "result": true,
      "time": 0.04474020004272461,
      "error": null
    },
    "assert Find_Min([[2, 2], [2, 2, 2], [6, 5, 3, 9]]) == [2, 2]": {
      "result": true,
      "time": 0.04234576225280762,
      "error": null
    },
    "assert Find_Min([[1, 3], [6, 4, 2], [1, 7, 8, 7]]) == [1, 3]": {
      "result": true,
      "time": 0.04098343849182129,
      "error": null
    },
    "assert Find_Min([['l'], ['a', 'v'], ['z', 'j', 'r']]) == ['a', 'v']": {
      "result": false,
      "time": 0.04645347595214844,
      "error": null
    },
    "assert Find_Min([['t'], ['w', 'e'], ['a', 't', 'z']]) == ['a', 't', 'z']": {
      "result": false,
      "time": 0.0355074405670166,
      "error": null
    },
    "assert Find_Min([['n'], ['w', 'b'], ['y', 'u', 'r']]) == ['n']": {
      "result": true,
      "time": 0.04057168960571289,
      "error": null
    },
    "assert Find_Min([['w'], ['w', 'e'], ['p', 'v', 'm']]) == ['p', 'v', 'm']": {
      "result": false,
      "time": 0.04442453384399414,
      "error": null
    },
    "assert Find_Min([['i'], ['u', 'u'], ['t', 'r', 'n']]) == ['i']": {
      "result": true,
      "time": 0.04912734031677246,
      "error": null
    },
    "assert Find_Min([['g'], ['p', 'n'], ['z', 'y', 'd']]) == ['g']": {
      "result": true,
      "time": 0.04355573654174805,
      "error": null
    },
    "assert Find_Min([['n'], ['y', 'h'], ['t', 'b', 't']]) == ['n']": {
      "result": true,
      "time": 0.05304098129272461,
      "error": null
    },
    "assert Find_Min([['h'], ['f', 'z'], ['u', 'j', 'i']]) == ['f', 'z']": {
      "result": false,
      "time": 0.043164730072021484,
      "error": null
    },
    "assert Find_Min([['u'], ['c', 'a'], ['q', 'u', 'v']]) == ['c', 'a']": {
      "result": false,
      "time": 0.05526447296142578,
      "error": null
    },
    "assert Find_Min([['w'], ['g', 'u'], ['y', 'i', 'c']]) == ['g', 'u']": {
      "result": false,
      "time": 0.04526519775390625,
      "error": null
    },
    "assert Find_Min([['k'], ['m', 'w'], ['t', 'y', 'a']]) == ['k']": {
      "result": true,
      "time": 0.04999041557312012,
      "error": null
    },
    "assert Find_Min([['z'], ['p', 'd'], ['i', 'l', 'j']]) == ['i', 'l', 'j']": {
      "result": false,
      "time": 0.036281585693359375,
      "error": null
    },
    "assert Find_Min([['d'], ['w', 'f'], ['d', 'm', 'o']]) == ['d']": {
      "result": true,
      "time": 0.05140376091003418,
      "error": null
    },
    "assert Find_Min([['i'], ['d', 'i'], ['q', 'l', 'd']]) == ['d', 'i']": {
      "result": false,
      "time": 0.04210519790649414,
      "error": null
    },
    "assert Find_Min([['d'], ['m', 'f'], ['w', 'r', 'u']]) == ['d']": {
      "result": true,
      "time": 0.03913140296936035,
      "error": null
    },
    "assert Find_Min([['l'], ['i', 'g'], ['t', 'm', 'z']]) == ['i', 'g']": {
      "result": false,
      "time": 0.03638195991516113,
      "error": null
    },
    "assert Find_Min([['n'], ['i', 'n'], ['c', 'p', 'v']]) == ['c', 'p', 'v']": {
      "result": false,
      "time": 0.04667210578918457,
      "error": null
    },
    "assert Find_Min([['q'], ['c', 'o'], ['y', 'k', 'p']]) == ['c', 'o']": {
      "result": false,
      "time": 0.04685521125793457,
      "error": null
    },
    "assert Find_Min([['s'], ['y', 'b'], ['r', 'd', 'r']]) == ['r', 'd', 'r']": {
      "result": false,
      "time": 0.046042680740356445,
      "error": null
    },
    "assert Find_Min([['d'], ['r', 't'], ['z', 'o', 'i']]) == ['d']": {
      "result": true,
      "time": 0.049031972885131836,
      "error": null
    },
    "assert Find_Min([['n'], ['v', 'd'], ['t', 'd', 'b']]) == ['n']": {
      "result": true,
      "time": 0.03850102424621582,
      "error": null
    },
    "assert Find_Min([['h'], ['e', 'i'], ['g', 'k', 'm']]) == ['e', 'i']": {
      "result": false,
      "time": 0.04167628288269043,
      "error": null
    },
    "assert Find_Min([['c'], ['d', 'c'], ['j', 's', 'r']]) == ['c']": {
      "result": true,
      "time": 0.04225277900695801,
      "error": null
    },
    "assert Find_Min([['u'], ['k', 'm'], ['p', 'w', 'b']]) == ['k', 'm']": {
      "result": false,
      "time": 0.045298099517822266,
      "error": null
    },
    "assert Find_Min([['y'], ['m', 'r'], ['n', 'v', 'f']]) == ['m', 'r']": {
      "result": false,
      "time": 0.03684210777282715,
      "error": null
    },
    "assert Find_Min([['a'], ['o', 'y'], ['f', 'y', 'p']]) == ['a']": {
      "result": true,
      "time": 0.04242992401123047,
      "error": null
    },
    "assert Find_Min([['x'], ['a', 'l'], ['i', 'm', 'k']]) == ['a', 'l']": {
      "result": false,
      "time": 0.046271324157714844,
      "error": null
    },
    "assert Find_Min([['p'], ['w', 'r'], ['s', 'l', 'h']]) == ['p']": {
      "result": true,
      "time": 0.046538591384887695,
      "error": null
    },
    "assert Find_Min([['c'], ['e', 'm'], ['e', 'z', 'p']]) == ['c']": {
      "result": true,
      "time": 0.05365562438964844,
      "error": null
    },
    "assert Find_Min([['x'], ['q', 'p'], ['j', 'm', 'g']]) == ['j', 'm', 'g']": {
      "result": false,
      "time": 0.04587960243225098,
      "error": null
    },
    "assert Find_Min([['c'], ['e', 'h'], ['j', 'j', 'q']]) == ['c']": {
      "result": true,
      "time": 0.0493159294128418,
      "error": null
    },
    "assert Find_Min([['v'], ['s', 'w'], ['f', 'm', 'f']]) == ['f', 'm', 'f']": {
      "result": false,
      "time": 0.044469594955444336,
      "error": null
    },
    "assert Find_Min([['n'], ['t', 'g'], ['i', 'c', 'w']]) == ['i', 'c', 'w']": {
      "result": false,
      "time": 0.05129408836364746,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.4411764705882353,
  "general_error": "",
  "has_testcase_error": false
}