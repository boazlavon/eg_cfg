{
  "code": "def first_Digit(num):\n    while num >= 10:\n        num //= 10\n    return num\n",
  "results": {
    "assert first_Digit(123) == 1": {
      "result": true,
      "time": 0.039783477783203125,
      "error": null
    },
    "assert first_Digit(456) == 4": {
      "result": true,
      "time": 0.03611326217651367,
      "error": null
    },
    "assert first_Digit(12) == 1": {
      "result": true,
      "time": 0.038654327392578125,
      "error": null
    },
    "assert first_Digit(125) == 1": {
      "result": true,
      "time": 0.04260110855102539,
      "error": null
    },
    "assert first_Digit(128) == 1": {
      "result": true,
      "time": 0.037540435791015625,
      "error": null
    },
    "assert first_Digit(122) == 1": {
      "result": true,
      "time": 0.038664817810058594,
      "error": null
    },
    "assert first_Digit(121) == 1": {
      "result": true,
      "time": 0.04141545295715332,
      "error": null
    },
    "assert first_Digit(120) == 1": {
      "result": true,
      "time": 0.03442192077636719,
      "error": null
    },
    "assert first_Digit(119) == 1": {
      "result": true,
      "time": 0.034935712814331055,
      "error": null
    },
    "assert first_Digit(124) == 1": {
      "result": true,
      "time": 0.02974390983581543,
      "error": null
    },
    "assert first_Digit(126) == 1": {
      "result": true,
      "time": 0.0352330207824707,
      "error": null
    },
    "assert first_Digit(118) == 1": {
      "result": true,
      "time": 0.030030250549316406,
      "error": null
    },
    "assert first_Digit(127) == 1": {
      "result": true,
      "time": 0.03585052490234375,
      "error": null
    },
    "assert first_Digit(453) == 4": {
      "result": true,
      "time": 0.033761024475097656,
      "error": null
    },
    "assert first_Digit(461) == 4": {
      "result": true,
      "time": 0.03141975402832031,
      "error": null
    },
    "assert first_Digit(457) == 4": {
      "result": true,
      "time": 0.03493142127990723,
      "error": null
    },
    "assert first_Digit(460) == 4": {
      "result": true,
      "time": 0.034853219985961914,
      "error": null
    },
    "assert first_Digit(454) == 4": {
      "result": true,
      "time": 0.031296730041503906,
      "error": null
    },
    "assert first_Digit(455) == 4": {
      "result": true,
      "time": 0.0487213134765625,
      "error": null
    },
    "assert first_Digit(451) == 4": {
      "result": true,
      "time": 0.04375052452087402,
      "error": null
    },
    "assert first_Digit(459) == 4": {
      "result": true,
      "time": 0.048964500427246094,
      "error": null
    },
    "assert first_Digit(458) == 4": {
      "result": true,
      "time": 0.036345481872558594,
      "error": null
    },
    "assert first_Digit(7) == 7": {
      "result": true,
      "time": 0.04691600799560547,
      "error": null
    },
    "assert first_Digit(17) == 1": {
      "result": true,
      "time": 0.040010690689086914,
      "error": null
    },
    "assert first_Digit(16) == 1": {
      "result": true,
      "time": 0.04648542404174805,
      "error": null
    },
    "assert first_Digit(13) == 1": {
      "result": true,
      "time": 0.04235124588012695,
      "error": null
    },
    "assert first_Digit(9) == 9": {
      "result": true,
      "time": 0.04434967041015625,
      "error": null
    },
    "assert first_Digit(10) == 1": {
      "result": true,
      "time": 0.046691179275512695,
      "error": null
    },
    "assert first_Digit(15) == 1": {
      "result": true,
      "time": 0.040111541748046875,
      "error": null
    },
    "assert first_Digit(8) == 8": {
      "result": true,
      "time": 0.04507923126220703,
      "error": null
    },
    "assert first_Digit(14) == 1": {
      "result": true,
      "time": 0.043338775634765625,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}