{
  "code": "def count_Primes_nums(n):\n    def is_not_prime(num):\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_not_prime(i):\n            count += 1\n    return count\n",
  "results": {
    "assert count_Primes_nums(5) == 2": {
      "result": true,
      "time": 0.03528165817260742,
      "error": null
    },
    "assert count_Primes_nums(10) == 4": {
      "result": true,
      "time": 0.03986954689025879,
      "error": null
    },
    "assert count_Primes_nums(100) == 25": {
      "result": true,
      "time": 0.032323360443115234,
      "error": null
    },
    "assert count_Primes_nums(2) == 0": {
      "result": true,
      "time": 0.0372467041015625,
      "error": null
    },
    "assert count_Primes_nums(3) == 1": {
      "result": true,
      "time": 0.03338313102722168,
      "error": null
    },
    "assert count_Primes_nums(9) == 4": {
      "result": true,
      "time": 0.03377795219421387,
      "error": null
    },
    "assert count_Primes_nums(7) == 3": {
      "result": true,
      "time": 0.04302692413330078,
      "error": null
    },
    "assert count_Primes_nums(1) == 0": {
      "result": true,
      "time": 0.037200212478637695,
      "error": null
    },
    "assert count_Primes_nums(8) == 4": {
      "result": true,
      "time": 0.03363204002380371,
      "error": null
    },
    "assert count_Primes_nums(4) == 2": {
      "result": true,
      "time": 0.03334188461303711,
      "error": null
    },
    "assert count_Primes_nums(6) == 3": {
      "result": true,
      "time": 0.03951406478881836,
      "error": null
    },
    "assert count_Primes_nums(15) == 6": {
      "result": true,
      "time": 0.03423309326171875,
      "error": null
    },
    "assert count_Primes_nums(11) == 4": {
      "result": true,
      "time": 0.03801131248474121,
      "error": null
    },
    "assert count_Primes_nums(14) == 6": {
      "result": true,
      "time": 0.0427706241607666,
      "error": null
    },
    "assert count_Primes_nums(13) == 5": {
      "result": true,
      "time": 0.04546618461608887,
      "error": null
    },
    "assert count_Primes_nums(12) == 5": {
      "result": true,
      "time": 0.03890514373779297,
      "error": null
    },
    "assert count_Primes_nums(98) == 25": {
      "result": true,
      "time": 0.0398404598236084,
      "error": null
    },
    "assert count_Primes_nums(99) == 25": {
      "result": true,
      "time": 0.04168295860290527,
      "error": null
    },
    "assert count_Primes_nums(104) == 27": {
      "result": true,
      "time": 0.055681467056274414,
      "error": null
    },
    "assert count_Primes_nums(101) == 25": {
      "result": true,
      "time": 0.041982412338256836,
      "error": null
    },
    "assert count_Primes_nums(103) == 26": {
      "result": true,
      "time": 0.04702925682067871,
      "error": null
    },
    "assert count_Primes_nums(97) == 24": {
      "result": true,
      "time": 0.04451918601989746,
      "error": null
    },
    "assert count_Primes_nums(95) == 24": {
      "result": true,
      "time": 0.040953874588012695,
      "error": null
    },
    "assert count_Primes_nums(96) == 24": {
      "result": true,
      "time": 0.052754878997802734,
      "error": null
    },
    "assert count_Primes_nums(102) == 26": {
      "result": true,
      "time": 0.04732847213745117,
      "error": null
    },
    "assert count_Primes_nums(105) == 27": {
      "result": true,
      "time": 0.047356605529785156,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}