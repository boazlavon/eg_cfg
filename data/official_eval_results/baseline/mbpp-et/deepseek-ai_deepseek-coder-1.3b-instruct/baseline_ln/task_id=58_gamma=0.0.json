{
  "code": "def opposite_Signs(num1, num2):\n    return num1 * num2 < 0\n",
  "results": {
    "assert opposite_Signs(1,-2) == True": {
      "result": true,
      "time": 0.04184985160827637,
      "error": null
    },
    "assert opposite_Signs(3,2) == False": {
      "result": true,
      "time": 0.04456782341003418,
      "error": null
    },
    "assert opposite_Signs(-10,-10) == False": {
      "result": true,
      "time": 0.03746604919433594,
      "error": null
    },
    "assert opposite_Signs(5, -4) == True": {
      "result": true,
      "time": 0.03629422187805176,
      "error": null
    },
    "assert opposite_Signs(4, -3) == True": {
      "result": true,
      "time": 0.03428769111633301,
      "error": null
    },
    "assert opposite_Signs(4, 0) == False": {
      "result": true,
      "time": 0.034911394119262695,
      "error": null
    },
    "assert opposite_Signs(6, 0) == False": {
      "result": true,
      "time": 0.03660726547241211,
      "error": null
    },
    "assert opposite_Signs(6, -4) == True": {
      "result": true,
      "time": 0.036347389221191406,
      "error": null
    },
    "assert opposite_Signs(5, 1) == False": {
      "result": true,
      "time": 0.036672115325927734,
      "error": null
    },
    "assert opposite_Signs(6, -2) == True": {
      "result": true,
      "time": 0.03707098960876465,
      "error": null
    },
    "assert opposite_Signs(4, -2) == True": {
      "result": true,
      "time": 0.03371620178222656,
      "error": null
    },
    "assert opposite_Signs(4, -5) == True": {
      "result": true,
      "time": 0.037955284118652344,
      "error": null
    },
    "assert opposite_Signs(1, -6) == True": {
      "result": true,
      "time": 0.03447413444519043,
      "error": null
    },
    "assert opposite_Signs(4, 2) == False": {
      "result": true,
      "time": 0.034265756607055664,
      "error": null
    },
    "assert opposite_Signs(3, 1) == False": {
      "result": true,
      "time": 0.03385567665100098,
      "error": null
    },
    "assert opposite_Signs(1, -1) == True": {
      "result": true,
      "time": 0.04033017158508301,
      "error": null
    },
    "assert opposite_Signs(5, -1) == True": {
      "result": true,
      "time": 0.04781007766723633,
      "error": null
    },
    "assert opposite_Signs(1, -5) == True": {
      "result": true,
      "time": 0.029703378677368164,
      "error": null
    },
    "assert opposite_Signs(2, -6) == True": {
      "result": true,
      "time": 0.038712501525878906,
      "error": null
    },
    "assert opposite_Signs(1, 0) == False": {
      "result": true,
      "time": 0.03464531898498535,
      "error": null
    },
    "assert opposite_Signs(1, 2) == False": {
      "result": true,
      "time": 0.03524518013000488,
      "error": null
    },
    "assert opposite_Signs(2, 1) == False": {
      "result": true,
      "time": 0.032052040100097656,
      "error": null
    },
    "assert opposite_Signs(3, -6) == True": {
      "result": true,
      "time": 0.03818035125732422,
      "error": null
    },
    "assert opposite_Signs(5, 2) == False": {
      "result": true,
      "time": 0.038190364837646484,
      "error": null
    },
    "assert opposite_Signs(4, 3) == False": {
      "result": true,
      "time": 0.035269737243652344,
      "error": null
    },
    "assert opposite_Signs(4, 1) == False": {
      "result": true,
      "time": 0.04403424263000488,
      "error": null
    },
    "assert opposite_Signs(3, -7) == True": {
      "result": true,
      "time": 0.04598188400268555,
      "error": null
    },
    "assert opposite_Signs(1, -3) == True": {
      "result": true,
      "time": 0.04668879508972168,
      "error": null
    },
    "assert opposite_Signs(2, 6) == False": {
      "result": true,
      "time": 0.0602571964263916,
      "error": null
    },
    "assert opposite_Signs(8, 4) == False": {
      "result": true,
      "time": 0.05669522285461426,
      "error": null
    },
    "assert opposite_Signs(6, 2) == False": {
      "result": true,
      "time": 0.03569841384887695,
      "error": null
    },
    "assert opposite_Signs(8, 3) == False": {
      "result": true,
      "time": 0.043424129486083984,
      "error": null
    },
    "assert opposite_Signs(8, 6) == False": {
      "result": true,
      "time": 0.04164743423461914,
      "error": null
    },
    "assert opposite_Signs(5, 5) == False": {
      "result": true,
      "time": 0.03363299369812012,
      "error": null
    },
    "assert opposite_Signs(1, 1) == False": {
      "result": true,
      "time": 0.03467988967895508,
      "error": null
    },
    "assert opposite_Signs(8, 2) == False": {
      "result": true,
      "time": 0.04217195510864258,
      "error": null
    },
    "assert opposite_Signs(2, 3) == False": {
      "result": true,
      "time": 0.03449511528015137,
      "error": null
    },
    "assert opposite_Signs(6, 4) == False": {
      "result": true,
      "time": 0.04034852981567383,
      "error": null
    },
    "assert opposite_Signs(2, 4) == False": {
      "result": true,
      "time": 0.03775835037231445,
      "error": null
    },
    "assert opposite_Signs(8, 1) == False": {
      "result": true,
      "time": 0.041144371032714844,
      "error": null
    },
    "assert opposite_Signs(7, 7) == False": {
      "result": true,
      "time": 0.03752279281616211,
      "error": null
    },
    "assert opposite_Signs(6, 5) == False": {
      "result": true,
      "time": 0.03802657127380371,
      "error": null
    },
    "assert opposite_Signs(5, 7) == False": {
      "result": true,
      "time": 0.038904666900634766,
      "error": null
    },
    "assert opposite_Signs(7, 2) == False": {
      "result": true,
      "time": 0.032126665115356445,
      "error": null
    },
    "assert opposite_Signs(3, 4) == False": {
      "result": true,
      "time": 0.04266786575317383,
      "error": null
    },
    "assert opposite_Signs(2, 5) == False": {
      "result": true,
      "time": 0.04069638252258301,
      "error": null
    },
    "assert opposite_Signs(1, 3) == False": {
      "result": true,
      "time": 0.03961372375488281,
      "error": null
    },
    "assert opposite_Signs(2, 7) == False": {
      "result": true,
      "time": 0.0291900634765625,
      "error": null
    },
    "assert opposite_Signs(3, 7) == False": {
      "result": true,
      "time": 0.04222679138183594,
      "error": null
    },
    "assert opposite_Signs(7, 3) == False": {
      "result": true,
      "time": 0.03597760200500488,
      "error": null
    },
    "assert opposite_Signs(5, 6) == False": {
      "result": true,
      "time": 0.03856492042541504,
      "error": null
    },
    "assert opposite_Signs(-8, -6) == False": {
      "result": true,
      "time": 0.03914070129394531,
      "error": null
    },
    "assert opposite_Signs(-12, -5) == False": {
      "result": true,
      "time": 0.03996872901916504,
      "error": null
    },
    "assert opposite_Signs(-15, -11) == False": {
      "result": true,
      "time": 0.036504507064819336,
      "error": null
    },
    "assert opposite_Signs(-12, -9) == False": {
      "result": true,
      "time": 0.04472184181213379,
      "error": null
    },
    "assert opposite_Signs(-7, -15) == False": {
      "result": true,
      "time": 0.032698869705200195,
      "error": null
    },
    "assert opposite_Signs(-6, -11) == False": {
      "result": true,
      "time": 0.0389251708984375,
      "error": null
    },
    "assert opposite_Signs(-12, -14) == False": {
      "result": true,
      "time": 0.03845977783203125,
      "error": null
    },
    "assert opposite_Signs(-6, -7) == False": {
      "result": true,
      "time": 0.02810049057006836,
      "error": null
    },
    "assert opposite_Signs(-9, -10) == False": {
      "result": true,
      "time": 0.04221391677856445,
      "error": null
    },
    "assert opposite_Signs(-6, -14) == False": {
      "result": true,
      "time": 0.03400015830993652,
      "error": null
    },
    "assert opposite_Signs(-14, -12) == False": {
      "result": true,
      "time": 0.04127788543701172,
      "error": null
    },
    "assert opposite_Signs(-5, -7) == False": {
      "result": true,
      "time": 0.040262699127197266,
      "error": null
    },
    "assert opposite_Signs(-15, -8) == False": {
      "result": true,
      "time": 0.0391237735748291,
      "error": null
    },
    "assert opposite_Signs(-10, -9) == False": {
      "result": true,
      "time": 0.038596391677856445,
      "error": null
    },
    "assert opposite_Signs(-15, -7) == False": {
      "result": true,
      "time": 0.03223466873168945,
      "error": null
    },
    "assert opposite_Signs(-14, -11) == False": {
      "result": true,
      "time": 0.03878641128540039,
      "error": null
    },
    "assert opposite_Signs(-7, -11) == False": {
      "result": true,
      "time": 0.03860282897949219,
      "error": null
    },
    "assert opposite_Signs(-14, -9) == False": {
      "result": true,
      "time": 0.04889822006225586,
      "error": null
    },
    "assert opposite_Signs(-14, -8) == False": {
      "result": true,
      "time": 0.04153299331665039,
      "error": null
    },
    "assert opposite_Signs(-14, -14) == False": {
      "result": true,
      "time": 0.03944563865661621,
      "error": null
    },
    "assert opposite_Signs(-9, -6) == False": {
      "result": true,
      "time": 0.034400224685668945,
      "error": null
    },
    "assert opposite_Signs(-9, -12) == False": {
      "result": true,
      "time": 0.03979063034057617,
      "error": null
    },
    "assert opposite_Signs(-8, -12) == False": {
      "result": true,
      "time": 0.036728620529174805,
      "error": null
    },
    "assert opposite_Signs(-10, -12) == False": {
      "result": true,
      "time": 0.03796648979187012,
      "error": null
    },
    "assert opposite_Signs(-12, -7) == False": {
      "result": true,
      "time": 0.03501009941101074,
      "error": null
    },
    "assert opposite_Signs(-6, -13) == False": {
      "result": true,
      "time": 0.04049086570739746,
      "error": null
    },
    "assert opposite_Signs(-13, -7) == False": {
      "result": true,
      "time": 0.04440903663635254,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}