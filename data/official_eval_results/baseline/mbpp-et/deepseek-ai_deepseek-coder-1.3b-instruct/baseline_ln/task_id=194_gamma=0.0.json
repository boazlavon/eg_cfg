{
  "code": "def octal_To_Decimal(octal_num):\n    decimal_num = 0\n    base = 1\n    while (octal_num != 0):\n        last_digit = octal_num % 10\n        octal_num = int(octal_num / 10)\n        decimal_num += last_digit * base\n        base = base * 8\n    return decimal_num\n",
  "results": {
    "assert octal_To_Decimal(25) == 21": {
      "result": true,
      "time": 0.05605721473693848,
      "error": null
    },
    "assert octal_To_Decimal(30) == 24": {
      "result": true,
      "time": 0.05374908447265625,
      "error": null
    },
    "assert octal_To_Decimal(40) == 32": {
      "result": true,
      "time": 0.054636240005493164,
      "error": null
    },
    "assert octal_To_Decimal(29) == 25": {
      "result": true,
      "time": 0.04672431945800781,
      "error": null
    },
    "assert octal_To_Decimal(24) == 20": {
      "result": true,
      "time": 0.061368703842163086,
      "error": null
    },
    "assert octal_To_Decimal(20) == 16": {
      "result": true,
      "time": 0.04688239097595215,
      "error": null
    },
    "assert octal_To_Decimal(26) == 22": {
      "result": true,
      "time": 0.05112504959106445,
      "error": null
    },
    "assert octal_To_Decimal(22) == 18": {
      "result": true,
      "time": 0.0585176944732666,
      "error": null
    },
    "assert octal_To_Decimal(28) == 24": {
      "result": true,
      "time": 0.04712367057800293,
      "error": null
    },
    "assert octal_To_Decimal(21) == 17": {
      "result": true,
      "time": 0.05222940444946289,
      "error": null
    },
    "assert octal_To_Decimal(27) == 23": {
      "result": true,
      "time": 0.05174374580383301,
      "error": null
    },
    "assert octal_To_Decimal(35) == 29": {
      "result": true,
      "time": 0.053983211517333984,
      "error": null
    },
    "assert octal_To_Decimal(32) == 26": {
      "result": true,
      "time": 0.044672250747680664,
      "error": null
    },
    "assert octal_To_Decimal(34) == 28": {
      "result": true,
      "time": 0.04724407196044922,
      "error": null
    },
    "assert octal_To_Decimal(31) == 25": {
      "result": true,
      "time": 0.057373762130737305,
      "error": null
    },
    "assert octal_To_Decimal(33) == 27": {
      "result": true,
      "time": 0.050087690353393555,
      "error": null
    },
    "assert octal_To_Decimal(42) == 34": {
      "result": true,
      "time": 0.04764223098754883,
      "error": null
    },
    "assert octal_To_Decimal(44) == 36": {
      "result": true,
      "time": 0.05457711219787598,
      "error": null
    },
    "assert octal_To_Decimal(43) == 35": {
      "result": true,
      "time": 0.05365300178527832,
      "error": null
    },
    "assert octal_To_Decimal(41) == 33": {
      "result": true,
      "time": 0.0484769344329834,
      "error": null
    },
    "assert octal_To_Decimal(36) == 30": {
      "result": true,
      "time": 0.052404165267944336,
      "error": null
    },
    "assert octal_To_Decimal(39) == 33": {
      "result": true,
      "time": 0.043126821517944336,
      "error": null
    },
    "assert octal_To_Decimal(45) == 37": {
      "result": true,
      "time": 0.056345462799072266,
      "error": null
    },
    "assert octal_To_Decimal(38) == 32": {
      "result": true,
      "time": 0.053522348403930664,
      "error": null
    },
    "assert octal_To_Decimal(37) == 31": {
      "result": true,
      "time": 0.05213356018066406,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}