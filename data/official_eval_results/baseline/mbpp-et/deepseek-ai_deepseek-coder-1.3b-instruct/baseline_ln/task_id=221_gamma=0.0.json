{
  "code": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n",
  "results": {
    "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4": {
      "result": true,
      "time": 0.03523707389831543,
      "error": null
    },
    "assert first_even([2, 3, 4]) == 2": {
      "result": true,
      "time": 0.040277957916259766,
      "error": null
    },
    "assert first_even([5, 6, 7]) == 6": {
      "result": true,
      "time": 0.038008689880371094,
      "error": null
    },
    "assert first_even ([5, 6, 4, 10, 6, 6, 4, 7]) == 6": {
      "result": true,
      "time": 0.04218268394470215,
      "error": null
    },
    "assert first_even ([2, 4, 10, 11, 4, 2, 1, 7]) == 2": {
      "result": true,
      "time": 0.03510594367980957,
      "error": null
    },
    "assert first_even ([4, 5, 7, 2, 4, 6, 3, 3]) == 4": {
      "result": true,
      "time": 0.03812217712402344,
      "error": null
    },
    "assert first_even ([6, 3, 5, 11, 9, 3, 2, 11]) == 6": {
      "result": true,
      "time": 0.038617610931396484,
      "error": null
    },
    "assert first_even ([6, 6, 7, 5, 5, 5, 8, 10]) == 6": {
      "result": true,
      "time": 0.0440976619720459,
      "error": null
    },
    "assert first_even ([4, 8, 10, 8, 3, 5, 6, 9]) == 4": {
      "result": true,
      "time": 0.04669308662414551,
      "error": null
    },
    "assert first_even ([2, 3, 9, 5, 5, 1, 10, 7]) == 2": {
      "result": true,
      "time": 0.036595821380615234,
      "error": null
    },
    "assert first_even ([3, 8, 7, 7, 5, 4, 2, 4]) == 8": {
      "result": true,
      "time": 0.03778576850891113,
      "error": null
    },
    "assert first_even ([4, 4, 6, 6, 2, 1, 5, 13]) == 4": {
      "result": true,
      "time": 0.035303354263305664,
      "error": null
    },
    "assert first_even ([5, 7, 9, 5, 5, 4, 5, 12]) == 4": {
      "result": true,
      "time": 0.03959012031555176,
      "error": null
    },
    "assert first_even ([3, 7, 1, 5, 3, 4, 3, 4]) == 4": {
      "result": true,
      "time": 0.04070544242858887,
      "error": null
    },
    "assert first_even ([1, 5, 5, 12, 7, 2, 7, 12]) == 12": {
      "result": true,
      "time": 0.03804802894592285,
      "error": null
    },
    "assert first_even ([1, 6, 5, 7, 1, 1, 10, 8]) == 6": {
      "result": true,
      "time": 0.041391849517822266,
      "error": null
    },
    "assert first_even ([4, 5, 7, 10, 1, 1, 7, 8]) == 4": {
      "result": true,
      "time": 0.042320966720581055,
      "error": null
    },
    "assert first_even ([2, 7, 10, 11, 7, 2, 1, 8]) == 2": {
      "result": true,
      "time": 0.03416705131530762,
      "error": null
    },
    "assert first_even ([2, 7, 10, 9, 7, 2, 1, 7]) == 2": {
      "result": true,
      "time": 0.04433465003967285,
      "error": null
    },
    "assert first_even ([1, 7, 9, 5, 3, 5, 2, 7]) == 2": {
      "result": true,
      "time": 0.03585934638977051,
      "error": null
    },
    "assert first_even ([2, 8, 7, 12, 9, 4, 1, 6]) == 2": {
      "result": true,
      "time": 0.02971196174621582,
      "error": null
    },
    "assert first_even ([4, 2, 2, 5, 5, 1, 6, 12]) == 4": {
      "result": true,
      "time": 0.029711246490478516,
      "error": null
    },
    "assert first_even ([1, 8, 2, 10, 9, 4, 11, 4]) == 8": {
      "result": true,
      "time": 0.027245521545410156,
      "error": null
    },
    "assert first_even ([5, 1, 8, 3, 1, 6, 8, 8]) == 8": {
      "result": true,
      "time": 0.03480076789855957,
      "error": null
    },
    "assert first_even ([6, 2, 10, 5, 9, 6, 5, 8]) == 6": {
      "result": true,
      "time": 0.03536868095397949,
      "error": null
    },
    "assert first_even ([4, 7, 5, 7, 3, 3, 1, 7]) == 4": {
      "result": true,
      "time": 0.034684181213378906,
      "error": null
    },
    "assert first_even ([2, 7, 2, 6, 5, 1, 9, 6]) == 2": {
      "result": true,
      "time": 0.037072181701660156,
      "error": null
    },
    "assert first_even ([4, 1, 2, 5, 2, 1, 7, 3]) == 4": {
      "result": true,
      "time": 0.03437304496765137,
      "error": null
    },
    "assert first_even ([2, 2, 5, 11, 5, 2, 2, 11]) == 2": {
      "result": true,
      "time": 0.028920888900756836,
      "error": null
    },
    "assert first_even ([6, 2, 3, 10, 4, 5, 11, 13]) == 6": {
      "result": true,
      "time": 0.03246808052062988,
      "error": null
    },
    "assert first_even ([3, 1, 6, 3, 9, 3, 9, 9]) == 6": {
      "result": true,
      "time": 0.032935142517089844,
      "error": null
    },
    "assert first_even ([3, 1, 7, 6, 4, 2, 5, 6]) == 6": {
      "result": true,
      "time": 0.03211092948913574,
      "error": null
    },
    "assert first_even ([5, 5, 5, 9, 1, 1, 11, 13]) == -1": {
      "result": false,
      "time": 0.033866167068481445,
      "error": null
    },
    "assert first_even ([3, 5, 7, 10, 6, 5, 8, 11]) == 10": {
      "result": true,
      "time": 0.03252148628234863,
      "error": null
    },
    "assert first_even ([1, 1, 2, 7, 5, 2, 11, 13]) == 2": {
      "result": true,
      "time": 0.04029583930969238,
      "error": null
    },
    "assert first_even ([2, 5, 6, 12, 1, 1, 10, 4]) == 2": {
      "result": true,
      "time": 0.039541006088256836,
      "error": null
    },
    "assert first_even ([7, 5, 1]) == -1": {
      "result": false,
      "time": 0.03580975532531738,
      "error": null
    },
    "assert first_even ([2, 5, 5]) == 2": {
      "result": true,
      "time": 0.03460049629211426,
      "error": null
    },
    "assert first_even ([5, 4, 8]) == 4": {
      "result": true,
      "time": 0.03296685218811035,
      "error": null
    },
    "assert first_even ([1, 3, 9]) == -1": {
      "result": false,
      "time": 0.039479732513427734,
      "error": null
    },
    "assert first_even ([6, 1, 1]) == 6": {
      "result": true,
      "time": 0.03496050834655762,
      "error": null
    },
    "assert first_even ([1, 8, 2]) == 8": {
      "result": true,
      "time": 0.04138898849487305,
      "error": null
    },
    "assert first_even ([7, 3, 8]) == 8": {
      "result": true,
      "time": 0.03380894660949707,
      "error": null
    },
    "assert first_even ([3, 8, 2]) == 8": {
      "result": true,
      "time": 0.035288333892822266,
      "error": null
    },
    "assert first_even ([4, 1, 7]) == 4": {
      "result": true,
      "time": 0.03757309913635254,
      "error": null
    },
    "assert first_even ([6, 7, 2]) == 6": {
      "result": true,
      "time": 0.0396876335144043,
      "error": null
    },
    "assert first_even ([1, 4, 2]) == 4": {
      "result": true,
      "time": 0.03766345977783203,
      "error": null
    },
    "assert first_even ([7, 3, 3]) == -1": {
      "result": false,
      "time": 0.03436994552612305,
      "error": null
    },
    "assert first_even ([7, 8, 7]) == 8": {
      "result": true,
      "time": 0.033421993255615234,
      "error": null
    },
    "assert first_even ([5, 2, 6]) == 2": {
      "result": true,
      "time": 0.042137861251831055,
      "error": null
    },
    "assert first_even ([2, 4, 7]) == 2": {
      "result": true,
      "time": 0.03348112106323242,
      "error": null
    },
    "assert first_even ([2, 8, 4]) == 2": {
      "result": true,
      "time": 0.032439231872558594,
      "error": null
    },
    "assert first_even ([4, 8, 1]) == 4": {
      "result": true,
      "time": 0.04129219055175781,
      "error": null
    },
    "assert first_even ([1, 2, 9]) == 2": {
      "result": true,
      "time": 0.04289650917053223,
      "error": null
    },
    "assert first_even ([5, 4, 7]) == 4": {
      "result": true,
      "time": 0.036342620849609375,
      "error": null
    },
    "assert first_even ([5, 1, 5]) == -1": {
      "result": false,
      "time": 0.03637886047363281,
      "error": null
    },
    "assert first_even ([1, 5, 5]) == -1": {
      "result": false,
      "time": 0.039697885513305664,
      "error": null
    },
    "assert first_even ([3, 3, 5]) == -1": {
      "result": false,
      "time": 0.03644061088562012,
      "error": null
    },
    "assert first_even ([1, 7, 8]) == 8": {
      "result": true,
      "time": 0.03574323654174805,
      "error": null
    },
    "assert first_even ([3, 2, 7]) == 2": {
      "result": true,
      "time": 0.03449249267578125,
      "error": null
    },
    "assert first_even ([5, 8, 8]) == 8": {
      "result": true,
      "time": 0.03568673133850098,
      "error": null
    },
    "assert first_even ([4, 1, 1]) == 4": {
      "result": true,
      "time": 0.04091477394104004,
      "error": null
    },
    "assert first_even ([1, 1, 1]) == -1": {
      "result": false,
      "time": 0.04023122787475586,
      "error": null
    },
    "assert first_even ([2, 6, 1]) == 2": {
      "result": true,
      "time": 0.040790557861328125,
      "error": null
    },
    "assert first_even ([4, 5, 3]) == 4": {
      "result": true,
      "time": 0.035889625549316406,
      "error": null
    },
    "assert first_even ([3, 4, 1]) == 4": {
      "result": true,
      "time": 0.04189419746398926,
      "error": null
    },
    "assert first_even ([2, 8, 9]) == 2": {
      "result": true,
      "time": 0.03747415542602539,
      "error": null
    },
    "assert first_even ([4, 4, 1]) == 4": {
      "result": true,
      "time": 0.028314590454101562,
      "error": null
    },
    "assert first_even ([4, 3, 12]) == 4": {
      "result": true,
      "time": 0.03560447692871094,
      "error": null
    },
    "assert first_even ([3, 9, 10]) == 10": {
      "result": true,
      "time": 0.038976192474365234,
      "error": null
    },
    "assert first_even ([1, 8, 9]) == 8": {
      "result": true,
      "time": 0.03579902648925781,
      "error": null
    },
    "assert first_even ([9, 4, 3]) == 4": {
      "result": true,
      "time": 0.03886270523071289,
      "error": null
    },
    "assert first_even ([5, 7, 3]) == -1": {
      "result": false,
      "time": 0.03854775428771973,
      "error": null
    },
    "assert first_even ([6, 1, 4]) == 6": {
      "result": true,
      "time": 0.03054666519165039,
      "error": null
    },
    "assert first_even ([1, 3, 2]) == 2": {
      "result": true,
      "time": 0.04012465476989746,
      "error": null
    },
    "assert first_even ([2, 2, 2]) == 2": {
      "result": true,
      "time": 0.03607177734375,
      "error": null
    },
    "assert first_even ([5, 8, 7]) == 8": {
      "result": true,
      "time": 0.03701305389404297,
      "error": null
    },
    "assert first_even ([6, 4, 7]) == 6": {
      "result": true,
      "time": 0.03714323043823242,
      "error": null
    },
    "assert first_even ([8, 2, 7]) == 8": {
      "result": true,
      "time": 0.03612804412841797,
      "error": null
    },
    "assert first_even ([7, 1, 10]) == 10": {
      "result": true,
      "time": 0.03840470314025879,
      "error": null
    },
    "assert first_even ([2, 1, 11]) == 2": {
      "result": true,
      "time": 0.03476834297180176,
      "error": null
    },
    "assert first_even ([10, 2, 2]) == 10": {
      "result": true,
      "time": 0.03724360466003418,
      "error": null
    },
    "assert first_even ([7, 2, 9]) == 2": {
      "result": true,
      "time": 0.03514361381530762,
      "error": null
    },
    "assert first_even ([9, 7, 10]) == 10": {
      "result": true,
      "time": 0.03340482711791992,
      "error": null
    },
    "assert first_even ([9, 10, 3]) == 10": {
      "result": true,
      "time": 0.03588366508483887,
      "error": null
    },
    "assert first_even ([2, 4, 5]) == 2": {
      "result": true,
      "time": 0.03465437889099121,
      "error": null
    },
    "assert first_even ([10, 9, 9]) == 10": {
      "result": true,
      "time": 0.0356450080871582,
      "error": null
    },
    "assert first_even ([4, 2, 3]) == 4": {
      "result": true,
      "time": 0.03351736068725586,
      "error": null
    },
    "assert first_even ([8, 9, 10]) == 8": {
      "result": true,
      "time": 0.03197884559631348,
      "error": null
    },
    "assert first_even ([4, 3, 9]) == 4": {
      "result": true,
      "time": 0.033751487731933594,
      "error": null
    },
    "assert first_even ([1, 1, 6]) == 6": {
      "result": true,
      "time": 0.03600597381591797,
      "error": null
    },
    "assert first_even ([7, 6, 3]) == 6": {
      "result": true,
      "time": 0.03253483772277832,
      "error": null
    },
    "assert first_even ([6, 7, 3]) == 6": {
      "result": true,
      "time": 0.03786134719848633,
      "error": null
    },
    "assert first_even ([8, 4, 10]) == 8": {
      "result": true,
      "time": 0.03575253486633301,
      "error": null
    },
    "assert first_even ([6, 3, 2]) == 6": {
      "result": true,
      "time": 0.03614997863769531,
      "error": null
    },
    "assert first_even ([8, 4, 9]) == 8": {
      "result": true,
      "time": 0.037146568298339844,
      "error": null
    },
    "assert first_even ([6, 2, 2]) == 6": {
      "result": true,
      "time": 0.029331684112548828,
      "error": null
    },
    "assert first_even ([1, 5, 6]) == 6": {
      "result": true,
      "time": 0.0339350700378418,
      "error": null
    },
    "assert first_even ([10, 3, 10]) == 10": {
      "result": true,
      "time": 0.034651756286621094,
      "error": null
    },
    "assert first_even ([4, 10, 6]) == 4": {
      "result": true,
      "time": 0.03176403045654297,
      "error": null
    },
    "assert first_even ([1, 1, 12]) == 12": {
      "result": true,
      "time": 0.033295631408691406,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9108910891089109,
  "general_error": "",
  "has_testcase_error": false
}