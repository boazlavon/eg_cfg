{
  "code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x >= 0]\n    neg = [x for x in arr if x < 0]\n\n    # Rearrange the array\n    result = []\n    while pos or neg:\n        if pos:\n            result.append(pos.pop(0))\n        if neg:\n            result.append(neg.pop(0))\n\n    return result",
  "results": {
    "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]": {
      "result": false,
      "time": 0.03620028495788574,
      "error": null
    },
    "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]": {
      "result": false,
      "time": 0.03523612022399902,
      "error": null
    },
    "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]": {
      "result": false,
      "time": 0.0405573844909668,
      "error": null
    },
    "assert re_arrange([-7, -7, 10, 7, 5, 11, 3, 13, 4, -8], 5) == [-7, 10, -7, 7, 5, 11, 3, 13, 4, -8]": {
      "result": false,
      "time": 0.036161184310913086,
      "error": null
    },
    "assert re_arrange([-1, -2, 7, 4, 8, 12, 2, 9, 2, -12], 7) == [-1, 7, -2, 4, 8, 12, 2, 9, 2, -12]": {
      "result": false,
      "time": 0.037305355072021484,
      "error": null
    },
    "assert re_arrange([-2, 0, 7, 6, 4, 7, 6, 4, 1, -11], 10) == [-2, 0, -11, 7, 6, 4, 7, 6, 4, 1]": {
      "result": false,
      "time": 0.03700518608093262,
      "error": null
    },
    "assert re_arrange([-6, -3, 4, 6, 6, 12, 2, 3, 3, -4], 8) == [-6, 4, -3, 6, 6, 12, 2, 3, 3, -4]": {
      "result": false,
      "time": 0.039969444274902344,
      "error": null
    },
    "assert re_arrange([-10, -5, 4, 2, 2, 7, 6, 10, 4, -6], 8) == [-10, 4, -5, 2, 2, 7, 6, 10, 4, -6]": {
      "result": false,
      "time": 0.03197956085205078,
      "error": null
    },
    "assert re_arrange([-5, -6, 3, 4, 3, 8, 6, 4, 5, -6], 7) == [-5, 3, -6, 4, 3, 8, 6, 4, 5, -6]": {
      "result": false,
      "time": 0.03824949264526367,
      "error": null
    },
    "assert re_arrange([-5, -3, 8, 5, 8, 5, 2, 7, 3, -4], 7) == [-5, 8, -3, 5, 8, 5, 2, 7, 3, -4]": {
      "result": false,
      "time": 0.040557861328125,
      "error": null
    },
    "assert re_arrange([-6, -5, 8, 3, 9, 4, 1, 7, 2, -8], 10) == [-6, 8, -5, 3, -8, 9, 4, 1, 7, 2]": {
      "result": false,
      "time": 0.036214590072631836,
      "error": null
    },
    "assert re_arrange([-10, -2, 1, 4, 1, 11, 1, 3, 1, -7], 8) == [-10, 1, -2, 4, 1, 11, 1, 3, 1, -7]": {
      "result": false,
      "time": 0.03497004508972168,
      "error": null
    },
    "assert re_arrange([-10, -3, 3, 5, 6, 6, 6, 6, 5, -6], 7) == [-10, 3, -3, 5, 6, 6, 6, 6, 5, -6]": {
      "result": false,
      "time": 0.04062175750732422,
      "error": null
    },
    "assert re_arrange([-2, -1, 8, 6, 3, 5, 6, 12, 5, -13], 8) == [-2, 8, -1, 6, 3, 5, 6, 12, 5, -13]": {
      "result": false,
      "time": 0.03798508644104004,
      "error": null
    },
    "assert re_arrange([-6, -5, 6, 6, 3, 10, 1, 13, 2, -13], 7) == [-6, 6, -5, 6, 3, 10, 1, 13, 2, -13]": {
      "result": false,
      "time": 0.03621697425842285,
      "error": null
    },
    "assert re_arrange([-1, 0, 4, 2, 2, 11, 5, 4, 1, -12], 6) == [-1, 0, 4, 2, 2, 11, 5, 4, 1, -12]": {
      "result": false,
      "time": 0.035147666931152344,
      "error": null
    },
    "assert re_arrange([-6, -4, 6, 7, 1, 9, 4, 12, 2, -4], 6) == [-6, 6, -4, 7, 1, 9, 4, 12, 2, -4]": {
      "result": false,
      "time": 0.033797502517700195,
      "error": null
    },
    "assert re_arrange([-5, -2, 5, 4, 5, 12, 4, 6, 3, -6], 9) == [-5, 5, -2, 4, 5, 12, 4, 6, 3, -6]": {
      "result": false,
      "time": 0.03732013702392578,
      "error": null
    },
    "assert re_arrange([-1, -5, 3, 7, 7, 9, 1, 5, 3, -9], 7) == [-1, 3, -5, 7, 7, 9, 1, 5, 3, -9]": {
      "result": false,
      "time": 0.0410616397857666,
      "error": null
    },
    "assert re_arrange([-7, 1, 4, 5, 8, 3, 1, 9, 2, -12], 10) == [-7, 1, -12, 4, 5, 8, 3, 1, 9, 2]": {
      "result": false,
      "time": 0.039499521255493164,
      "error": null
    },
    "assert re_arrange([-6, 3, 4, 6, 4, 9, 1, 11, 4, -8], 8) == [-6, 3, 4, 6, 4, 9, 1, 11, 4, -8]": {
      "result": false,
      "time": 0.032480478286743164,
      "error": null
    },
    "assert re_arrange([-3, -7, 1, 3, 4, 6, 2, 3, 1, -3], 9) == [-3, 1, -7, 3, 4, 6, 2, 3, 1, -3]": {
      "result": false,
      "time": 0.03622603416442871,
      "error": null
    },
    "assert re_arrange([-2, -6, 4, 3, 6, 3, 6, 7, 3, -8], 7) == [-2, 4, -6, 3, 6, 3, 6, 7, 3, -8]": {
      "result": false,
      "time": 0.036884307861328125,
      "error": null
    },
    "assert re_arrange([0, -5, 5, 2, 2, 11, 1, 3, 4, -9], 6) == [-5, 0, 5, 2, 2, 11, 1, 3, 4, -9]": {
      "result": false,
      "time": 0.038633108139038086,
      "error": null
    },
    "assert re_arrange([-1, 3, 9, 4, 1, 4, 2, 3, 4, -10], 7) == [-1, 3, 9, 4, 1, 4, 2, 3, 4, -10]": {
      "result": false,
      "time": 0.03787803649902344,
      "error": null
    },
    "assert re_arrange([-10, -3, 4, 1, 3, 10, 6, 9, 1, -12], 5) == [-10, 4, -3, 1, 3, 10, 6, 9, 1, -12]": {
      "result": false,
      "time": 0.03512740135192871,
      "error": null
    },
    "assert re_arrange([-4, 3, 7, 4, 8, 6, 3, 3, 2, -6], 7) == [-4, 3, 7, 4, 8, 6, 3, 3, 2, -6]": {
      "result": false,
      "time": 0.043406009674072266,
      "error": null
    },
    "assert re_arrange([-4, 0, 7, 3, 1, 9, 2, 8, 3, -10], 9) == [-4, 0, 7, 3, 1, 9, 2, 8, 3, -10]": {
      "result": false,
      "time": 0.04351401329040527,
      "error": null
    },
    "assert re_arrange([-10, 3, 5, 7, 2, 9, 4, 10, 5, -10], 5) == [-10, 3, 5, 7, 2, 9, 4, 10, 5, -10]": {
      "result": false,
      "time": 0.03398489952087402,
      "error": null
    },
    "assert re_arrange([-6, -1, 2, 6, 6, 2, 3, 12, 3, -13], 9) == [-6, 2, -1, 6, 6, 2, 3, 12, 3, -13]": {
      "result": false,
      "time": 0.03386425971984863,
      "error": null
    },
    "assert re_arrange([-1, 1, 2, 3, 8, 6, 5, 7, 1, -9], 9) == [-1, 1, 2, 3, 8, 6, 5, 7, 1, -9]": {
      "result": false,
      "time": 0.029273509979248047,
      "error": null
    },
    "assert re_arrange([-9, -3, 6, 5, 5, 12, 6, 6, 4, -5], 9) == [-9, 6, -3, 5, 5, 12, 6, 6, 4, -5]": {
      "result": false,
      "time": 0.03196978569030762,
      "error": null
    },
    "assert re_arrange([-8, -5, 2, 2, 5, 2, 3, 6, 5, -3], 6) == [-8, 2, -5, 2, 5, 2, 3, 6, 5, -3]": {
      "result": false,
      "time": 0.029830217361450195,
      "error": null
    },
    "assert re_arrange([0, -1, 3, 7, 2, 5, 1, 6, 2, -5], 8) == [-1, 0, 3, 7, 2, 5, 1, 6, 2, -5]": {
      "result": false,
      "time": 0.027340412139892578,
      "error": null
    },
    "assert re_arrange([-5, -7, 5, 1, 5, 2, 4, 11, 3, -11], 7) == [-5, 5, -7, 1, 5, 2, 4, 11, 3, -11]": {
      "result": false,
      "time": 0.03309941291809082,
      "error": null
    },
    "assert re_arrange([-1, 0, 2, 3, 6, 10, 1, 10, 2, -9], 8) == [-1, 0, 2, 3, 6, 10, 1, 10, 2, -9]": {
      "result": false,
      "time": 0.03436088562011719,
      "error": null
    },
    "assert re_arrange([5, 4, 2, -6, -4, 6], 1) == [5, 4, 2, -6, -4, 6]": {
      "result": false,
      "time": 0.030530452728271484,
      "error": null
    },
    "assert re_arrange([1, 3, 7, -1, -1, 3], 1) == [1, 3, 7, -1, -1, 3]": {
      "result": false,
      "time": 0.03077387809753418,
      "error": null
    },
    "assert re_arrange([6, 4, 6, 0, 3, 9], 6) == [6, 4, 6, 0, 3, 9]": {
      "result": true,
      "time": 0.03396415710449219,
      "error": null
    },
    "assert re_arrange([5, 6, 4, -6, 0, 3], 2) == [5, 6, 4, -6, 0, 3]": {
      "result": false,
      "time": 0.03337907791137695,
      "error": null
    },
    "assert re_arrange([3, 2, 6, -2, -3, 7], 6) == [-2, 3, -3, 2, 6, 7]": {
      "result": false,
      "time": 0.03122401237487793,
      "error": null
    },
    "assert re_arrange([2, 5, 2, -1, -2, 3], 6) == [-1, 2, -2, 5, 2, 3]": {
      "result": false,
      "time": 0.030197858810424805,
      "error": null
    },
    "assert re_arrange([3, 3, 6, -7, 3, 9], 1) == [3, 3, 6, -7, 3, 9]": {
      "result": false,
      "time": 0.032196998596191406,
      "error": null
    },
    "assert re_arrange([6, 4, 6, -3, -5, 7], 5) == [-3, 6, -5, 4, 6, 7]": {
      "result": false,
      "time": 0.030634641647338867,
      "error": null
    },
    "assert re_arrange([6, 6, 8, 1, -3, 6], 6) == [-3, 6, 6, 8, 1, 6]": {
      "result": false,
      "time": 0.026258468627929688,
      "error": null
    },
    "assert re_arrange([3, 5, 3, -1, -2, 8], 6) == [-1, 3, -2, 5, 3, 8]": {
      "result": false,
      "time": 0.030625581741333008,
      "error": null
    },
    "assert re_arrange([4, 1, 5, -6, -6, 3], 5) == [-6, 4, -6, 1, 5, 3]": {
      "result": false,
      "time": 0.032814741134643555,
      "error": null
    },
    "assert re_arrange([2, 7, 6, -2, -3, 7], 2) == [2, 7, 6, -2, -3, 7]": {
      "result": false,
      "time": 0.04097175598144531,
      "error": null
    },
    "assert re_arrange([3, 6, 3, -7, 3, 3], 5) == [-7, 3, 6, 3, 3, 3]": {
      "result": false,
      "time": 0.03349018096923828,
      "error": null
    },
    "assert re_arrange([4, 7, 4, -2, -3, 5], 2) == [4, 7, 4, -2, -3, 5]": {
      "result": false,
      "time": 0.036043405532836914,
      "error": null
    },
    "assert re_arrange([1, 6, 3, -7, -6, 3], 5) == [-7, 1, -6, 6, 3, 3]": {
      "result": false,
      "time": 0.0374605655670166,
      "error": null
    },
    "assert re_arrange([1, 3, 3, -6, 4, 3], 4) == [-6, 1, 3, 3, 4, 3]": {
      "result": false,
      "time": 0.039435386657714844,
      "error": null
    },
    "assert re_arrange([5, 6, 5, -4, -3, 2], 4) == [-4, 5, 6, 5, -3, 2]": {
      "result": false,
      "time": 0.03523135185241699,
      "error": null
    },
    "assert re_arrange([5, 2, 4, -7, 1, 8], 2) == [5, 2, 4, -7, 1, 8]": {
      "result": false,
      "time": 0.034522294998168945,
      "error": null
    },
    "assert re_arrange([2, 4, 3, 1, -2, 8], 3) == [2, 4, 3, 1, -2, 8]": {
      "result": false,
      "time": 0.0366978645324707,
      "error": null
    },
    "assert re_arrange([1, 6, 5, 1, -1, 9], 1) == [1, 6, 5, 1, -1, 9]": {
      "result": false,
      "time": 0.03950190544128418,
      "error": null
    },
    "assert re_arrange([2, 6, 4, -2, -2, 7], 3) == [2, 6, 4, -2, -2, 7]": {
      "result": false,
      "time": 0.035481929779052734,
      "error": null
    },
    "assert re_arrange([1, 6, 4, -4, 3, 1], 6) == [-4, 1, 6, 4, 3, 1]": {
      "result": false,
      "time": 0.03621220588684082,
      "error": null
    },
    "assert re_arrange([1, 1, 5, -2, -2, 3], 6) == [-2, 1, -2, 1, 5, 3]": {
      "result": false,
      "time": 0.03640341758728027,
      "error": null
    },
    "assert re_arrange([1, 3, 7, -1, 1, 9], 3) == [1, 3, 7, -1, 1, 9]": {
      "result": false,
      "time": 0.03479957580566406,
      "error": null
    },
    "assert re_arrange([5, 1, 1, -4, -1, 9], 5) == [-4, 5, -1, 1, 1, 9]": {
      "result": false,
      "time": 0.04126429557800293,
      "error": null
    },
    "assert re_arrange([1, 2, 5, -3, -1, 4], 5) == [-3, 1, -1, 2, 5, 4]": {
      "result": false,
      "time": 0.04045867919921875,
      "error": null
    },
    "assert re_arrange([5, 3, 5, -7, -3, 9], 6) == [-7, 5, -3, 3, 5, 9]": {
      "result": false,
      "time": 0.03677630424499512,
      "error": null
    },
    "assert re_arrange([2, 5, 3, 1, -6, 3], 6) == [-6, 2, 5, 3, 1, 3]": {
      "result": false,
      "time": 0.031706809997558594,
      "error": null
    },
    "assert re_arrange([3, 4, 1, -1, -5, 1], 6) == [-1, 3, -5, 4, 1, 1]": {
      "result": false,
      "time": 0.03784799575805664,
      "error": null
    },
    "assert re_arrange([6, 7, 5, -6, 1, 4], 4) == [-6, 6, 7, 5, 1, 4]": {
      "result": false,
      "time": 0.04604816436767578,
      "error": null
    },
    "assert re_arrange([5, 2, 2, -9, -5, 4], 1) == [5, 2, 2, -9, -5, 4]": {
      "result": false,
      "time": 0.028919458389282227,
      "error": null
    },
    "assert re_arrange([3, 1, 8, -6, 0, 7], 5) == [-6, 3, 1, 8, 0, 7]": {
      "result": false,
      "time": 0.03656768798828125,
      "error": null
    },
    "assert re_arrange([4, 2, 5, -6, -1, 7], 4) == [-6, 4, 2, 5, -1, 7]": {
      "result": false,
      "time": 0.0389103889465332,
      "error": null
    },
    "assert re_arrange([6, 8, 9, 76, -9, 2, -8, -13], 4) == [6, 8, 9, 76, -9, 2, -8, -13]": {
      "result": false,
      "time": 0.03875446319580078,
      "error": null
    },
    "assert re_arrange([3, 4, 6, 81, -6, 9, 2, -11], 3) == [3, 4, 6, 81, -6, 9, 2, -11]": {
      "result": false,
      "time": 0.040503740310668945,
      "error": null
    },
    "assert re_arrange([1, 8, 10, 80, -5, 7, 0, -10], 5) == [-5, 1, 8, 10, 80, 7, 0, -10]": {
      "result": false,
      "time": 0.0392000675201416,
      "error": null
    },
    "assert re_arrange([3, 3, 14, 77, -5, 2, 2, -12], 8) == [-5, 3, -12, 3, 14, 77, 2, 2]": {
      "result": false,
      "time": 0.034980058670043945,
      "error": null
    },
    "assert re_arrange([7, 5, 14, 82, -7, 3, 1, -12], 5) == [-7, 7, 5, 14, 82, 3, 1, -12]": {
      "result": false,
      "time": 0.03963470458984375,
      "error": null
    },
    "assert re_arrange([7, 2, 7, 73, -8, 5, -5, -6], 6) == [-8, 7, 2, 7, 73, 5, -5, -6]": {
      "result": false,
      "time": 0.03846383094787598,
      "error": null
    },
    "assert re_arrange([1, 2, 14, 74, 0, 3, -6, -4], 5) == [1, 2, 14, 74, 0, 3, -6, -4]": {
      "result": false,
      "time": 0.036377668380737305,
      "error": null
    },
    "assert re_arrange([7, 10, 4, 77, 1, 7, -6, -7], 5) == [7, 10, 4, 77, 1, 7, -6, -7]": {
      "result": false,
      "time": 0.03923654556274414,
      "error": null
    },
    "assert re_arrange([5, 12, 13, 81, -8, 3, 2, -10], 7) == [-8, 5, 12, 13, 81, 3, 2, -10]": {
      "result": false,
      "time": 0.03827404975891113,
      "error": null
    },
    "assert re_arrange([6, 2, 10, 75, -5, 3, 1, -6], 7) == [-5, 6, 2, 10, 75, 3, 1, -6]": {
      "result": false,
      "time": 0.03846335411071777,
      "error": null
    },
    "assert re_arrange([4, 11, 14, 82, -8, 10, -8, -4], 3) == [4, 11, 14, 82, -8, 10, -8, -4]": {
      "result": false,
      "time": 0.03493237495422363,
      "error": null
    },
    "assert re_arrange([6, 12, 12, 72, 1, 4, 0, -8], 5) == [6, 12, 12, 72, 1, 4, 0, -8]": {
      "result": false,
      "time": 0.03214311599731445,
      "error": null
    },
    "assert re_arrange([1, 11, 12, 74, 0, 2, -8, -14], 6) == [1, 11, 12, 74, 0, 2, -8, -14]": {
      "result": false,
      "time": 0.04082846641540527,
      "error": null
    },
    "assert re_arrange([2, 7, 4, 77, -1, 1, -6, -13], 8) == [-1, 2, -6, 7, -13, 4, 77, 1]": {
      "result": false,
      "time": 0.03888416290283203,
      "error": null
    },
    "assert re_arrange([3, 10, 7, 82, -1, 9, -8, -10], 4) == [3, 10, 7, 82, -1, 9, -8, -10]": {
      "result": false,
      "time": 0.04068803787231445,
      "error": null
    },
    "assert re_arrange([9, 8, 13, 73, -3, 2, 2, -4], 3) == [9, 8, 13, 73, -3, 2, 2, -4]": {
      "result": false,
      "time": 0.03827095031738281,
      "error": null
    },
    "assert re_arrange([3, 2, 12, 80, -6, 6, -2, -11], 8) == [-6, 3, -2, 2, -11, 12, 80, 6]": {
      "result": false,
      "time": 0.03516817092895508,
      "error": null
    },
    "assert re_arrange([1, 10, 12, 75, -8, 4, -6, -14], 5) == [-8, 1, 10, 12, 75, 4, -6, -14]": {
      "result": false,
      "time": 0.03787827491760254,
      "error": null
    },
    "assert re_arrange([6, 9, 12, 77, 0, 4, 0, -10], 4) == [6, 9, 12, 77, 0, 4, 0, -10]": {
      "result": false,
      "time": 0.03452658653259277,
      "error": null
    },
    "assert re_arrange([1, 3, 10, 74, -3, 1, -2, -13], 4) == [1, 3, 10, 74, -3, 1, -2, -13]": {
      "result": false,
      "time": 0.04255795478820801,
      "error": null
    },
    "assert re_arrange([3, 8, 13, 81, -6, 10, -1, -14], 3) == [3, 8, 13, 81, -6, 10, -1, -14]": {
      "result": false,
      "time": 0.03334832191467285,
      "error": null
    },
    "assert re_arrange([2, 3, 12, 80, -7, 3, -8, -6], 8) == [-7, 2, -8, 3, -6, 12, 80, 3]": {
      "result": false,
      "time": 0.035898447036743164,
      "error": null
    },
    "assert re_arrange([1, 6, 14, 78, -2, 2, -7, -6], 4) == [1, 6, 14, 78, -2, 2, -7, -6]": {
      "result": false,
      "time": 0.0396733283996582,
      "error": null
    },
    "assert re_arrange([1, 12, 5, 76, -8, 1, -4, -9], 7) == [-8, 1, -4, 12, 5, 76, 1, -9]": {
      "result": false,
      "time": 0.03976130485534668,
      "error": null
    },
    "assert re_arrange([9, 4, 8, 74, -7, 9, -8, -12], 7) == [-7, 9, -8, 4, 8, 74, 9, -12]": {
      "result": false,
      "time": 0.04119157791137695,
      "error": null
    },
    "assert re_arrange([7, 12, 14, 72, -3, 4, 0, -6], 5) == [-3, 7, 12, 14, 72, 4, 0, -6]": {
      "result": false,
      "time": 0.041657447814941406,
      "error": null
    },
    "assert re_arrange([4, 6, 9, 74, -4, 7, -4, -7], 4) == [4, 6, 9, 74, -4, 7, -4, -7]": {
      "result": false,
      "time": 0.03961515426635742,
      "error": null
    },
    "assert re_arrange([7, 12, 4, 74, 0, 9, -8, -14], 5) == [7, 12, 4, 74, 0, 9, -8, -14]": {
      "result": false,
      "time": 0.03624582290649414,
      "error": null
    },
    "assert re_arrange([2, 5, 14, 73, -5, 5, -4, -7], 3) == [2, 5, 14, 73, -5, 5, -4, -7]": {
      "result": false,
      "time": 0.035541534423828125,
      "error": null
    },
    "assert re_arrange([9, 12, 6, 73, -5, 2, 1, -9], 4) == [9, 12, 6, 73, -5, 2, 1, -9]": {
      "result": false,
      "time": 0.03695201873779297,
      "error": null
    },
    "assert re_arrange([4, 6, 14, 80, -9, 4, -8, -13], 3) == [4, 6, 14, 80, -9, 4, -8, -13]": {
      "result": false,
      "time": 0.036429643630981445,
      "error": null
    },
    "assert re_arrange([6, 10, 10, 75, -7, 4, 0, -12], 7) == [-7, 6, 10, 10, 75, 4, 0, -12]": {
      "result": false,
      "time": 0.03684806823730469,
      "error": null
    },
    "assert re_arrange([9, 6, 10, 79, -1, 2, -6, -12], 4) == [9, 6, 10, 79, -1, 2, -6, -12]": {
      "result": false,
      "time": 0.036722660064697266,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.00980392156862745,
  "general_error": "",
  "has_testcase_error": false
}