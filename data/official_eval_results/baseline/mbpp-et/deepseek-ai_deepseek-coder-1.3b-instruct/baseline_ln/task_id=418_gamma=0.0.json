{
  "code": "def Find_Max(lst):\n    max_len = -1\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return max_sublist\n",
  "results": {
    "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']": {
      "result": true,
      "time": 0.06584596633911133,
      "error": null
    },
    "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]": {
      "result": true,
      "time": 0.06856608390808105,
      "error": null
    },
    "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]": {
      "result": true,
      "time": 0.06196784973144531,
      "error": null
    },
    "assert Find_Max([['Q'], ['W', 'S'], ['A', 'N', 'N']]) == ['W', 'S']": {
      "result": false,
      "time": 0.06654477119445801,
      "error": null
    },
    "assert Find_Max([['T'], ['C', 'Z'], ['N', 'N', 'I']]) == ['T']": {
      "result": false,
      "time": 0.08356666564941406,
      "error": null
    },
    "assert Find_Max([['F'], ['G', 'C'], ['F', 'R', 'N']]) == ['G', 'C']": {
      "result": false,
      "time": 0.06356453895568848,
      "error": null
    },
    "assert Find_Max([['J'], ['I', 'H'], ['K', 'L', 'H']]) == ['K', 'L', 'H']": {
      "result": true,
      "time": 0.05920910835266113,
      "error": null
    },
    "assert Find_Max([['F'], ['U', 'X'], ['J', 'H', 'B']]) == ['U', 'X']": {
      "result": false,
      "time": 0.06236886978149414,
      "error": null
    },
    "assert Find_Max([['K'], ['D', 'A'], ['X', 'W', 'P']]) == ['X', 'W', 'P']": {
      "result": true,
      "time": 0.07233786582946777,
      "error": null
    },
    "assert Find_Max([['J'], ['T', 'L'], ['C', 'W', 'U']]) == ['T', 'L']": {
      "result": false,
      "time": 0.0640707015991211,
      "error": null
    },
    "assert Find_Max([['Y'], ['M', 'Y'], ['O', 'Y', 'R']]) == ['Y']": {
      "result": false,
      "time": 0.06608200073242188,
      "error": null
    },
    "assert Find_Max([['E'], ['S', 'X'], ['E', 'G', 'O']]) == ['S', 'X']": {
      "result": false,
      "time": 0.06451058387756348,
      "error": null
    },
    "assert Find_Max([['H'], ['S', 'I'], ['T', 'U', 'P']]) == ['T', 'U', 'P']": {
      "result": true,
      "time": 0.06279659271240234,
      "error": null
    },
    "assert Find_Max([['F'], ['J', 'N'], ['K', 'P', 'F']]) == ['K', 'P', 'F']": {
      "result": true,
      "time": 0.07631707191467285,
      "error": null
    },
    "assert Find_Max([['A'], ['A', 'S'], ['J', 'E', 'M']]) == ['J', 'E', 'M']": {
      "result": true,
      "time": 0.058487892150878906,
      "error": null
    },
    "assert Find_Max([['A'], ['L', 'X'], ['Y', 'G', 'C']]) == ['Y', 'G', 'C']": {
      "result": true,
      "time": 0.07357668876647949,
      "error": null
    },
    "assert Find_Max([['J'], ['X', 'R'], ['B', 'M', 'L']]) == ['X', 'R']": {
      "result": false,
      "time": 0.06645011901855469,
      "error": null
    },
    "assert Find_Max([['X'], ['W', 'Q'], ['L', 'C', 'N']]) == ['X']": {
      "result": false,
      "time": 0.06375741958618164,
      "error": null
    },
    "assert Find_Max([['A'], ['R', 'D'], ['T', 'E', 'S']]) == ['T', 'E', 'S']": {
      "result": true,
      "time": 0.06743359565734863,
      "error": null
    },
    "assert Find_Max([['B'], ['B', 'G'], ['R', 'C', 'N']]) == ['R', 'C', 'N']": {
      "result": true,
      "time": 0.06703853607177734,
      "error": null
    },
    "assert Find_Max([['V'], ['D', 'N'], ['C', 'L', 'B']]) == ['V']": {
      "result": false,
      "time": 0.07308435440063477,
      "error": null
    },
    "assert Find_Max([['K'], ['M', 'E'], ['Q', 'K', 'X']]) == ['Q', 'K', 'X']": {
      "result": true,
      "time": 0.055754661560058594,
      "error": null
    },
    "assert Find_Max([['M'], ['C', 'T'], ['T', 'C', 'H']]) == ['T', 'C', 'H']": {
      "result": true,
      "time": 0.06718063354492188,
      "error": null
    },
    "assert Find_Max([['W'], ['U', 'P'], ['D', 'I', 'J']]) == ['W']": {
      "result": false,
      "time": 0.06235480308532715,
      "error": null
    },
    "assert Find_Max([['T'], ['N', 'N'], ['E', 'K', 'R']]) == ['T']": {
      "result": false,
      "time": 0.07177233695983887,
      "error": null
    },
    "assert Find_Max([['C'], ['H', 'X'], ['U', 'O', 'N']]) == ['U', 'O', 'N']": {
      "result": true,
      "time": 0.05631685256958008,
      "error": null
    },
    "assert Find_Max([['G'], ['H', 'P'], ['U', 'Z', 'C']]) == ['U', 'Z', 'C']": {
      "result": true,
      "time": 0.0738835334777832,
      "error": null
    },
    "assert Find_Max([['Z'], ['B', 'S'], ['R', 'Y', 'Y']]) == ['Z']": {
      "result": false,
      "time": 0.06240653991699219,
      "error": null
    },
    "assert Find_Max([['L'], ['T', 'Z'], ['L', 'X', 'M']]) == ['T', 'Z']": {
      "result": false,
      "time": 0.06208491325378418,
      "error": null
    },
    "assert Find_Max([['S'], ['D', 'Y'], ['Y', 'O', 'I']]) == ['Y', 'O', 'I']": {
      "result": true,
      "time": 0.06935572624206543,
      "error": null
    },
    "assert Find_Max([['G'], ['E', 'H'], ['L', 'X', 'K']]) == ['L', 'X', 'K']": {
      "result": true,
      "time": 0.06267142295837402,
      "error": null
    },
    "assert Find_Max([['L'], ['L', 'O'], ['L', 'K', 'B']]) == ['L', 'O']": {
      "result": false,
      "time": 0.06830048561096191,
      "error": null
    },
    "assert Find_Max([['B'], ['G', 'O'], ['D', 'F', 'G']]) == ['G', 'O']": {
      "result": false,
      "time": 0.06364202499389648,
      "error": null
    },
    "assert Find_Max([['O'], ['L', 'N'], ['W', 'B', 'Q']]) == ['W', 'B', 'Q']": {
      "result": true,
      "time": 0.0672452449798584,
      "error": null
    },
    "assert Find_Max([['X'], ['I', 'T'], ['L', 'T', 'B']]) == ['X']": {
      "result": false,
      "time": 0.06321215629577637,
      "error": null
    },
    "assert Find_Max([['R'], ['X', 'B'], ['Y', 'J', 'I']]) == ['Y', 'J', 'I']": {
      "result": true,
      "time": 0.07194161415100098,
      "error": null
    },
    "assert Find_Max([[5], [1, 5], [4, 7, 7]]) == [5]": {
      "result": false,
      "time": 0.06466126441955566,
      "error": null
    },
    "assert Find_Max([[2], [5, 7], [6, 2, 8]]) == [6, 2, 8]": {
      "result": true,
      "time": 0.0674583911895752,
      "error": null
    },
    "assert Find_Max([[2], [6, 4], [4, 3, 8]]) == [6, 4]": {
      "result": false,
      "time": 0.06325626373291016,
      "error": null
    },
    "assert Find_Max([[5], [4, 6], [1, 6, 8]]) == [5]": {
      "result": false,
      "time": 0.06403326988220215,
      "error": null
    },
    "assert Find_Max([[5], [3, 6], [5, 5, 8]]) == [5, 5, 8]": {
      "result": true,
      "time": 0.05864715576171875,
      "error": null
    },
    "assert Find_Max([[4], [4, 5], [3, 2, 2]]) == [4, 5]": {
      "result": false,
      "time": 0.05229377746582031,
      "error": null
    },
    "assert Find_Max([[1], [1, 1], [1, 5, 2]]) == [1, 5, 2]": {
      "result": true,
      "time": 0.04591846466064453,
      "error": null
    },
    "assert Find_Max([[1], [1, 7], [2, 5, 7]]) == [2, 5, 7]": {
      "result": true,
      "time": 0.05822110176086426,
      "error": null
    },
    "assert Find_Max([[4], [1, 4], [5, 3, 3]]) == [5, 3, 3]": {
      "result": true,
      "time": 0.05248236656188965,
      "error": null
    },
    "assert Find_Max([[2], [3, 2], [2, 2, 7]]) == [3, 2]": {
      "result": false,
      "time": 0.06236386299133301,
      "error": null
    },
    "assert Find_Max([[5], [3, 5], [5, 5, 7]]) == [5, 5, 7]": {
      "result": true,
      "time": 0.057309865951538086,
      "error": null
    },
    "assert Find_Max([[6], [1, 1], [2, 6, 8]]) == [6]": {
      "result": false,
      "time": 0.05971050262451172,
      "error": null
    },
    "assert Find_Max([[3], [3, 1], [1, 3, 1]]) == [3, 1]": {
      "result": false,
      "time": 0.05037856101989746,
      "error": null
    },
    "assert Find_Max([[2], [6, 5], [4, 6, 5]]) == [6, 5]": {
      "result": false,
      "time": 0.05289053916931152,
      "error": null
    },
    "assert Find_Max([[5], [3, 6], [4, 6, 6]]) == [5]": {
      "result": false,
      "time": 0.04876303672790527,
      "error": null
    },
    "assert Find_Max([[1], [6, 6], [6, 3, 3]]) == [6, 6]": {
      "result": false,
      "time": 0.05401206016540527,
      "error": null
    },
    "assert Find_Max([[5], [6, 1], [3, 3, 6]]) == [6, 1]": {
      "result": false,
      "time": 0.048023223876953125,
      "error": null
    },
    "assert Find_Max([[2], [2, 7], [2, 3, 6]]) == [2, 7]": {
      "result": false,
      "time": 0.052590370178222656,
      "error": null
    },
    "assert Find_Max([[3], [2, 2], [5, 4, 3]]) == [5, 4, 3]": {
      "result": true,
      "time": 0.053136587142944336,
      "error": null
    },
    "assert Find_Max([[4], [2, 6], [3, 6, 7]]) == [4]": {
      "result": false,
      "time": 0.049364328384399414,
      "error": null
    },
    "assert Find_Max([[1], [4, 5], [2, 5, 1]]) == [4, 5]": {
      "result": false,
      "time": 0.04865384101867676,
      "error": null
    },
    "assert Find_Max([[6], [5, 7], [4, 4, 8]]) == [6]": {
      "result": false,
      "time": 0.04816174507141113,
      "error": null
    },
    "assert Find_Max([[5], [3, 7], [1, 5, 8]]) == [5]": {
      "result": false,
      "time": 0.058673858642578125,
      "error": null
    },
    "assert Find_Max([[2], [6, 3], [6, 1, 1]]) == [6, 3]": {
      "result": false,
      "time": 0.05163097381591797,
      "error": null
    },
    "assert Find_Max([[6], [2, 4], [2, 5, 2]]) == [6]": {
      "result": false,
      "time": 0.04752063751220703,
      "error": null
    },
    "assert Find_Max([[2], [6, 4], [2, 7, 3]]) == [6, 4]": {
      "result": false,
      "time": 0.05857419967651367,
      "error": null
    },
    "assert Find_Max([[2], [3, 6], [5, 6, 4]]) == [5, 6, 4]": {
      "result": true,
      "time": 0.0450437068939209,
      "error": null
    },
    "assert Find_Max([[1], [2, 4], [5, 1, 1]]) == [5, 1, 1]": {
      "result": true,
      "time": 0.054323673248291016,
      "error": null
    },
    "assert Find_Max([[6], [4, 6], [3, 6, 1]]) == [6]": {
      "result": false,
      "time": 0.054384469985961914,
      "error": null
    },
    "assert Find_Max([[2], [1, 6], [1, 6, 7]]) == [2]": {
      "result": false,
      "time": 0.054908037185668945,
      "error": null
    },
    "assert Find_Max([[4], [3, 3], [5, 4, 2]]) == [5, 4, 2]": {
      "result": true,
      "time": 0.049674272537231445,
      "error": null
    },
    "assert Find_Max([[1], [5, 2], [5, 1, 6]]) == [5, 2]": {
      "result": false,
      "time": 0.04933333396911621,
      "error": null
    },
    "assert Find_Max([[6], [3, 2], [2, 1, 1]]) == [6]": {
      "result": false,
      "time": 0.04355120658874512,
      "error": null
    },
    "assert Find_Max([[4, 5], [5, 4, 4], [2, 4, 7, 2]]) == [5, 4, 4]": {
      "result": false,
      "time": 0.05406022071838379,
      "error": null
    },
    "assert Find_Max([[1, 2], [1, 1, 5], [1, 8, 7, 1]]) == [1, 8, 7, 1]": {
      "result": true,
      "time": 0.059401512145996094,
      "error": null
    },
    "assert Find_Max([[2, 6], [3, 6, 8], [3, 2, 1, 3]]) == [3, 6, 8]": {
      "result": false,
      "time": 0.05395102500915527,
      "error": null
    },
    "assert Find_Max([[4, 6], [4, 2, 7], [1, 4, 6, 1]]) == [4, 6]": {
      "result": false,
      "time": 0.06342291831970215,
      "error": null
    },
    "assert Find_Max([[1, 6], [5, 4, 1], [4, 6, 8, 3]]) == [5, 4, 1]": {
      "result": false,
      "time": 0.043189287185668945,
      "error": null
    },
    "assert Find_Max([[1, 3], [6, 2, 5], [6, 3, 3, 4]]) == [6, 3, 3, 4]": {
      "result": true,
      "time": 0.05091404914855957,
      "error": null
    },
    "assert Find_Max([[6, 4], [2, 5, 6], [2, 4, 1, 2]]) == [6, 4]": {
      "result": false,
      "time": 0.05404162406921387,
      "error": null
    },
    "assert Find_Max([[3, 5], [3, 7, 4], [2, 6, 1, 5]]) == [3, 7, 4]": {
      "result": false,
      "time": 0.05892324447631836,
      "error": null
    },
    "assert Find_Max([[2, 2], [2, 1, 4], [6, 2, 8, 4]]) == [6, 2, 8, 4]": {
      "result": true,
      "time": 0.04753470420837402,
      "error": null
    },
    "assert Find_Max([[6, 4], [6, 1, 5], [2, 10, 8, 2]]) == [6, 4]": {
      "result": false,
      "time": 0.04963350296020508,
      "error": null
    },
    "assert Find_Max([[6, 2], [2, 7, 7], [3, 7, 11, 5]]) == [6, 2]": {
      "result": false,
      "time": 0.04930996894836426,
      "error": null
    },
    "assert Find_Max([[5, 6], [2, 7, 3], [4, 4, 8, 2]]) == [5, 6]": {
      "result": false,
      "time": 0.05800199508666992,
      "error": null
    },
    "assert Find_Max([[5, 3], [2, 3, 5], [2, 1, 9, 3]]) == [5, 3]": {
      "result": false,
      "time": 0.055716514587402344,
      "error": null
    },
    "assert Find_Max([[3, 4], [4, 1, 3], [5, 1, 9, 6]]) == [5, 1, 9, 6]": {
      "result": true,
      "time": 0.0669863224029541,
      "error": null
    },
    "assert Find_Max([[5, 6], [4, 6, 3], [4, 1, 4, 2]]) == [5, 6]": {
      "result": false,
      "time": 0.06191205978393555,
      "error": null
    },
    "assert Find_Max([[5, 5], [4, 7, 7], [5, 6, 1, 4]]) == [5, 6, 1, 4]": {
      "result": true,
      "time": 0.05196189880371094,
      "error": null
    },
    "assert Find_Max([[2, 6], [6, 4, 5], [3, 5, 10, 3]]) == [6, 4, 5]": {
      "result": false,
      "time": 0.06704258918762207,
      "error": null
    },
    "assert Find_Max([[2, 4], [1, 5, 2], [6, 2, 7, 3]]) == [6, 2, 7, 3]": {
      "result": true,
      "time": 0.0628805160522461,
      "error": null
    },
    "assert Find_Max([[3, 4], [1, 3, 2], [4, 9, 1, 3]]) == [4, 9, 1, 3]": {
      "result": true,
      "time": 0.0738368034362793,
      "error": null
    },
    "assert Find_Max([[4, 4], [2, 3, 3], [4, 6, 8, 5]]) == [4, 6, 8, 5]": {
      "result": true,
      "time": 0.05814242362976074,
      "error": null
    },
    "assert Find_Max([[2, 2], [5, 5, 2], [2, 7, 3, 2]]) == [5, 5, 2]": {
      "result": false,
      "time": 0.06463265419006348,
      "error": null
    },
    "assert Find_Max([[6, 1], [5, 4, 3], [6, 10, 1, 6]]) == [6, 10, 1, 6]": {
      "result": true,
      "time": 0.06818461418151855,
      "error": null
    },
    "assert Find_Max([[5, 4], [1, 6, 3], [6, 1, 11, 5]]) == [6, 1, 11, 5]": {
      "result": true,
      "time": 0.067474365234375,
      "error": null
    },
    "assert Find_Max([[1, 6], [1, 6, 7], [2, 7, 3, 5]]) == [2, 7, 3, 5]": {
      "result": true,
      "time": 0.06182742118835449,
      "error": null
    },
    "assert Find_Max([[6, 3], [1, 7, 5], [3, 9, 11, 1]]) == [6, 3]": {
      "result": false,
      "time": 0.06351256370544434,
      "error": null
    },
    "assert Find_Max([[2, 2], [1, 6, 1], [1, 2, 7, 1]]) == [2, 2]": {
      "result": false,
      "time": 0.07254171371459961,
      "error": null
    },
    "assert Find_Max([[3, 5], [5, 6, 2], [3, 6, 4, 3]]) == [5, 6, 2]": {
      "result": false,
      "time": 0.06320571899414062,
      "error": null
    },
    "assert Find_Max([[6, 3], [4, 4, 7], [6, 8, 9, 2]]) == [6, 8, 9, 2]": {
      "result": true,
      "time": 0.06275725364685059,
      "error": null
    },
    "assert Find_Max([[6, 4], [1, 1, 5], [1, 5, 2, 3]]) == [6, 4]": {
      "result": false,
      "time": 0.06455063819885254,
      "error": null
    },
    "assert Find_Max([[1, 4], [5, 5, 5], [3, 4, 4, 2]]) == [5, 5, 5]": {
      "result": false,
      "time": 0.05775094032287598,
      "error": null
    },
    "assert Find_Max([[5, 2], [6, 6, 5], [5, 1, 11, 4]]) == [6, 6, 5]": {
      "result": false,
      "time": 0.06463122367858887,
      "error": null
    },
    "assert Find_Max([[1, 4], [5, 3, 2], [1, 4, 4, 2]]) == [5, 3, 2]": {
      "result": false,
      "time": 0.06871700286865234,
      "error": null
    },
    "assert Find_Max([[1, 6], [4, 3, 5], [5, 7, 4, 2]]) == [5, 7, 4, 2]": {
      "result": true,
      "time": 0.05810856819152832,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.4117647058823529,
  "general_error": "",
  "has_testcase_error": false
}