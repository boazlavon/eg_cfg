{
  "code": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)\n",
  "results": {
    "assert Find_Min_Length([[1],[1,2]]) == 1": {
      "result": true,
      "time": 0.033841609954833984,
      "error": null
    },
    "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2": {
      "result": true,
      "time": 0.038043975830078125,
      "error": null
    },
    "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3": {
      "result": true,
      "time": 0.03286862373352051,
      "error": null
    },
    "assert Find_Min_Length([[3], [6, 5]]) == 1": {
      "result": true,
      "time": 0.03646588325500488,
      "error": null
    },
    "assert Find_Min_Length([[6], [1, 4]]) == 1": {
      "result": true,
      "time": 0.03730916976928711,
      "error": null
    },
    "assert Find_Min_Length([[5], [3, 4]]) == 1": {
      "result": true,
      "time": 0.031148910522460938,
      "error": null
    },
    "assert Find_Min_Length([[4], [1, 7]]) == 1": {
      "result": true,
      "time": 0.03615093231201172,
      "error": null
    },
    "assert Find_Min_Length([[6], [2, 2]]) == 1": {
      "result": true,
      "time": 0.038695335388183594,
      "error": null
    },
    "assert Find_Min_Length([[2], [4, 1]]) == 1": {
      "result": true,
      "time": 0.03483080863952637,
      "error": null
    },
    "assert Find_Min_Length([[6], [1, 5]]) == 1": {
      "result": true,
      "time": 0.036713361740112305,
      "error": null
    },
    "assert Find_Min_Length([[5], [4, 5]]) == 1": {
      "result": true,
      "time": 0.03739047050476074,
      "error": null
    },
    "assert Find_Min_Length([[6], [2, 7]]) == 1": {
      "result": true,
      "time": 0.03075718879699707,
      "error": null
    },
    "assert Find_Min_Length([[3], [6, 6]]) == 1": {
      "result": true,
      "time": 0.03279256820678711,
      "error": null
    },
    "assert Find_Min_Length([[4], [5, 7]]) == 1": {
      "result": true,
      "time": 0.04145169258117676,
      "error": null
    },
    "assert Find_Min_Length([[1], [4, 1]]) == 1": {
      "result": true,
      "time": 0.040108680725097656,
      "error": null
    },
    "assert Find_Min_Length([[3], [3, 5]]) == 1": {
      "result": true,
      "time": 0.038988590240478516,
      "error": null
    },
    "assert Find_Min_Length([[6], [4, 1]]) == 1": {
      "result": true,
      "time": 0.03825974464416504,
      "error": null
    },
    "assert Find_Min_Length([[1], [5, 4]]) == 1": {
      "result": true,
      "time": 0.03783392906188965,
      "error": null
    },
    "assert Find_Min_Length([[1], [3, 7]]) == 1": {
      "result": true,
      "time": 0.04603314399719238,
      "error": null
    },
    "assert Find_Min_Length([[6], [1, 1]]) == 1": {
      "result": true,
      "time": 0.03451037406921387,
      "error": null
    },
    "assert Find_Min_Length([[4], [6, 6]]) == 1": {
      "result": true,
      "time": 0.03493380546569824,
      "error": null
    },
    "assert Find_Min_Length([[6], [3, 1]]) == 1": {
      "result": true,
      "time": 0.034862518310546875,
      "error": null
    },
    "assert Find_Min_Length([[5], [4, 4]]) == 1": {
      "result": true,
      "time": 0.03957962989807129,
      "error": null
    },
    "assert Find_Min_Length([[3], [4, 6]]) == 1": {
      "result": true,
      "time": 0.02973031997680664,
      "error": null
    },
    "assert Find_Min_Length([[1], [1, 2]]) == 1": {
      "result": true,
      "time": 0.0333247184753418,
      "error": null
    },
    "assert Find_Min_Length([[4], [6, 7]]) == 1": {
      "result": true,
      "time": 0.03529167175292969,
      "error": null
    },
    "assert Find_Min_Length([[2], [6, 2]]) == 1": {
      "result": true,
      "time": 0.03673696517944336,
      "error": null
    },
    "assert Find_Min_Length([[6], [3, 2]]) == 1": {
      "result": true,
      "time": 0.03584742546081543,
      "error": null
    },
    "assert Find_Min_Length([[5], [2, 6]]) == 1": {
      "result": true,
      "time": 0.04349660873413086,
      "error": null
    },
    "assert Find_Min_Length([[6], [5, 7]]) == 1": {
      "result": true,
      "time": 0.03281903266906738,
      "error": null
    },
    "assert Find_Min_Length([[5], [3, 1]]) == 1": {
      "result": true,
      "time": 0.037528276443481445,
      "error": null
    },
    "assert Find_Min_Length([[2], [1, 7]]) == 1": {
      "result": true,
      "time": 0.04143953323364258,
      "error": null
    },
    "assert Find_Min_Length([[6], [4, 4]]) == 1": {
      "result": true,
      "time": 0.043819427490234375,
      "error": null
    },
    "assert Find_Min_Length([[4], [3, 5]]) == 1": {
      "result": true,
      "time": 0.04262709617614746,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [2, 1, 7], [2, 4, 8, 4]]) == 2": {
      "result": true,
      "time": 0.03972268104553223,
      "error": null
    },
    "assert Find_Min_Length([[3, 5], [3, 1, 7], [3, 5, 5, 2]]) == 2": {
      "result": true,
      "time": 0.041283607482910156,
      "error": null
    },
    "assert Find_Min_Length([[1, 1], [1, 7, 1], [1, 5, 8, 9]]) == 2": {
      "result": true,
      "time": 0.03500866889953613,
      "error": null
    },
    "assert Find_Min_Length([[6, 2], [6, 3, 7], [1, 2, 4, 9]]) == 2": {
      "result": true,
      "time": 0.03901314735412598,
      "error": null
    },
    "assert Find_Min_Length([[6, 7], [2, 1, 2], [1, 1, 2, 6]]) == 2": {
      "result": true,
      "time": 0.03767800331115723,
      "error": null
    },
    "assert Find_Min_Length([[1, 1], [1, 1, 2], [3, 1, 6, 9]]) == 2": {
      "result": true,
      "time": 0.03494429588317871,
      "error": null
    },
    "assert Find_Min_Length([[2, 6], [5, 4, 8], [1, 3, 7, 5]]) == 2": {
      "result": true,
      "time": 0.03953289985656738,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [3, 2, 5], [5, 7, 6, 2]]) == 2": {
      "result": true,
      "time": 0.035675764083862305,
      "error": null
    },
    "assert Find_Min_Length([[2, 1], [1, 7, 2], [5, 2, 7, 1]]) == 2": {
      "result": true,
      "time": 0.0387113094329834,
      "error": null
    },
    "assert Find_Min_Length([[5, 3], [6, 5, 7], [3, 1, 1, 9]]) == 2": {
      "result": true,
      "time": 0.04079294204711914,
      "error": null
    },
    "assert Find_Min_Length([[5, 2], [1, 1, 2], [6, 5, 1, 8]]) == 2": {
      "result": true,
      "time": 0.035536766052246094,
      "error": null
    },
    "assert Find_Min_Length([[4, 7], [3, 7, 3], [4, 3, 2, 5]]) == 2": {
      "result": true,
      "time": 0.04213738441467285,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [1, 4, 4], [2, 1, 5, 2]]) == 2": {
      "result": true,
      "time": 0.03748655319213867,
      "error": null
    },
    "assert Find_Min_Length([[4, 3], [5, 1, 1], [4, 4, 1, 7]]) == 2": {
      "result": true,
      "time": 0.03753805160522461,
      "error": null
    },
    "assert Find_Min_Length([[1, 6], [1, 2, 6], [2, 1, 5, 5]]) == 2": {
      "result": true,
      "time": 0.04206442832946777,
      "error": null
    },
    "assert Find_Min_Length([[2, 6], [1, 5, 3], [2, 4, 4, 1]]) == 2": {
      "result": true,
      "time": 0.0336606502532959,
      "error": null
    },
    "assert Find_Min_Length([[2, 5], [1, 6, 6], [5, 5, 7, 4]]) == 2": {
      "result": true,
      "time": 0.03466033935546875,
      "error": null
    },
    "assert Find_Min_Length([[4, 2], [4, 2, 5], [5, 2, 7, 1]]) == 2": {
      "result": true,
      "time": 0.03766036033630371,
      "error": null
    },
    "assert Find_Min_Length([[1, 1], [3, 5, 4], [3, 3, 4, 7]]) == 2": {
      "result": true,
      "time": 0.03293871879577637,
      "error": null
    },
    "assert Find_Min_Length([[5, 7], [2, 2, 2], [3, 7, 1, 9]]) == 2": {
      "result": true,
      "time": 0.0428311824798584,
      "error": null
    },
    "assert Find_Min_Length([[4, 6], [2, 7, 3], [4, 7, 8, 4]]) == 2": {
      "result": true,
      "time": 0.03802061080932617,
      "error": null
    },
    "assert Find_Min_Length([[6, 7], [2, 7, 3], [6, 3, 2, 9]]) == 2": {
      "result": true,
      "time": 0.0364377498626709,
      "error": null
    },
    "assert Find_Min_Length([[1, 5], [3, 3, 7], [6, 5, 2, 3]]) == 2": {
      "result": true,
      "time": 0.034811973571777344,
      "error": null
    },
    "assert Find_Min_Length([[2, 2], [4, 7, 7], [2, 7, 7, 5]]) == 2": {
      "result": true,
      "time": 0.04560256004333496,
      "error": null
    },
    "assert Find_Min_Length([[6, 4], [3, 2, 5], [5, 3, 7, 7]]) == 2": {
      "result": true,
      "time": 0.036380767822265625,
      "error": null
    },
    "assert Find_Min_Length([[6, 1], [2, 5, 3], [3, 6, 8, 8]]) == 2": {
      "result": true,
      "time": 0.042639732360839844,
      "error": null
    },
    "assert Find_Min_Length([[6, 4], [5, 3, 2], [5, 5, 5, 5]]) == 2": {
      "result": true,
      "time": 0.036154747009277344,
      "error": null
    },
    "assert Find_Min_Length([[4, 6], [1, 5, 3], [4, 3, 3, 6]]) == 2": {
      "result": true,
      "time": 0.037180423736572266,
      "error": null
    },
    "assert Find_Min_Length([[1, 6], [6, 1, 5], [2, 3, 3, 8]]) == 2": {
      "result": true,
      "time": 0.0351102352142334,
      "error": null
    },
    "assert Find_Min_Length([[6, 6], [6, 3, 8], [2, 7, 2, 6]]) == 2": {
      "result": true,
      "time": 0.03686928749084473,
      "error": null
    },
    "assert Find_Min_Length([[4, 4], [3, 1, 4], [1, 3, 2, 1]]) == 2": {
      "result": true,
      "time": 0.032495737075805664,
      "error": null
    },
    "assert Find_Min_Length([[1, 7], [3, 3, 3], [5, 2, 7, 9]]) == 2": {
      "result": true,
      "time": 0.03876948356628418,
      "error": null
    },
    "assert Find_Min_Length([[2, 3], [3, 3, 5], [4, 2, 4, 4]]) == 2": {
      "result": true,
      "time": 0.03919720649719238,
      "error": null
    },
    "assert Find_Min_Length([[1, 6, 5], [7, 9, 1, 8]]) == 3": {
      "result": true,
      "time": 0.040262699127197266,
      "error": null
    },
    "assert Find_Min_Length([[6, 1, 2], [4, 8, 2, 8]]) == 3": {
      "result": true,
      "time": 0.03934216499328613,
      "error": null
    },
    "assert Find_Min_Length([[7, 2, 6], [4, 1, 9, 8]]) == 3": {
      "result": true,
      "time": 0.029353857040405273,
      "error": null
    },
    "assert Find_Min_Length([[7, 5, 6], [2, 9, 6, 6]]) == 3": {
      "result": true,
      "time": 0.035073280334472656,
      "error": null
    },
    "assert Find_Min_Length([[1, 2, 4], [1, 9, 2, 6]]) == 3": {
      "result": true,
      "time": 0.039711713790893555,
      "error": null
    },
    "assert Find_Min_Length([[4, 6, 6], [5, 6, 3, 2]]) == 3": {
      "result": true,
      "time": 0.0407559871673584,
      "error": null
    },
    "assert Find_Min_Length([[4, 2, 2], [1, 2, 3, 4]]) == 3": {
      "result": true,
      "time": 0.03477931022644043,
      "error": null
    },
    "assert Find_Min_Length([[8, 1, 4], [6, 9, 1, 3]]) == 3": {
      "result": true,
      "time": 0.039743900299072266,
      "error": null
    },
    "assert Find_Min_Length([[5, 5, 2], [1, 5, 4, 2]]) == 3": {
      "result": true,
      "time": 0.032563209533691406,
      "error": null
    },
    "assert Find_Min_Length([[7, 6, 2], [5, 6, 5, 4]]) == 3": {
      "result": true,
      "time": 0.03611254692077637,
      "error": null
    },
    "assert Find_Min_Length([[2, 2, 1], [5, 9, 6, 9]]) == 3": {
      "result": true,
      "time": 0.038210391998291016,
      "error": null
    },
    "assert Find_Min_Length([[4, 6, 7], [1, 6, 7, 1]]) == 3": {
      "result": true,
      "time": 0.03662610054016113,
      "error": null
    },
    "assert Find_Min_Length([[2, 7, 8], [3, 4, 4, 2]]) == 3": {
      "result": true,
      "time": 0.03309321403503418,
      "error": null
    },
    "assert Find_Min_Length([[6, 4, 4], [3, 2, 8, 5]]) == 3": {
      "result": true,
      "time": 0.03490614891052246,
      "error": null
    },
    "assert Find_Min_Length([[6, 7, 1], [2, 5, 8, 2]]) == 3": {
      "result": true,
      "time": 0.036902427673339844,
      "error": null
    },
    "assert Find_Min_Length([[6, 6, 1], [4, 5, 2, 2]]) == 3": {
      "result": true,
      "time": 0.03536081314086914,
      "error": null
    },
    "assert Find_Min_Length([[2, 4, 2], [4, 4, 3, 9]]) == 3": {
      "result": true,
      "time": 0.03110814094543457,
      "error": null
    },
    "assert Find_Min_Length([[8, 7, 5], [8, 7, 8, 9]]) == 3": {
      "result": true,
      "time": 0.03183746337890625,
      "error": null
    },
    "assert Find_Min_Length([[4, 3, 5], [8, 9, 6, 8]]) == 3": {
      "result": true,
      "time": 0.03662753105163574,
      "error": null
    },
    "assert Find_Min_Length([[6, 4, 7], [9, 6, 2, 5]]) == 3": {
      "result": true,
      "time": 0.030382633209228516,
      "error": null
    },
    "assert Find_Min_Length([[3, 8, 7], [9, 4, 6, 5]]) == 3": {
      "result": true,
      "time": 0.029466629028320312,
      "error": null
    },
    "assert Find_Min_Length([[2, 1, 4], [9, 3, 6, 7]]) == 3": {
      "result": true,
      "time": 0.027590513229370117,
      "error": null
    },
    "assert Find_Min_Length([[4, 2, 4], [9, 4, 9, 8]]) == 3": {
      "result": true,
      "time": 0.030307292938232422,
      "error": null
    },
    "assert Find_Min_Length([[2, 7, 6], [4, 1, 9, 8]]) == 3": {
      "result": true,
      "time": 0.0290219783782959,
      "error": null
    },
    "assert Find_Min_Length([[5, 4, 7], [6, 2, 2, 2]]) == 3": {
      "result": true,
      "time": 0.030590534210205078,
      "error": null
    },
    "assert Find_Min_Length([[3, 6, 5], [7, 3, 8, 7]]) == 3": {
      "result": true,
      "time": 0.03469562530517578,
      "error": null
    },
    "assert Find_Min_Length([[8, 2, 1], [9, 9, 6, 6]]) == 3": {
      "result": true,
      "time": 0.031139135360717773,
      "error": null
    },
    "assert Find_Min_Length([[5, 6, 2], [5, 8, 9, 5]]) == 3": {
      "result": true,
      "time": 0.030491352081298828,
      "error": null
    },
    "assert Find_Min_Length([[5, 5, 2], [8, 6, 7, 3]]) == 3": {
      "result": true,
      "time": 0.03281354904174805,
      "error": null
    },
    "assert Find_Min_Length([[2, 5, 3], [9, 8, 6, 8]]) == 3": {
      "result": true,
      "time": 0.0326685905456543,
      "error": null
    },
    "assert Find_Min_Length([[1, 6, 4], [4, 3, 2, 4]]) == 3": {
      "result": true,
      "time": 0.029885053634643555,
      "error": null
    },
    "assert Find_Min_Length([[4, 4, 3], [6, 5, 2, 4]]) == 3": {
      "result": true,
      "time": 0.028519392013549805,
      "error": null
    },
    "assert Find_Min_Length([[7, 5, 6], [1, 1, 8, 8]]) == 3": {
      "result": true,
      "time": 0.03775954246520996,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}