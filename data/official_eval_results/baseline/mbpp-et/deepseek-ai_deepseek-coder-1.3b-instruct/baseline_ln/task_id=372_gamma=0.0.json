{
  "code": "import heapq as hq\n\ndef heap_assending(nums):\n    sorted_nums = hq.nsmallest(len(nums), nums)\n    return sorted_nums\n",
  "results": {
    "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]": {
      "result": true,
      "time": 0.1271212100982666,
      "error": null
    },
    "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]": {
      "result": true,
      "time": 0.12601852416992188,
      "error": null
    },
    "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]": {
      "result": true,
      "time": 0.12228226661682129,
      "error": null
    },
    "assert heap_assending([13, 11, 7, 8, 11, 4, 10, 6, 1, 8, 4]) == [1, 4, 4, 6, 7, 8, 8, 10, 11, 11, 13]": {
      "result": true,
      "time": 0.10865545272827148,
      "error": null
    },
    "assert heap_assending([20, 18, 7, 14, 12, 4, 13, 3, 6, 8, 1]) == [1, 3, 4, 6, 7, 8, 12, 13, 14, 18, 20]": {
      "result": true,
      "time": 0.11886787414550781,
      "error": null
    },
    "assert heap_assending([16, 14, 9, 11, 4, 7, 10, 2, 4, 8, 6]) == [2, 4, 4, 6, 7, 8, 9, 10, 11, 14, 16]": {
      "result": true,
      "time": 0.11255455017089844,
      "error": null
    },
    "assert heap_assending([14, 10, 6, 12, 9, 8, 8, 8, 3, 6, 3]) == [3, 3, 6, 6, 8, 8, 8, 9, 10, 12, 14]": {
      "result": true,
      "time": 0.11976432800292969,
      "error": null
    },
    "assert heap_assending([19, 12, 5, 9, 3, 7, 5, 4, 5, 4, 3]) == [3, 3, 4, 4, 5, 5, 5, 7, 9, 12, 19]": {
      "result": true,
      "time": 0.12546896934509277,
      "error": null
    },
    "assert heap_assending([23, 13, 9, 10, 3, 5, 6, 1, 7, 8, 6]) == [1, 3, 5, 6, 6, 7, 8, 9, 10, 13, 23]": {
      "result": true,
      "time": 0.12123441696166992,
      "error": null
    },
    "assert heap_assending([13, 17, 8, 13, 4, 8, 5, 7, 6, 3, 6]) == [3, 4, 5, 6, 6, 7, 8, 8, 13, 13, 17]": {
      "result": true,
      "time": 0.13213610649108887,
      "error": null
    },
    "assert heap_assending([20, 14, 11, 4, 13, 10, 8, 3, 5, 6, 2]) == [2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 20]": {
      "result": true,
      "time": 0.12713265419006348,
      "error": null
    },
    "assert heap_assending([16, 12, 6, 11, 13, 3, 8, 5, 1, 3, 3]) == [1, 3, 3, 3, 5, 6, 8, 11, 12, 13, 16]": {
      "result": true,
      "time": 0.10764074325561523,
      "error": null
    },
    "assert heap_assending([23, 9, 10, 4, 6, 5, 10, 4, 1, 5, 4]) == [1, 4, 4, 4, 5, 5, 6, 9, 10, 10, 23]": {
      "result": true,
      "time": 0.12787294387817383,
      "error": null
    },
    "assert heap_assending([23, 17, 15, 9, 12, 8, 10, 5, 4, 5, 3]) == [3, 4, 5, 5, 8, 9, 10, 12, 15, 17, 23]": {
      "result": true,
      "time": 0.1323106288909912,
      "error": null
    },
    "assert heap_assending([18, 19, 12, 13, 9, 11, 13, 8, 2, 1, 1]) == [1, 1, 2, 8, 9, 11, 12, 13, 13, 18, 19]": {
      "result": true,
      "time": 0.11585211753845215,
      "error": null
    },
    "assert heap_assending([21, 16, 5, 13, 3, 6, 4, 8, 7, 8, 5]) == [3, 4, 5, 5, 6, 7, 8, 8, 13, 16, 21]": {
      "result": true,
      "time": 0.14584875106811523,
      "error": null
    },
    "assert heap_assending([18, 9, 15, 9, 4, 6, 11, 7, 1, 8, 4]) == [1, 4, 4, 6, 7, 8, 9, 9, 11, 15, 18]": {
      "result": true,
      "time": 0.12505531311035156,
      "error": null
    },
    "assert heap_assending([15, 12, 11, 11, 5, 11, 12, 8, 4, 7, 5]) == [4, 5, 5, 7, 8, 11, 11, 11, 12, 12, 15]": {
      "result": true,
      "time": 0.12621855735778809,
      "error": null
    },
    "assert heap_assending([13, 17, 10, 8, 10, 8, 8, 3, 1, 5, 1]) == [1, 1, 3, 5, 8, 8, 8, 10, 10, 13, 17]": {
      "result": true,
      "time": 0.12449383735656738,
      "error": null
    },
    "assert heap_assending([19, 15, 15, 9, 7, 5, 4, 1, 4, 8, 4]) == [1, 4, 4, 4, 5, 7, 8, 9, 15, 15, 19]": {
      "result": true,
      "time": 0.12369275093078613,
      "error": null
    },
    "assert heap_assending([20, 17, 14, 12, 11, 7, 8, 1, 7, 2, 5]) == [1, 2, 5, 7, 7, 8, 11, 12, 14, 17, 20]": {
      "result": true,
      "time": 0.1171877384185791,
      "error": null
    },
    "assert heap_assending([19, 12, 11, 13, 7, 2, 7, 5, 1, 2, 6]) == [1, 2, 2, 5, 6, 7, 7, 11, 12, 13, 19]": {
      "result": true,
      "time": 0.12600159645080566,
      "error": null
    },
    "assert heap_assending([16, 19, 11, 9, 3, 11, 7, 1, 7, 5, 6]) == [1, 3, 5, 6, 7, 7, 9, 11, 11, 16, 19]": {
      "result": true,
      "time": 0.11826658248901367,
      "error": null
    },
    "assert heap_assending([21, 15, 6, 4, 8, 4, 10, 1, 2, 8, 4]) == [1, 2, 4, 4, 4, 6, 8, 8, 10, 15, 21]": {
      "result": true,
      "time": 0.11161446571350098,
      "error": null
    },
    "assert heap_assending([13, 13, 10, 11, 9, 12, 8, 8, 6, 8, 5]) == [5, 6, 8, 8, 8, 9, 10, 11, 12, 13, 13]": {
      "result": true,
      "time": 0.11696457862854004,
      "error": null
    },
    "assert heap_assending([14, 19, 11, 5, 12, 5, 14, 1, 5, 4, 6]) == [1, 4, 5, 5, 5, 6, 11, 12, 14, 14, 19]": {
      "result": true,
      "time": 0.11336016654968262,
      "error": null
    },
    "assert heap_assending([20, 16, 11, 9, 5, 7, 8, 6, 4, 9, 2]) == [2, 4, 5, 6, 7, 8, 9, 9, 11, 16, 20]": {
      "result": true,
      "time": 0.12177515029907227,
      "error": null
    },
    "assert heap_assending([19, 12, 7, 14, 10, 5, 7, 4, 7, 1, 4]) == [1, 4, 4, 5, 7, 7, 7, 10, 12, 14, 19]": {
      "result": true,
      "time": 0.12731003761291504,
      "error": null
    },
    "assert heap_assending([17, 14, 5, 6, 10, 11, 9, 2, 3, 6, 3]) == [2, 3, 3, 5, 6, 6, 9, 10, 11, 14, 17]": {
      "result": true,
      "time": 0.11030912399291992,
      "error": null
    },
    "assert heap_assending([21, 13, 15, 7, 8, 2, 12, 3, 5, 1, 2]) == [1, 2, 2, 3, 5, 7, 8, 12, 13, 15, 21]": {
      "result": true,
      "time": 0.1056971549987793,
      "error": null
    },
    "assert heap_assending([16, 11, 5, 14, 9, 3, 13, 4, 5, 6, 6]) == [3, 4, 5, 5, 6, 6, 9, 11, 13, 14, 16]": {
      "result": true,
      "time": 0.11466550827026367,
      "error": null
    },
    "assert heap_assending([19, 9, 11, 12, 7, 4, 14, 4, 5, 5, 4]) == [4, 4, 4, 5, 5, 7, 9, 11, 12, 14, 19]": {
      "result": true,
      "time": 0.12632369995117188,
      "error": null
    },
    "assert heap_assending([21, 9, 10, 9, 5, 12, 13, 5, 2, 8, 1]) == [1, 2, 5, 5, 8, 9, 9, 10, 12, 13, 21]": {
      "result": true,
      "time": 0.12367939949035645,
      "error": null
    },
    "assert heap_assending([19, 10, 9, 14, 11, 10, 12, 8, 5, 4, 4]) == [4, 4, 5, 8, 9, 10, 10, 11, 12, 14, 19]": {
      "result": true,
      "time": 0.11475944519042969,
      "error": null
    },
    "assert heap_assending([15, 16, 6, 8, 9, 12, 7, 1, 4, 9, 3]) == [1, 3, 4, 6, 7, 8, 9, 9, 12, 15, 16]": {
      "result": true,
      "time": 0.10627031326293945,
      "error": null
    },
    "assert heap_assending([20, 13, 10, 13, 10, 2, 6, 3, 7, 3, 5]) == [2, 3, 3, 5, 6, 7, 10, 10, 13, 13, 20]": {
      "result": true,
      "time": 0.1141502857208252,
      "error": null
    },
    "assert heap_assending([25, 40, 27, 83, 9, 66, 74, 27, 58]) == [9, 25, 27, 27, 40, 58, 66, 74, 83]": {
      "result": true,
      "time": 0.10789322853088379,
      "error": null
    },
    "assert heap_assending([20, 39, 21, 86, 18, 66, 73, 27, 62]) == [18, 20, 21, 27, 39, 62, 66, 73, 86]": {
      "result": true,
      "time": 0.11913442611694336,
      "error": null
    },
    "assert heap_assending([26, 34, 24, 86, 11, 61, 73, 20, 53]) == [11, 20, 24, 26, 34, 53, 61, 73, 86]": {
      "result": true,
      "time": 0.11777138710021973,
      "error": null
    },
    "assert heap_assending([30, 30, 22, 89, 10, 69, 72, 29, 61]) == [10, 22, 29, 30, 30, 61, 69, 72, 89]": {
      "result": true,
      "time": 0.12262082099914551,
      "error": null
    },
    "assert heap_assending([29, 39, 19, 81, 9, 64, 76, 27, 61]) == [9, 19, 27, 29, 39, 61, 64, 76, 81]": {
      "result": true,
      "time": 0.1259617805480957,
      "error": null
    },
    "assert heap_assending([27, 33, 20, 83, 12, 61, 71, 22, 63]) == [12, 20, 22, 27, 33, 61, 63, 71, 83]": {
      "result": true,
      "time": 0.10835075378417969,
      "error": null
    },
    "assert heap_assending([22, 32, 25, 87, 11, 64, 76, 20, 56]) == [11, 20, 22, 25, 32, 56, 64, 76, 87]": {
      "result": true,
      "time": 0.1190178394317627,
      "error": null
    },
    "assert heap_assending([24, 32, 26, 82, 10, 62, 76, 24, 60]) == [10, 24, 24, 26, 32, 60, 62, 76, 82]": {
      "result": true,
      "time": 0.11922192573547363,
      "error": null
    },
    "assert heap_assending([30, 32, 25, 86, 19, 68, 77, 27, 60]) == [19, 25, 27, 30, 32, 60, 68, 77, 86]": {
      "result": true,
      "time": 0.1180872917175293,
      "error": null
    },
    "assert heap_assending([29, 31, 17, 85, 13, 67, 73, 22, 57]) == [13, 17, 22, 29, 31, 57, 67, 73, 85]": {
      "result": true,
      "time": 0.11701250076293945,
      "error": null
    },
    "assert heap_assending([21, 30, 26, 86, 17, 70, 70, 23, 58]) == [17, 21, 23, 26, 30, 58, 70, 70, 86]": {
      "result": true,
      "time": 0.10624313354492188,
      "error": null
    },
    "assert heap_assending([30, 39, 17, 82, 14, 61, 71, 22, 55]) == [14, 17, 22, 30, 39, 55, 61, 71, 82]": {
      "result": true,
      "time": 0.10536766052246094,
      "error": null
    },
    "assert heap_assending([26, 34, 20, 83, 18, 70, 79, 23, 63]) == [18, 20, 23, 26, 34, 63, 70, 79, 83]": {
      "result": true,
      "time": 0.11220836639404297,
      "error": null
    },
    "assert heap_assending([29, 32, 27, 81, 9, 66, 79, 24, 60]) == [9, 24, 27, 29, 32, 60, 66, 79, 81]": {
      "result": true,
      "time": 0.12931275367736816,
      "error": null
    },
    "assert heap_assending([26, 34, 18, 80, 9, 64, 77, 24, 54]) == [9, 18, 24, 26, 34, 54, 64, 77, 80]": {
      "result": true,
      "time": 0.11491274833679199,
      "error": null
    },
    "assert heap_assending([29, 32, 25, 83, 16, 60, 77, 29, 60]) == [16, 25, 29, 29, 32, 60, 60, 77, 83]": {
      "result": true,
      "time": 0.11963915824890137,
      "error": null
    },
    "assert heap_assending([22, 34, 25, 89, 14, 61, 72, 20, 57]) == [14, 20, 22, 25, 34, 57, 61, 72, 89]": {
      "result": true,
      "time": 0.12862396240234375,
      "error": null
    },
    "assert heap_assending([27, 31, 21, 89, 11, 63, 79, 28, 53]) == [11, 21, 27, 28, 31, 53, 63, 79, 89]": {
      "result": true,
      "time": 0.1148369312286377,
      "error": null
    },
    "assert heap_assending([27, 33, 19, 87, 13, 70, 71, 20, 62]) == [13, 19, 20, 27, 33, 62, 70, 71, 87]": {
      "result": true,
      "time": 0.131605863571167,
      "error": null
    },
    "assert heap_assending([26, 38, 24, 80, 12, 68, 76, 22, 61]) == [12, 22, 24, 26, 38, 61, 68, 76, 80]": {
      "result": true,
      "time": 0.12480044364929199,
      "error": null
    },
    "assert heap_assending([22, 37, 17, 86, 9, 60, 80, 22, 59]) == [9, 17, 22, 22, 37, 59, 60, 80, 86]": {
      "result": true,
      "time": 0.14097261428833008,
      "error": null
    },
    "assert heap_assending([21, 35, 19, 88, 17, 65, 75, 20, 56]) == [17, 19, 20, 21, 35, 56, 65, 75, 88]": {
      "result": true,
      "time": 0.10949206352233887,
      "error": null
    },
    "assert heap_assending([25, 33, 22, 86, 10, 63, 78, 25, 54]) == [10, 22, 25, 25, 33, 54, 63, 78, 86]": {
      "result": true,
      "time": 0.10504341125488281,
      "error": null
    },
    "assert heap_assending([29, 40, 27, 83, 14, 61, 80, 24, 60]) == [14, 24, 27, 29, 40, 60, 61, 80, 83]": {
      "result": true,
      "time": 0.12427854537963867,
      "error": null
    },
    "assert heap_assending([25, 36, 23, 90, 14, 63, 76, 25, 57]) == [14, 23, 25, 25, 36, 57, 63, 76, 90]": {
      "result": true,
      "time": 0.12050914764404297,
      "error": null
    },
    "assert heap_assending([27, 31, 25, 81, 15, 63, 79, 25, 55]) == [15, 25, 25, 27, 31, 55, 63, 79, 81]": {
      "result": true,
      "time": 0.1256101131439209,
      "error": null
    },
    "assert heap_assending([20, 37, 27, 89, 13, 62, 72, 26, 54]) == [13, 20, 26, 27, 37, 54, 62, 72, 89]": {
      "result": true,
      "time": 0.1098012924194336,
      "error": null
    },
    "assert heap_assending([21, 33, 27, 82, 14, 69, 77, 29, 58]) == [14, 21, 27, 29, 33, 58, 69, 77, 82]": {
      "result": true,
      "time": 0.11885380744934082,
      "error": null
    },
    "assert heap_assending([28, 32, 17, 90, 15, 62, 78, 26, 53]) == [15, 17, 26, 28, 32, 53, 62, 78, 90]": {
      "result": true,
      "time": 0.12015604972839355,
      "error": null
    },
    "assert heap_assending([26, 40, 18, 89, 18, 68, 70, 29, 60]) == [18, 18, 26, 29, 40, 60, 68, 70, 89]": {
      "result": true,
      "time": 0.12598037719726562,
      "error": null
    },
    "assert heap_assending([26, 40, 20, 90, 15, 65, 75, 28, 53]) == [15, 20, 26, 28, 40, 53, 65, 75, 90]": {
      "result": true,
      "time": 0.11229848861694336,
      "error": null
    },
    "assert heap_assending([23, 38, 21, 83, 17, 65, 80, 30, 55]) == [17, 21, 23, 30, 38, 55, 65, 80, 83]": {
      "result": true,
      "time": 0.12402915954589844,
      "error": null
    },
    "assert heap_assending([29, 37, 18, 90, 15, 64, 70, 20, 57]) == [15, 18, 20, 29, 37, 57, 64, 70, 90]": {
      "result": true,
      "time": 0.12053728103637695,
      "error": null
    },
    "assert heap_assending([4, 2, 4, 3, 13, 6, 9, 1, 7, 5]) == [1, 2, 3, 4, 4, 5, 6, 7, 9, 13]": {
      "result": true,
      "time": 0.10718011856079102,
      "error": null
    },
    "assert heap_assending([1, 4, 6, 7, 6, 6, 6, 8, 5, 5]) == [1, 4, 5, 5, 6, 6, 6, 6, 7, 8]": {
      "result": true,
      "time": 0.12960410118103027,
      "error": null
    },
    "assert heap_assending([6, 1, 2, 8, 4, 4, 2, 11, 4, 1]) == [1, 1, 2, 2, 4, 4, 4, 6, 8, 11]": {
      "result": true,
      "time": 0.1211698055267334,
      "error": null
    },
    "assert heap_assending([5, 4, 2, 6, 6, 3, 2, 11, 11, 1]) == [1, 2, 2, 3, 4, 5, 6, 6, 11, 11]": {
      "result": true,
      "time": 0.13553237915039062,
      "error": null
    },
    "assert heap_assending([2, 6, 5, 5, 13, 7, 8, 6, 5, 3]) == [2, 3, 5, 5, 5, 6, 6, 7, 8, 13]": {
      "result": true,
      "time": 0.1204981803894043,
      "error": null
    },
    "assert heap_assending([2, 7, 3, 12, 9, 4, 6, 1, 5, 2]) == [1, 2, 2, 3, 4, 5, 6, 7, 9, 12]": {
      "result": true,
      "time": 0.1157674789428711,
      "error": null
    },
    "assert heap_assending([2, 6, 6, 8, 4, 5, 1, 6, 13, 2]) == [1, 2, 2, 4, 5, 6, 6, 6, 8, 13]": {
      "result": true,
      "time": 0.11914324760437012,
      "error": null
    },
    "assert heap_assending([1, 7, 9, 12, 14, 4, 1, 1, 5, 1]) == [1, 1, 1, 1, 4, 5, 7, 9, 12, 14]": {
      "result": true,
      "time": 0.12020993232727051,
      "error": null
    },
    "assert heap_assending([5, 3, 10, 7, 12, 2, 9, 5, 9, 4]) == [2, 3, 4, 5, 5, 7, 9, 9, 10, 12]": {
      "result": true,
      "time": 0.1226050853729248,
      "error": null
    },
    "assert heap_assending([5, 6, 4, 8, 11, 6, 5, 3, 12, 1]) == [1, 3, 4, 5, 5, 6, 6, 8, 11, 12]": {
      "result": true,
      "time": 0.13860535621643066,
      "error": null
    },
    "assert heap_assending([5, 6, 2, 7, 10, 4, 4, 4, 9, 4]) == [2, 4, 4, 4, 4, 5, 6, 7, 9, 10]": {
      "result": true,
      "time": 0.11604833602905273,
      "error": null
    },
    "assert heap_assending([5, 2, 2, 3, 13, 3, 5, 9, 9, 2]) == [2, 2, 2, 3, 3, 5, 5, 9, 9, 13]": {
      "result": true,
      "time": 0.1119534969329834,
      "error": null
    },
    "assert heap_assending([3, 5, 8, 8, 6, 3, 3, 10, 6, 4]) == [3, 3, 3, 4, 5, 6, 6, 8, 8, 10]": {
      "result": true,
      "time": 0.12414932250976562,
      "error": null
    },
    "assert heap_assending([1, 3, 9, 5, 7, 1, 1, 5, 13, 2]) == [1, 1, 1, 2, 3, 5, 5, 7, 9, 13]": {
      "result": true,
      "time": 0.12752652168273926,
      "error": null
    },
    "assert heap_assending([4, 5, 7, 4, 7, 3, 1, 3, 8, 4]) == [1, 3, 3, 4, 4, 4, 5, 7, 7, 8]": {
      "result": true,
      "time": 0.12032723426818848,
      "error": null
    },
    "assert heap_assending([1, 5, 10, 10, 5, 6, 8, 11, 13, 4]) == [1, 4, 5, 5, 6, 8, 10, 10, 11, 13]": {
      "result": true,
      "time": 0.1269822120666504,
      "error": null
    },
    "assert heap_assending([5, 7, 7, 11, 12, 1, 2, 8, 11, 1]) == [1, 1, 2, 5, 7, 7, 8, 11, 11, 12]": {
      "result": true,
      "time": 0.12172174453735352,
      "error": null
    },
    "assert heap_assending([2, 5, 6, 12, 13, 6, 4, 5, 13, 5]) == [2, 4, 5, 5, 5, 6, 6, 12, 13, 13]": {
      "result": true,
      "time": 0.11626625061035156,
      "error": null
    },
    "assert heap_assending([5, 5, 1, 8, 7, 2, 8, 1, 6, 4]) == [1, 1, 2, 4, 5, 5, 6, 7, 8, 8]": {
      "result": true,
      "time": 0.11588382720947266,
      "error": null
    },
    "assert heap_assending([3, 1, 6, 6, 7, 3, 5, 2, 11, 1]) == [1, 1, 2, 3, 3, 5, 6, 6, 7, 11]": {
      "result": true,
      "time": 0.11536478996276855,
      "error": null
    },
    "assert heap_assending([1, 6, 1, 8, 10, 1, 6, 10, 4, 5]) == [1, 1, 1, 4, 5, 6, 6, 8, 10, 10]": {
      "result": true,
      "time": 0.1325669288635254,
      "error": null
    },
    "assert heap_assending([6, 7, 3, 5, 5, 3, 3, 4, 3, 2]) == [2, 3, 3, 3, 3, 4, 5, 5, 6, 7]": {
      "result": true,
      "time": 0.12654972076416016,
      "error": null
    },
    "assert heap_assending([5, 8, 6, 9, 5, 5, 3, 3, 10, 4]) == [3, 3, 4, 5, 5, 5, 6, 8, 9, 10]": {
      "result": true,
      "time": 0.1379103660583496,
      "error": null
    },
    "assert heap_assending([4, 1, 1, 9, 14, 7, 1, 3, 7, 2]) == [1, 1, 1, 2, 3, 4, 7, 7, 9, 14]": {
      "result": true,
      "time": 0.13015007972717285,
      "error": null
    },
    "assert heap_assending([5, 6, 9, 2, 10, 3, 6, 2, 9, 2]) == [2, 2, 2, 3, 5, 6, 6, 9, 9, 10]": {
      "result": true,
      "time": 0.11856412887573242,
      "error": null
    },
    "assert heap_assending([4, 5, 7, 2, 13, 3, 3, 10, 12, 5]) == [2, 3, 3, 4, 5, 5, 7, 10, 12, 13]": {
      "result": true,
      "time": 0.1099703311920166,
      "error": null
    },
    "assert heap_assending([2, 5, 2, 11, 10, 1, 3, 11, 9, 1]) == [1, 1, 2, 2, 3, 5, 9, 10, 11, 11]": {
      "result": true,
      "time": 0.11384320259094238,
      "error": null
    },
    "assert heap_assending([2, 1, 10, 7, 7, 3, 6, 7, 5, 5]) == [1, 2, 3, 5, 5, 6, 7, 7, 7, 10]": {
      "result": true,
      "time": 0.13572072982788086,
      "error": null
    },
    "assert heap_assending([2, 8, 7, 5, 11, 4, 5, 5, 6, 3]) == [2, 3, 4, 5, 5, 5, 6, 7, 8, 11]": {
      "result": true,
      "time": 0.11806917190551758,
      "error": null
    },
    "assert heap_assending([6, 7, 2, 3, 5, 5, 9, 9, 5, 4]) == [2, 3, 4, 5, 5, 5, 6, 7, 9, 9]": {
      "result": true,
      "time": 0.1382455825805664,
      "error": null
    },
    "assert heap_assending([2, 2, 6, 11, 8, 7, 8, 5, 12, 2]) == [2, 2, 2, 5, 6, 7, 8, 8, 11, 12]": {
      "result": true,
      "time": 0.12287449836730957,
      "error": null
    },
    "assert heap_assending([5, 1, 8, 3, 10, 4, 3, 3, 13, 1]) == [1, 1, 3, 3, 3, 4, 5, 8, 10, 13]": {
      "result": true,
      "time": 0.12273120880126953,
      "error": null
    },
    "assert heap_assending([6, 7, 8, 12, 5, 6, 4, 6, 8, 2]) == [2, 4, 5, 6, 6, 6, 7, 8, 8, 12]": {
      "result": true,
      "time": 0.13192486763000488,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}