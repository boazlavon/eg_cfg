{
  "code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        product = nums[i] * nums[i + 1]\n        max_product = max(max_product, product)\n    return max_product\n",
  "results": {
    "assert adjacent_num_product([1,2,3,4,5,6]) == 30": {
      "result": true,
      "time": 0.053569793701171875,
      "error": null
    },
    "assert adjacent_num_product([1,2,3,4,5]) == 20": {
      "result": true,
      "time": 0.04761695861816406,
      "error": null
    },
    "assert adjacent_num_product([2,3]) == 6": {
      "result": true,
      "time": 0.04778242111206055,
      "error": null
    },
    "assert adjacent_num_product([1, 3, 3, 9, 4, 8]) == 36": {
      "result": true,
      "time": 0.04387545585632324,
      "error": null
    },
    "assert adjacent_num_product([1, 1, 4, 1, 9, 8]) == 72": {
      "result": true,
      "time": 0.03989863395690918,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 3, 6, 10, 2]) == 60": {
      "result": true,
      "time": 0.036950111389160156,
      "error": null
    },
    "assert adjacent_num_product([2, 6, 8, 6, 3, 6]) == 48": {
      "result": true,
      "time": 0.03831005096435547,
      "error": null
    },
    "assert adjacent_num_product([2, 5, 4, 3, 9, 9]) == 81": {
      "result": true,
      "time": 0.050223588943481445,
      "error": null
    },
    "assert adjacent_num_product([2, 5, 4, 1, 3, 1]) == 20": {
      "result": true,
      "time": 0.042768239974975586,
      "error": null
    },
    "assert adjacent_num_product([3, 4, 4, 2, 6, 4]) == 24": {
      "result": true,
      "time": 0.043021440505981445,
      "error": null
    },
    "assert adjacent_num_product([5, 1, 3, 4, 10, 6]) == 60": {
      "result": true,
      "time": 0.05106186866760254,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 5, 3, 9, 9]) == 81": {
      "result": true,
      "time": 0.0342404842376709,
      "error": null
    },
    "assert adjacent_num_product([3, 1, 4, 3, 5, 1]) == 15": {
      "result": true,
      "time": 0.0451662540435791,
      "error": null
    },
    "assert adjacent_num_product([2, 1, 4, 1, 8, 8]) == 64": {
      "result": true,
      "time": 0.0378878116607666,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 4, 6, 2, 8]) == 24": {
      "result": true,
      "time": 0.03671717643737793,
      "error": null
    },
    "assert adjacent_num_product([2, 1, 7, 4, 1, 4]) == 28": {
      "result": true,
      "time": 0.038326263427734375,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 1, 9, 7, 11]) == 77": {
      "result": true,
      "time": 0.04283761978149414,
      "error": null
    },
    "assert adjacent_num_product([3, 3, 7, 6, 9, 6]) == 54": {
      "result": true,
      "time": 0.04158473014831543,
      "error": null
    },
    "assert adjacent_num_product([1, 3, 5, 7, 1, 1]) == 35": {
      "result": true,
      "time": 0.0435490608215332,
      "error": null
    },
    "assert adjacent_num_product([4, 2, 8, 4, 8, 4]) == 32": {
      "result": true,
      "time": 0.03577566146850586,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 7, 9, 2, 3]) == 63": {
      "result": true,
      "time": 0.034208059310913086,
      "error": null
    },
    "assert adjacent_num_product([1, 2, 5, 5, 8, 3]) == 40": {
      "result": true,
      "time": 0.04229235649108887,
      "error": null
    },
    "assert adjacent_num_product([6, 6, 6, 6, 2, 1]) == 36": {
      "result": true,
      "time": 0.03977775573730469,
      "error": null
    },
    "assert adjacent_num_product([1, 7, 4, 5, 7, 11]) == 77": {
      "result": true,
      "time": 0.053800344467163086,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 4, 6, 1, 2]) == 24": {
      "result": true,
      "time": 0.04645705223083496,
      "error": null
    },
    "assert adjacent_num_product([5, 2, 1, 4, 8, 10]) == 80": {
      "result": true,
      "time": 0.03834080696105957,
      "error": null
    },
    "assert adjacent_num_product([1, 6, 3, 3, 4, 3]) == 18": {
      "result": true,
      "time": 0.03861713409423828,
      "error": null
    },
    "assert adjacent_num_product([3, 3, 4, 2, 6, 10]) == 60": {
      "result": true,
      "time": 0.04099321365356445,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 8, 7, 10, 1]) == 70": {
      "result": true,
      "time": 0.0442352294921875,
      "error": null
    },
    "assert adjacent_num_product([6, 4, 2, 7, 5, 9]) == 45": {
      "result": true,
      "time": 0.04661870002746582,
      "error": null
    },
    "assert adjacent_num_product([3, 7, 5, 3, 4, 2]) == 35": {
      "result": true,
      "time": 0.03947186470031738,
      "error": null
    },
    "assert adjacent_num_product([2, 1, 6, 1, 5, 9]) == 45": {
      "result": true,
      "time": 0.04004788398742676,
      "error": null
    },
    "assert adjacent_num_product([2, 2, 1, 6, 3, 8]) == 24": {
      "result": true,
      "time": 0.04951119422912598,
      "error": null
    },
    "assert adjacent_num_product([3, 4, 4, 4, 2, 3]) == 16": {
      "result": true,
      "time": 0.044855356216430664,
      "error": null
    },
    "assert adjacent_num_product([6, 5, 5, 8, 9, 11]) == 99": {
      "result": true,
      "time": 0.04317927360534668,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 1, 3, 9, 9]) == 81": {
      "result": true,
      "time": 0.04199838638305664,
      "error": null
    },
    "assert adjacent_num_product([5, 1, 1, 9, 4]) == 36": {
      "result": true,
      "time": 0.04279971122741699,
      "error": null
    },
    "assert adjacent_num_product([3, 7, 8, 4, 5]) == 56": {
      "result": true,
      "time": 0.04680371284484863,
      "error": null
    },
    "assert adjacent_num_product([1, 7, 1, 9, 1]) == 9": {
      "result": true,
      "time": 0.04378342628479004,
      "error": null
    },
    "assert adjacent_num_product([3, 7, 1, 3, 5]) == 21": {
      "result": true,
      "time": 0.045499324798583984,
      "error": null
    },
    "assert adjacent_num_product([1, 3, 3, 1, 5]) == 9": {
      "result": true,
      "time": 0.04862809181213379,
      "error": null
    },
    "assert adjacent_num_product([1, 2, 4, 4, 5]) == 20": {
      "result": true,
      "time": 0.04533791542053223,
      "error": null
    },
    "assert adjacent_num_product([5, 6, 7, 8, 2]) == 56": {
      "result": true,
      "time": 0.04223203659057617,
      "error": null
    },
    "assert adjacent_num_product([3, 6, 8, 8, 5]) == 64": {
      "result": true,
      "time": 0.041683197021484375,
      "error": null
    },
    "assert adjacent_num_product([5, 1, 7, 1, 8]) == 8": {
      "result": true,
      "time": 0.03969717025756836,
      "error": null
    },
    "assert adjacent_num_product([5, 6, 8, 2, 5]) == 48": {
      "result": true,
      "time": 0.044402360916137695,
      "error": null
    },
    "assert adjacent_num_product([5, 5, 5, 9, 8]) == 72": {
      "result": true,
      "time": 0.04401230812072754,
      "error": null
    },
    "assert adjacent_num_product([4, 2, 4, 4, 3]) == 16": {
      "result": true,
      "time": 0.03326296806335449,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 3, 8, 2]) == 24": {
      "result": true,
      "time": 0.04184150695800781,
      "error": null
    },
    "assert adjacent_num_product([6, 3, 4, 7, 7]) == 49": {
      "result": true,
      "time": 0.05178260803222656,
      "error": null
    },
    "assert adjacent_num_product([6, 5, 4, 6, 3]) == 30": {
      "result": true,
      "time": 0.04872536659240723,
      "error": null
    },
    "assert adjacent_num_product([2, 4, 5, 1, 8]) == 20": {
      "result": true,
      "time": 0.049724578857421875,
      "error": null
    },
    "assert adjacent_num_product([6, 2, 2, 4, 4]) == 16": {
      "result": true,
      "time": 0.041049957275390625,
      "error": null
    },
    "assert adjacent_num_product([4, 6, 2, 1, 1]) == 24": {
      "result": true,
      "time": 0.04372096061706543,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 4, 5, 2]) == 20": {
      "result": true,
      "time": 0.03945565223693848,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 4, 9, 10]) == 90": {
      "result": true,
      "time": 0.048012733459472656,
      "error": null
    },
    "assert adjacent_num_product([2, 7, 5, 7, 1]) == 35": {
      "result": true,
      "time": 0.03747057914733887,
      "error": null
    },
    "assert adjacent_num_product([1, 1, 3, 9, 7]) == 63": {
      "result": true,
      "time": 0.0378110408782959,
      "error": null
    },
    "assert adjacent_num_product([1, 1, 2, 8, 1]) == 16": {
      "result": true,
      "time": 0.039877891540527344,
      "error": null
    },
    "assert adjacent_num_product([4, 4, 2, 1, 5]) == 16": {
      "result": true,
      "time": 0.04404044151306152,
      "error": null
    },
    "assert adjacent_num_product([4, 5, 4, 2, 3]) == 20": {
      "result": true,
      "time": 0.038515329360961914,
      "error": null
    },
    "assert adjacent_num_product([6, 6, 5, 5, 4]) == 36": {
      "result": true,
      "time": 0.03912711143493652,
      "error": null
    },
    "assert adjacent_num_product([6, 7, 7, 6, 1]) == 49": {
      "result": true,
      "time": 0.04324698448181152,
      "error": null
    },
    "assert adjacent_num_product([5, 2, 7, 2, 8]) == 16": {
      "result": true,
      "time": 0.041893959045410156,
      "error": null
    },
    "assert adjacent_num_product([5, 7, 5, 7, 2]) == 35": {
      "result": true,
      "time": 0.04826498031616211,
      "error": null
    },
    "assert adjacent_num_product([6, 2, 8, 8, 4]) == 64": {
      "result": true,
      "time": 0.0405428409576416,
      "error": null
    },
    "assert adjacent_num_product([1, 4, 6, 5, 5]) == 30": {
      "result": true,
      "time": 0.04403543472290039,
      "error": null
    },
    "assert adjacent_num_product([4, 7, 4, 9, 3]) == 36": {
      "result": true,
      "time": 0.03839898109436035,
      "error": null
    },
    "assert adjacent_num_product([2, 3, 8, 1, 3]) == 24": {
      "result": true,
      "time": 0.04306983947753906,
      "error": null
    },
    "assert adjacent_num_product([3, 6]) == 18": {
      "result": true,
      "time": 0.04507756233215332,
      "error": null
    },
    "assert adjacent_num_product([5, 7]) == 35": {
      "result": true,
      "time": 0.045755624771118164,
      "error": null
    },
    "assert adjacent_num_product([3, 5]) == 15": {
      "result": true,
      "time": 0.041942596435546875,
      "error": null
    },
    "assert adjacent_num_product([6, 3]) == 18": {
      "result": true,
      "time": 0.042791128158569336,
      "error": null
    },
    "assert adjacent_num_product([2, 5]) == 10": {
      "result": true,
      "time": 0.043906211853027344,
      "error": null
    },
    "assert adjacent_num_product([7, 3]) == 21": {
      "result": true,
      "time": 0.033957719802856445,
      "error": null
    },
    "assert adjacent_num_product([6, 8]) == 48": {
      "result": true,
      "time": 0.03899812698364258,
      "error": null
    },
    "assert adjacent_num_product([2, 3]) == 6": {
      "result": true,
      "time": 0.054350852966308594,
      "error": null
    },
    "assert adjacent_num_product([2, 8]) == 16": {
      "result": true,
      "time": 0.04352617263793945,
      "error": null
    },
    "assert adjacent_num_product([3, 2]) == 6": {
      "result": true,
      "time": 0.043474435806274414,
      "error": null
    },
    "assert adjacent_num_product([2, 1]) == 2": {
      "result": true,
      "time": 0.05052042007446289,
      "error": null
    },
    "assert adjacent_num_product([2, 4]) == 8": {
      "result": true,
      "time": 0.053429365158081055,
      "error": null
    },
    "assert adjacent_num_product([6, 6]) == 36": {
      "result": true,
      "time": 0.04189038276672363,
      "error": null
    },
    "assert adjacent_num_product([5, 1]) == 5": {
      "result": true,
      "time": 0.04569697380065918,
      "error": null
    },
    "assert adjacent_num_product([4, 8]) == 32": {
      "result": true,
      "time": 0.044649362564086914,
      "error": null
    },
    "assert adjacent_num_product([3, 3]) == 9": {
      "result": true,
      "time": 0.04651308059692383,
      "error": null
    },
    "assert adjacent_num_product([4, 6]) == 24": {
      "result": true,
      "time": 0.05289626121520996,
      "error": null
    },
    "assert adjacent_num_product([1, 5]) == 5": {
      "result": true,
      "time": 0.04123210906982422,
      "error": null
    },
    "assert adjacent_num_product([5, 4]) == 20": {
      "result": true,
      "time": 0.05498170852661133,
      "error": null
    },
    "assert adjacent_num_product([7, 5]) == 35": {
      "result": true,
      "time": 0.03982234001159668,
      "error": null
    },
    "assert adjacent_num_product([7, 6]) == 42": {
      "result": true,
      "time": 0.04136466979980469,
      "error": null
    },
    "assert adjacent_num_product([1, 1]) == 1": {
      "result": true,
      "time": 0.045440673828125,
      "error": null
    },
    "assert adjacent_num_product([1, 8]) == 8": {
      "result": true,
      "time": 0.05126357078552246,
      "error": null
    },
    "assert adjacent_num_product([2, 7]) == 14": {
      "result": true,
      "time": 0.04845428466796875,
      "error": null
    },
    "assert adjacent_num_product([3, 4]) == 12": {
      "result": true,
      "time": 0.04463696479797363,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}