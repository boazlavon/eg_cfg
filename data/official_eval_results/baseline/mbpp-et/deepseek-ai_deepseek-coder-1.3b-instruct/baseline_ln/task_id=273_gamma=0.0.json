{
  "code": "def substract_elements(tup1, tup2):\n    return tuple(i - j for i, j in zip(tup1, tup2))\n",
  "results": {
    "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)": {
      "result": true,
      "time": 0.04320359230041504,
      "error": null
    },
    "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)": {
      "result": true,
      "time": 0.04171633720397949,
      "error": null
    },
    "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)": {
      "result": true,
      "time": 0.04227423667907715,
      "error": null
    },
    "assert substract_elements((12, 5, 8), (1, 1, 13)) == (11, 4, -5)": {
      "result": true,
      "time": 0.03636360168457031,
      "error": null
    },
    "assert substract_elements((10, 3, 5), (2, 10, 21)) == (8, -7, -16)": {
      "result": true,
      "time": 0.036939382553100586,
      "error": null
    },
    "assert substract_elements((9, 2, 1), (2, 8, 19)) == (7, -6, -18)": {
      "result": true,
      "time": 0.046956539154052734,
      "error": null
    },
    "assert substract_elements((15, 4, 4), (1, 9, 23)) == (14, -5, -19)": {
      "result": true,
      "time": 0.04010891914367676,
      "error": null
    },
    "assert substract_elements((7, 5, 10), (3, 1, 20)) == (4, 4, -10)": {
      "result": true,
      "time": 0.055376291275024414,
      "error": null
    },
    "assert substract_elements((13, 1, 8), (1, 1, 23)) == (12, 0, -15)": {
      "result": true,
      "time": 0.03531503677368164,
      "error": null
    },
    "assert substract_elements((8, 4, 2), (7, 1, 21)) == (1, 3, -19)": {
      "result": true,
      "time": 0.045868635177612305,
      "error": null
    },
    "assert substract_elements((12, 3, 2), (5, 3, 22)) == (7, 0, -20)": {
      "result": true,
      "time": 0.03618335723876953,
      "error": null
    },
    "assert substract_elements((15, 8, 4), (5, 2, 20)) == (10, 6, -16)": {
      "result": true,
      "time": 0.04568743705749512,
      "error": null
    },
    "assert substract_elements((6, 3, 6), (4, 5, 16)) == (2, -2, -10)": {
      "result": true,
      "time": 0.04027700424194336,
      "error": null
    },
    "assert substract_elements((8, 9, 9), (7, 5, 16)) == (1, 4, -7)": {
      "result": true,
      "time": 0.03630423545837402,
      "error": null
    },
    "assert substract_elements((13, 6, 10), (3, 6, 23)) == (10, 0, -13)": {
      "result": true,
      "time": 0.04472064971923828,
      "error": null
    },
    "assert substract_elements((11, 7, 10), (1, 4, 23)) == (10, 3, -13)": {
      "result": true,
      "time": 0.03813815116882324,
      "error": null
    },
    "assert substract_elements((10, 8, 8), (4, 4, 16)) == (6, 4, -8)": {
      "result": true,
      "time": 0.04513883590698242,
      "error": null
    },
    "assert substract_elements((8, 3, 2), (1, 2, 14)) == (7, 1, -12)": {
      "result": true,
      "time": 0.04508781433105469,
      "error": null
    },
    "assert substract_elements((10, 4, 1), (1, 1, 23)) == (9, 3, -22)": {
      "result": true,
      "time": 0.04561114311218262,
      "error": null
    },
    "assert substract_elements((9, 7, 1), (2, 7, 19)) == (7, 0, -18)": {
      "result": true,
      "time": 0.041708946228027344,
      "error": null
    },
    "assert substract_elements((10, 6, 3), (4, 2, 19)) == (6, 4, -16)": {
      "result": true,
      "time": 0.04510235786437988,
      "error": null
    },
    "assert substract_elements((10, 4, 5), (6, 4, 18)) == (4, 0, -13)": {
      "result": true,
      "time": 0.03644084930419922,
      "error": null
    },
    "assert substract_elements((6, 8, 1), (3, 1, 16)) == (3, 7, -15)": {
      "result": true,
      "time": 0.03383493423461914,
      "error": null
    },
    "assert substract_elements((8, 1, 1), (3, 10, 16)) == (5, -9, -15)": {
      "result": true,
      "time": 0.04100751876831055,
      "error": null
    },
    "assert substract_elements((11, 7, 1), (2, 3, 13)) == (9, 4, -12)": {
      "result": true,
      "time": 0.04344034194946289,
      "error": null
    },
    "assert substract_elements((5, 8, 5), (2, 7, 22)) == (3, 1, -17)": {
      "result": true,
      "time": 0.03713226318359375,
      "error": null
    },
    "assert substract_elements((14, 4, 2), (6, 4, 18)) == (8, 0, -16)": {
      "result": true,
      "time": 0.0441586971282959,
      "error": null
    },
    "assert substract_elements((10, 2, 9), (6, 5, 15)) == (4, -3, -6)": {
      "result": true,
      "time": 0.046646833419799805,
      "error": null
    },
    "assert substract_elements((5, 5, 3), (1, 6, 16)) == (4, -1, -13)": {
      "result": true,
      "time": 0.03804135322570801,
      "error": null
    },
    "assert substract_elements((5, 3, 2), (6, 4, 13)) == (-1, -1, -11)": {
      "result": true,
      "time": 0.039118051528930664,
      "error": null
    },
    "assert substract_elements((6, 9, 1), (7, 3, 19)) == (-1, 6, -18)": {
      "result": true,
      "time": 0.04697394371032715,
      "error": null
    },
    "assert substract_elements((11, 1, 5), (5, 6, 13)) == (6, -5, -8)": {
      "result": true,
      "time": 0.04365897178649902,
      "error": null
    },
    "assert substract_elements((7, 3, 4), (3, 3, 22)) == (4, 0, -18)": {
      "result": true,
      "time": 0.034921884536743164,
      "error": null
    },
    "assert substract_elements((11, 2, 1), (1, 9, 23)) == (10, -7, -22)": {
      "result": true,
      "time": 0.045287370681762695,
      "error": null
    },
    "assert substract_elements((8, 7, 7), (7, 6, 22)) == (1, 1, -15)": {
      "result": true,
      "time": 0.04267263412475586,
      "error": null
    },
    "assert substract_elements((8, 8, 3), (5, 1, 21)) == (3, 7, -18)": {
      "result": true,
      "time": 0.041071176528930664,
      "error": null
    },
    "assert substract_elements((13, 5, 1), (29, 40, 20)) == (-16, -35, -19)": {
      "result": true,
      "time": 0.04287290573120117,
      "error": null
    },
    "assert substract_elements((11, 4, 5), (21, 44, 21)) == (-10, -40, -16)": {
      "result": true,
      "time": 0.03951573371887207,
      "error": null
    },
    "assert substract_elements((7, 3, 6), (21, 41, 19)) == (-14, -38, -13)": {
      "result": true,
      "time": 0.04166388511657715,
      "error": null
    },
    "assert substract_elements((9, 1, 7), (23, 42, 17)) == (-14, -41, -10)": {
      "result": true,
      "time": 0.04104757308959961,
      "error": null
    },
    "assert substract_elements((15, 5, 7), (20, 50, 17)) == (-5, -45, -10)": {
      "result": true,
      "time": 0.04484868049621582,
      "error": null
    },
    "assert substract_elements((8, 2, 8), (27, 50, 18)) == (-19, -48, -10)": {
      "result": true,
      "time": 0.04512333869934082,
      "error": null
    },
    "assert substract_elements((16, 2, 2), (23, 43, 16)) == (-7, -41, -14)": {
      "result": true,
      "time": 0.041544198989868164,
      "error": null
    },
    "assert substract_elements((13, 5, 1), (21, 41, 19)) == (-8, -36, -18)": {
      "result": true,
      "time": 0.03567981719970703,
      "error": null
    },
    "assert substract_elements((15, 1, 7), (19, 47, 16)) == (-4, -46, -9)": {
      "result": true,
      "time": 0.04161572456359863,
      "error": null
    },
    "assert substract_elements((7, 6, 4), (24, 42, 15)) == (-17, -36, -11)": {
      "result": true,
      "time": 0.04703521728515625,
      "error": null
    },
    "assert substract_elements((14, 3, 8), (20, 48, 14)) == (-6, -45, -6)": {
      "result": true,
      "time": 0.03330826759338379,
      "error": null
    },
    "assert substract_elements((9, 5, 4), (19, 45, 21)) == (-10, -40, -17)": {
      "result": true,
      "time": 0.038361310958862305,
      "error": null
    },
    "assert substract_elements((7, 2, 2), (20, 42, 11)) == (-13, -40, -9)": {
      "result": true,
      "time": 0.04519391059875488,
      "error": null
    },
    "assert substract_elements((13, 5, 3), (24, 45, 20)) == (-11, -40, -17)": {
      "result": true,
      "time": 0.04103517532348633,
      "error": null
    },
    "assert substract_elements((8, 4, 2), (27, 45, 11)) == (-19, -41, -9)": {
      "result": true,
      "time": 0.03988337516784668,
      "error": null
    },
    "assert substract_elements((11, 6, 2), (22, 49, 18)) == (-11, -43, -16)": {
      "result": true,
      "time": 0.04171347618103027,
      "error": null
    },
    "assert substract_elements((9, 6, 3), (26, 42, 14)) == (-17, -36, -11)": {
      "result": true,
      "time": 0.04101133346557617,
      "error": null
    },
    "assert substract_elements((12, 5, 7), (20, 48, 14)) == (-8, -43, -7)": {
      "result": true,
      "time": 0.04912734031677246,
      "error": null
    },
    "assert substract_elements((16, 3, 8), (20, 43, 14)) == (-4, -40, -6)": {
      "result": true,
      "time": 0.04482150077819824,
      "error": null
    },
    "assert substract_elements((10, 7, 5), (19, 45, 15)) == (-9, -38, -10)": {
      "result": true,
      "time": 0.039052724838256836,
      "error": null
    },
    "assert substract_elements((13, 2, 7), (20, 48, 20)) == (-7, -46, -13)": {
      "result": true,
      "time": 0.043433189392089844,
      "error": null
    },
    "assert substract_elements((6, 5, 5), (26, 43, 14)) == (-20, -38, -9)": {
      "result": true,
      "time": 0.03566408157348633,
      "error": null
    },
    "assert substract_elements((9, 4, 4), (28, 40, 15)) == (-19, -36, -11)": {
      "result": true,
      "time": 0.03144121170043945,
      "error": null
    },
    "assert substract_elements((11, 7, 2), (29, 50, 18)) == (-18, -43, -16)": {
      "result": true,
      "time": 0.036195993423461914,
      "error": null
    },
    "assert substract_elements((6, 1, 5), (27, 45, 20)) == (-21, -44, -15)": {
      "result": true,
      "time": 0.03777456283569336,
      "error": null
    },
    "assert substract_elements((15, 2, 3), (25, 46, 17)) == (-10, -44, -14)": {
      "result": true,
      "time": 0.0410161018371582,
      "error": null
    },
    "assert substract_elements((8, 7, 6), (20, 49, 12)) == (-12, -42, -6)": {
      "result": true,
      "time": 0.03643536567687988,
      "error": null
    },
    "assert substract_elements((9, 6, 4), (25, 45, 15)) == (-16, -39, -11)": {
      "result": true,
      "time": 0.03419065475463867,
      "error": null
    },
    "assert substract_elements((13, 1, 3), (25, 40, 20)) == (-12, -39, -17)": {
      "result": true,
      "time": 0.0372319221496582,
      "error": null
    },
    "assert substract_elements((16, 7, 1), (21, 46, 12)) == (-5, -39, -11)": {
      "result": true,
      "time": 0.036428213119506836,
      "error": null
    },
    "assert substract_elements((15, 5, 5), (29, 47, 16)) == (-14, -42, -11)": {
      "result": true,
      "time": 0.0395808219909668,
      "error": null
    },
    "assert substract_elements((14, 5, 8), (21, 45, 21)) == (-7, -40, -13)": {
      "result": true,
      "time": 0.049009084701538086,
      "error": null
    },
    "assert substract_elements((15, 1, 4), (29, 46, 13)) == (-14, -45, -9)": {
      "result": true,
      "time": 0.03592109680175781,
      "error": null
    },
    "assert substract_elements((8, 21, 12), (11, 13, 12)) == (-3, 8, 0)": {
      "result": true,
      "time": 0.04147458076477051,
      "error": null
    },
    "assert substract_elements((2, 16, 5), (11, 11, 16)) == (-9, 5, -11)": {
      "result": true,
      "time": 0.03212118148803711,
      "error": null
    },
    "assert substract_elements((6, 15, 12), (9, 8, 13)) == (-3, 7, -1)": {
      "result": true,
      "time": 0.0461881160736084,
      "error": null
    },
    "assert substract_elements((6, 21, 4), (15, 12, 7)) == (-9, 9, -3)": {
      "result": true,
      "time": 0.03926515579223633,
      "error": null
    },
    "assert substract_elements((6, 20, 12), (12, 15, 11)) == (-6, 5, 1)": {
      "result": true,
      "time": 0.043079376220703125,
      "error": null
    },
    "assert substract_elements((7, 17, 4), (11, 12, 15)) == (-4, 5, -11)": {
      "result": true,
      "time": 0.048072099685668945,
      "error": null
    },
    "assert substract_elements((3, 16, 12), (15, 14, 13)) == (-12, 2, -1)": {
      "result": true,
      "time": 0.03882932662963867,
      "error": null
    },
    "assert substract_elements((5, 13, 4), (7, 7, 12)) == (-2, 6, -8)": {
      "result": true,
      "time": 0.04975438117980957,
      "error": null
    },
    "assert substract_elements((3, 14, 4), (10, 12, 9)) == (-7, 2, -5)": {
      "result": true,
      "time": 0.03961348533630371,
      "error": null
    },
    "assert substract_elements((6, 15, 12), (14, 14, 12)) == (-8, 1, 0)": {
      "result": true,
      "time": 0.041016578674316406,
      "error": null
    },
    "assert substract_elements((11, 20, 6), (15, 6, 11)) == (-4, 14, -5)": {
      "result": true,
      "time": 0.037059783935546875,
      "error": null
    },
    "assert substract_elements((2, 14, 11), (9, 10, 13)) == (-7, 4, -2)": {
      "result": true,
      "time": 0.04192495346069336,
      "error": null
    },
    "assert substract_elements((9, 23, 5), (10, 12, 14)) == (-1, 11, -9)": {
      "result": true,
      "time": 0.04181981086730957,
      "error": null
    },
    "assert substract_elements((6, 19, 10), (15, 6, 8)) == (-9, 13, 2)": {
      "result": true,
      "time": 0.05137491226196289,
      "error": null
    },
    "assert substract_elements((2, 20, 9), (5, 6, 8)) == (-3, 14, 1)": {
      "result": true,
      "time": 0.03616690635681152,
      "error": null
    },
    "assert substract_elements((11, 23, 11), (14, 7, 7)) == (-3, 16, 4)": {
      "result": true,
      "time": 0.050662994384765625,
      "error": null
    },
    "assert substract_elements((9, 13, 12), (11, 11, 14)) == (-2, 2, -2)": {
      "result": true,
      "time": 0.04477405548095703,
      "error": null
    },
    "assert substract_elements((2, 22, 14), (13, 16, 8)) == (-11, 6, 6)": {
      "result": true,
      "time": 0.042768001556396484,
      "error": null
    },
    "assert substract_elements((2, 17, 11), (7, 10, 10)) == (-5, 7, 1)": {
      "result": true,
      "time": 0.042825937271118164,
      "error": null
    },
    "assert substract_elements((9, 16, 4), (6, 12, 9)) == (3, 4, -5)": {
      "result": true,
      "time": 0.04456496238708496,
      "error": null
    },
    "assert substract_elements((8, 22, 12), (6, 15, 17)) == (2, 7, -5)": {
      "result": true,
      "time": 0.04576826095581055,
      "error": null
    },
    "assert substract_elements((7, 17, 13), (9, 9, 8)) == (-2, 8, 5)": {
      "result": true,
      "time": 0.03802990913391113,
      "error": null
    },
    "assert substract_elements((12, 18, 7), (5, 12, 11)) == (7, 6, -4)": {
      "result": true,
      "time": 0.042586565017700195,
      "error": null
    },
    "assert substract_elements((8, 20, 8), (5, 9, 15)) == (3, 11, -7)": {
      "result": true,
      "time": 0.044840097427368164,
      "error": null
    },
    "assert substract_elements((12, 18, 4), (6, 11, 9)) == (6, 7, -5)": {
      "result": true,
      "time": 0.04258584976196289,
      "error": null
    },
    "assert substract_elements((9, 19, 10), (15, 7, 10)) == (-6, 12, 0)": {
      "result": true,
      "time": 0.04101133346557617,
      "error": null
    },
    "assert substract_elements((2, 20, 9), (9, 14, 11)) == (-7, 6, -2)": {
      "result": true,
      "time": 0.03941226005554199,
      "error": null
    },
    "assert substract_elements((11, 15, 5), (11, 12, 16)) == (0, 3, -11)": {
      "result": true,
      "time": 0.04476118087768555,
      "error": null
    },
    "assert substract_elements((5, 13, 12), (10, 8, 10)) == (-5, 5, 2)": {
      "result": true,
      "time": 0.04041457176208496,
      "error": null
    },
    "assert substract_elements((5, 16, 10), (7, 10, 7)) == (-2, 6, 3)": {
      "result": true,
      "time": 0.03843951225280762,
      "error": null
    },
    "assert substract_elements((2, 15, 13), (10, 11, 17)) == (-8, 4, -4)": {
      "result": true,
      "time": 0.03910017013549805,
      "error": null
    },
    "assert substract_elements((11, 18, 9), (13, 8, 7)) == (-2, 10, 2)": {
      "result": true,
      "time": 0.04516482353210449,
      "error": null
    },
    "assert substract_elements((8, 17, 6), (9, 7, 12)) == (-1, 10, -6)": {
      "result": true,
      "time": 0.038248538970947266,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}