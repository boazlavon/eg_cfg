{
  "code": "def split_two_parts(lst, part_len):\n    return (lst[:part_len], lst[part_len:])\n",
  "results": {
    "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])": {
      "result": true,
      "time": 0.047300100326538086,
      "error": null
    },
    "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])": {
      "result": true,
      "time": 0.04200387001037598,
      "error": null
    },
    "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])": {
      "result": true,
      "time": 0.042378902435302734,
      "error": null
    },
    "assert split_two_parts([5, 2, 7, 2, 9, 4, 3, 1], 2) == ([5, 2], [7, 2, 9, 4, 3, 1])": {
      "result": true,
      "time": 0.041191816329956055,
      "error": null
    },
    "assert split_two_parts([1, 4, 4, 6, 8, 2, 7, 1], 4) == ([1, 4, 4, 6], [8, 2, 7, 1])": {
      "result": true,
      "time": 0.04616284370422363,
      "error": null
    },
    "assert split_two_parts([1, 3, 1, 5, 2, 8, 9, 3], 6) == ([1, 3, 1, 5, 2, 8], [9, 3])": {
      "result": true,
      "time": 0.041596174240112305,
      "error": null
    },
    "assert split_two_parts([5, 3, 4, 1, 1, 7, 9, 3], 3) == ([5, 3, 4], [1, 1, 7, 9, 3])": {
      "result": true,
      "time": 0.04654431343078613,
      "error": null
    },
    "assert split_two_parts([2, 1, 1, 7, 7, 4, 8, 6], 6) == ([2, 1, 1, 7, 7, 4], [8, 6])": {
      "result": true,
      "time": 0.03739571571350098,
      "error": null
    },
    "assert split_two_parts([4, 3, 5, 1, 1, 7, 2, 5], 7) == ([4, 3, 5, 1, 1, 7, 2], [5])": {
      "result": true,
      "time": 0.044017791748046875,
      "error": null
    },
    "assert split_two_parts([1, 2, 3, 2, 5, 6, 1, 4], 1) == ([1], [2, 3, 2, 5, 6, 1, 4])": {
      "result": true,
      "time": 0.04303383827209473,
      "error": null
    },
    "assert split_two_parts([6, 2, 7, 1, 3, 3, 8, 3], 2) == ([6, 2], [7, 1, 3, 3, 8, 3])": {
      "result": true,
      "time": 0.04138302803039551,
      "error": null
    },
    "assert split_two_parts([1, 3, 5, 5, 6, 3, 5, 4], 8) == ([1, 3, 5, 5, 6, 3, 5, 4], [])": {
      "result": true,
      "time": 0.03986692428588867,
      "error": null
    },
    "assert split_two_parts([4, 1, 3, 3, 6, 7, 7, 3], 1) == ([4], [1, 3, 3, 6, 7, 7, 3])": {
      "result": true,
      "time": 0.0416712760925293,
      "error": null
    },
    "assert split_two_parts([4, 1, 5, 4, 4, 6, 1, 3], 4) == ([4, 1, 5, 4], [4, 6, 1, 3])": {
      "result": true,
      "time": 0.0379331111907959,
      "error": null
    },
    "assert split_two_parts([6, 1, 5, 4, 9, 9, 3, 6], 5) == ([6, 1, 5, 4, 9], [9, 3, 6])": {
      "result": true,
      "time": 0.038184165954589844,
      "error": null
    },
    "assert split_two_parts([2, 4, 7, 3, 5, 7, 4, 4], 5) == ([2, 4, 7, 3, 5], [7, 4, 4])": {
      "result": true,
      "time": 0.06506562232971191,
      "error": null
    },
    "assert split_two_parts([3, 6, 5, 3, 4, 7, 4, 4], 3) == ([3, 6, 5], [3, 4, 7, 4, 4])": {
      "result": true,
      "time": 0.05632805824279785,
      "error": null
    },
    "assert split_two_parts([2, 2, 7, 5, 6, 9, 10, 3], 8) == ([2, 2, 7, 5, 6, 9, 10, 3], [])": {
      "result": true,
      "time": 0.04813218116760254,
      "error": null
    },
    "assert split_two_parts([3, 4, 1, 7, 1, 9, 5, 4], 8) == ([3, 4, 1, 7, 1, 9, 5, 4], [])": {
      "result": true,
      "time": 0.06531667709350586,
      "error": null
    },
    "assert split_two_parts([3, 2, 2, 2, 6, 1, 7, 2], 1) == ([3], [2, 2, 2, 6, 1, 7, 2])": {
      "result": true,
      "time": 0.044838666915893555,
      "error": null
    },
    "assert split_two_parts([3, 6, 3, 4, 7, 5, 9, 4], 8) == ([3, 6, 3, 4, 7, 5, 9, 4], [])": {
      "result": true,
      "time": 0.05411720275878906,
      "error": null
    },
    "assert split_two_parts([2, 5, 3, 4, 6, 6, 6, 3], 4) == ([2, 5, 3, 4], [6, 6, 6, 3])": {
      "result": true,
      "time": 0.05494809150695801,
      "error": null
    },
    "assert split_two_parts([3, 4, 2, 1, 1, 3, 7, 1], 7) == ([3, 4, 2, 1, 1, 3, 7], [1])": {
      "result": true,
      "time": 0.04671025276184082,
      "error": null
    },
    "assert split_two_parts([3, 4, 1, 6, 4, 6, 8, 2], 5) == ([3, 4, 1, 6, 4], [6, 8, 2])": {
      "result": true,
      "time": 0.045369625091552734,
      "error": null
    },
    "assert split_two_parts([1, 1, 6, 3, 2, 3, 6, 1], 6) == ([1, 1, 6, 3, 2, 3], [6, 1])": {
      "result": true,
      "time": 0.050284385681152344,
      "error": null
    },
    "assert split_two_parts([5, 1, 4, 5, 5, 6, 2, 1], 6) == ([5, 1, 4, 5, 5, 6], [2, 1])": {
      "result": true,
      "time": 0.04257535934448242,
      "error": null
    },
    "assert split_two_parts([5, 1, 5, 6, 6, 6, 8, 6], 3) == ([5, 1, 5], [6, 6, 6, 8, 6])": {
      "result": true,
      "time": 0.04991340637207031,
      "error": null
    },
    "assert split_two_parts([2, 1, 7, 3, 3, 4, 9, 2], 2) == ([2, 1], [7, 3, 3, 4, 9, 2])": {
      "result": true,
      "time": 0.04694557189941406,
      "error": null
    },
    "assert split_two_parts([6, 3, 7, 4, 8, 5, 1, 4], 4) == ([6, 3, 7, 4], [8, 5, 1, 4])": {
      "result": true,
      "time": 0.05991530418395996,
      "error": null
    },
    "assert split_two_parts([1, 3, 5, 2, 6, 6, 6, 2], 6) == ([1, 3, 5, 2, 6, 6], [6, 2])": {
      "result": true,
      "time": 0.04709267616271973,
      "error": null
    },
    "assert split_two_parts([1, 5, 4, 4, 7, 3, 2, 6], 4) == ([1, 5, 4, 4], [7, 3, 2, 6])": {
      "result": true,
      "time": 0.0531308650970459,
      "error": null
    },
    "assert split_two_parts([3, 5, 2, 8, 8, 4, 2, 3], 5) == ([3, 5, 2, 8, 8], [4, 2, 3])": {
      "result": true,
      "time": 0.049987077713012695,
      "error": null
    },
    "assert split_two_parts([3, 6, 6, 4, 4, 8, 4, 2], 5) == ([3, 6, 6, 4, 4], [8, 4, 2])": {
      "result": true,
      "time": 0.04927396774291992,
      "error": null
    },
    "assert split_two_parts([2, 5, 3, 6, 7, 3, 10, 5], 7) == ([2, 5, 3, 6, 7, 3, 10], [5])": {
      "result": true,
      "time": 0.06056809425354004,
      "error": null
    },
    "assert split_two_parts([3, 5, 3, 2, 1, 9, 1, 6], 5) == ([3, 5, 3, 2, 1], [9, 1, 6])": {
      "result": true,
      "time": 0.05149698257446289,
      "error": null
    },
    "assert split_two_parts([6, 3, 4, 8, 4, 2, 3, 3], 7) == ([6, 3, 4, 8, 4, 2, 3], [3])": {
      "result": true,
      "time": 0.06327438354492188,
      "error": null
    },
    "assert split_two_parts(['b', 'g', 'i', 'k'], 6) == (['b', 'g', 'i', 'k'], [])": {
      "result": true,
      "time": 0.05449342727661133,
      "error": null
    },
    "assert split_two_parts(['b', 'q', 'c', 'c'], 7) == (['b', 'q', 'c', 'c'], [])": {
      "result": true,
      "time": 0.05491805076599121,
      "error": null
    },
    "assert split_two_parts(['s', 'x', 'u', 'g'], 5) == (['s', 'x', 'u', 'g'], [])": {
      "result": true,
      "time": 0.042489051818847656,
      "error": null
    },
    "assert split_two_parts(['a', 'q', 'n', 'g'], 1) == (['a'], ['q', 'n', 'g'])": {
      "result": true,
      "time": 0.050266265869140625,
      "error": null
    },
    "assert split_two_parts(['n', 'u', 'o', 'f'], 7) == (['n', 'u', 'o', 'f'], [])": {
      "result": true,
      "time": 0.06140542030334473,
      "error": null
    },
    "assert split_two_parts(['e', 's', 'q', 'a'], 3) == (['e', 's', 'q'], ['a'])": {
      "result": true,
      "time": 0.047661781311035156,
      "error": null
    },
    "assert split_two_parts(['b', 'v', 'g', 'w'], 2) == (['b', 'v'], ['g', 'w'])": {
      "result": true,
      "time": 0.05253100395202637,
      "error": null
    },
    "assert split_two_parts(['b', 'o', 'u', 'v'], 7) == (['b', 'o', 'u', 'v'], [])": {
      "result": true,
      "time": 0.04414987564086914,
      "error": null
    },
    "assert split_two_parts(['s', 'x', 'm', 'n'], 4) == (['s', 'x', 'm', 'n'], [])": {
      "result": true,
      "time": 0.05929112434387207,
      "error": null
    },
    "assert split_two_parts(['n', 'u', 'r', 'o'], 4) == (['n', 'u', 'r', 'o'], [])": {
      "result": true,
      "time": 0.04420828819274902,
      "error": null
    },
    "assert split_two_parts(['g', 'v', 'r', 'b'], 5) == (['g', 'v', 'r', 'b'], [])": {
      "result": true,
      "time": 0.04233121871948242,
      "error": null
    },
    "assert split_two_parts(['s', 'm', 'j', 't'], 1) == (['s'], ['m', 'j', 't'])": {
      "result": true,
      "time": 0.049016714096069336,
      "error": null
    },
    "assert split_two_parts(['s', 't', 'j', 's'], 5) == (['s', 't', 'j', 's'], [])": {
      "result": true,
      "time": 0.045870065689086914,
      "error": null
    },
    "assert split_two_parts(['q', 'e', 'l', 'k'], 6) == (['q', 'e', 'l', 'k'], [])": {
      "result": true,
      "time": 0.05647540092468262,
      "error": null
    },
    "assert split_two_parts(['h', 'n', 'l', 's'], 2) == (['h', 'n'], ['l', 's'])": {
      "result": true,
      "time": 0.05596351623535156,
      "error": null
    },
    "assert split_two_parts(['j', 'd', 'z', 'p'], 1) == (['j'], ['d', 'z', 'p'])": {
      "result": true,
      "time": 0.0536196231842041,
      "error": null
    },
    "assert split_two_parts(['w', 'z', 'u', 'v'], 4) == (['w', 'z', 'u', 'v'], [])": {
      "result": true,
      "time": 0.05162239074707031,
      "error": null
    },
    "assert split_two_parts(['m', 'n', 'd', 'n'], 4) == (['m', 'n', 'd', 'n'], [])": {
      "result": true,
      "time": 0.06041693687438965,
      "error": null
    },
    "assert split_two_parts(['v', 'o', 't', 'e'], 2) == (['v', 'o'], ['t', 'e'])": {
      "result": true,
      "time": 0.04708433151245117,
      "error": null
    },
    "assert split_two_parts(['u', 'w', 'j', 'u'], 6) == (['u', 'w', 'j', 'u'], [])": {
      "result": true,
      "time": 0.053122758865356445,
      "error": null
    },
    "assert split_two_parts(['o', 'o', 'p', 'j'], 2) == (['o', 'o'], ['p', 'j'])": {
      "result": true,
      "time": 0.051050662994384766,
      "error": null
    },
    "assert split_two_parts(['j', 'v', 'o', 't'], 1) == (['j'], ['v', 'o', 't'])": {
      "result": true,
      "time": 0.03603529930114746,
      "error": null
    },
    "assert split_two_parts(['x', 'r', 'l', 'k'], 6) == (['x', 'r', 'l', 'k'], [])": {
      "result": true,
      "time": 0.0377655029296875,
      "error": null
    },
    "assert split_two_parts(['t', 'x', 'v', 'j'], 2) == (['t', 'x'], ['v', 'j'])": {
      "result": true,
      "time": 0.036916255950927734,
      "error": null
    },
    "assert split_two_parts(['j', 'u', 't', 'k'], 2) == (['j', 'u'], ['t', 'k'])": {
      "result": true,
      "time": 0.03827643394470215,
      "error": null
    },
    "assert split_two_parts(['j', 'h', 'e', 't'], 7) == (['j', 'h', 'e', 't'], [])": {
      "result": true,
      "time": 0.03605031967163086,
      "error": null
    },
    "assert split_two_parts(['x', 'x', 'k', 'h'], 4) == (['x', 'x', 'k', 'h'], [])": {
      "result": true,
      "time": 0.03324270248413086,
      "error": null
    },
    "assert split_two_parts(['n', 'l', 'a', 'b'], 7) == (['n', 'l', 'a', 'b'], [])": {
      "result": true,
      "time": 0.03608512878417969,
      "error": null
    },
    "assert split_two_parts(['s', 'f', 'e', 'n'], 4) == (['s', 'f', 'e', 'n'], [])": {
      "result": true,
      "time": 0.0333256721496582,
      "error": null
    },
    "assert split_two_parts(['a', 'd', 'm', 'j'], 3) == (['a', 'd', 'm'], ['j'])": {
      "result": true,
      "time": 0.034822702407836914,
      "error": null
    },
    "assert split_two_parts(['e', 't', 'g', 'y'], 3) == (['e', 't', 'g'], ['y'])": {
      "result": true,
      "time": 0.04021191596984863,
      "error": null
    },
    "assert split_two_parts(['s', 'r', 'n', 'x'], 6) == (['s', 'r', 'n', 'x'], [])": {
      "result": true,
      "time": 0.03267979621887207,
      "error": null
    },
    "assert split_two_parts(['d', 'j', 'u', 'i'], 1) == (['d'], ['j', 'u', 'i'])": {
      "result": true,
      "time": 0.03672289848327637,
      "error": null
    },
    "assert split_two_parts(['c', 'c', 'k', 'f', 'p', 'a'], 8) == (['c', 'c', 'k', 'f', 'p', 'a'], [])": {
      "result": true,
      "time": 0.038648366928100586,
      "error": null
    },
    "assert split_two_parts(['v', 'm', 'l', 'k', 'g', 't'], 5) == (['v', 'm', 'l', 'k', 'g'], ['t'])": {
      "result": true,
      "time": 0.03639101982116699,
      "error": null
    },
    "assert split_two_parts(['m', 'l', 'g', 'w', 'g', 'a'], 8) == (['m', 'l', 'g', 'w', 'g', 'a'], [])": {
      "result": true,
      "time": 0.03393840789794922,
      "error": null
    },
    "assert split_two_parts(['m', 'a', 'l', 'g', 'l', 's'], 6) == (['m', 'a', 'l', 'g', 'l', 's'], [])": {
      "result": true,
      "time": 0.03439188003540039,
      "error": null
    },
    "assert split_two_parts(['b', 'm', 'l', 'u', 'm', 'm'], 8) == (['b', 'm', 'l', 'u', 'm', 'm'], [])": {
      "result": true,
      "time": 0.035778045654296875,
      "error": null
    },
    "assert split_two_parts(['v', 'a', 'e', 's', 'd', 'e'], 5) == (['v', 'a', 'e', 's', 'd'], ['e'])": {
      "result": true,
      "time": 0.044525861740112305,
      "error": null
    },
    "assert split_two_parts(['n', 'l', 'l', 'v', 'm', 'h'], 7) == (['n', 'l', 'l', 'v', 'm', 'h'], [])": {
      "result": true,
      "time": 0.03721189498901367,
      "error": null
    },
    "assert split_two_parts(['h', 't', 'l', 'u', 'g', 'd'], 4) == (['h', 't', 'l', 'u'], ['g', 'd'])": {
      "result": true,
      "time": 0.04021906852722168,
      "error": null
    },
    "assert split_two_parts(['l', 'p', 'w', 'l', 'y', 'c'], 5) == (['l', 'p', 'w', 'l', 'y'], ['c'])": {
      "result": true,
      "time": 0.03371858596801758,
      "error": null
    },
    "assert split_two_parts(['w', 'g', 'h', 'd', 'v', 'k'], 9) == (['w', 'g', 'h', 'd', 'v', 'k'], [])": {
      "result": true,
      "time": 0.033432960510253906,
      "error": null
    },
    "assert split_two_parts(['r', 'k', 'k', 'e', 'r', 'v'], 1) == (['r'], ['k', 'k', 'e', 'r', 'v'])": {
      "result": true,
      "time": 0.0393521785736084,
      "error": null
    },
    "assert split_two_parts(['y', 'y', 'h', 'y', 'f', 'r'], 5) == (['y', 'y', 'h', 'y', 'f'], ['r'])": {
      "result": true,
      "time": 0.039254188537597656,
      "error": null
    },
    "assert split_two_parts(['m', 'u', 'k', 'l', 'v', 'w'], 5) == (['m', 'u', 'k', 'l', 'v'], ['w'])": {
      "result": true,
      "time": 0.03497433662414551,
      "error": null
    },
    "assert split_two_parts(['o', 'h', 'f', 'b', 'n', 'r'], 6) == (['o', 'h', 'f', 'b', 'n', 'r'], [])": {
      "result": true,
      "time": 0.03486323356628418,
      "error": null
    },
    "assert split_two_parts(['j', 'v', 'c', 'g', 'm', 'j'], 2) == (['j', 'v'], ['c', 'g', 'm', 'j'])": {
      "result": true,
      "time": 0.036290645599365234,
      "error": null
    },
    "assert split_two_parts(['w', 'r', 'e', 'g', 'u', 'q'], 3) == (['w', 'r', 'e'], ['g', 'u', 'q'])": {
      "result": true,
      "time": 0.0380399227142334,
      "error": null
    },
    "assert split_two_parts(['s', 'v', 'e', 's', 'u', 'k'], 7) == (['s', 'v', 'e', 's', 'u', 'k'], [])": {
      "result": true,
      "time": 0.03835439682006836,
      "error": null
    },
    "assert split_two_parts(['l', 'u', 'e', 'y', 'l', 'l'], 4) == (['l', 'u', 'e', 'y'], ['l', 'l'])": {
      "result": true,
      "time": 0.031484127044677734,
      "error": null
    },
    "assert split_two_parts(['o', 'e', 'q', 'h', 'p', 'w'], 7) == (['o', 'e', 'q', 'h', 'p', 'w'], [])": {
      "result": true,
      "time": 0.033857107162475586,
      "error": null
    },
    "assert split_two_parts(['e', 'x', 's', 'd', 'h', 'o'], 2) == (['e', 'x'], ['s', 'd', 'h', 'o'])": {
      "result": true,
      "time": 0.039711952209472656,
      "error": null
    },
    "assert split_two_parts(['h', 'o', 'b', 'c', 'k', 'p'], 6) == (['h', 'o', 'b', 'c', 'k', 'p'], [])": {
      "result": true,
      "time": 0.029513120651245117,
      "error": null
    },
    "assert split_two_parts(['e', 's', 'c', 'g', 'b', 'i'], 5) == (['e', 's', 'c', 'g', 'b'], ['i'])": {
      "result": true,
      "time": 0.03575873374938965,
      "error": null
    },
    "assert split_two_parts(['d', 'k', 'y', 'j', 's', 'n'], 6) == (['d', 'k', 'y', 'j', 's', 'n'], [])": {
      "result": true,
      "time": 0.03449416160583496,
      "error": null
    },
    "assert split_two_parts(['k', 'a', 'n', 'l', 's', 'r'], 9) == (['k', 'a', 'n', 'l', 's', 'r'], [])": {
      "result": true,
      "time": 0.03777313232421875,
      "error": null
    },
    "assert split_two_parts(['n', 'f', 'n', 't', 'h', 'v'], 9) == (['n', 'f', 'n', 't', 'h', 'v'], [])": {
      "result": true,
      "time": 0.03434324264526367,
      "error": null
    },
    "assert split_two_parts(['x', 'm', 'g', 'x', 'x', 'e'], 6) == (['x', 'm', 'g', 'x', 'x', 'e'], [])": {
      "result": true,
      "time": 0.041287899017333984,
      "error": null
    },
    "assert split_two_parts(['p', 't', 'o', 'x', 'r', 'z'], 6) == (['p', 't', 'o', 'x', 'r', 'z'], [])": {
      "result": true,
      "time": 0.03646230697631836,
      "error": null
    },
    "assert split_two_parts(['u', 'k', 't', 'l', 'n', 's'], 7) == (['u', 'k', 't', 'l', 'n', 's'], [])": {
      "result": true,
      "time": 0.03532838821411133,
      "error": null
    },
    "assert split_two_parts(['d', 'h', 'i', 't', 'e', 'b'], 5) == (['d', 'h', 'i', 't', 'e'], ['b'])": {
      "result": true,
      "time": 0.031476497650146484,
      "error": null
    },
    "assert split_two_parts(['a', 'k', 's', 'm', 'e', 'z'], 9) == (['a', 'k', 's', 'm', 'e', 'z'], [])": {
      "result": true,
      "time": 0.03541994094848633,
      "error": null
    },
    "assert split_two_parts(['w', 'c', 'a', 'a', 'y', 'q'], 4) == (['w', 'c', 'a', 'a'], ['y', 'q'])": {
      "result": true,
      "time": 0.03594613075256348,
      "error": null
    },
    "assert split_two_parts(['i', 't', 'n', 'c', 'o', 'd'], 8) == (['i', 't', 'n', 'c', 'o', 'd'], [])": {
      "result": true,
      "time": 0.031110286712646484,
      "error": null
    },
    "assert split_two_parts(['p', 'q', 'f', 'z', 'n', 'z'], 1) == (['p'], ['q', 'f', 'z', 'n', 'z'])": {
      "result": true,
      "time": 0.04227137565612793,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}