{
  "code": "import math\n\ndef next_Perfect_Square(n):\n    root = math.sqrt(n)\n    if int(root + 0.5) ** 2 == n:\n        return int(root) + 1\n    else:\n        return int(root) + 1",
  "results": {
    "assert next_Perfect_Square(35) == 36": {
      "result": false,
      "time": 0.07954049110412598,
      "error": null
    },
    "assert next_Perfect_Square(6) == 9": {
      "result": false,
      "time": 0.09105181694030762,
      "error": null
    },
    "assert next_Perfect_Square(9) == 16": {
      "result": false,
      "time": 0.07213711738586426,
      "error": null
    },
    "assert next_Perfect_Square(37) == 49": {
      "result": false,
      "time": 0.07609391212463379,
      "error": null
    },
    "assert next_Perfect_Square(33) == 36": {
      "result": false,
      "time": 0.0680687427520752,
      "error": null
    },
    "assert next_Perfect_Square(34) == 36": {
      "result": false,
      "time": 0.09571027755737305,
      "error": null
    },
    "assert next_Perfect_Square(39) == 49": {
      "result": false,
      "time": 0.07902884483337402,
      "error": null
    },
    "assert next_Perfect_Square(32) == 36": {
      "result": false,
      "time": 0.08245110511779785,
      "error": null
    },
    "assert next_Perfect_Square(31) == 36": {
      "result": false,
      "time": 0.0904541015625,
      "error": null
    },
    "assert next_Perfect_Square(38) == 49": {
      "result": false,
      "time": 0.09373664855957031,
      "error": null
    },
    "assert next_Perfect_Square(36) == 49": {
      "result": false,
      "time": 0.07177019119262695,
      "error": null
    },
    "assert next_Perfect_Square(40) == 49": {
      "result": false,
      "time": 0.07870292663574219,
      "error": null
    },
    "assert next_Perfect_Square(30) == 36": {
      "result": false,
      "time": 0.07490038871765137,
      "error": null
    },
    "assert next_Perfect_Square(11) == 16": {
      "result": false,
      "time": 0.06996488571166992,
      "error": null
    },
    "assert next_Perfect_Square(3) == 4": {
      "result": false,
      "time": 0.0862894058227539,
      "error": null
    },
    "assert next_Perfect_Square(7) == 9": {
      "result": false,
      "time": 0.09337091445922852,
      "error": null
    },
    "assert next_Perfect_Square(2) == 4": {
      "result": false,
      "time": 0.0984044075012207,
      "error": null
    },
    "assert next_Perfect_Square(5) == 9": {
      "result": false,
      "time": 0.08617115020751953,
      "error": null
    },
    "assert next_Perfect_Square(1) == 4": {
      "result": false,
      "time": 0.09448623657226562,
      "error": null
    },
    "assert next_Perfect_Square(10) == 16": {
      "result": false,
      "time": 0.07899832725524902,
      "error": null
    },
    "assert next_Perfect_Square(4) == 9": {
      "result": false,
      "time": 0.08558344841003418,
      "error": null
    },
    "assert next_Perfect_Square(8) == 9": {
      "result": false,
      "time": 0.10326361656188965,
      "error": null
    },
    "assert next_Perfect_Square(14) == 16": {
      "result": false,
      "time": 0.09258842468261719,
      "error": null
    },
    "assert next_Perfect_Square(12) == 16": {
      "result": false,
      "time": 0.07558846473693848,
      "error": null
    },
    "assert next_Perfect_Square(13) == 16": {
      "result": false,
      "time": 0.07877588272094727,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": "",
  "has_testcase_error": false
}