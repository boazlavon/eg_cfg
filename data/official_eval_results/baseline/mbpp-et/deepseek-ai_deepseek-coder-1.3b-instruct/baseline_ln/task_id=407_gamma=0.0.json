{
  "code": "def rearrange_bigger(num):\n    num_str = str(num)\n    sorted_str = ''.join(sorted(num_str, reverse=True))\n    for i in range(len(sorted_str)):\n        if sorted_str[i] < sorted_str[i + 1]:\n            break\n    else:\n        return False\n\n    for j in range(len(sorted_str) - 1, -1, -1):\n        if sorted_str[j] > sorted_str[i]:\n            sorted_str = sorted_str[:j] + sorted_str[i + 1:j + 1][::-1] + sorted_str[j + 1:]\n            break\n\n    return int(sorted_str)",
  "results": {
    "assert rearrange_bigger(12)==21": {
      "result": false,
      "time": 0.04256415367126465,
      "error": null
    },
    "assert rearrange_bigger(10)==False": {
      "result": false,
      "time": 0.04329228401184082,
      "error": null
    },
    "assert rearrange_bigger(102)==120": {
      "result": false,
      "time": 0.05625343322753906,
      "error": null
    },
    "assert rearrange_bigger(14) == 41": {
      "result": false,
      "time": 0.04925870895385742,
      "error": null
    },
    "assert rearrange_bigger(9) == False": {
      "result": false,
      "time": 0.04905104637145996,
      "error": null
    },
    "assert rearrange_bigger(8) == False": {
      "result": false,
      "time": 0.043068647384643555,
      "error": null
    },
    "assert rearrange_bigger(11) == False": {
      "result": false,
      "time": 0.03901052474975586,
      "error": null
    },
    "assert rearrange_bigger(15) == 51": {
      "result": false,
      "time": 0.0432283878326416,
      "error": null
    },
    "assert rearrange_bigger(12) == 21": {
      "result": false,
      "time": 0.05102181434631348,
      "error": null
    },
    "assert rearrange_bigger(13) == 31": {
      "result": false,
      "time": 0.03892850875854492,
      "error": null
    },
    "assert rearrange_bigger(16) == 61": {
      "result": false,
      "time": 0.040035247802734375,
      "error": null
    },
    "assert rearrange_bigger(17) == 71": {
      "result": false,
      "time": 0.03843832015991211,
      "error": null
    },
    "assert rearrange_bigger(7) == False": {
      "result": false,
      "time": 0.042874813079833984,
      "error": null
    },
    "assert rearrange_bigger(10) == False": {
      "result": false,
      "time": 0.04407691955566406,
      "error": null
    },
    "assert rearrange_bigger(6) == False": {
      "result": false,
      "time": 0.04266643524169922,
      "error": null
    },
    "assert rearrange_bigger(5) == False": {
      "result": false,
      "time": 0.04021501541137695,
      "error": null
    },
    "assert rearrange_bigger(106) == 160": {
      "result": false,
      "time": 0.04363203048706055,
      "error": null
    },
    "assert rearrange_bigger(104) == 140": {
      "result": false,
      "time": 0.04264950752258301,
      "error": null
    },
    "assert rearrange_bigger(107) == 170": {
      "result": false,
      "time": 0.042932748794555664,
      "error": null
    },
    "assert rearrange_bigger(99) == False": {
      "result": false,
      "time": 0.04666614532470703,
      "error": null
    },
    "assert rearrange_bigger(103) == 130": {
      "result": false,
      "time": 0.037348270416259766,
      "error": null
    },
    "assert rearrange_bigger(102) == 120": {
      "result": false,
      "time": 0.042905330657958984,
      "error": null
    },
    "assert rearrange_bigger(98) == False": {
      "result": false,
      "time": 0.047926902770996094,
      "error": null
    },
    "assert rearrange_bigger(100) == False": {
      "result": false,
      "time": 0.04408097267150879,
      "error": null
    },
    "assert rearrange_bigger(105) == 150": {
      "result": false,
      "time": 0.03842425346374512,
      "error": null
    },
    "assert rearrange_bigger(101) == 110": {
      "result": false,
      "time": 0.04506278038024902,
      "error": null
    },
    "assert rearrange_bigger(97) == False": {
      "result": false,
      "time": 0.04782295227050781,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": "",
  "has_testcase_error": false
}