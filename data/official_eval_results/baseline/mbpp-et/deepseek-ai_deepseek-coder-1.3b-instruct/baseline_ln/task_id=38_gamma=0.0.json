{
  "code": "def div_even_odd(nums):\n    even_nums = [num for num in nums if num % 2 == 0]\n    odd_nums = [num for num in nums if num % 2 != 0]\n    return len(even_nums) / len(odd_nums)",
  "results": {
    "assert div_even_odd([1,3,5,7,4,1,6,8])==4": {
      "result": false,
      "time": 0.03723955154418945,
      "error": null
    },
    "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2": {
      "result": false,
      "time": 0.035262346267700195,
      "error": null
    },
    "assert div_even_odd([1,5,7,9,10])==10": {
      "result": false,
      "time": 0.03925633430480957,
      "error": null
    },
    "assert div_even_odd([6, 1, 3, 4, 9, 2, 5, 3]) == 6.0": {
      "result": false,
      "time": 0.037439584732055664,
      "error": null
    },
    "assert div_even_odd([4, 8, 1, 12, 8, 6, 7, 5]) == 4.0": {
      "result": false,
      "time": 0.04087567329406738,
      "error": null
    },
    "assert div_even_odd([3, 6, 4, 4, 3, 5, 11, 5]) == 2.0": {
      "result": false,
      "time": 0.04194355010986328,
      "error": null
    },
    "assert div_even_odd([5, 3, 2, 10, 3, 5, 4, 7]) == 0.4": {
      "result": false,
      "time": 0.03707146644592285,
      "error": null
    },
    "assert div_even_odd([5, 8, 8, 3, 8, 1, 7, 12]) == 1.6": {
      "result": false,
      "time": 0.033142805099487305,
      "error": null
    },
    "assert div_even_odd([6, 2, 3, 10, 4, 2, 8, 10]) == 2.0": {
      "result": false,
      "time": 0.03876447677612305,
      "error": null
    },
    "assert div_even_odd([4, 1, 9, 12, 9, 2, 4, 7]) == 4.0": {
      "result": false,
      "time": 0.0393221378326416,
      "error": null
    },
    "assert div_even_odd([3, 8, 10, 7, 5, 4, 8, 7]) == 2.6666666666666665": {
      "result": false,
      "time": 0.03522300720214844,
      "error": null
    },
    "assert div_even_odd([4, 2, 5, 9, 7, 2, 11, 10]) == 0.8": {
      "result": false,
      "time": 0.0387730598449707,
      "error": null
    },
    "assert div_even_odd([5, 8, 3, 12, 3, 4, 3, 7]) == 1.6": {
      "result": false,
      "time": 0.038739919662475586,
      "error": null
    },
    "assert div_even_odd([1, 8, 9, 8, 9, 2, 7, 12]) == 8.0": {
      "result": false,
      "time": 0.04142618179321289,
      "error": null
    },
    "assert div_even_odd([2, 2, 1, 8, 6, 5, 4, 6]) == 2.0": {
      "result": false,
      "time": 0.03746461868286133,
      "error": null
    },
    "assert div_even_odd([6, 1, 5, 9, 1, 4, 4, 6]) == 6.0": {
      "result": false,
      "time": 0.0399174690246582,
      "error": null
    },
    "assert div_even_odd([6, 1, 7, 5, 9, 4, 7, 11]) == 6.0": {
      "result": false,
      "time": 0.04215407371520996,
      "error": null
    },
    "assert div_even_odd([2, 8, 9, 9, 3, 2, 9, 6]) == 0.2222222222222222": {
      "result": false,
      "time": 0.033765316009521484,
      "error": null
    },
    "assert div_even_odd([2, 5, 6, 6, 8, 1, 7, 6]) == 0.4": {
      "result": false,
      "time": 0.038222312927246094,
      "error": null
    },
    "assert div_even_odd([5, 1, 10, 6, 3, 2, 10, 11]) == 2.0": {
      "result": false,
      "time": 0.04199075698852539,
      "error": null
    },
    "assert div_even_odd([4, 6, 9, 11, 6, 4, 3, 12]) == 0.4444444444444444": {
      "result": false,
      "time": 0.039933204650878906,
      "error": null
    },
    "assert div_even_odd([4, 4, 2, 11, 4, 3, 5, 8]) == 0.36363636363636365": {
      "result": false,
      "time": 0.035056114196777344,
      "error": null
    },
    "assert div_even_odd([6, 5, 6, 9, 9, 3, 9, 6]) == 1.2": {
      "result": false,
      "time": 0.0375368595123291,
      "error": null
    },
    "assert div_even_odd([4, 4, 5, 2, 5, 1, 3, 8]) == 0.8": {
      "result": false,
      "time": 0.040198564529418945,
      "error": null
    },
    "assert div_even_odd([1, 7, 6, 5, 8, 1, 5, 8]) == 6.0": {
      "result": false,
      "time": 0.036986589431762695,
      "error": null
    },
    "assert div_even_odd([5, 8, 8, 5, 9, 6, 11, 9]) == 1.6": {
      "result": false,
      "time": 0.04272890090942383,
      "error": null
    },
    "assert div_even_odd([2, 3, 8, 12, 3, 4, 11, 8]) == 0.6666666666666666": {
      "result": false,
      "time": 0.0443568229675293,
      "error": null
    },
    "assert div_even_odd([4, 7, 7, 7, 9, 2, 3, 5]) == 0.5714285714285714": {
      "result": false,
      "time": 0.03993511199951172,
      "error": null
    },
    "assert div_even_odd([4, 2, 5, 5, 6, 5, 3, 4]) == 0.8": {
      "result": false,
      "time": 0.03910088539123535,
      "error": null
    },
    "assert div_even_odd([1, 8, 10, 3, 4, 1, 1, 11]) == 8.0": {
      "result": false,
      "time": 0.03953719139099121,
      "error": null
    },
    "assert div_even_odd([3, 7, 5, 4, 3, 6, 11, 12]) == 1.3333333333333333": {
      "result": false,
      "time": 0.04328322410583496,
      "error": null
    },
    "assert div_even_odd([2, 2, 9, 12, 3, 3, 11, 13]) == 0.2222222222222222": {
      "result": false,
      "time": 0.05484437942504883,
      "error": null
    },
    "assert div_even_odd([1, 2, 4, 7, 5, 3, 11, 11]) == 2.0": {
      "result": false,
      "time": 0.037737369537353516,
      "error": null
    },
    "assert div_even_odd([5, 4, 6, 12, 6, 5, 1, 3]) == 0.8": {
      "result": false,
      "time": 0.043151140213012695,
      "error": null
    },
    "assert div_even_odd([6, 1, 7, 12, 7, 4, 8, 12]) == 6.0": {
      "result": false,
      "time": 0.04111051559448242,
      "error": null
    },
    "assert div_even_odd([4, 6, 2, 2, 3, 1, 10, 9]) == 1.3333333333333333": {
      "result": false,
      "time": 0.046363115310668945,
      "error": null
    },
    "assert div_even_odd([2, 6, 6, 7, 1, 4, 10, 11, 7, 8]) == 0.2857142857142857": {
      "result": false,
      "time": 0.0381314754486084,
      "error": null
    },
    "assert div_even_odd([2, 5, 1, 2, 4, 1, 9, 10, 12, 8]) == 0.4": {
      "result": false,
      "time": 0.041589975357055664,
      "error": null
    },
    "assert div_even_odd([3, 5, 1, 5, 9, 6, 4, 12, 12, 14]) == 2.0": {
      "result": false,
      "time": 0.036529541015625,
      "error": null
    },
    "assert div_even_odd([2, 3, 2, 1, 8, 3, 12, 11, 5, 6]) == 0.6666666666666666": {
      "result": false,
      "time": 0.03662586212158203,
      "error": null
    },
    "assert div_even_odd([6, 2, 3, 8, 5, 11, 8, 3, 6, 15]) == 2.0": {
      "result": false,
      "time": 0.038190364837646484,
      "error": null
    },
    "assert div_even_odd([5, 3, 7, 4, 3, 7, 6, 13, 13, 8]) == 0.8": {
      "result": false,
      "time": 0.038513898849487305,
      "error": null
    },
    "assert div_even_odd([1, 1, 6, 4, 8, 3, 6, 11, 10, 7]) == 6.0": {
      "result": false,
      "time": 0.04437613487243652,
      "error": null
    },
    "assert div_even_odd([1, 3, 5, 1, 7, 11, 5, 10, 6, 14]) == 10.0": {
      "result": false,
      "time": 0.0353391170501709,
      "error": null
    },
    "assert div_even_odd([4, 3, 5, 9, 1, 8, 11, 6, 13, 12]) == 1.3333333333333333": {
      "result": false,
      "time": 0.04430413246154785,
      "error": null
    },
    "assert div_even_odd([2, 4, 4, 3, 3, 3, 6, 3, 4, 9]) == 0.6666666666666666": {
      "result": false,
      "time": 0.04459071159362793,
      "error": null
    },
    "assert div_even_odd([6, 4, 1, 2, 3, 11, 5, 13, 5, 8]) == 6.0": {
      "result": false,
      "time": 0.03555178642272949,
      "error": null
    },
    "assert div_even_odd([3, 4, 2, 6, 8, 2, 11, 11, 5, 12]) == 1.3333333333333333": {
      "result": false,
      "time": 0.042726993560791016,
      "error": null
    },
    "assert div_even_odd([3, 6, 2, 1, 7, 8, 11, 13, 10, 7]) == 2.0": {
      "result": false,
      "time": 0.04028940200805664,
      "error": null
    },
    "assert div_even_odd([2, 7, 5, 6, 6, 5, 2, 11, 13, 9]) == 0.2857142857142857": {
      "result": false,
      "time": 0.03921818733215332,
      "error": null
    },
    "assert div_even_odd([3, 6, 1, 2, 9, 11, 4, 11, 12, 10]) == 2.0": {
      "result": false,
      "time": 0.051959991455078125,
      "error": null
    },
    "assert div_even_odd([3, 6, 4, 5, 7, 3, 7, 12, 14, 8]) == 2.0": {
      "result": false,
      "time": 0.03710627555847168,
      "error": null
    },
    "assert div_even_odd([4, 2, 5, 1, 3, 3, 7, 13, 5, 10]) == 0.8": {
      "result": false,
      "time": 0.04019904136657715,
      "error": null
    },
    "assert div_even_odd([6, 5, 5, 6, 6, 4, 2, 5, 4, 12]) == 1.2": {
      "result": false,
      "time": 0.037206172943115234,
      "error": null
    },
    "assert div_even_odd([2, 5, 8, 6, 4, 4, 8, 3, 8, 15]) == 0.4": {
      "result": false,
      "time": 0.04541516304016113,
      "error": null
    },
    "assert div_even_odd([6, 4, 3, 1, 6, 3, 9, 10, 14, 5]) == 2.0": {
      "result": false,
      "time": 0.03903937339782715,
      "error": null
    },
    "assert div_even_odd([2, 3, 4, 4, 4, 11, 4, 12, 7, 13]) == 0.6666666666666666": {
      "result": false,
      "time": 0.04265475273132324,
      "error": null
    },
    "assert div_even_odd([2, 1, 6, 5, 6, 9, 10, 7, 10, 8]) == 2.0": {
      "result": false,
      "time": 0.03878450393676758,
      "error": null
    },
    "assert div_even_odd([6, 4, 3, 6, 8, 6, 2, 13, 12, 6]) == 2.0": {
      "result": false,
      "time": 0.04079413414001465,
      "error": null
    },
    "assert div_even_odd([1, 5, 2, 8, 10, 2, 3, 4, 4, 7]) == 2.0": {
      "result": false,
      "time": 0.04068470001220703,
      "error": null
    },
    "assert div_even_odd([5, 3, 6, 6, 2, 10, 10, 11, 13, 5]) == 1.2": {
      "result": false,
      "time": 0.04286360740661621,
      "error": null
    },
    "assert div_even_odd([1, 1, 3, 5, 8, 8, 8, 9, 11, 15]) == 8.0": {
      "result": false,
      "time": 0.0476226806640625,
      "error": null
    },
    "assert div_even_odd([4, 1, 7, 6, 9, 11, 2, 6, 10, 13]) == 4.0": {
      "result": false,
      "time": 0.044092416763305664,
      "error": null
    },
    "assert div_even_odd([4, 6, 4, 7, 4, 9, 9, 4, 4, 13]) == 0.5714285714285714": {
      "result": false,
      "time": 0.04350399971008301,
      "error": null
    },
    "assert div_even_odd([4, 2, 2, 7, 5, 11, 4, 5, 12, 12]) == 0.5714285714285714": {
      "result": false,
      "time": 0.04426288604736328,
      "error": null
    },
    "assert div_even_odd([5, 3, 7, 8, 4, 9, 8, 3, 13, 5]) == 1.6": {
      "result": false,
      "time": 0.037146568298339844,
      "error": null
    },
    "assert div_even_odd([5, 5, 4, 5, 3, 1, 12, 7, 11, 9]) == 0.8": {
      "result": false,
      "time": 0.04028463363647461,
      "error": null
    },
    "assert div_even_odd([4, 3, 1, 2, 9, 11, 9, 3, 4, 11]) == 1.3333333333333333": {
      "result": false,
      "time": 0.042568206787109375,
      "error": null
    },
    "assert div_even_odd([3, 3, 7, 9, 5, 11, 6, 9, 4, 8]) == 2.0": {
      "result": false,
      "time": 0.038353681564331055,
      "error": null
    },
    "assert div_even_odd([5, 8, 12, 4, 12]) == 1.6": {
      "result": false,
      "time": 0.04091358184814453,
      "error": null
    },
    "assert div_even_odd([2, 9, 8, 6, 14]) == 0.2222222222222222": {
      "result": false,
      "time": 0.04332756996154785,
      "error": null
    },
    "assert div_even_odd([2, 8, 3, 8, 8]) == 0.6666666666666666": {
      "result": false,
      "time": 0.04167485237121582,
      "error": null
    },
    "assert div_even_odd([5, 3, 4, 10, 15]) == 0.8": {
      "result": false,
      "time": 0.03998374938964844,
      "error": null
    },
    "assert div_even_odd([4, 4, 9, 7, 13]) == 0.4444444444444444": {
      "result": false,
      "time": 0.04331541061401367,
      "error": null
    },
    "assert div_even_odd([4, 9, 11, 9, 10]) == 0.4444444444444444": {
      "result": false,
      "time": 0.046277523040771484,
      "error": null
    },
    "assert div_even_odd([6, 7, 7, 7, 8]) == 0.8571428571428571": {
      "result": false,
      "time": 0.04002094268798828,
      "error": null
    },
    "assert div_even_odd([1, 10, 10, 5, 5]) == 10.0": {
      "result": false,
      "time": 0.04268503189086914,
      "error": null
    },
    "assert div_even_odd([6, 1, 6, 13, 14]) == 6.0": {
      "result": false,
      "time": 0.03843235969543457,
      "error": null
    },
    "assert div_even_odd([4, 2, 11, 12, 5]) == 0.36363636363636365": {
      "result": false,
      "time": 0.05177497863769531,
      "error": null
    },
    "assert div_even_odd([3, 7, 5, 4, 5]) == 1.3333333333333333": {
      "result": false,
      "time": 0.039061784744262695,
      "error": null
    },
    "assert div_even_odd([1, 9, 5, 11, 7]) == -1.0": {
      "result": false,
      "time": 0.03591346740722656,
      "error": null
    },
    "assert div_even_odd([5, 8, 10, 8, 6]) == 1.6": {
      "result": false,
      "time": 0.03417849540710449,
      "error": null
    },
    "assert div_even_odd([1, 6, 4, 11, 5]) == 6.0": {
      "result": false,
      "time": 0.029513835906982422,
      "error": null
    },
    "assert div_even_odd([6, 2, 10, 8, 10]) == -6.0": {
      "result": false,
      "time": 0.037383317947387695,
      "error": null
    },
    "assert div_even_odd([1, 7, 10, 7, 11]) == 10.0": {
      "result": false,
      "time": 0.03496193885803223,
      "error": null
    },
    "assert div_even_odd([4, 9, 7, 12, 13]) == 0.4444444444444444": {
      "result": false,
      "time": 0.034328460693359375,
      "error": null
    },
    "assert div_even_odd([6, 4, 4, 11, 15]) == 0.5454545454545454": {
      "result": false,
      "time": 0.0328977108001709,
      "error": null
    },
    "assert div_even_odd([5, 6, 2, 10, 11]) == 1.2": {
      "result": false,
      "time": 0.03877854347229004,
      "error": null
    },
    "assert div_even_odd([3, 5, 9, 4, 10]) == 1.3333333333333333": {
      "result": false,
      "time": 0.03843259811401367,
      "error": null
    },
    "assert div_even_odd([1, 6, 11, 6, 6]) == 6.0": {
      "result": false,
      "time": 0.034479618072509766,
      "error": null
    },
    "assert div_even_odd([6, 7, 11, 5, 12]) == 0.8571428571428571": {
      "result": false,
      "time": 0.031319618225097656,
      "error": null
    },
    "assert div_even_odd([3, 4, 2, 4, 8]) == 1.3333333333333333": {
      "result": false,
      "time": 0.0414118766784668,
      "error": null
    },
    "assert div_even_odd([2, 8, 2, 7, 7]) == 0.2857142857142857": {
      "result": false,
      "time": 0.02683234214782715,
      "error": null
    },
    "assert div_even_odd([6, 1, 6, 5, 9]) == 6.0": {
      "result": false,
      "time": 0.03379321098327637,
      "error": null
    },
    "assert div_even_odd([4, 8, 7, 4, 5]) == 0.5714285714285714": {
      "result": false,
      "time": 0.0353238582611084,
      "error": null
    },
    "assert div_even_odd([5, 9, 6, 6, 7]) == 1.2": {
      "result": false,
      "time": 0.03398871421813965,
      "error": null
    },
    "assert div_even_odd([2, 8, 6, 11, 15]) == 0.18181818181818182": {
      "result": false,
      "time": 0.034307241439819336,
      "error": null
    },
    "assert div_even_odd([3, 8, 6, 8, 13]) == 2.6666666666666665": {
      "result": false,
      "time": 0.039455413818359375,
      "error": null
    },
    "assert div_even_odd([2, 1, 7, 7, 6]) == 2.0": {
      "result": false,
      "time": 0.04905343055725098,
      "error": null
    },
    "assert div_even_odd([4, 5, 5, 11, 7]) == 0.8": {
      "result": false,
      "time": 0.04085969924926758,
      "error": null
    },
    "assert div_even_odd([5, 6, 6, 7, 10]) == 1.2": {
      "result": false,
      "time": 0.03594779968261719,
      "error": null
    },
    "assert div_even_odd([5, 2, 10, 9, 14]) == 0.4": {
      "result": false,
      "time": 0.03957009315490723,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": "",
  "has_testcase_error": false
}