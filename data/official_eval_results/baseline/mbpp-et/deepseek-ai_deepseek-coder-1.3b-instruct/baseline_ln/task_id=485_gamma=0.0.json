{
  "code": "def largest_palindrome(nums, k):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    palindromes = [num for num in nums if is_palindrome(num)]\n    largest_palindromes = sorted(palindromes, reverse=True)[:k]\n    return max(largest_palindromes)\n",
  "results": {
    "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545": {
      "result": true,
      "time": 0.0585482120513916,
      "error": null
    },
    "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5": {
      "result": true,
      "time": 0.04860043525695801,
      "error": null
    },
    "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9": {
      "result": true,
      "time": 0.06213736534118652,
      "error": null
    },
    "assert largest_palindrome([2, 237, 54721, 1000794], 4) == 2": {
      "result": true,
      "time": 0.05968022346496582,
      "error": null
    },
    "assert largest_palindrome([5, 235, 55206, 1000218], 3) == 5": {
      "result": true,
      "time": 0.05084419250488281,
      "error": null
    },
    "assert largest_palindrome([1, 227, 53593, 1000066], 4) == 1": {
      "result": true,
      "time": 0.0640251636505127,
      "error": null
    },
    "assert largest_palindrome([2, 229, 54755, 1000404], 2) == 2": {
      "result": true,
      "time": 0.04211735725402832,
      "error": null
    },
    "assert largest_palindrome([2, 230, 54185, 1000463], 2) == 2": {
      "result": true,
      "time": 0.04537773132324219,
      "error": null
    },
    "assert largest_palindrome([1, 233, 55242, 1000588], 2) == 1": {
      "result": true,
      "time": 0.06207919120788574,
      "error": null
    },
    "assert largest_palindrome([5, 228, 55151, 1000805], 4) == 5": {
      "result": true,
      "time": 0.04911041259765625,
      "error": null
    },
    "assert largest_palindrome([4, 232, 55299, 999793], 1) == 4": {
      "result": false,
      "time": 0.04215359687805176,
      "error": null
    },
    "assert largest_palindrome([3, 234, 54487, 999978], 2) == 3": {
      "result": true,
      "time": 0.057172536849975586,
      "error": null
    },
    "assert largest_palindrome([3, 231, 54691, 1000681], 2) == 3": {
      "result": true,
      "time": 0.05688357353210449,
      "error": null
    },
    "assert largest_palindrome([1, 231, 55173, 999797], 3) == 1": {
      "result": true,
      "time": 0.04189467430114746,
      "error": null
    },
    "assert largest_palindrome([2, 234, 53589, 999687], 4) == 2": {
      "result": true,
      "time": 0.05491924285888672,
      "error": null
    },
    "assert largest_palindrome([1, 229, 54341, 1000236], 3) == 1": {
      "result": true,
      "time": 0.05178332328796387,
      "error": null
    },
    "assert largest_palindrome([6, 231, 55229, 999443], 4) == 6": {
      "result": true,
      "time": 0.059014320373535156,
      "error": null
    },
    "assert largest_palindrome([6, 235, 55415, 999056], 2) == 6": {
      "result": true,
      "time": 0.057451725006103516,
      "error": null
    },
    "assert largest_palindrome([6, 236, 54892, 1000053], 4) == 6": {
      "result": true,
      "time": 0.050209999084472656,
      "error": null
    },
    "assert largest_palindrome([5, 228, 54838, 998994], 3) == 5": {
      "result": true,
      "time": 0.04290580749511719,
      "error": null
    },
    "assert largest_palindrome([2, 231, 55471, 1000727], 3) == 2": {
      "result": true,
      "time": 0.06493234634399414,
      "error": null
    },
    "assert largest_palindrome([1, 237, 53966, 1000361], 2) == 1": {
      "result": true,
      "time": 0.04895830154418945,
      "error": null
    },
    "assert largest_palindrome([5, 235, 54967, 999893], 3) == 5": {
      "result": true,
      "time": 0.06132149696350098,
      "error": null
    },
    "assert largest_palindrome([5, 236, 53720, 999389], 1) == 5": {
      "result": true,
      "time": 0.07584047317504883,
      "error": null
    },
    "assert largest_palindrome([2, 234, 54167, 1000752], 3) == 2": {
      "result": true,
      "time": 0.06793451309204102,
      "error": null
    },
    "assert largest_palindrome([6, 231, 53697, 1000823], 2) == 6": {
      "result": true,
      "time": 0.05704331398010254,
      "error": null
    },
    "assert largest_palindrome([2, 234, 54312, 999714], 2) == 2": {
      "result": true,
      "time": 0.05916643142700195,
      "error": null
    },
    "assert largest_palindrome([5, 228, 55477, 999334], 2) == 5": {
      "result": true,
      "time": 0.04630088806152344,
      "error": null
    },
    "assert largest_palindrome([1, 229, 55056, 1000651], 1) == 1": {
      "result": true,
      "time": 0.05883979797363281,
      "error": null
    },
    "assert largest_palindrome([3, 234, 54631, 1000020], 2) == 3": {
      "result": true,
      "time": 0.054804086685180664,
      "error": null
    },
    "assert largest_palindrome([3, 232, 55085, 1000258], 4) == 232": {
      "result": true,
      "time": 0.04402470588684082,
      "error": null
    },
    "assert largest_palindrome([1, 233, 55249, 1000630], 3) == 1": {
      "result": true,
      "time": 0.05517745018005371,
      "error": null
    },
    "assert largest_palindrome([4, 234, 55373, 999981], 1) == 4": {
      "result": true,
      "time": 0.053850650787353516,
      "error": null
    },
    "assert largest_palindrome([4, 234, 53854, 999473], 1) == 4": {
      "result": true,
      "time": 0.03961181640625,
      "error": null
    },
    "assert largest_palindrome([2, 237, 54312, 999289], 3) == 2": {
      "result": true,
      "time": 0.058600664138793945,
      "error": null
    },
    "assert largest_palindrome([2, 227, 53505, 999834], 1) == 2": {
      "result": true,
      "time": 0.0446927547454834,
      "error": null
    },
    "assert largest_palindrome([4, 5, 2, 2, 5, 51], 2) == 2": {
      "result": false,
      "time": 0.0675961971282959,
      "error": null
    },
    "assert largest_palindrome([4, 7, 2, 4, 9, 47], 6) == 9": {
      "result": true,
      "time": 0.06263256072998047,
      "error": null
    },
    "assert largest_palindrome([2, 2, 2, 6, 2, 48], 1) == 2": {
      "result": false,
      "time": 0.06528139114379883,
      "error": null
    },
    "assert largest_palindrome([6, 5, 6, 4, 1, 49], 4) == 6": {
      "result": true,
      "time": 0.054274797439575195,
      "error": null
    },
    "assert largest_palindrome([3, 4, 7, 1, 9, 46], 6) == 9": {
      "result": true,
      "time": 0.0560452938079834,
      "error": null
    },
    "assert largest_palindrome([6, 4, 4, 1, 1, 53], 3) == 4": {
      "result": false,
      "time": 0.04732227325439453,
      "error": null
    },
    "assert largest_palindrome([4, 6, 1, 4, 2, 53], 6) == 6": {
      "result": true,
      "time": 0.0618593692779541,
      "error": null
    },
    "assert largest_palindrome([1, 6, 4, 3, 3, 55], 3) == 3": {
      "result": false,
      "time": 0.05337834358215332,
      "error": null
    },
    "assert largest_palindrome([4, 2, 7, 6, 2, 50], 2) == 2": {
      "result": false,
      "time": 0.05182766914367676,
      "error": null
    },
    "assert largest_palindrome([6, 4, 1, 9, 7, 53], 4) == 7": {
      "result": false,
      "time": 0.06873798370361328,
      "error": null
    },
    "assert largest_palindrome([1, 3, 5, 3, 7, 50], 2) == 3": {
      "result": false,
      "time": 0.05085134506225586,
      "error": null
    },
    "assert largest_palindrome([4, 3, 4, 5, 7, 52], 2) == 4": {
      "result": false,
      "time": 0.06368494033813477,
      "error": null
    },
    "assert largest_palindrome([6, 7, 5, 1, 8, 50], 3) == 6": {
      "result": false,
      "time": 0.0445866584777832,
      "error": null
    },
    "assert largest_palindrome([5, 2, 7, 2, 4, 53], 5) == 7": {
      "result": true,
      "time": 0.058124542236328125,
      "error": null
    },
    "assert largest_palindrome([6, 2, 3, 5, 10, 48], 4) == 6": {
      "result": true,
      "time": 0.04468703269958496,
      "error": null
    },
    "assert largest_palindrome([3, 1, 1, 4, 8, 52], 1) == 1": {
      "result": false,
      "time": 0.06566715240478516,
      "error": null
    },
    "assert largest_palindrome([3, 1, 5, 9, 3, 50], 5) == 9": {
      "result": true,
      "time": 0.06272363662719727,
      "error": null
    },
    "assert largest_palindrome([2, 3, 2, 3, 7, 46], 6) == 7": {
      "result": true,
      "time": 0.05462765693664551,
      "error": null
    },
    "assert largest_palindrome([3, 4, 5, 4, 10, 53], 6) == 5": {
      "result": true,
      "time": 0.048880577087402344,
      "error": null
    },
    "assert largest_palindrome([3, 1, 4, 6, 5, 47], 6) == 6": {
      "result": true,
      "time": 0.05666851997375488,
      "error": null
    },
    "assert largest_palindrome([5, 3, 3, 1, 1, 50], 4) == 3": {
      "result": false,
      "time": 0.04733848571777344,
      "error": null
    },
    "assert largest_palindrome([5, 4, 5, 7, 3, 50], 5) == 7": {
      "result": true,
      "time": 0.05639386177062988,
      "error": null
    },
    "assert largest_palindrome([4, 4, 4, 7, 2, 53], 3) == 4": {
      "result": false,
      "time": 0.0595095157623291,
      "error": null
    },
    "assert largest_palindrome([3, 1, 1, 2, 3, 55], 5) == 3": {
      "result": false,
      "time": 0.058707237243652344,
      "error": null
    },
    "assert largest_palindrome([2, 7, 2, 9, 1, 50], 5) == 9": {
      "result": true,
      "time": 0.05319666862487793,
      "error": null
    },
    "assert largest_palindrome([5, 2, 8, 6, 8, 49], 1) == 2": {
      "result": false,
      "time": 0.05921316146850586,
      "error": null
    },
    "assert largest_palindrome([5, 4, 5, 3, 4, 48], 3) == 4": {
      "result": false,
      "time": 0.06392550468444824,
      "error": null
    },
    "assert largest_palindrome([5, 7, 7, 9, 3, 49], 2) == 5": {
      "result": false,
      "time": 0.06013059616088867,
      "error": null
    },
    "assert largest_palindrome([5, 6, 8, 1, 10, 47], 6) == 8": {
      "result": true,
      "time": 0.04851865768432617,
      "error": null
    },
    "assert largest_palindrome([2, 2, 2, 3, 2, 52], 6) == 3": {
      "result": true,
      "time": 0.0368502140045166,
      "error": null
    },
    "assert largest_palindrome([6, 7, 3, 1, 2, 53], 2) == 2": {
      "result": false,
      "time": 0.043805599212646484,
      "error": null
    },
    "assert largest_palindrome([4, 3, 3, 8, 9, 49], 3) == 4": {
      "result": false,
      "time": 0.05325937271118164,
      "error": null
    },
    "assert largest_palindrome([5, 1, 6, 3, 5, 51], 1) == 1": {
      "result": false,
      "time": 0.04334306716918945,
      "error": null
    },
    "assert largest_palindrome([6, 2, 9, 10, 50], 2) == 6": {
      "result": false,
      "time": 0.048459529876708984,
      "error": null
    },
    "assert largest_palindrome([2, 2, 12, 10, 43], 4) == 2": {
      "result": true,
      "time": 0.04522967338562012,
      "error": null
    },
    "assert largest_palindrome([5, 6, 2, 11, 44], 2) == 5": {
      "result": false,
      "time": 0.05116128921508789,
      "error": null
    },
    "assert largest_palindrome([2, 3, 6, 4, 48], 4) == 6": {
      "result": true,
      "time": 0.046187400817871094,
      "error": null
    },
    "assert largest_palindrome([5, 3, 2, 12, 50], 1) == 2": {
      "result": false,
      "time": 0.04122447967529297,
      "error": null
    },
    "assert largest_palindrome([3, 1, 11, 9, 41], 5) == 11": {
      "result": true,
      "time": 0.051219940185546875,
      "error": null
    },
    "assert largest_palindrome([5, 3, 7, 5, 41], 4) == 7": {
      "result": true,
      "time": 0.04407858848571777,
      "error": null
    },
    "assert largest_palindrome([4, 5, 12, 5, 50], 3) == 5": {
      "result": true,
      "time": 0.04904031753540039,
      "error": null
    },
    "assert largest_palindrome([5, 1, 4, 14, 50], 5) == 5": {
      "result": true,
      "time": 0.045165061950683594,
      "error": null
    },
    "assert largest_palindrome([2, 3, 8, 6, 47], 2) == 3": {
      "result": false,
      "time": 0.0392608642578125,
      "error": null
    },
    "assert largest_palindrome([1, 8, 12, 4, 48], 1) == 1": {
      "result": false,
      "time": 0.048009634017944336,
      "error": null
    },
    "assert largest_palindrome([3, 4, 11, 13, 42], 1) == 3": {
      "result": false,
      "time": 0.04637646675109863,
      "error": null
    },
    "assert largest_palindrome([4, 6, 5, 10, 46], 4) == 6": {
      "result": true,
      "time": 0.05167818069458008,
      "error": null
    },
    "assert largest_palindrome([4, 1, 8, 4, 45], 4) == 8": {
      "result": true,
      "time": 0.0460205078125,
      "error": null
    },
    "assert largest_palindrome([5, 4, 3, 6, 49], 1) == 3": {
      "result": false,
      "time": 0.05474519729614258,
      "error": null
    },
    "assert largest_palindrome([4, 2, 7, 12, 41], 5) == 7": {
      "result": true,
      "time": 0.04766535758972168,
      "error": null
    },
    "assert largest_palindrome([3, 1, 9, 8, 48], 5) == 9": {
      "result": true,
      "time": 0.04658007621765137,
      "error": null
    },
    "assert largest_palindrome([4, 1, 3, 13, 42], 1) == 1": {
      "result": false,
      "time": 0.04717540740966797,
      "error": null
    },
    "assert largest_palindrome([3, 6, 3, 8, 49], 3) == 6": {
      "result": false,
      "time": 0.05551481246948242,
      "error": null
    },
    "assert largest_palindrome([2, 1, 9, 8, 49], 3) == 8": {
      "result": false,
      "time": 0.054590463638305664,
      "error": null
    },
    "assert largest_palindrome([2, 4, 6, 13, 41], 1) == 2": {
      "result": false,
      "time": 0.0495450496673584,
      "error": null
    },
    "assert largest_palindrome([2, 2, 2, 7, 42], 5) == 7": {
      "result": true,
      "time": 0.04759359359741211,
      "error": null
    },
    "assert largest_palindrome([3, 3, 12, 5, 42], 5) == 5": {
      "result": true,
      "time": 0.03930401802062988,
      "error": null
    },
    "assert largest_palindrome([5, 5, 11, 10, 45], 4) == 11": {
      "result": true,
      "time": 0.04000377655029297,
      "error": null
    },
    "assert largest_palindrome([2, 1, 3, 4, 40], 3) == 3": {
      "result": false,
      "time": 0.052674293518066406,
      "error": null
    },
    "assert largest_palindrome([4, 3, 11, 14, 41], 3) == 11": {
      "result": true,
      "time": 0.04314732551574707,
      "error": null
    },
    "assert largest_palindrome([6, 4, 4, 11, 48], 2) == 4": {
      "result": false,
      "time": 0.0430912971496582,
      "error": null
    },
    "assert largest_palindrome([2, 8, 11, 6, 40], 2) == 6": {
      "result": false,
      "time": 0.038400888442993164,
      "error": null
    },
    "assert largest_palindrome([3, 2, 5, 6, 44], 5) == 44": {
      "result": true,
      "time": 0.04158830642700195,
      "error": null
    },
    "assert largest_palindrome([5, 6, 6, 9, 44], 3) == 6": {
      "result": false,
      "time": 0.04982423782348633,
      "error": null
    },
    "assert largest_palindrome([6, 2, 2, 11, 45], 1) == 2": {
      "result": false,
      "time": 0.04499340057373047,
      "error": null
    },
    "assert largest_palindrome([1, 3, 7, 12, 44], 1) == 1": {
      "result": false,
      "time": 0.04550480842590332,
      "error": null
    },
    "assert largest_palindrome([4, 4, 12, 13, 50], 2) == 4": {
      "result": true,
      "time": 0.03796100616455078,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6372549019607843,
  "general_error": "",
  "has_testcase_error": false
}