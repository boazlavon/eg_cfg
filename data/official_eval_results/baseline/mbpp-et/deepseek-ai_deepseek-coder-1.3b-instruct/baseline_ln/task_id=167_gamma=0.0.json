{
  "code": "def next_Power_Of_2(n):\n    if n and not(n & (n - 1)):\n        return n\n    else:\n        count = 0\n        while n:\n            n >>= 1\n            count += 1\n        return 1 << count",
  "results": {
    "assert next_Power_Of_2(0) == 1": {
      "result": true,
      "time": 0.032694101333618164,
      "error": null
    },
    "assert next_Power_Of_2(5) == 8": {
      "result": true,
      "time": 0.033564090728759766,
      "error": null
    },
    "assert next_Power_Of_2(17) == 32": {
      "result": true,
      "time": 0.0332486629486084,
      "error": null
    },
    "assert next_Power_Of_2(2) == 2": {
      "result": true,
      "time": 0.038146257400512695,
      "error": null
    },
    "assert next_Power_Of_2(1) == 1": {
      "result": true,
      "time": 0.03270697593688965,
      "error": null
    },
    "assert next_Power_Of_2(3) == 4": {
      "result": true,
      "time": 0.04134416580200195,
      "error": null
    },
    "assert next_Power_Of_2(4) == 4": {
      "result": true,
      "time": 0.03567194938659668,
      "error": null
    },
    "assert next_Power_Of_2(10) == 16": {
      "result": true,
      "time": 0.041272878646850586,
      "error": null
    },
    "assert next_Power_Of_2(9) == 16": {
      "result": true,
      "time": 0.02844834327697754,
      "error": null
    },
    "assert next_Power_Of_2(6) == 8": {
      "result": true,
      "time": 0.03387188911437988,
      "error": null
    },
    "assert next_Power_Of_2(8) == 8": {
      "result": true,
      "time": 0.04364776611328125,
      "error": null
    },
    "assert next_Power_Of_2(7) == 8": {
      "result": true,
      "time": 0.03474617004394531,
      "error": null
    },
    "assert next_Power_Of_2(13) == 16": {
      "result": true,
      "time": 0.035655975341796875,
      "error": null
    },
    "assert next_Power_Of_2(14) == 16": {
      "result": true,
      "time": 0.038137197494506836,
      "error": null
    },
    "assert next_Power_Of_2(19) == 32": {
      "result": true,
      "time": 0.033766746520996094,
      "error": null
    },
    "assert next_Power_Of_2(18) == 32": {
      "result": true,
      "time": 0.031763315200805664,
      "error": null
    },
    "assert next_Power_Of_2(15) == 16": {
      "result": true,
      "time": 0.03859281539916992,
      "error": null
    },
    "assert next_Power_Of_2(22) == 32": {
      "result": true,
      "time": 0.03175067901611328,
      "error": null
    },
    "assert next_Power_Of_2(12) == 16": {
      "result": true,
      "time": 0.038384199142456055,
      "error": null
    },
    "assert next_Power_Of_2(20) == 32": {
      "result": true,
      "time": 0.035125732421875,
      "error": null
    },
    "assert next_Power_Of_2(21) == 32": {
      "result": true,
      "time": 0.03814053535461426,
      "error": null
    },
    "assert next_Power_Of_2(16) == 16": {
      "result": true,
      "time": 0.03386187553405762,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}