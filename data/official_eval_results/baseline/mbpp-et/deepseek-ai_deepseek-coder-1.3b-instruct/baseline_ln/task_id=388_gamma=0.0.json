{
  "code": "def highest_Power_of_2(n):\n    if n and not (n & (n - 1)):\n        return n\n    else:\n        return n & (~0)",
  "results": {
    "assert highest_Power_of_2(10) == 8": {
      "result": false,
      "time": 0.038657426834106445,
      "error": null
    },
    "assert highest_Power_of_2(19) == 16": {
      "result": false,
      "time": 0.04004406929016113,
      "error": null
    },
    "assert highest_Power_of_2(32) == 32": {
      "result": true,
      "time": 0.03827214241027832,
      "error": null
    },
    "assert highest_Power_of_2(13) == 8": {
      "result": false,
      "time": 0.03939652442932129,
      "error": null
    },
    "assert highest_Power_of_2(14) == 8": {
      "result": false,
      "time": 0.0404207706451416,
      "error": null
    },
    "assert highest_Power_of_2(11) == 8": {
      "result": false,
      "time": 0.039733171463012695,
      "error": null
    },
    "assert highest_Power_of_2(9) == 8": {
      "result": false,
      "time": 0.03960251808166504,
      "error": null
    },
    "assert highest_Power_of_2(8) == 8": {
      "result": true,
      "time": 0.03611588478088379,
      "error": null
    },
    "assert highest_Power_of_2(12) == 8": {
      "result": false,
      "time": 0.041014671325683594,
      "error": null
    },
    "assert highest_Power_of_2(7) == 4": {
      "result": false,
      "time": 0.04108262062072754,
      "error": null
    },
    "assert highest_Power_of_2(5) == 4": {
      "result": false,
      "time": 0.04286837577819824,
      "error": null
    },
    "assert highest_Power_of_2(6) == 4": {
      "result": false,
      "time": 0.050214290618896484,
      "error": null
    },
    "assert highest_Power_of_2(15) == 8": {
      "result": false,
      "time": 0.038556814193725586,
      "error": null
    },
    "assert highest_Power_of_2(24) == 16": {
      "result": false,
      "time": 0.04969477653503418,
      "error": null
    },
    "assert highest_Power_of_2(16) == 16": {
      "result": true,
      "time": 0.04188370704650879,
      "error": null
    },
    "assert highest_Power_of_2(17) == 16": {
      "result": false,
      "time": 0.04126286506652832,
      "error": null
    },
    "assert highest_Power_of_2(22) == 16": {
      "result": false,
      "time": 0.04273033142089844,
      "error": null
    },
    "assert highest_Power_of_2(18) == 16": {
      "result": false,
      "time": 0.03512382507324219,
      "error": null
    },
    "assert highest_Power_of_2(21) == 16": {
      "result": false,
      "time": 0.03675723075866699,
      "error": null
    },
    "assert highest_Power_of_2(23) == 16": {
      "result": false,
      "time": 0.04232144355773926,
      "error": null
    },
    "assert highest_Power_of_2(20) == 16": {
      "result": false,
      "time": 0.0401301383972168,
      "error": null
    },
    "assert highest_Power_of_2(29) == 16": {
      "result": false,
      "time": 0.03762483596801758,
      "error": null
    },
    "assert highest_Power_of_2(30) == 16": {
      "result": false,
      "time": 0.041710615158081055,
      "error": null
    },
    "assert highest_Power_of_2(27) == 16": {
      "result": false,
      "time": 0.04152655601501465,
      "error": null
    },
    "assert highest_Power_of_2(35) == 32": {
      "result": false,
      "time": 0.04486227035522461,
      "error": null
    },
    "assert highest_Power_of_2(31) == 16": {
      "result": false,
      "time": 0.03701424598693848,
      "error": null
    },
    "assert highest_Power_of_2(36) == 32": {
      "result": false,
      "time": 0.03748011589050293,
      "error": null
    },
    "assert highest_Power_of_2(37) == 32": {
      "result": false,
      "time": 0.03954744338989258,
      "error": null
    },
    "assert highest_Power_of_2(34) == 32": {
      "result": false,
      "time": 0.03661298751831055,
      "error": null
    },
    "assert highest_Power_of_2(28) == 16": {
      "result": false,
      "time": 0.0423431396484375,
      "error": null
    },
    "assert highest_Power_of_2(33) == 32": {
      "result": false,
      "time": 0.04080772399902344,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0967741935483871,
  "general_error": "",
  "has_testcase_error": false
}