{
  "code": "def find_Min(nums, low, high):\n    if high < low:\n        return -1\n    if high == low:\n        return nums[low]\n    mid = (low + high) // 2\n    if mid < high and nums[mid+1] < nums[mid]:\n        return nums[mid+1]\n    if mid > low and nums[mid] < nums[mid-1]:\n        return nums[mid]\n    if nums[high] > nums[mid]:\n        return find_Min(nums, low, mid-1)\n    return find_Min(nums, mid+1, high)",
  "results": {
    "assert find_Min([1,2,3,4,5],0,4) == 1": {
      "result": false,
      "time": 0.03162574768066406,
      "error": null
    },
    "assert find_Min([4,6,8],0,2) == 4": {
      "result": true,
      "time": 0.028819799423217773,
      "error": null
    },
    "assert find_Min([2,3,5,7,9],0,4) == 2": {
      "result": false,
      "time": 0.030042171478271484,
      "error": null
    },
    "assert find_Min([6, 7, 4, 8, 10], 3, 2) == 4": {
      "result": false,
      "time": 0.0315093994140625,
      "error": null
    },
    "assert find_Min([4, 6, 1, 8, 2], 1, 4) == 1": {
      "result": true,
      "time": 0.035889625549316406,
      "error": null
    },
    "assert find_Min([5, 4, 4, 8, 4], 3, 4) == 4": {
      "result": true,
      "time": 0.0337979793548584,
      "error": null
    },
    "assert find_Min([4, 5, 8, 5, 1], 3, 1) == 5": {
      "result": false,
      "time": 0.03233027458190918,
      "error": null
    },
    "assert find_Min([5, 7, 1, 1, 4], 4, 2) == 1": {
      "result": false,
      "time": 0.034186601638793945,
      "error": null
    },
    "assert find_Min([5, 7, 6, 1, 5], 2, 3) == 1": {
      "result": true,
      "time": 0.035224199295043945,
      "error": null
    },
    "assert find_Min([1, 6, 6, 7, 6], 3, 4) == 6": {
      "result": true,
      "time": 0.03446054458618164,
      "error": null
    },
    "assert find_Min([1, 2, 2, 2, 3], 3, 4) == 2": {
      "result": false,
      "time": 0.0309445858001709,
      "error": null
    },
    "assert find_Min([2, 6, 1, 9, 3], 3, 3) == 9": {
      "result": true,
      "time": 0.034055233001708984,
      "error": null
    },
    "assert find_Min([6, 1, 3, 6, 5], 1, 2) == 1": {
      "result": false,
      "time": 0.03624749183654785,
      "error": null
    },
    "assert find_Min([6, 4, 4, 6, 4], 1, 4) == 4": {
      "result": true,
      "time": 0.035808563232421875,
      "error": null
    },
    "assert find_Min([4, 5, 8, 3, 6], 5, 4) == 6": {
      "result": false,
      "time": 0.030407428741455078,
      "error": null
    },
    "assert find_Min([5, 2, 7, 6, 4], 1, 1) == 2": {
      "result": true,
      "time": 0.035492897033691406,
      "error": null
    },
    "assert find_Min([2, 2, 3, 9, 10], 3, 4) == 9": {
      "result": false,
      "time": 0.03482770919799805,
      "error": null
    },
    "assert find_Min([6, 7, 1, 9, 4], 5, 3) == 9": {
      "result": false,
      "time": 0.031014442443847656,
      "error": null
    },
    "assert find_Min([6, 1, 5, 8, 8], 2, 1) == 1": {
      "result": false,
      "time": 0.03496122360229492,
      "error": null
    },
    "assert find_Min([1, 3, 7, 4, 9], 3, 3) == 4": {
      "result": true,
      "time": 0.03459286689758301,
      "error": null
    },
    "assert find_Min([2, 1, 2, 7, 1], 1, 3) == 1": {
      "result": true,
      "time": 0.03419089317321777,
      "error": null
    },
    "assert find_Min([4, 7, 4, 8, 4], 1, 3) == 4": {
      "result": true,
      "time": 0.03626227378845215,
      "error": null
    },
    "assert find_Min([4, 5, 4, 4, 9], 1, 3) == 4": {
      "result": true,
      "time": 0.032382965087890625,
      "error": null
    },
    "assert find_Min([5, 2, 1, 9, 2], 3, 3) == 9": {
      "result": true,
      "time": 0.030852556228637695,
      "error": null
    },
    "assert find_Min([1, 7, 6, 4, 9], 4, 4) == 9": {
      "result": true,
      "time": 0.03445291519165039,
      "error": null
    },
    "assert find_Min([4, 5, 8, 2, 4], 3, 3) == 2": {
      "result": true,
      "time": 0.03386259078979492,
      "error": null
    },
    "assert find_Min([6, 2, 5, 9, 4], 2, 4) == 4": {
      "result": true,
      "time": 0.032703399658203125,
      "error": null
    },
    "assert find_Min([3, 7, 2, 6, 8], 3, 1) == 7": {
      "result": false,
      "time": 0.03561568260192871,
      "error": null
    },
    "assert find_Min([4, 6, 7, 6, 1], 1, 2) == 6": {
      "result": false,
      "time": 0.03902721405029297,
      "error": null
    },
    "assert find_Min([6, 1, 7, 8, 9], 3, 3) == 8": {
      "result": true,
      "time": 0.03244328498840332,
      "error": null
    },
    "assert find_Min([6, 7, 1, 3, 7], 3, 2) == 1": {
      "result": false,
      "time": 0.032169342041015625,
      "error": null
    },
    "assert find_Min([3, 3, 3, 7, 6], 2, 1) == 3": {
      "result": false,
      "time": 0.030836820602416992,
      "error": null
    },
    "assert find_Min([1, 4, 2, 7, 5], 1, 1) == 4": {
      "result": true,
      "time": 0.03432321548461914,
      "error": null
    },
    "assert find_Min([3, 2, 3, 9, 7], 1, 2) == 2": {
      "result": false,
      "time": 0.030537843704223633,
      "error": null
    },
    "assert find_Min([4, 2, 3, 7, 8], 1, 4) == 2": {
      "result": true,
      "time": 0.03974270820617676,
      "error": null
    },
    "assert find_Min([5, 2, 8, 6, 9], 5, 3) == 6": {
      "result": false,
      "time": 0.04256939888000488,
      "error": null
    },
    "assert find_Min([3, 3, 8], 1, 1) == 3": {
      "result": true,
      "time": 0.041899919509887695,
      "error": null
    },
    "assert find_Min([4, 7, 11], 5, 2) == 11": {
      "result": false,
      "time": 0.036910057067871094,
      "error": null
    },
    "assert find_Min([2, 1, 10], 1, 2) == 1": {
      "result": false,
      "time": 0.036763668060302734,
      "error": null
    },
    "assert find_Min([6, 6, 5], 5, 2) == 5": {
      "result": false,
      "time": 0.04525566101074219,
      "error": null
    },
    "assert find_Min([9, 5, 8], 3, 2) == 8": {
      "result": false,
      "time": 0.037531137466430664,
      "error": null
    },
    "assert find_Min([1, 6, 7], 3, 2) == 7": {
      "result": false,
      "time": 0.03745603561401367,
      "error": null
    },
    "assert find_Min([8, 9, 5], 4, 2) == 5": {
      "result": false,
      "time": 0.0371403694152832,
      "error": null
    },
    "assert find_Min([2, 10, 8], 1, 2) == 8": {
      "result": true,
      "time": 0.037117719650268555,
      "error": null
    },
    "assert find_Min([5, 3, 8], 4, 2) == 8": {
      "result": false,
      "time": 0.03699183464050293,
      "error": null
    },
    "assert find_Min([5, 1, 11], 3, 1) == 1": {
      "result": false,
      "time": 0.03646349906921387,
      "error": null
    },
    "assert find_Min([8, 8, 9], 5, 1) == 8": {
      "result": false,
      "time": 0.03701186180114746,
      "error": null
    },
    "assert find_Min([8, 1, 5], 4, 2) == 5": {
      "result": false,
      "time": 0.035411834716796875,
      "error": null
    },
    "assert find_Min([9, 3, 4], 4, 1) == 3": {
      "result": false,
      "time": 0.03749585151672363,
      "error": null
    },
    "assert find_Min([6, 5, 7], 4, 2) == 7": {
      "result": false,
      "time": 0.03397536277770996,
      "error": null
    },
    "assert find_Min([3, 6, 6], 5, 1) == 6": {
      "result": false,
      "time": 0.03846144676208496,
      "error": null
    },
    "assert find_Min([7, 6, 8], 1, 2) == 6": {
      "result": false,
      "time": 0.04034996032714844,
      "error": null
    },
    "assert find_Min([9, 5, 7], 3, 2) == 7": {
      "result": false,
      "time": 0.03752779960632324,
      "error": null
    },
    "assert find_Min([2, 4, 10], 2, 1) == 4": {
      "result": false,
      "time": 0.03353428840637207,
      "error": null
    },
    "assert find_Min([3, 4, 4], 4, 2) == 4": {
      "result": false,
      "time": 0.04415750503540039,
      "error": null
    },
    "assert find_Min([6, 8, 12], 3, 2) == 12": {
      "result": false,
      "time": 0.0377347469329834,
      "error": null
    },
    "assert find_Min([3, 11, 3], 1, 1) == 11": {
      "result": true,
      "time": 0.04049372673034668,
      "error": null
    },
    "assert find_Min([3, 9, 8], 1, 2) == 8": {
      "result": true,
      "time": 0.03389549255371094,
      "error": null
    },
    "assert find_Min([6, 7, 13], 2, 2) == 13": {
      "result": true,
      "time": 0.037465810775756836,
      "error": null
    },
    "assert find_Min([9, 3, 6], 4, 2) == 6": {
      "result": false,
      "time": 0.0459291934967041,
      "error": null
    },
    "assert find_Min([4, 2, 4], 1, 1) == 2": {
      "result": true,
      "time": 0.043296098709106445,
      "error": null
    },
    "assert find_Min([1, 7, 4], 1, 1) == 7": {
      "result": true,
      "time": 0.04079389572143555,
      "error": null
    },
    "assert find_Min([7, 7, 8], 1, 1) == 7": {
      "result": true,
      "time": 0.04176139831542969,
      "error": null
    },
    "assert find_Min([1, 11, 11], 1, 1) == 11": {
      "result": true,
      "time": 0.03894352912902832,
      "error": null
    },
    "assert find_Min([8, 9, 10], 2, 2) == 10": {
      "result": true,
      "time": 0.0381016731262207,
      "error": null
    },
    "assert find_Min([4, 8, 13], 4, 1) == 8": {
      "result": false,
      "time": 0.03701972961425781,
      "error": null
    },
    "assert find_Min([5, 5, 12], 3, 2) == 12": {
      "result": false,
      "time": 0.03349566459655762,
      "error": null
    },
    "assert find_Min([5, 11, 11], 1, 1) == 11": {
      "result": true,
      "time": 0.04061317443847656,
      "error": null
    },
    "assert find_Min([8, 3, 13], 4, 1) == 3": {
      "result": false,
      "time": 0.035266876220703125,
      "error": null
    },
    "assert find_Min([2, 3, 6, 2, 7], 5, 1) == 3": {
      "result": false,
      "time": 0.03696727752685547,
      "error": null
    },
    "assert find_Min([2, 2, 9, 12, 9], 2, 2) == 9": {
      "result": true,
      "time": 0.03268289566040039,
      "error": null
    },
    "assert find_Min([2, 5, 2, 11, 9], 5, 1) == 5": {
      "result": false,
      "time": 0.031897783279418945,
      "error": null
    },
    "assert find_Min([3, 6, 5, 10, 9], 4, 1) == 6": {
      "result": false,
      "time": 0.030389070510864258,
      "error": null
    },
    "assert find_Min([3, 1, 4, 4, 7], 3, 3) == 4": {
      "result": true,
      "time": 0.0383608341217041,
      "error": null
    },
    "assert find_Min([3, 5, 5, 10, 4], 5, 4) == 4": {
      "result": false,
      "time": 0.044289350509643555,
      "error": null
    },
    "assert find_Min([2, 6, 8, 6, 6], 1, 2) == 6": {
      "result": false,
      "time": 0.04102444648742676,
      "error": null
    },
    "assert find_Min([4, 2, 10, 9, 10], 4, 3) == 9": {
      "result": false,
      "time": 0.03276395797729492,
      "error": null
    },
    "assert find_Min([3, 6, 1, 2, 7], 3, 1) == 6": {
      "result": false,
      "time": 0.03764200210571289,
      "error": null
    },
    "assert find_Min([3, 6, 6, 2, 8], 3, 1) == 6": {
      "result": false,
      "time": 0.04164290428161621,
      "error": null
    },
    "assert find_Min([2, 6, 5, 12, 5], 5, 2) == 5": {
      "result": false,
      "time": 0.03641963005065918,
      "error": null
    },
    "assert find_Min([1, 6, 3, 6, 4], 3, 2) == 3": {
      "result": false,
      "time": 0.037008047103881836,
      "error": null
    },
    "assert find_Min([6, 1, 8, 11, 6], 5, 1) == 1": {
      "result": false,
      "time": 0.034881591796875,
      "error": null
    },
    "assert find_Min([5, 3, 4, 6, 14], 3, 2) == 4": {
      "result": false,
      "time": 0.03995013236999512,
      "error": null
    },
    "assert find_Min([2, 6, 8, 2, 14], 4, 4) == 14": {
      "result": true,
      "time": 0.03486275672912598,
      "error": null
    },
    "assert find_Min([4, 1, 9, 8, 9], 2, 2) == 9": {
      "result": true,
      "time": 0.04224562644958496,
      "error": null
    },
    "assert find_Min([3, 3, 8, 6, 14], 1, 1) == 3": {
      "result": true,
      "time": 0.03864908218383789,
      "error": null
    },
    "assert find_Min([7, 4, 10, 2, 11], 5, 2) == 10": {
      "result": false,
      "time": 0.04076194763183594,
      "error": null
    },
    "assert find_Min([5, 5, 8, 5, 13], 5, 2) == 8": {
      "result": false,
      "time": 0.034742116928100586,
      "error": null
    },
    "assert find_Min([2, 1, 4, 9, 7], 1, 2) == 1": {
      "result": false,
      "time": 0.03671431541442871,
      "error": null
    },
    "assert find_Min([7, 5, 2, 12, 10], 2, 4) == 10": {
      "result": true,
      "time": 0.03450417518615723,
      "error": null
    },
    "assert find_Min([5, 4, 7, 4, 9], 5, 3) == 4": {
      "result": false,
      "time": 0.03675103187561035,
      "error": null
    },
    "assert find_Min([1, 1, 3, 11, 5], 4, 2) == 3": {
      "result": false,
      "time": 0.03724098205566406,
      "error": null
    },
    "assert find_Min([6, 1, 3, 7, 12], 3, 2) == 3": {
      "result": false,
      "time": 0.03926444053649902,
      "error": null
    },
    "assert find_Min([2, 1, 6, 3, 10], 1, 3) == 3": {
      "result": true,
      "time": 0.0379331111907959,
      "error": null
    },
    "assert find_Min([5, 8, 8, 7, 13], 5, 3) == 7": {
      "result": false,
      "time": 0.03437376022338867,
      "error": null
    },
    "assert find_Min([7, 8, 3, 6, 12], 1, 4) == 3": {
      "result": true,
      "time": 0.03858208656311035,
      "error": null
    },
    "assert find_Min([1, 6, 8, 9, 9], 4, 4) == 9": {
      "result": true,
      "time": 0.028476238250732422,
      "error": null
    },
    "assert find_Min([1, 4, 8, 10, 13], 2, 2) == 8": {
      "result": true,
      "time": 0.034995317459106445,
      "error": null
    },
    "assert find_Min([6, 5, 9, 11, 6], 2, 1) == 5": {
      "result": false,
      "time": 0.039170026779174805,
      "error": null
    },
    "assert find_Min([2, 2, 6, 12, 5], 4, 4) == 5": {
      "result": true,
      "time": 0.03447437286376953,
      "error": null
    },
    "assert find_Min([7, 7, 7, 2, 7], 2, 4) == 2": {
      "result": true,
      "time": 0.0354151725769043,
      "error": null
    },
    "assert find_Min([7, 2, 1, 9, 4], 5, 3) == 9": {
      "result": false,
      "time": 0.03754591941833496,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.4117647058823529,
  "general_error": "",
  "has_testcase_error": false
}