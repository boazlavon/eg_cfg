{
  "code": "import math\n\ndef prod_Square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n",
  "results": {
    "assert prod_Square(25) == False": {
      "result": false,
      "time": 0.0814507007598877,
      "error": null
    },
    "assert prod_Square(30) == False": {
      "result": true,
      "time": 0.07508111000061035,
      "error": null
    },
    "assert prod_Square(16) == True": {
      "result": true,
      "time": 0.07920002937316895,
      "error": null
    },
    "assert prod_Square(21) == False": {
      "result": true,
      "time": 0.08704757690429688,
      "error": null
    },
    "assert prod_Square(24) == False": {
      "result": true,
      "time": 0.09704446792602539,
      "error": null
    },
    "assert prod_Square(29) == False": {
      "result": true,
      "time": 0.08592057228088379,
      "error": null
    },
    "assert prod_Square(27) == False": {
      "result": true,
      "time": 0.08532285690307617,
      "error": null
    },
    "assert prod_Square(28) == False": {
      "result": true,
      "time": 0.07933855056762695,
      "error": null
    },
    "assert prod_Square(23) == False": {
      "result": true,
      "time": 0.10088324546813965,
      "error": null
    },
    "assert prod_Square(26) == False": {
      "result": true,
      "time": 0.08475756645202637,
      "error": null
    },
    "assert prod_Square(20) == False": {
      "result": true,
      "time": 0.0783846378326416,
      "error": null
    },
    "assert prod_Square(22) == False": {
      "result": true,
      "time": 0.08502364158630371,
      "error": null
    },
    "assert prod_Square(31) == False": {
      "result": true,
      "time": 0.1013174057006836,
      "error": null
    },
    "assert prod_Square(32) == False": {
      "result": true,
      "time": 0.07182836532592773,
      "error": null
    },
    "assert prod_Square(33) == False": {
      "result": true,
      "time": 0.08065414428710938,
      "error": null
    },
    "assert prod_Square(35) == False": {
      "result": true,
      "time": 0.0816793441772461,
      "error": null
    },
    "assert prod_Square(11) == False": {
      "result": true,
      "time": 0.08509969711303711,
      "error": null
    },
    "assert prod_Square(14) == False": {
      "result": true,
      "time": 0.09792709350585938,
      "error": null
    },
    "assert prod_Square(12) == False": {
      "result": true,
      "time": 0.09827470779418945,
      "error": null
    },
    "assert prod_Square(19) == False": {
      "result": true,
      "time": 0.10442471504211426,
      "error": null
    },
    "assert prod_Square(15) == False": {
      "result": true,
      "time": 0.08826756477355957,
      "error": null
    },
    "assert prod_Square(18) == False": {
      "result": true,
      "time": 0.07429385185241699,
      "error": null
    },
    "assert prod_Square(17) == False": {
      "result": true,
      "time": 0.08402705192565918,
      "error": null
    },
    "assert prod_Square(13) == False": {
      "result": true,
      "time": 0.07764959335327148,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.9583333333333334,
  "general_error": "",
  "has_testcase_error": false
}