{
  "code": "def centered_hexagonal_number(n):\n    return n*(5*n - 3)//2",
  "results": {
    "assert centered_hexagonal_number(10) == 271": {
      "result": false,
      "time": 0.056539297103881836,
      "error": null
    },
    "assert centered_hexagonal_number(2) == 7": {
      "result": true,
      "time": 0.05391049385070801,
      "error": null
    },
    "assert centered_hexagonal_number(9) == 217": {
      "result": false,
      "time": 0.04737401008605957,
      "error": null
    },
    "assert centered_hexagonal_number(8) == 169": {
      "result": false,
      "time": 0.03711867332458496,
      "error": null
    },
    "assert centered_hexagonal_number(7) == 127": {
      "result": false,
      "time": 0.06255936622619629,
      "error": null
    },
    "assert centered_hexagonal_number(11) == 331": {
      "result": false,
      "time": 0.047995567321777344,
      "error": null
    },
    "assert centered_hexagonal_number(6) == 91": {
      "result": false,
      "time": 0.053159475326538086,
      "error": null
    },
    "assert centered_hexagonal_number(15) == 631": {
      "result": false,
      "time": 0.04488325119018555,
      "error": null
    },
    "assert centered_hexagonal_number(14) == 547": {
      "result": false,
      "time": 0.03869295120239258,
      "error": null
    },
    "assert centered_hexagonal_number(13) == 469": {
      "result": false,
      "time": 0.044632673263549805,
      "error": null
    },
    "assert centered_hexagonal_number(12) == 397": {
      "result": false,
      "time": 0.05596923828125,
      "error": null
    },
    "assert centered_hexagonal_number(5) == 61": {
      "result": false,
      "time": 0.04992485046386719,
      "error": null
    },
    "assert centered_hexagonal_number(4) == 37": {
      "result": false,
      "time": 0.05361604690551758,
      "error": null
    },
    "assert centered_hexagonal_number(1) == 1": {
      "result": true,
      "time": 0.05544090270996094,
      "error": null
    },
    "assert centered_hexagonal_number(3) == 19": {
      "result": false,
      "time": 0.05362129211425781,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.13333333333333333,
  "general_error": "",
  "has_testcase_error": false
}