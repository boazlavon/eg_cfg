{
  "code": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef is_tree_balanced(root):\n    def dfs(root):\n        if not root:\n            return 0\n        left_height = dfs(root.left)\n        if left_height == -1:\n            return -1\n        right_height = dfs(root.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n\n    return dfs(root) != -1",
  "results": {
    "assert is_tree_balanced(root) == False": {
      "result": false,
      "time": 0.23385310173034668,
      "error": null
    },
    "assert is_tree_balanced(root1) == True": {
      "result": false,
      "time": 0.24522137641906738,
      "error": null
    },
    "assert is_tree_balanced(root2) == False ": {
      "result": false,
      "time": 0.2348775863647461,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "tokens_count": 291,
  "retry": 0,
  "random_seed": 559
}