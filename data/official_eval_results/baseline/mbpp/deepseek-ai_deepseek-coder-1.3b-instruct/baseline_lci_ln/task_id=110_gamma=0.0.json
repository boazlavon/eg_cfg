{
  "code": "def extract_missing(ranges, start, end):\n    result = []\n    for start_range, end_range in ranges:\n        if start_range > end_range:\n            continue\n        if start_range > start:\n            if start_range <= start:\n                start = end_range + 1\n            else:\n                result.append((start, start_range - 1))\n                start = end_range + 1\n        elif end_range > end:\n            if end_range <= end:\n                end = start_range - 1\n            else:\n                result.append((end_range + 1, end))\n                end = start_range - 1\n        else:\n            result.append((end_range + 1, end))\n            end = start_range - 1\n    if end < end:\n        result.append((end + 1, end))\n    return result",
  "results": {
    "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]": {
      "result": false,
      "time": 0.20763587951660156,
      "error": null
    },
    "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]": {
      "result": false,
      "time": 0.20921635627746582,
      "error": null
    },
    "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]": {
      "result": false,
      "time": 0.1851639747619629,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "tokens_count": 240,
  "retry": 0,
  "random_seed": 559
}