{
  "code": "def next_Power_Of_2(n):\n    if n and not(n & (n - 1)):\n        return n\n    else:\n        count = 0\n        while n:\n            n >>= 1\n            count += 1\n        return 1 << count",
  "results": {
    "assert next_Power_Of_2(0) == 1": {
      "result": true,
      "time": 0.07457399368286133,
      "error": null
    },
    "assert next_Power_Of_2(5) == 8": {
      "result": true,
      "time": 0.06275796890258789,
      "error": null
    },
    "assert next_Power_Of_2(17) == 32": {
      "result": true,
      "time": 0.09597492218017578,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 11:17:26",
    "input_tokens": 790,
    "output_tokens": 89,
    "end_time": "2025-05-26 11:17:30",
    "duration": "0:00:03.832202"
  },
  "retry": 0,
  "random_seed": 379
}