{
  "code": "def max_aggregate(lst):\n    # Group the tuples by the first element\n    grouped = {}\n    for tup in lst:\n        name, score = tup\n        if name in grouped:\n            grouped[name].append(score)\n        else:\n            grouped[name] = [score]\n\n    # Calculate the aggregate for each group\n    aggregates = {}\n    for name, scores in grouped.items():\n        aggregates[name] = sum(scores)\n\n    # Find the group with the maximum aggregate\n    max_aggregate_group = max(aggregates, key=aggregates.get)\n\n    return max_aggregate_group, aggregates[max_aggregate_group]\n",
  "results": {
    "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)": {
      "result": true,
      "time": 0.07297921180725098,
      "error": null
    },
    "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)": {
      "result": true,
      "time": 0.05965757369995117,
      "error": null
    },
    "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)": {
      "result": true,
      "time": 0.06075239181518555,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {},
  "retry": -1,
  "random_seed": -1
}