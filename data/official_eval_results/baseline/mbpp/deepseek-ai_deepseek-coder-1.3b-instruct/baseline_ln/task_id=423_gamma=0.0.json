{
  "code": "def get_maxgold(grid, m, n):\n    if not grid:\n        return 0\n\n    dp = [[0]*n for _ in range(m)]\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def dfs(x, y):\n        if dp[x][y] != 0:\n            return dp[x][y]\n        temp = grid[x][y]\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n:\n                temp += max(dfs(nx, ny), 0)\n        dp[x][y] = temp\n        return temp\n\n    return max(dfs(x, y) for x in range(m) for y in range(n))",
  "results": {
    "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16": {
      "result": false,
      "time": 0.07921171188354492,
      "error": null
    },
    "assert get_maxgold([[10,20],[30,40]],2,2)==70": {
      "result": false,
      "time": 0.07390737533569336,
      "error": null
    },
    "assert get_maxgold([[4,9],[3,7]],2,2)==13": {
      "result": false,
      "time": 0.07640385627746582,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 10:22:16",
    "input_tokens": 854,
    "output_tokens": 236,
    "end_time": "2025-05-26 10:22:24",
    "duration": "0:00:08.483782"
  },
  "retry": 0,
  "random_seed": 379
}