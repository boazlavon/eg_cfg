{
  "code": "def find_Min(nums, low, high):\n    if high < low:\n        return -1\n    if high == low:\n        return nums[low]\n    mid = (low + high) // 2\n    if mid < high and nums[mid+1] < nums[mid]:\n        return nums[mid+1]\n    if mid > low and nums[mid] < nums[mid-1]:\n        return nums[mid]\n    if nums[high] > nums[mid]:\n        return find_Min(nums, low, mid-1)\n    return find_Min(nums, mid+1, high)",
  "results": {
    "assert find_Min([1,2,3,4,5],0,4) == 1": {
      "result": false,
      "time": 0.18865275382995605,
      "error": null
    },
    "assert find_Min([4,6,8],0,2) == 4": {
      "result": true,
      "time": 0.16707205772399902,
      "error": null
    },
    "assert find_Min([2,3,5,7,9],0,4) == 2": {
      "result": false,
      "time": 0.1600050926208496,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.3333333333333333,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-26 10:35:25",
    "input_tokens": 807,
    "output_tokens": 179,
    "end_time": "2025-05-26 10:40:18",
    "duration": "0:04:53.332094"
  },
  "retry": 0,
  "random_seed": 379
}