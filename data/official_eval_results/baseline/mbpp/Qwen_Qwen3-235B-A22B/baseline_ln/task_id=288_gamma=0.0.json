{
  "code": "def modular_inverse(arr, n, p):\n    count = 0\n    for i in range(n):\n        if pow(arr[i], p - 2, p) == arr[i]:\n            count += 1\n    return count",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": true,
      "time": 0.09620141983032227,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": true,
      "time": 0.09076905250549316,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": false,
      "time": 0.08788800239562988,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6666666666666666,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:55:57",
    "end_time": "2025-05-08 22:56:19",
    "duration": "0:00:22.694575"
  },
  "retry": 0,
  "random_seed": 855
}