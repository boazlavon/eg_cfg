{
  "code": "def eulerian_num(n, m):\n    # Base cases\n    if m >= n or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    \n    # Initialize a table to store Eulerian numbers\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    # Fill the table using bottom-up approach\n    for i in range(1, n + 1):\n        for j in range(0, min(m, i - 1) + 1):\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    return dp[n][m]",
  "results": {
    "assert eulerian_num(3, 1) == 4": {
      "result": true,
      "time": 0.07970690727233887,
      "error": null
    },
    "assert eulerian_num(4, 1) == 11": {
      "result": false,
      "time": 0.07921099662780762,
      "error": null
    },
    "assert eulerian_num(5, 3) == 26": {
      "result": true,
      "time": 0.07812023162841797,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6666666666666666,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:45:32",
    "end_time": "2025-05-08 22:45:39",
    "duration": "0:00:06.167344"
  },
  "retry": 0,
  "random_seed": 855
}