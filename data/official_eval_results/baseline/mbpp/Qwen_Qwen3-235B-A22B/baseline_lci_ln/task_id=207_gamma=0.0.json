{
  "code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]",
  "results": {
    "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3": {
      "result": true,
      "time": 0.08161354064941406,
      "error": null
    },
    "assert find_longest_repeating_subseq(\"aabb\") == 2": {
      "result": true,
      "time": 0.08128833770751953,
      "error": null
    },
    "assert find_longest_repeating_subseq(\"aab\") == 1": {
      "result": true,
      "time": 0.07765865325927734,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:42:07",
    "end_time": "2025-05-08 22:42:10",
    "duration": "0:00:03.000357"
  },
  "retry": 0,
  "random_seed": 855
}