{
  "code": "def max_sum(triangle, n):\n    if not triangle:\n        return 0\n    previous_row = triangle[0]\n    for i in range(1, n):\n        current_row = triangle[i]\n        for j in range(len(current_row)):\n            if j == 0:\n                current_row[j] += previous_row[j]\n            elif j == len(current_row) - 1:\n                current_row[j] += previous_row[j - 1]\n            else:\n                current_row[j] += max(previous_row[j - 1], previous_row[j])\n        previous_row = current_row\n    return max(previous_row)",
  "results": {
    "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6": {
      "result": true,
      "time": 0.07986140251159668,
      "error": null
    },
    "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ": {
      "result": true,
      "time": 0.07976531982421875,
      "error": null
    },
    "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28": {
      "result": true,
      "time": 0.07961058616638184,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:53:01",
    "end_time": "2025-05-08 22:53:04",
    "duration": "0:00:03.166291"
  },
  "retry": 0,
  "random_seed": 855
}