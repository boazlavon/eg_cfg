{
  "code": "def modular_inverse(arr, n, p):\n    count = 0\n    for i in range(n):\n        element = arr[i]\n        inverse = None\n        for candidate in range(p):\n            product = element * candidate\n            remainder = product % p\n            if remainder == 1:\n                inverse = candidate\n                break\n        if inverse is not None:\n            if inverse == element:\n                count += 1\n    return count",
  "results": {
    "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2": {
      "result": true,
      "time": 0.07868146896362305,
      "error": null
    },
    "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3": {
      "result": true,
      "time": 0.07732224464416504,
      "error": null
    },
    "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1": {
      "result": true,
      "time": 0.07752823829650879,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:31:57",
    "end_time": "2025-05-08 22:31:59",
    "duration": "0:00:02.312497"
  },
  "retry": 0,
  "random_seed": 855
}