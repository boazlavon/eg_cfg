{
  "code": "def max_len_sub(arr, n):\n    dp = []\n    for i in range(n):\n        dp_i = []\n        for j in range(n):\n            dp_i.append(0)\n        dp.append(dp_i)\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if j < n:\n                if arr[i] == arr[j]:\n                    dp[i][j] = 2 + dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] > max_len:\n                max_len = dp[i][j]\n    return max_len",
  "results": {
    "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5": {
      "result": true,
      "time": 0.10415148735046387,
      "error": null
    },
    "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4": {
      "result": false,
      "time": 0.13377737998962402,
      "error": null
    },
    "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1": {
      "result": true,
      "time": 0.09953141212463379,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.6666666666666666,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-08 22:17:35",
    "end_time": "2025-05-08 22:17:57",
    "duration": "0:00:22.570799"
  },
  "retry": 0,
  "random_seed": 855
}