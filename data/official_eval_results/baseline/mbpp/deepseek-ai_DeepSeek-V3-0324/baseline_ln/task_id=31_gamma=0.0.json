{
  "code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    \n    # Count the frequency of each integer across all lists\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Create a min-heap to keep track of the top k frequent elements\n    heap = []\n    for num, count in frequency.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (count, num))\n    \n    # Extract the numbers from the heap and sort them in descending order of frequency\n    result = [num for count, num in sorted(heap, key=lambda x: (-x[0], x[1]))]\n    return result",
  "results": {
    "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]": {
      "result": false,
      "time": 0.13072633743286133,
      "error": null
    },
    "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]": {
      "result": true,
      "time": 0.12853264808654785,
      "error": null
    },
    "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]": {
      "result": false,
      "time": 0.11530447006225586,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.3333333333333333,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:23:59",
    "guidance_input_tokens": 865,
    "guidance_output_tokens": 195,
    "end_time": "2025-05-07 18:24:02",
    "duration": "0:00:03.116739"
  },
  "retry": 0,
  "random_seed": 813
}