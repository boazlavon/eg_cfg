{
  "code": "import heapq\n\ndef merge_sorted_list(*lists):\n    merged = []\n    heap = []\n    \n    # Initialize the heap with the first element from each list along with the list index and element index\n    for i, lst in enumerate(lists):\n        if lst:  # Check if the list is not empty\n            heapq.heappush(heap, (lst[0], i, 0))\n    \n    while heap:\n        val, list_idx, element_idx = heapq.heappop(heap)\n        merged.append(val)\n        \n        # Move to the next element in the current list\n        if element_idx + 1 < len(lists[list_idx]):\n            next_val = lists[list_idx][element_idx + 1]\n            heapq.heappush(heap, (next_val, list_idx, element_idx + 1))\n    \n    return merged",
  "results": {
    "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]": {
      "result": false,
      "time": 0.11993837356567383,
      "error": null
    },
    "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]": {
      "result": true,
      "time": 0.12408065795898438,
      "error": null
    },
    "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]": {
      "result": false,
      "time": 0.09777522087097168,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.3333333333333333,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:27:08",
    "guidance_input_tokens": 970,
    "guidance_output_tokens": 183,
    "end_time": "2025-05-07 18:27:14",
    "duration": "0:00:05.921986"
  },
  "retry": 0,
  "random_seed": 813
}