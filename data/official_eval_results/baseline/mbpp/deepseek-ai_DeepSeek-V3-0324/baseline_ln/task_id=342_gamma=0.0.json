{
  "code": "import heapq\n\ndef find_minimum_range(arrays):\n    min_heap = []\n    current_max = -float('inf')\n    range_start = -float('inf')\n    range_end = float('inf')\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if arrays[i]:\n            first_element = arrays[i][0]\n            heapq.heappush(min_heap, (first_element, i, 0))\n            current_max = max(current_max, first_element)\n    \n    while True:\n        if not min_heap:\n            break\n        # Get the smallest element from the heap\n        current_min, arr_idx, elem_idx = heapq.heappop(min_heap)\n        \n        # Check if the current range is smaller than the previous smallest range\n        if current_max - current_min < range_end - range_start:\n            range_start = current_min\n            range_end = current_max\n        \n        # Move to the next element in the array from which the smallest element was taken\n        next_elem_idx = elem_idx + 1\n        if next_elem_idx < len(arrays[arr_idx]):\n            next_element = arrays[arr_idx][next_elem_idx]\n            heapq.heappush(min_heap, (next_element, arr_idx, next_elem_idx))\n            current_max = max(current_max, next_element)\n        else:\n            #",
  "results": {
    "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)": {
      "result": false,
      "time": -1,
      "error": "<class 'black.parsing.InvalidInput'>",
      "tb": "Traceback (most recent call last):\n  File \"/home/ai_center/ai_users/boazlavon/data/code/web/dsgi/mbpp_utils.py\", line 120, in run_tests\n    results[test_case] = evaluate_solution(solution, test_case)\n  File \"/home/ai_center/ai_users/boazlavon/data/code/web/dsgi/mbpp_utils.py\", line 137, in evaluate_solution\n    test_code = black.format_str(test_code, mode=black.FileMode(line_length=1024))\n  File \"src/black/__init__.py\", line 1225, in format_str\n  File \"src/black/__init__.py\", line 1239, in _format_str_once\n  File \"src/black/parsing.py\", line 90, in lib2to3_parse\nblack.parsing.InvalidInput: Cannot parse: 35:0: assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n"
    },
    "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)": {
      "result": false,
      "time": -1,
      "error": "<class 'black.parsing.InvalidInput'>",
      "tb": "Traceback (most recent call last):\n  File \"/home/ai_center/ai_users/boazlavon/data/code/web/dsgi/mbpp_utils.py\", line 120, in run_tests\n    results[test_case] = evaluate_solution(solution, test_case)\n  File \"/home/ai_center/ai_users/boazlavon/data/code/web/dsgi/mbpp_utils.py\", line 137, in evaluate_solution\n    test_code = black.format_str(test_code, mode=black.FileMode(line_length=1024))\n  File \"src/black/__init__.py\", line 1225, in format_str\n  File \"src/black/__init__.py\", line 1239, in _format_str_once\n  File \"src/black/parsing.py\", line 90, in lib2to3_parse\nblack.parsing.InvalidInput: Cannot parse: 35:0: assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\n"
    },
    "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)": {
      "result": false,
      "time": -1,
      "error": "<class 'black.parsing.InvalidInput'>",
      "tb": "Traceback (most recent call last):\n  File \"/home/ai_center/ai_users/boazlavon/data/code/web/dsgi/mbpp_utils.py\", line 120, in run_tests\n    results[test_case] = evaluate_solution(solution, test_case)\n  File \"/home/ai_center/ai_users/boazlavon/data/code/web/dsgi/mbpp_utils.py\", line 137, in evaluate_solution\n    test_code = black.format_str(test_code, mode=black.FileMode(line_length=1024))\n  File \"src/black/__init__.py\", line 1225, in format_str\n  File \"src/black/__init__.py\", line 1239, in _format_str_once\n  File \"src/black/parsing.py\", line 90, in lib2to3_parse\nblack.parsing.InvalidInput: Cannot parse: 35:0: assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)\n"
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": true,
  "stats": {
    "start_time": "2025-05-07 18:38:37",
    "guidance_input_tokens": 772,
    "guidance_output_tokens": 512,
    "end_time": "2025-05-07 18:38:44",
    "duration": "0:00:07.101105"
  },
  "retry": 0,
  "random_seed": 813
}