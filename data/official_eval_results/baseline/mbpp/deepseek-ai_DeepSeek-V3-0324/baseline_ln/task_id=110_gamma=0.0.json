{
  "code": "def extract_missing(ranges, start, end):\n    missing_ranges = []\n    # Sort the ranges based on the start value\n    sorted_ranges = sorted(ranges, key=lambda x: x[0])\n    \n    # Check the gap before the first range\n    first_start = sorted_ranges[0][0]\n    if start < first_start:\n        missing_ranges.append((start, first_start))\n    \n    # Check the gaps between ranges\n    for i in range(len(sorted_ranges) - 1):\n        current_end = sorted_ranges[i][1]\n        next_start = sorted_ranges[i+1][0]\n        if current_end < next_start:\n            missing_ranges.append((current_end, next_start))\n    \n    # Check the gap after the last range\n    last_end = sorted_ranges[-1][1]\n    if last_end < end:\n        missing_ranges.append((last_end, end))\n    \n    return missing_ranges",
  "results": {
    "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]": {
      "result": false,
      "time": 0.12771368026733398,
      "error": null
    },
    "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]": {
      "result": false,
      "time": 0.10843300819396973,
      "error": null
    },
    "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]": {
      "result": false,
      "time": 0.09633326530456543,
      "error": null
    }
  },
  "passed": false,
  "accuracy": 0.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:27:18",
    "guidance_input_tokens": 806,
    "guidance_output_tokens": 236,
    "end_time": "2025-05-07 18:27:22",
    "duration": "0:00:03.654855"
  },
  "retry": 0,
  "random_seed": 813
}