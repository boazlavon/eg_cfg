{
  "code": "def all_Bits_Set_In_The_Given_Range(num, l, r):\n    # Create a mask with bits set from position l to r (1-based index)\n    mask = (1 << (r - l + 1)) - 1\n    mask = mask << (l - 1)\n    # Check if all bits in the range are unset\n    return (num & mask) == 0",
  "results": {
    "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True": {
      "result": true,
      "time": 0.3107130527496338,
      "error": null
    },
    "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True": {
      "result": true,
      "time": 0.13892173767089844,
      "error": null
    },
    "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False": {
      "result": true,
      "time": 0.13326239585876465,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:33:03",
    "guidance_input_tokens": 667,
    "guidance_output_tokens": 92,
    "end_time": "2025-05-07 18:33:05",
    "duration": "0:00:02.354732"
  },
  "retry": 0,
  "random_seed": 813
}