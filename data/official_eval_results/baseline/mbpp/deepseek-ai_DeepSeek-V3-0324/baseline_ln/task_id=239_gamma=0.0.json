{
  "code": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 0\n    # Initialize a memoization table to store intermediate results\n    memo = {}\n\n    def helper(current, remaining):\n        if remaining == 1:\n            return 1\n        key = (current, remaining)\n        if key in memo:\n            return memo[key]\n        total = 0\n        next_min = 2 * current\n        if next_min > m:\n            memo[key] = 0\n            return 0\n        for next_num in range(next_min, m + 1):\n            total += helper(next_num, remaining - 1)\n        memo[key] = total\n        return total\n\n    total_sequences = 0\n    for first_num in range(1, m + 1):\n        total_sequences += helper(first_num, n)\n    return total_sequences",
  "results": {
    "assert get_total_number_of_sequences(10, 4) == 4": {
      "result": true,
      "time": 0.15032958984375,
      "error": null
    },
    "assert get_total_number_of_sequences(5, 2) == 6": {
      "result": true,
      "time": 0.13431024551391602,
      "error": null
    },
    "assert get_total_number_of_sequences(16, 3) == 84": {
      "result": true,
      "time": 0.12434029579162598,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:33:35",
    "guidance_input_tokens": 674,
    "guidance_output_tokens": 367,
    "end_time": "2025-05-07 18:33:42",
    "duration": "0:00:06.810431"
  },
  "retry": 0,
  "random_seed": 813
}