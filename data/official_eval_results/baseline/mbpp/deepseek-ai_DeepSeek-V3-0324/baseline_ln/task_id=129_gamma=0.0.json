{
  "code": "def magic_square_test(square):\n    n = len(square)\n    if n == 0:\n        return False\n    \n    # Calculate the magic constant\n    magic_constant = n * (n**2 + 1) // 2\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_constant:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(square[row][col] for row in range(n)) != magic_constant:\n            return False\n    \n    # Check main diagonal\n    if sum(square[i][i] for i in range(n)) != magic_constant:\n        return False\n    \n    # Check secondary diagonal\n    if sum(square[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n    \n    # Check if all numbers from 1 to n^2 are present\n    numbers = set()\n    for row in square:\n        for num in row:\n            numbers.add(num)\n    if numbers != set(range(1, n**2 + 1)):\n        return False\n    \n    return True",
  "results": {
    "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True": {
      "result": true,
      "time": 0.13254952430725098,
      "error": null
    },
    "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True": {
      "result": true,
      "time": 0.1261744499206543,
      "error": null
    },
    "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False": {
      "result": true,
      "time": 0.10832715034484863,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:28:09",
    "guidance_input_tokens": 718,
    "guidance_output_tokens": 244,
    "end_time": "2025-05-07 18:28:13",
    "duration": "0:00:03.640162"
  },
  "retry": 0,
  "random_seed": 813
}