{
  "code": "def first(arr, target, n):\n    left, right = 0, n - 1\n    result = -1  # Initialize result to -1 in case the target is not found\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid  # Update result to the current position\n            right = mid - 1  # Continue searching to the left for the first occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result",
  "results": {
    "assert first([1,2,3,4,5,6,6],6,6) == 5": {
      "result": true,
      "time": 0.14789414405822754,
      "error": null
    },
    "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1": {
      "result": true,
      "time": 0.13582158088684082,
      "error": null
    },
    "assert first([1,2,3],1,3) == 0": {
      "result": true,
      "time": 0.18807649612426758,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:31:37",
    "guidance_input_tokens": 672,
    "guidance_output_tokens": 193,
    "end_time": "2025-05-07 18:31:41",
    "duration": "0:00:03.362525"
  },
  "retry": 0,
  "random_seed": 813
}