{
  "code": "def is_majority(arr, n, x):\n    # Find the first occurrence of x in the array\n    first_index = -1\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If x is not found in the array\n    if first_index == -1:\n        return False\n    \n    # Find the last occurrence of x in the array\n    last_index = -1\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # Calculate the count of x in the array\n    count = last_index - first_index + 1\n    \n    # Check if count is more than half of the array size\n    if count > n // 2:\n        return True\n    else:\n        return False",
  "results": {
    "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True": {
      "result": true,
      "time": 0.09478640556335449,
      "error": null
    },
    "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False": {
      "result": true,
      "time": 0.08372116088867188,
      "error": null
    },
    "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True": {
      "result": true,
      "time": 0.08347177505493164,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:48:16",
    "guidance_input_tokens": 545,
    "guidance_output_tokens": 316,
    "end_time": "2025-05-07 18:48:24",
    "duration": "0:00:08.564543"
  },
  "retry": 0,
  "random_seed": 813
}