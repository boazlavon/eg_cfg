{
  "code": "def max_sub_array_sum_repeated(arr, n, k):\n    # Step 1: Calculate the total sum of the original array\n    total_sum = 0\n    for num in arr:\n        total_sum = total_sum + num\n    \n    # Step 2: Find the maximum subarray sum in the original array (Kadane's algorithm)\n    max_current = arr[0]\n    max_global = arr[0]\n    for i in range(1, n):\n        max_current = max(arr[i], max_current + arr[i])\n        if max_current > max_global:\n            max_global = max_current\n    \n    # Step 3: Find the maximum prefix sum\n    max_prefix = arr[0]\n    current_prefix = arr[0]\n    for i in range(1, n):\n        current_prefix = current_prefix + arr[i]\n        if current_prefix > max_prefix:\n            max_prefix = current_prefix\n    \n    # Step 4: Find the maximum suffix sum\n    max_suffix = arr[-1]\n    current_suffix = arr[-1]\n    for i in range(n-2, -1, -1):\n        current_suffix = current_suffix + arr[i]\n        if current_suffix > max_suffix:\n            max_suffix = current_suffix\n    \n    # Step 5: Handle cases based on the total sum\n    if k == 1:\n        return max_global\n    elif total_sum <= 0:\n        candidate1 = max_global\n        candidate2 = max_prefix + max_suffix\n        return max(candidate1, candidate2)\n    else:\n        candidate1 = max_global\n        candidate2 = max_suffix + max_prefix + total_sum * (k - 2)\n        return max(candidate1, candidate2)",
  "results": {
    "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30": {
      "result": true,
      "time": 0.09151053428649902,
      "error": null
    },
    "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59": {
      "result": true,
      "time": 0.07814264297485352,
      "error": null
    },
    "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1": {
      "result": true,
      "time": 0.07625794410705566,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:51:23",
    "guidance_input_tokens": 538,
    "guidance_output_tokens": 398,
    "end_time": "2025-05-07 18:51:28",
    "duration": "0:00:04.466264"
  },
  "retry": 0,
  "random_seed": 813
}