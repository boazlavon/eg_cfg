{
  "code": "def get_maxgold(gold, m, n):\n    # Create a DP table to store the maximum gold that can be collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Initialize the last column of the DP table\n    for i in range(m):\n        dp[i][n-1] = gold[i][n-1]\n    \n    # Fill the DP table from right to left\n    for j in range(n-2, -1, -1):\n        for i in range(m):\n            # Initialize the maximum gold from the current cell\n            max_gold = 0\n            \n            # Check the cell to the top-right\n            if i - 1 >= 0 and j + 1 < n:\n                top_right = dp[i-1][j+1]\n                if top_right > max_gold:\n                    max_gold = top_right\n            \n            # Check the cell to the right\n            if j + 1 < n:\n                right = dp[i][j+1]\n                if right > max_gold:\n                    max_gold = right\n            \n            # Check the cell to the bottom-right\n            if i + 1 < m and j + 1 < n:\n                bottom_right = dp[i+1][j+1]\n                if bottom_right > max_gold:\n                    max_gold = bottom_right\n            \n            # Update the DP table with the current cell's gold plus the maximum from possible moves\n            dp[i][j] = gold[i][j] + max_gold\n    \n    # Find the maximum value in the first column of the DP table\n    result = 0\n    for i in range(m):\n        if dp[i][0] > result:\n            result = dp[i][0]\n    \n    return result",
  "results": {
    "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16": {
      "result": true,
      "time": 0.17895078659057617,
      "error": null
    },
    "assert get_maxgold([[10,20],[30,40]],2,2)==70": {
      "result": true,
      "time": 0.12238073348999023,
      "error": null
    },
    "assert get_maxgold([[4,9],[3,7]],2,2)==13": {
      "result": true,
      "time": 0.12083172798156738,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": null,
  "has_testcase_error": false,
  "stats": {
    "start_time": "2025-05-07 18:58:20",
    "guidance_input_tokens": 552,
    "guidance_output_tokens": 401,
    "end_time": "2025-05-07 18:58:26",
    "duration": "0:00:06.148893"
  },
  "retry": 0,
  "random_seed": 813
}