{
  "code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
  "results": {
    "assert next_smallest([4, 1, 8, 2, 6]) == 2": {
      "result": true,
      "time": 0.02721858024597168,
      "error": null
    },
    "assert next_smallest([1, 6, 3, 1, 7]) == 3": {
      "result": true,
      "time": 0.025131940841674805,
      "error": null
    },
    "assert next_smallest([5, 1]) == 5": {
      "result": true,
      "time": 0.027081966400146484,
      "error": null
    },
    "assert next_smallest([5, 6, 5, 3, 3]) == 5": {
      "result": true,
      "time": 0.023854970932006836,
      "error": null
    },
    "assert next_smallest([3, 4, 8, 8, 5]) == 4": {
      "result": true,
      "time": 0.02517867088317871,
      "error": null
    },
    "assert next_smallest([5, 3]) == 5": {
      "result": true,
      "time": 0.024231433868408203,
      "error": null
    },
    "assert next_smallest([4, 5, 7, 7, 4]) == 5": {
      "result": true,
      "time": 0.029276132583618164,
      "error": null
    },
    "assert next_smallest([4, 2]) == 4": {
      "result": true,
      "time": 0.02758646011352539,
      "error": null
    },
    "assert next_smallest([4, 6, 1, 4, 5]) == 4": {
      "result": true,
      "time": 0.03049302101135254,
      "error": null
    },
    "assert next_smallest([2, 3, 1, 5, 5]) == 2": {
      "result": true,
      "time": 0.03017425537109375,
      "error": null
    },
    "assert next_smallest([10, 6, 8, 7, 3]) == 6": {
      "result": true,
      "time": 0.0295412540435791,
      "error": null
    },
    "assert next_smallest([6, 6]) == None": {
      "result": true,
      "time": 0.02765202522277832,
      "error": null
    },
    "assert next_smallest([3, 3]) == None": {
      "result": true,
      "time": 0.027385711669921875,
      "error": null
    },
    "assert next_smallest([6, 4, 1, 1, 5]) == 4": {
      "result": true,
      "time": 0.028798341751098633,
      "error": null
    },
    "assert next_smallest([5, 5]) == None": {
      "result": true,
      "time": 0.028435707092285156,
      "error": null
    },
    "assert next_smallest([1, 4, 1, 2, 1]) == 2": {
      "result": true,
      "time": 0.0263063907623291,
      "error": null
    },
    "assert next_smallest([5, 3, 2, 1, 1]) == 2": {
      "result": true,
      "time": 0.025641202926635742,
      "error": null
    },
    "assert next_smallest([6, 7, 8, 2, 7]) == 6": {
      "result": true,
      "time": 0.02750253677368164,
      "error": null
    },
    "assert next_smallest([7, 2, 9, 7, 7]) == 7": {
      "result": true,
      "time": 0.025929927825927734,
      "error": null
    },
    "assert next_smallest([4, 3, 8, 6, 9]) == 4": {
      "result": true,
      "time": 0.02619767189025879,
      "error": null
    },
    "assert next_smallest([2, 5, 5, 6, 2]) == 5": {
      "result": true,
      "time": 0.029161930084228516,
      "error": null
    },
    "assert next_smallest([5, 5, 4, 3, 2]) == 3": {
      "result": true,
      "time": 0.02764129638671875,
      "error": null
    },
    "assert next_smallest([1, 2, 1, 5, 3]) == 2": {
      "result": true,
      "time": 0.026999950408935547,
      "error": null
    },
    "assert next_smallest([1, 4, 6, 9, 4]) == 4": {
      "result": true,
      "time": 0.02693486213684082,
      "error": null
    },
    "assert next_smallest([1, 5]) == 5": {
      "result": true,
      "time": 0.030010461807250977,
      "error": null
    },
    "assert next_smallest([6, 4]) == 6": {
      "result": true,
      "time": 0.03466534614562988,
      "error": null
    },
    "assert next_smallest([1, 2, 3, 4, 5]) == 2": {
      "result": true,
      "time": 0.027289867401123047,
      "error": null
    },
    "assert next_smallest([1, 4]) == 4": {
      "result": true,
      "time": 0.026625871658325195,
      "error": null
    },
    "assert next_smallest([1, 1]) == None": {
      "result": true,
      "time": 0.027572154998779297,
      "error": null
    },
    "assert next_smallest([2, 1, 7, 7, 3]) == 2": {
      "result": true,
      "time": 0.026494741439819336,
      "error": null
    },
    "assert next_smallest([4, 2, 3, 2, 3]) == 3": {
      "result": true,
      "time": 0.027274370193481445,
      "error": null
    },
    "assert next_smallest([6, 3]) == 6": {
      "result": true,
      "time": 0.027155399322509766,
      "error": null
    },
    "assert next_smallest([5, 6, 6, 6, 5]) == 6": {
      "result": true,
      "time": 0.024042129516601562,
      "error": null
    },
    "assert next_smallest([1, 2, 1, 2, 3]) == 2": {
      "result": true,
      "time": 0.0283663272857666,
      "error": null
    },
    "assert next_smallest([3, 5, 3, 5, 6]) == 5": {
      "result": true,
      "time": 0.027349233627319336,
      "error": null
    },
    "assert next_smallest([4, 6]) == 6": {
      "result": true,
      "time": 0.02992725372314453,
      "error": null
    },
    "assert next_smallest([4, 4, 6, 5, 5]) == 5": {
      "result": true,
      "time": 0.028603792190551758,
      "error": null
    },
    "assert next_smallest([3, 3, 5, 1, 10]) == 3": {
      "result": true,
      "time": 0.025508880615234375,
      "error": null
    },
    "assert next_smallest([6, 2, 5, 3, 4]) == 3": {
      "result": true,
      "time": 0.026782751083374023,
      "error": null
    },
    "assert next_smallest([8, 3, 1, 5, 4]) == 3": {
      "result": true,
      "time": 0.026871442794799805,
      "error": null
    },
    "assert next_smallest([1, 3, 3, 9, 7]) == 3": {
      "result": true,
      "time": 0.025066375732421875,
      "error": null
    },
    "assert next_smallest([4, 6, 2, 4, 4]) == 4": {
      "result": true,
      "time": 0.02463984489440918,
      "error": null
    },
    "assert next_smallest([9, 6, 4, 1, 1]) == 4": {
      "result": true,
      "time": 0.02632904052734375,
      "error": null
    },
    "assert next_smallest([2, 4]) == 4": {
      "result": true,
      "time": 0.02806711196899414,
      "error": null
    },
    "assert next_smallest([5, 5, 3, 6, 5]) == 5": {
      "result": true,
      "time": 0.028176069259643555,
      "error": null
    },
    "assert next_smallest([2, 1, 6, 6, 3]) == 2": {
      "result": true,
      "time": 0.026298999786376953,
      "error": null
    },
    "assert next_smallest([6, 3, 4, 3, 2]) == 3": {
      "result": true,
      "time": 0.0247039794921875,
      "error": null
    },
    "assert next_smallest([1, 6]) == 6": {
      "result": true,
      "time": 0.026901960372924805,
      "error": null
    },
    "assert next_smallest([3, 5, 4, 9, 5]) == 4": {
      "result": true,
      "time": 0.030109405517578125,
      "error": null
    },
    "assert next_smallest([1,1,1,1,0]) == 1": {
      "result": true,
      "time": 0.027094364166259766,
      "error": null
    },
    "assert next_smallest([1, 2, 2, 4, 4]) == 2": {
      "result": true,
      "time": 0.02746891975402832,
      "error": null
    },
    "assert next_smallest([1, 5, 3, 6, 4]) == 3": {
      "result": true,
      "time": 0.028062820434570312,
      "error": null
    },
    "assert next_smallest([2, 6, 3, 2, 7]) == 3": {
      "result": true,
      "time": 0.026861906051635742,
      "error": null
    },
    "assert next_smallest([10, 6, 8, 2, 5]) == 5": {
      "result": true,
      "time": 0.026337623596191406,
      "error": null
    },
    "assert next_smallest([2, 2]) == None": {
      "result": true,
      "time": 0.02553105354309082,
      "error": null
    },
    "assert next_smallest([5, 4]) == 5": {
      "result": true,
      "time": 0.024446725845336914,
      "error": null
    },
    "assert next_smallest([5, 6, 6, 9, 10]) == 6": {
      "result": true,
      "time": 0.025052309036254883,
      "error": null
    },
    "assert next_smallest([4, 1]) == 4": {
      "result": true,
      "time": 0.03013324737548828,
      "error": null
    },
    "assert next_smallest([2, 3, 4, 6, 2]) == 3": {
      "result": true,
      "time": 0.02791452407836914,
      "error": null
    },
    "assert next_smallest([3, 1, 5, 1, 6]) == 3": {
      "result": true,
      "time": 0.030269861221313477,
      "error": null
    },
    "assert next_smallest([5, 5, 1, 8, 3]) == 3": {
      "result": true,
      "time": 0.026682376861572266,
      "error": null
    },
    "assert next_smallest([2, 3]) == 3": {
      "result": true,
      "time": 0.026074647903442383,
      "error": null
    },
    "assert next_smallest([1, 0**0]) == None": {
      "result": true,
      "time": 0.026143550872802734,
      "error": null
    },
    "assert next_smallest([4, 2, 5, 4, 7]) == 4": {
      "result": true,
      "time": 0.029514312744140625,
      "error": null
    },
    "assert next_smallest([4, 1, 5, 1, 2]) == 2": {
      "result": true,
      "time": 0.027364253997802734,
      "error": null
    },
    "assert next_smallest([6, 3, 1, 6, 2]) == 2": {
      "result": true,
      "time": 0.029058218002319336,
      "error": null
    },
    "assert next_smallest([3, 5, 4, 8, 5]) == 4": {
      "result": true,
      "time": 0.02660536766052246,
      "error": null
    },
    "assert next_smallest([6, 1, 4, 3, 2]) == 2": {
      "result": true,
      "time": 0.026683330535888672,
      "error": null
    },
    "assert next_smallest([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.": {
      "result": true,
      "time": 0.026833057403564453,
      "error": null
    },
    "assert next_smallest([2, 4, 6, 5, 5]) == 4": {
      "result": true,
      "time": 0.024507522583007812,
      "error": null
    },
    "assert next_smallest([1, 1, 8, 9, 6]) == 6": {
      "result": true,
      "time": 0.030542612075805664,
      "error": null
    },
    "assert next_smallest([4, 5]) == 5": {
      "result": true,
      "time": 0.0290067195892334,
      "error": null
    },
    "assert next_smallest([4, 4]) == None": {
      "result": true,
      "time": 0.027940034866333008,
      "error": null
    },
    "assert next_smallest([4, 1, 3, 2, 2]) == 2": {
      "result": true,
      "time": 0.029327869415283203,
      "error": null
    },
    "assert next_smallest([2, 5]) == 5": {
      "result": true,
      "time": 0.029860496520996094,
      "error": null
    },
    "assert next_smallest([3, 2, 5, 4, 2]) == 3": {
      "result": true,
      "time": 0.028929948806762695,
      "error": null
    },
    "assert next_smallest([4, 1, 4, 8, 5]) == 4": {
      "result": true,
      "time": 0.02616572380065918,
      "error": null
    },
    "assert next_smallest([9, 6, 7, 7, 6]) == 7": {
      "result": true,
      "time": 0.024693012237548828,
      "error": null
    },
    "assert next_smallest([5, 1, 4, 3, 2]) == 2": {
      "result": true,
      "time": 0.0283660888671875,
      "error": null
    },
    "assert next_smallest([]) == None": {
      "result": true,
      "time": 0.025440692901611328,
      "error": null
    },
    "assert next_smallest([3, 1, 3, 3, 5]) == 3": {
      "result": true,
      "time": 0.026735305786132812,
      "error": null
    },
    "assert next_smallest([6, 5, 8, 5, 5]) == 6": {
      "result": true,
      "time": 0.02729964256286621,
      "error": null
    },
    "assert next_smallest([1, 1, 2, 3, 7]) == 2": {
      "result": true,
      "time": 0.02991008758544922,
      "error": null
    },
    "assert next_smallest([3, 6, 1, 4, 3]) == 3": {
      "result": true,
      "time": 0.02784276008605957,
      "error": null
    },
    "assert next_smallest([6, 2]) == 6": {
      "result": true,
      "time": 0.026387453079223633,
      "error": null
    },
    "assert next_smallest([5, 6]) == 6": {
      "result": true,
      "time": 0.02795267105102539,
      "error": null
    },
    "assert next_smallest([4, 3]) == 4": {
      "result": true,
      "time": 0.031233549118041992,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}