{
  "code": "def parse_nested_parens(paren_string: str) -> list[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result",
  "results": {
    "assert parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\") == [3, 2, 3, 4, 4, 2, 1]": {
      "result": true,
      "time": 0.02774786949157715,
      "error": null
    },
    "assert parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\") == [3, 1, 2, 2, 3, 3]": {
      "result": true,
      "time": 0.027442216873168945,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\") == [4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]": {
      "result": true,
      "time": 0.02868938446044922,
      "error": null
    },
    "assert parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\") == [3, 4, 3, 2, 1, 4]": {
      "result": true,
      "time": 0.026747941970825195,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\") == [2, 3, 2, 1, 1, 2, 1, 1]": {
      "result": true,
      "time": 0.025785446166992188,
      "error": null
    },
    "assert parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\") == [3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]": {
      "result": true,
      "time": 0.026088476181030273,
      "error": null
    },
    "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\") == [3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]": {
      "result": true,
      "time": 0.024710655212402344,
      "error": null
    },
    "assert parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\") == [3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]": {
      "result": true,
      "time": 0.03135991096496582,
      "error": null
    },
    "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\") == [3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]": {
      "result": true,
      "time": 0.02641606330871582,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\") == [3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]": {
      "result": true,
      "time": 0.028717041015625,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\") == [2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]": {
      "result": true,
      "time": 0.027093172073364258,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) ((())) ((())) ((())()())\") == [2, 3, 3, 3]": {
      "result": true,
      "time": 0.0250699520111084,
      "error": null
    },
    "assert parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\") == [2, 3, 2, 2, 3, 3]": {
      "result": true,
      "time": 0.029643535614013672,
      "error": null
    },
    "assert parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\") == [3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]": {
      "result": true,
      "time": 0.02636885643005371,
      "error": null
    },
    "assert parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\") == [3, 1, 3, 3, 4, 3, 4]": {
      "result": true,
      "time": 0.02697014808654785,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\") == [4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]": {
      "result": true,
      "time": 0.024717330932617188,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\") == [4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]": {
      "result": true,
      "time": 0.025379419326782227,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\") == [2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]": {
      "result": true,
      "time": 0.02568197250366211,
      "error": null
    },
    "assert parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\") == [4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]": {
      "result": true,
      "time": 0.026500940322875977,
      "error": null
    },
    "assert parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\") == [4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]": {
      "result": true,
      "time": 0.029458284378051758,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\") == [3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]": {
      "result": true,
      "time": 0.032041311264038086,
      "error": null
    },
    "assert parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\") == [2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]": {
      "result": true,
      "time": 0.02829146385192871,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\") == [3, 4, 2, 4, 4, 4, 2]": {
      "result": true,
      "time": 0.025823116302490234,
      "error": null
    },
    "assert parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\") == [2, 2, 4, 2, 4, 4, 3]": {
      "result": true,
      "time": 0.025315046310424805,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\") == [4, 4, 4, 3, 4, 4, 3]": {
      "result": true,
      "time": 0.029309749603271484,
      "error": null
    },
    "assert parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\") == [1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]": {
      "result": true,
      "time": 0.02515721321105957,
      "error": null
    },
    "assert parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\") == [2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]": {
      "result": true,
      "time": 0.0263364315032959,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) ((())()()) ((())) (()())\") == [2, 3, 3, 2]": {
      "result": true,
      "time": 0.03071761131286621,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\") == [3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]": {
      "result": true,
      "time": 0.027299880981445312,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) () (()()) (()())\") == [2, 1, 2, 2]": {
      "result": true,
      "time": 0.02602529525756836,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\") == [4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]": {
      "result": true,
      "time": 0.02515101432800293,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\") == [3, 3, 3, 1, 3, 2, 3, 2]": {
      "result": true,
      "time": 0.02530813217163086,
      "error": null
    },
    "assert parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\") == [2, 3, 3, 3, 1, 3]": {
      "result": true,
      "time": 0.025273561477661133,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\") == [2, 2, 2, 1, 1, 3, 3, 1]": {
      "result": true,
      "time": 0.02682971954345703,
      "error": null
    },
    "assert parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\") == [2, 4, 3, 2, 4, 3, 3]": {
      "result": true,
      "time": 0.026153564453125,
      "error": null
    },
    "assert parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\") == [3, 1, 4, 4, 2, 4]": {
      "result": true,
      "time": 0.023723840713500977,
      "error": null
    },
    "assert parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\") == [1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]": {
      "result": true,
      "time": 0.029726743698120117,
      "error": null
    },
    "assert parse_nested_parens(\"((())) ((())()()) () ((()))\") == [3, 3, 1, 3]": {
      "result": true,
      "time": 0.02805924415588379,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (()()) () ((()))\") == [2, 2, 1, 3]": {
      "result": true,
      "time": 0.027825593948364258,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) () (()) () (()) (())\") == [4, 1, 2, 1, 2, 2]": {
      "result": true,
      "time": 0.0314173698425293,
      "error": null
    },
    "assert parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\") == [1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]": {
      "result": true,
      "time": 0.024768590927124023,
      "error": null
    },
    "assert parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\") == [3, 3, 2, 2, 3, 3, 3, 3]": {
      "result": true,
      "time": 0.030419349670410156,
      "error": null
    },
    "assert parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\") == [3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]": {
      "result": true,
      "time": 0.025423288345336914,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\") == [2, 2, 3, 1, 1, 1, 3]": {
      "result": true,
      "time": 0.027509212493896484,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\") == [3, 4, 3, 3, 3, 2]": {
      "result": true,
      "time": 0.028897523880004883,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\") == [3, 3, 3, 2, 3, 1, 1, 1]": {
      "result": true,
      "time": 0.028046131134033203,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\") == [2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]": {
      "result": true,
      "time": 0.028177738189697266,
      "error": null
    },
    "assert parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\") == [2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]": {
      "result": true,
      "time": 0.030432462692260742,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\") == [4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]": {
      "result": true,
      "time": 0.029132843017578125,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\") == [3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]": {
      "result": true,
      "time": 0.02920222282409668,
      "error": null
    },
    "assert parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\") == [1, 3, 3, 3, 1, 2, 1, 2]": {
      "result": true,
      "time": 0.030167341232299805,
      "error": null
    },
    "assert parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\") == [2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]": {
      "result": true,
      "time": 0.03330397605895996,
      "error": null
    },
    "assert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]": {
      "result": true,
      "time": 0.03078007698059082,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\") == [2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]": {
      "result": true,
      "time": 0.030840158462524414,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\") == [2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]": {
      "result": true,
      "time": 0.026029586791992188,
      "error": null
    },
    "assert parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\") == [1, 4, 2, 2, 3, 2, 2]": {
      "result": true,
      "time": 0.028732776641845703,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\") == [3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]": {
      "result": true,
      "time": 0.026398181915283203,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\") == [3, 1, 1, 2, 2, 2, 3, 2]": {
      "result": true,
      "time": 0.035227060317993164,
      "error": null
    },
    "assert parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\") == [1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]": {
      "result": true,
      "time": 0.025840044021606445,
      "error": null
    },
    "assert parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\") == [4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]": {
      "result": true,
      "time": 0.028687477111816406,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\") == [2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]": {
      "result": true,
      "time": 0.02739405632019043,
      "error": null
    },
    "assert parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\") == [2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]": {
      "result": true,
      "time": 0.02982187271118164,
      "error": null
    },
    "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]": {
      "result": true,
      "time": 0.028641700744628906,
      "error": null
    },
    "assert parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\") == [3, 3, 3, 3, 3, 3, 1, 1]": {
      "result": true,
      "time": 0.027087926864624023,
      "error": null
    },
    "assert parse_nested_parens(\"((())) (()()) () ((())()())\") == [3, 2, 1, 3]": {
      "result": true,
      "time": 0.026440143585205078,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\") == [3, 1, 2, 3, 2, 1, 3, 3]": {
      "result": true,
      "time": 0.026639938354492188,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\") == [4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]": {
      "result": true,
      "time": 0.024781465530395508,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\") == [3, 1, 2, 3, 3, 3]": {
      "result": true,
      "time": 0.03009343147277832,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\") == [3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]": {
      "result": true,
      "time": 0.030934572219848633,
      "error": null
    },
    "assert parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\") == [1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]": {
      "result": true,
      "time": 0.02726602554321289,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\") == [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]": {
      "result": true,
      "time": 0.026710033416748047,
      "error": null
    },
    "assert parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\") == [1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]": {
      "result": true,
      "time": 0.02809906005859375,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\") == [4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]": {
      "result": true,
      "time": 0.03093099594116211,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\") == [4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]": {
      "result": true,
      "time": 0.029780149459838867,
      "error": null
    },
    "assert parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\") == [2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]": {
      "result": true,
      "time": 0.026674270629882812,
      "error": null
    },
    "assert parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\") == [3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]": {
      "result": true,
      "time": 0.027038097381591797,
      "error": null
    },
    "assert parse_nested_parens(\"\") == []": {
      "result": true,
      "time": 0.026170015335083008,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\") == [3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]": {
      "result": true,
      "time": 0.02757859230041504,
      "error": null
    },
    "assert parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\") == [3, 3, 3, 2, 3, 1, 2, 3]": {
      "result": true,
      "time": 0.02781391143798828,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\") == [3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]": {
      "result": true,
      "time": 0.026875019073486328,
      "error": null
    },
    "assert parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\") == [3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]": {
      "result": true,
      "time": 0.02484416961669922,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\") == [2, 2, 3, 3, 1, 3]": {
      "result": true,
      "time": 0.027402162551879883,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\") == [2, 1, 3, 1, 3, 1, 3, 1]": {
      "result": true,
      "time": 0.030617237091064453,
      "error": null
    },
    "assert parse_nested_parens(\"((())) () (()()) ()\") == [3, 1, 2, 1]": {
      "result": true,
      "time": 0.025257587432861328,
      "error": null
    },
    "assert parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\") == [3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]": {
      "result": true,
      "time": 0.026842594146728516,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\") == [2, 1, 2, 3, 1, 3, 2, 3]": {
      "result": true,
      "time": 0.02558159828186035,
      "error": null
    },
    "assert parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\") == [4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]": {
      "result": true,
      "time": 0.030076265335083008,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (()()) () (()())\") == [2, 2, 1, 2]": {
      "result": true,
      "time": 0.02633976936340332,
      "error": null
    },
    "assert parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\") == [3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]": {
      "result": true,
      "time": 0.03141665458679199,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\") == [2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]": {
      "result": true,
      "time": 0.031078577041625977,
      "error": null
    },
    "assert parse_nested_parens('(()(())((())))') == [4]": {
      "result": true,
      "time": 0.024631500244140625,
      "error": null
    },
    "assert parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\") == [3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]": {
      "result": true,
      "time": 0.02997899055480957,
      "error": null
    },
    "assert parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\") == [2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]": {
      "result": true,
      "time": 0.030025243759155273,
      "error": null
    },
    "assert parse_nested_parens(\"(()()) ((())()()) (()()) ()\") == [2, 3, 2, 1]": {
      "result": true,
      "time": 0.02637767791748047,
      "error": null
    },
    "assert parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\") == [4, 3, 4, 4, 1, 4, 1]": {
      "result": true,
      "time": 0.028508424758911133,
      "error": null
    },
    "assert parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\") == [3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]": {
      "result": true,
      "time": 0.03491520881652832,
      "error": null
    },
    "assert parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\") == [3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]": {
      "result": true,
      "time": 0.02703571319580078,
      "error": null
    },
    "assert parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\") == [3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]": {
      "result": true,
      "time": 0.02651047706604004,
      "error": null
    },
    "assert parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\") == [2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]": {
      "result": true,
      "time": 0.026621580123901367,
      "error": null
    }
  },
  "passed": true,
  "accuracy": 1.0,
  "general_error": "",
  "has_testcase_error": false
}